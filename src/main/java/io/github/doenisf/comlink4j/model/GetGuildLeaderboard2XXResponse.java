/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetGuildLeaderboard2XXResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GetGuildLeaderboard2XXResponse {
  public static final String SERIALIZED_NAME_LEADERBOARD = "leaderboard";
  @SerializedName(SERIALIZED_NAME_LEADERBOARD)
  private List<GuildLeaderboard> leaderboard = new ArrayList<>();

  public GetGuildLeaderboard2XXResponse() {
  }

  public GetGuildLeaderboard2XXResponse leaderboard(List<GuildLeaderboard> leaderboard) {
    this.leaderboard = leaderboard;
    return this;
  }

  public GetGuildLeaderboard2XXResponse addLeaderboardItem(GuildLeaderboard leaderboardItem) {
    if (this.leaderboard == null) {
      this.leaderboard = new ArrayList<>();
    }
    this.leaderboard.add(leaderboardItem);
    return this;
  }

  /**
   * Get leaderboard
   * @return leaderboard
   */
  @javax.annotation.Nullable
  public List<GuildLeaderboard> getLeaderboard() {
    return leaderboard;
  }

  public void setLeaderboard(List<GuildLeaderboard> leaderboard) {
    this.leaderboard = leaderboard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetGuildLeaderboard2XXResponse getGuildLeaderboard2XXResponse = (GetGuildLeaderboard2XXResponse) o;
    return Objects.equals(this.leaderboard, getGuildLeaderboard2XXResponse.leaderboard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leaderboard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetGuildLeaderboard2XXResponse {\n");
    sb.append("    leaderboard: ").append(toIndentedString(leaderboard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leaderboard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetGuildLeaderboard2XXResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetGuildLeaderboard2XXResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetGuildLeaderboard2XXResponse is not found in the empty JSON string", GetGuildLeaderboard2XXResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetGuildLeaderboard2XXResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGuildLeaderboard2XXResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("leaderboard") != null && !jsonObj.get("leaderboard").isJsonNull()) {
        JsonArray jsonArrayleaderboard = jsonObj.getAsJsonArray("leaderboard");
        if (jsonArrayleaderboard != null) {
          // ensure the json data is an array
          if (!jsonObj.get("leaderboard").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `leaderboard` to be an array in the JSON string but got `%s`", jsonObj.get("leaderboard").toString()));
          }

          // validate the optional field `leaderboard` (array)
          for (int i = 0; i < jsonArrayleaderboard.size(); i++) {
            GuildLeaderboard.validateJsonElement(jsonArrayleaderboard.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetGuildLeaderboard2XXResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetGuildLeaderboard2XXResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetGuildLeaderboard2XXResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetGuildLeaderboard2XXResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetGuildLeaderboard2XXResponse>() {
           @Override
           public void write(JsonWriter out, GetGuildLeaderboard2XXResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetGuildLeaderboard2XXResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetGuildLeaderboard2XXResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetGuildLeaderboard2XXResponse
   * @throws IOException if the JSON string is invalid with respect to GetGuildLeaderboard2XXResponse
   */
  public static GetGuildLeaderboard2XXResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetGuildLeaderboard2XXResponse.class);
  }

  /**
   * Convert an instance of GetGuildLeaderboard2XXResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

