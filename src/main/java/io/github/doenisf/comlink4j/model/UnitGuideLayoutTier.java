/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.UnitGuideLayoutLine;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * UnitGuideLayoutTier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class UnitGuideLayoutTier {
  public static final String SERIALIZED_NAME_TITLE_KEY = "titleKey";
  @SerializedName(SERIALIZED_NAME_TITLE_KEY)
  private String titleKey;

  public static final String SERIALIZED_NAME_SUBTITLE_KEY = "subtitleKey";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_KEY)
  private String subtitleKey;

  public static final String SERIALIZED_NAME_LAYOUT_LINE = "layoutLine";
  @SerializedName(SERIALIZED_NAME_LAYOUT_LINE)
  private List<UnitGuideLayoutLine> layoutLine = new ArrayList<>();

  public UnitGuideLayoutTier() {
  }

  public UnitGuideLayoutTier titleKey(String titleKey) {
    this.titleKey = titleKey;
    return this;
  }

  /**
   * Get titleKey
   * @return titleKey
   */
  @javax.annotation.Nullable
  public String getTitleKey() {
    return titleKey;
  }

  public void setTitleKey(String titleKey) {
    this.titleKey = titleKey;
  }


  public UnitGuideLayoutTier subtitleKey(String subtitleKey) {
    this.subtitleKey = subtitleKey;
    return this;
  }

  /**
   * Get subtitleKey
   * @return subtitleKey
   */
  @javax.annotation.Nullable
  public String getSubtitleKey() {
    return subtitleKey;
  }

  public void setSubtitleKey(String subtitleKey) {
    this.subtitleKey = subtitleKey;
  }


  public UnitGuideLayoutTier layoutLine(List<UnitGuideLayoutLine> layoutLine) {
    this.layoutLine = layoutLine;
    return this;
  }

  public UnitGuideLayoutTier addLayoutLineItem(UnitGuideLayoutLine layoutLineItem) {
    if (this.layoutLine == null) {
      this.layoutLine = new ArrayList<>();
    }
    this.layoutLine.add(layoutLineItem);
    return this;
  }

  /**
   * Get layoutLine
   * @return layoutLine
   */
  @javax.annotation.Nullable
  public List<UnitGuideLayoutLine> getLayoutLine() {
    return layoutLine;
  }

  public void setLayoutLine(List<UnitGuideLayoutLine> layoutLine) {
    this.layoutLine = layoutLine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitGuideLayoutTier unitGuideLayoutTier = (UnitGuideLayoutTier) o;
    return Objects.equals(this.titleKey, unitGuideLayoutTier.titleKey) &&
        Objects.equals(this.subtitleKey, unitGuideLayoutTier.subtitleKey) &&
        Objects.equals(this.layoutLine, unitGuideLayoutTier.layoutLine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(titleKey, subtitleKey, layoutLine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitGuideLayoutTier {\n");
    sb.append("    titleKey: ").append(toIndentedString(titleKey)).append("\n");
    sb.append("    subtitleKey: ").append(toIndentedString(subtitleKey)).append("\n");
    sb.append("    layoutLine: ").append(toIndentedString(layoutLine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("titleKey");
    openapiFields.add("subtitleKey");
    openapiFields.add("layoutLine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnitGuideLayoutTier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitGuideLayoutTier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitGuideLayoutTier is not found in the empty JSON string", UnitGuideLayoutTier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnitGuideLayoutTier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitGuideLayoutTier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("titleKey") != null && !jsonObj.get("titleKey").isJsonNull()) && !jsonObj.get("titleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleKey").toString()));
      }
      if ((jsonObj.get("subtitleKey") != null && !jsonObj.get("subtitleKey").isJsonNull()) && !jsonObj.get("subtitleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitleKey").toString()));
      }
      if (jsonObj.get("layoutLine") != null && !jsonObj.get("layoutLine").isJsonNull()) {
        JsonArray jsonArraylayoutLine = jsonObj.getAsJsonArray("layoutLine");
        if (jsonArraylayoutLine != null) {
          // ensure the json data is an array
          if (!jsonObj.get("layoutLine").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `layoutLine` to be an array in the JSON string but got `%s`", jsonObj.get("layoutLine").toString()));
          }

          // validate the optional field `layoutLine` (array)
          for (int i = 0; i < jsonArraylayoutLine.size(); i++) {
            UnitGuideLayoutLine.validateJsonElement(jsonArraylayoutLine.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitGuideLayoutTier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitGuideLayoutTier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitGuideLayoutTier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitGuideLayoutTier.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitGuideLayoutTier>() {
           @Override
           public void write(JsonWriter out, UnitGuideLayoutTier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitGuideLayoutTier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnitGuideLayoutTier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnitGuideLayoutTier
   * @throws IOException if the JSON string is invalid with respect to UnitGuideLayoutTier
   */
  public static UnitGuideLayoutTier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitGuideLayoutTier.class);
  }

  /**
   * Convert an instance of UnitGuideLayoutTier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

