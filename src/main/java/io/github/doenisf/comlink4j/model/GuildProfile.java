/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.EnrollmentStatus;
import io.github.doenisf.comlink4j.GuildEventTracker;
import io.github.doenisf.comlink4j.GuildRaidLaunchConfig;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * GuildProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GuildProfile {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EXTERNAL_MESSAGE_KEY = "externalMessageKey";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_MESSAGE_KEY)
  private String externalMessageKey;

  public static final String SERIALIZED_NAME_MESSAGE_CRITERIA_KEY = "messageCriteriaKey";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CRITERIA_KEY)
  private List<String> messageCriteriaKey = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGO_BACKGROUND = "logoBackground";
  @SerializedName(SERIALIZED_NAME_LOGO_BACKGROUND)
  private String logoBackground;

  public static final String SERIALIZED_NAME_ENROLLMENT_STATUS = "enrollmentStatus";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_STATUS)
  private EnrollmentStatus enrollmentStatus;

  public static final String SERIALIZED_NAME_TROPHY = "trophy";
  @SerializedName(SERIALIZED_NAME_TROPHY)
  private Integer trophy;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "memberCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_MEMBER_MAX = "memberMax";
  @SerializedName(SERIALIZED_NAME_MEMBER_MAX)
  private Integer memberMax;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_LEVEL_REQUIREMENT = "levelRequirement";
  @SerializedName(SERIALIZED_NAME_LEVEL_REQUIREMENT)
  private Integer levelRequirement;

  public static final String SERIALIZED_NAME_RAID_WIN = "raidWin";
  @SerializedName(SERIALIZED_NAME_RAID_WIN)
  private Integer raidWin;

  public static final String SERIALIZED_NAME_LEADERBOARD_SCORE = "leaderboardScore";
  @SerializedName(SERIALIZED_NAME_LEADERBOARD_SCORE)
  private Long leaderboardScore;

  public static final String SERIALIZED_NAME_BANNER_COLOR_ID = "bannerColorId";
  @SerializedName(SERIALIZED_NAME_BANNER_COLOR_ID)
  private String bannerColorId;

  public static final String SERIALIZED_NAME_BANNER_LOGO_ID = "bannerLogoId";
  @SerializedName(SERIALIZED_NAME_BANNER_LOGO_ID)
  private String bannerLogoId;

  public static final String SERIALIZED_NAME_GUILD_GALACTIC_POWER = "guildGalacticPower";
  @SerializedName(SERIALIZED_NAME_GUILD_GALACTIC_POWER)
  private Long guildGalacticPower;

  public static final String SERIALIZED_NAME_CHAT_CHANNEL_ID = "chatChannelId";
  @SerializedName(SERIALIZED_NAME_CHAT_CHANNEL_ID)
  private String chatChannelId;

  public static final String SERIALIZED_NAME_GUILD_TYPE = "guildType";
  @SerializedName(SERIALIZED_NAME_GUILD_TYPE)
  private String guildType;

  public static final String SERIALIZED_NAME_RAID_LAUNCH_CONFIG = "raidLaunchConfig";
  @SerializedName(SERIALIZED_NAME_RAID_LAUNCH_CONFIG)
  private List<GuildRaidLaunchConfig> raidLaunchConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_EVENT_TRACKER = "guildEventTracker";
  @SerializedName(SERIALIZED_NAME_GUILD_EVENT_TRACKER)
  private List<GuildEventTracker> guildEventTracker = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_GALACTIC_POWER_FOR_REQUIREMENT = "guildGalacticPowerForRequirement";
  @SerializedName(SERIALIZED_NAME_GUILD_GALACTIC_POWER_FOR_REQUIREMENT)
  private Long guildGalacticPowerForRequirement;

  public static final String SERIALIZED_NAME_SINGLE_LAUNCH_CONFIG = "singleLaunchConfig";
  @SerializedName(SERIALIZED_NAME_SINGLE_LAUNCH_CONFIG)
  private GuildRaidLaunchConfig singleLaunchConfig;

  public static final String SERIALIZED_NAME_AUTO_LAUNCH_CONFIG = "autoLaunchConfig";
  @SerializedName(SERIALIZED_NAME_AUTO_LAUNCH_CONFIG)
  private GuildRaidLaunchConfig autoLaunchConfig;

  public GuildProfile() {
  }

  public GuildProfile id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GuildProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GuildProfile externalMessageKey(String externalMessageKey) {
    this.externalMessageKey = externalMessageKey;
    return this;
  }

  /**
   * Get externalMessageKey
   * @return externalMessageKey
   */
  @javax.annotation.Nullable
  public String getExternalMessageKey() {
    return externalMessageKey;
  }

  public void setExternalMessageKey(String externalMessageKey) {
    this.externalMessageKey = externalMessageKey;
  }


  public GuildProfile messageCriteriaKey(List<String> messageCriteriaKey) {
    this.messageCriteriaKey = messageCriteriaKey;
    return this;
  }

  public GuildProfile addMessageCriteriaKeyItem(String messageCriteriaKeyItem) {
    if (this.messageCriteriaKey == null) {
      this.messageCriteriaKey = new ArrayList<>();
    }
    this.messageCriteriaKey.add(messageCriteriaKeyItem);
    return this;
  }

  /**
   * Get messageCriteriaKey
   * @return messageCriteriaKey
   */
  @javax.annotation.Nullable
  public List<String> getMessageCriteriaKey() {
    return messageCriteriaKey;
  }

  public void setMessageCriteriaKey(List<String> messageCriteriaKey) {
    this.messageCriteriaKey = messageCriteriaKey;
  }


  public GuildProfile logoBackground(String logoBackground) {
    this.logoBackground = logoBackground;
    return this;
  }

  /**
   * Get logoBackground
   * @return logoBackground
   */
  @javax.annotation.Nullable
  public String getLogoBackground() {
    return logoBackground;
  }

  public void setLogoBackground(String logoBackground) {
    this.logoBackground = logoBackground;
  }


  public GuildProfile enrollmentStatus(EnrollmentStatus enrollmentStatus) {
    this.enrollmentStatus = enrollmentStatus;
    return this;
  }

  /**
   * Get enrollmentStatus
   * @return enrollmentStatus
   */
  @javax.annotation.Nullable
  public EnrollmentStatus getEnrollmentStatus() {
    return enrollmentStatus;
  }

  public void setEnrollmentStatus(EnrollmentStatus enrollmentStatus) {
    this.enrollmentStatus = enrollmentStatus;
  }


  public GuildProfile trophy(Integer trophy) {
    this.trophy = trophy;
    return this;
  }

  /**
   * Get trophy
   * @return trophy
   */
  @javax.annotation.Nullable
  public Integer getTrophy() {
    return trophy;
  }

  public void setTrophy(Integer trophy) {
    this.trophy = trophy;
  }


  public GuildProfile memberCount(Integer memberCount) {
    this.memberCount = memberCount;
    return this;
  }

  /**
   * Get memberCount
   * @return memberCount
   */
  @javax.annotation.Nullable
  public Integer getMemberCount() {
    return memberCount;
  }

  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public GuildProfile memberMax(Integer memberMax) {
    this.memberMax = memberMax;
    return this;
  }

  /**
   * Get memberMax
   * @return memberMax
   */
  @javax.annotation.Nullable
  public Integer getMemberMax() {
    return memberMax;
  }

  public void setMemberMax(Integer memberMax) {
    this.memberMax = memberMax;
  }


  public GuildProfile level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public GuildProfile rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public GuildProfile levelRequirement(Integer levelRequirement) {
    this.levelRequirement = levelRequirement;
    return this;
  }

  /**
   * Get levelRequirement
   * @return levelRequirement
   */
  @javax.annotation.Nullable
  public Integer getLevelRequirement() {
    return levelRequirement;
  }

  public void setLevelRequirement(Integer levelRequirement) {
    this.levelRequirement = levelRequirement;
  }


  public GuildProfile raidWin(Integer raidWin) {
    this.raidWin = raidWin;
    return this;
  }

  /**
   * Get raidWin
   * @return raidWin
   */
  @javax.annotation.Nullable
  public Integer getRaidWin() {
    return raidWin;
  }

  public void setRaidWin(Integer raidWin) {
    this.raidWin = raidWin;
  }


  public GuildProfile leaderboardScore(Long leaderboardScore) {
    this.leaderboardScore = leaderboardScore;
    return this;
  }

  /**
   * Get leaderboardScore
   * @return leaderboardScore
   */
  @javax.annotation.Nullable
  public Long getLeaderboardScore() {
    return leaderboardScore;
  }

  public void setLeaderboardScore(Long leaderboardScore) {
    this.leaderboardScore = leaderboardScore;
  }


  public GuildProfile bannerColorId(String bannerColorId) {
    this.bannerColorId = bannerColorId;
    return this;
  }

  /**
   * Get bannerColorId
   * @return bannerColorId
   */
  @javax.annotation.Nullable
  public String getBannerColorId() {
    return bannerColorId;
  }

  public void setBannerColorId(String bannerColorId) {
    this.bannerColorId = bannerColorId;
  }


  public GuildProfile bannerLogoId(String bannerLogoId) {
    this.bannerLogoId = bannerLogoId;
    return this;
  }

  /**
   * Get bannerLogoId
   * @return bannerLogoId
   */
  @javax.annotation.Nullable
  public String getBannerLogoId() {
    return bannerLogoId;
  }

  public void setBannerLogoId(String bannerLogoId) {
    this.bannerLogoId = bannerLogoId;
  }


  public GuildProfile guildGalacticPower(Long guildGalacticPower) {
    this.guildGalacticPower = guildGalacticPower;
    return this;
  }

  /**
   * Get guildGalacticPower
   * @return guildGalacticPower
   */
  @javax.annotation.Nullable
  public Long getGuildGalacticPower() {
    return guildGalacticPower;
  }

  public void setGuildGalacticPower(Long guildGalacticPower) {
    this.guildGalacticPower = guildGalacticPower;
  }


  public GuildProfile chatChannelId(String chatChannelId) {
    this.chatChannelId = chatChannelId;
    return this;
  }

  /**
   * Get chatChannelId
   * @return chatChannelId
   */
  @javax.annotation.Nullable
  public String getChatChannelId() {
    return chatChannelId;
  }

  public void setChatChannelId(String chatChannelId) {
    this.chatChannelId = chatChannelId;
  }


  public GuildProfile guildType(String guildType) {
    this.guildType = guildType;
    return this;
  }

  /**
   * Get guildType
   * @return guildType
   */
  @javax.annotation.Nullable
  public String getGuildType() {
    return guildType;
  }

  public void setGuildType(String guildType) {
    this.guildType = guildType;
  }


  public GuildProfile raidLaunchConfig(List<GuildRaidLaunchConfig> raidLaunchConfig) {
    this.raidLaunchConfig = raidLaunchConfig;
    return this;
  }

  public GuildProfile addRaidLaunchConfigItem(GuildRaidLaunchConfig raidLaunchConfigItem) {
    if (this.raidLaunchConfig == null) {
      this.raidLaunchConfig = new ArrayList<>();
    }
    this.raidLaunchConfig.add(raidLaunchConfigItem);
    return this;
  }

  /**
   * Get raidLaunchConfig
   * @return raidLaunchConfig
   */
  @javax.annotation.Nullable
  public List<GuildRaidLaunchConfig> getRaidLaunchConfig() {
    return raidLaunchConfig;
  }

  public void setRaidLaunchConfig(List<GuildRaidLaunchConfig> raidLaunchConfig) {
    this.raidLaunchConfig = raidLaunchConfig;
  }


  public GuildProfile guildEventTracker(List<GuildEventTracker> guildEventTracker) {
    this.guildEventTracker = guildEventTracker;
    return this;
  }

  public GuildProfile addGuildEventTrackerItem(GuildEventTracker guildEventTrackerItem) {
    if (this.guildEventTracker == null) {
      this.guildEventTracker = new ArrayList<>();
    }
    this.guildEventTracker.add(guildEventTrackerItem);
    return this;
  }

  /**
   * Get guildEventTracker
   * @return guildEventTracker
   */
  @javax.annotation.Nullable
  public List<GuildEventTracker> getGuildEventTracker() {
    return guildEventTracker;
  }

  public void setGuildEventTracker(List<GuildEventTracker> guildEventTracker) {
    this.guildEventTracker = guildEventTracker;
  }


  public GuildProfile guildGalacticPowerForRequirement(Long guildGalacticPowerForRequirement) {
    this.guildGalacticPowerForRequirement = guildGalacticPowerForRequirement;
    return this;
  }

  /**
   * Get guildGalacticPowerForRequirement
   * @return guildGalacticPowerForRequirement
   */
  @javax.annotation.Nullable
  public Long getGuildGalacticPowerForRequirement() {
    return guildGalacticPowerForRequirement;
  }

  public void setGuildGalacticPowerForRequirement(Long guildGalacticPowerForRequirement) {
    this.guildGalacticPowerForRequirement = guildGalacticPowerForRequirement;
  }


  public GuildProfile singleLaunchConfig(GuildRaidLaunchConfig singleLaunchConfig) {
    this.singleLaunchConfig = singleLaunchConfig;
    return this;
  }

  /**
   * Get singleLaunchConfig
   * @return singleLaunchConfig
   */
  @javax.annotation.Nullable
  public GuildRaidLaunchConfig getSingleLaunchConfig() {
    return singleLaunchConfig;
  }

  public void setSingleLaunchConfig(GuildRaidLaunchConfig singleLaunchConfig) {
    this.singleLaunchConfig = singleLaunchConfig;
  }


  public GuildProfile autoLaunchConfig(GuildRaidLaunchConfig autoLaunchConfig) {
    this.autoLaunchConfig = autoLaunchConfig;
    return this;
  }

  /**
   * Get autoLaunchConfig
   * @return autoLaunchConfig
   */
  @javax.annotation.Nullable
  public GuildRaidLaunchConfig getAutoLaunchConfig() {
    return autoLaunchConfig;
  }

  public void setAutoLaunchConfig(GuildRaidLaunchConfig autoLaunchConfig) {
    this.autoLaunchConfig = autoLaunchConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuildProfile guildProfile = (GuildProfile) o;
    return Objects.equals(this.id, guildProfile.id) &&
        Objects.equals(this.name, guildProfile.name) &&
        Objects.equals(this.externalMessageKey, guildProfile.externalMessageKey) &&
        Objects.equals(this.messageCriteriaKey, guildProfile.messageCriteriaKey) &&
        Objects.equals(this.logoBackground, guildProfile.logoBackground) &&
        Objects.equals(this.enrollmentStatus, guildProfile.enrollmentStatus) &&
        Objects.equals(this.trophy, guildProfile.trophy) &&
        Objects.equals(this.memberCount, guildProfile.memberCount) &&
        Objects.equals(this.memberMax, guildProfile.memberMax) &&
        Objects.equals(this.level, guildProfile.level) &&
        Objects.equals(this.rank, guildProfile.rank) &&
        Objects.equals(this.levelRequirement, guildProfile.levelRequirement) &&
        Objects.equals(this.raidWin, guildProfile.raidWin) &&
        Objects.equals(this.leaderboardScore, guildProfile.leaderboardScore) &&
        Objects.equals(this.bannerColorId, guildProfile.bannerColorId) &&
        Objects.equals(this.bannerLogoId, guildProfile.bannerLogoId) &&
        Objects.equals(this.guildGalacticPower, guildProfile.guildGalacticPower) &&
        Objects.equals(this.chatChannelId, guildProfile.chatChannelId) &&
        Objects.equals(this.guildType, guildProfile.guildType) &&
        Objects.equals(this.raidLaunchConfig, guildProfile.raidLaunchConfig) &&
        Objects.equals(this.guildEventTracker, guildProfile.guildEventTracker) &&
        Objects.equals(this.guildGalacticPowerForRequirement, guildProfile.guildGalacticPowerForRequirement) &&
        Objects.equals(this.singleLaunchConfig, guildProfile.singleLaunchConfig) &&
        Objects.equals(this.autoLaunchConfig, guildProfile.autoLaunchConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, externalMessageKey, messageCriteriaKey, logoBackground, enrollmentStatus, trophy, memberCount, memberMax, level, rank, levelRequirement, raidWin, leaderboardScore, bannerColorId, bannerLogoId, guildGalacticPower, chatChannelId, guildType, raidLaunchConfig, guildEventTracker, guildGalacticPowerForRequirement, singleLaunchConfig, autoLaunchConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuildProfile {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    externalMessageKey: ").append(toIndentedString(externalMessageKey)).append("\n");
    sb.append("    messageCriteriaKey: ").append(toIndentedString(messageCriteriaKey)).append("\n");
    sb.append("    logoBackground: ").append(toIndentedString(logoBackground)).append("\n");
    sb.append("    enrollmentStatus: ").append(toIndentedString(enrollmentStatus)).append("\n");
    sb.append("    trophy: ").append(toIndentedString(trophy)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    memberMax: ").append(toIndentedString(memberMax)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    levelRequirement: ").append(toIndentedString(levelRequirement)).append("\n");
    sb.append("    raidWin: ").append(toIndentedString(raidWin)).append("\n");
    sb.append("    leaderboardScore: ").append(toIndentedString(leaderboardScore)).append("\n");
    sb.append("    bannerColorId: ").append(toIndentedString(bannerColorId)).append("\n");
    sb.append("    bannerLogoId: ").append(toIndentedString(bannerLogoId)).append("\n");
    sb.append("    guildGalacticPower: ").append(toIndentedString(guildGalacticPower)).append("\n");
    sb.append("    chatChannelId: ").append(toIndentedString(chatChannelId)).append("\n");
    sb.append("    guildType: ").append(toIndentedString(guildType)).append("\n");
    sb.append("    raidLaunchConfig: ").append(toIndentedString(raidLaunchConfig)).append("\n");
    sb.append("    guildEventTracker: ").append(toIndentedString(guildEventTracker)).append("\n");
    sb.append("    guildGalacticPowerForRequirement: ").append(toIndentedString(guildGalacticPowerForRequirement)).append("\n");
    sb.append("    singleLaunchConfig: ").append(toIndentedString(singleLaunchConfig)).append("\n");
    sb.append("    autoLaunchConfig: ").append(toIndentedString(autoLaunchConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("externalMessageKey");
    openapiFields.add("messageCriteriaKey");
    openapiFields.add("logoBackground");
    openapiFields.add("enrollmentStatus");
    openapiFields.add("trophy");
    openapiFields.add("memberCount");
    openapiFields.add("memberMax");
    openapiFields.add("level");
    openapiFields.add("rank");
    openapiFields.add("levelRequirement");
    openapiFields.add("raidWin");
    openapiFields.add("leaderboardScore");
    openapiFields.add("bannerColorId");
    openapiFields.add("bannerLogoId");
    openapiFields.add("guildGalacticPower");
    openapiFields.add("chatChannelId");
    openapiFields.add("guildType");
    openapiFields.add("raidLaunchConfig");
    openapiFields.add("guildEventTracker");
    openapiFields.add("guildGalacticPowerForRequirement");
    openapiFields.add("singleLaunchConfig");
    openapiFields.add("autoLaunchConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuildProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuildProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuildProfile is not found in the empty JSON string", GuildProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuildProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuildProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("externalMessageKey") != null && !jsonObj.get("externalMessageKey").isJsonNull()) && !jsonObj.get("externalMessageKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalMessageKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalMessageKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("messageCriteriaKey") != null && !jsonObj.get("messageCriteriaKey").isJsonNull() && !jsonObj.get("messageCriteriaKey").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageCriteriaKey` to be an array in the JSON string but got `%s`", jsonObj.get("messageCriteriaKey").toString()));
      }
      if ((jsonObj.get("logoBackground") != null && !jsonObj.get("logoBackground").isJsonNull()) && !jsonObj.get("logoBackground").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoBackground` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoBackground").toString()));
      }
      // validate the optional field `enrollmentStatus`
      if (jsonObj.get("enrollmentStatus") != null && !jsonObj.get("enrollmentStatus").isJsonNull()) {
        EnrollmentStatus.validateJsonElement(jsonObj.get("enrollmentStatus"));
      }
      if ((jsonObj.get("bannerColorId") != null && !jsonObj.get("bannerColorId").isJsonNull()) && !jsonObj.get("bannerColorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerColorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerColorId").toString()));
      }
      if ((jsonObj.get("bannerLogoId") != null && !jsonObj.get("bannerLogoId").isJsonNull()) && !jsonObj.get("bannerLogoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerLogoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerLogoId").toString()));
      }
      if ((jsonObj.get("chatChannelId") != null && !jsonObj.get("chatChannelId").isJsonNull()) && !jsonObj.get("chatChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chatChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chatChannelId").toString()));
      }
      if ((jsonObj.get("guildType") != null && !jsonObj.get("guildType").isJsonNull()) && !jsonObj.get("guildType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildType").toString()));
      }
      if (jsonObj.get("raidLaunchConfig") != null && !jsonObj.get("raidLaunchConfig").isJsonNull()) {
        JsonArray jsonArrayraidLaunchConfig = jsonObj.getAsJsonArray("raidLaunchConfig");
        if (jsonArrayraidLaunchConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidLaunchConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidLaunchConfig` to be an array in the JSON string but got `%s`", jsonObj.get("raidLaunchConfig").toString()));
          }

          // validate the optional field `raidLaunchConfig` (array)
          for (int i = 0; i < jsonArrayraidLaunchConfig.size(); i++) {
            GuildRaidLaunchConfig.validateJsonElement(jsonArrayraidLaunchConfig.get(i));
          };
        }
      }
      if (jsonObj.get("guildEventTracker") != null && !jsonObj.get("guildEventTracker").isJsonNull()) {
        JsonArray jsonArrayguildEventTracker = jsonObj.getAsJsonArray("guildEventTracker");
        if (jsonArrayguildEventTracker != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guildEventTracker").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guildEventTracker` to be an array in the JSON string but got `%s`", jsonObj.get("guildEventTracker").toString()));
          }

          // validate the optional field `guildEventTracker` (array)
          for (int i = 0; i < jsonArrayguildEventTracker.size(); i++) {
            GuildEventTracker.validateJsonElement(jsonArrayguildEventTracker.get(i));
          };
        }
      }
      // validate the optional field `singleLaunchConfig`
      if (jsonObj.get("singleLaunchConfig") != null && !jsonObj.get("singleLaunchConfig").isJsonNull()) {
        GuildRaidLaunchConfig.validateJsonElement(jsonObj.get("singleLaunchConfig"));
      }
      // validate the optional field `autoLaunchConfig`
      if (jsonObj.get("autoLaunchConfig") != null && !jsonObj.get("autoLaunchConfig").isJsonNull()) {
        GuildRaidLaunchConfig.validateJsonElement(jsonObj.get("autoLaunchConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuildProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuildProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuildProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuildProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<GuildProfile>() {
           @Override
           public void write(JsonWriter out, GuildProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuildProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuildProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuildProfile
   * @throws IOException if the JSON string is invalid with respect to GuildProfile
   */
  public static GuildProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuildProfile.class);
  }

  /**
   * Convert an instance of GuildProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

