/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.StatModSlot;
import io.github.doenisf.comlink4j.model.StatModTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * MysteryStatModDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class MysteryStatModDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SLOT_OLD = "slotOld";
  @SerializedName(SERIALIZED_NAME_SLOT_OLD)
  private StatModSlot slotOld;

  public static final String SERIALIZED_NAME_SET_ID = "setId";
  @SerializedName(SERIALIZED_NAME_SET_ID)
  private String setId;

  public static final String SERIALIZED_NAME_MIN_RARITY = "minRarity";
  @SerializedName(SERIALIZED_NAME_MIN_RARITY)
  private Rarity minRarity;

  public static final String SERIALIZED_NAME_MAX_RARITY = "maxRarity";
  @SerializedName(SERIALIZED_NAME_MAX_RARITY)
  private Rarity maxRarity;

  public static final String SERIALIZED_NAME_MIN_TIER = "minTier";
  @SerializedName(SERIALIZED_NAME_MIN_TIER)
  private StatModTier minTier;

  public static final String SERIALIZED_NAME_MAX_TIER = "maxTier";
  @SerializedName(SERIALIZED_NAME_MAX_TIER)
  private StatModTier maxTier;

  public static final String SERIALIZED_NAME_SLOT = "slot";
  @SerializedName(SERIALIZED_NAME_SLOT)
  private List<StatModSlot> slot = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public MysteryStatModDefinition() {
  }

  public MysteryStatModDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MysteryStatModDefinition slotOld(StatModSlot slotOld) {
    this.slotOld = slotOld;
    return this;
  }

  /**
   * Get slotOld
   * @return slotOld
   */
  @javax.annotation.Nullable
  public StatModSlot getSlotOld() {
    return slotOld;
  }

  public void setSlotOld(StatModSlot slotOld) {
    this.slotOld = slotOld;
  }


  public MysteryStatModDefinition setId(String setId) {
    this.setId = setId;
    return this;
  }

  /**
   * Get setId
   * @return setId
   */
  @javax.annotation.Nullable
  public String getSetId() {
    return setId;
  }

  public void setSetId(String setId) {
    this.setId = setId;
  }


  public MysteryStatModDefinition minRarity(Rarity minRarity) {
    this.minRarity = minRarity;
    return this;
  }

  /**
   * Get minRarity
   * @return minRarity
   */
  @javax.annotation.Nullable
  public Rarity getMinRarity() {
    return minRarity;
  }

  public void setMinRarity(Rarity minRarity) {
    this.minRarity = minRarity;
  }


  public MysteryStatModDefinition maxRarity(Rarity maxRarity) {
    this.maxRarity = maxRarity;
    return this;
  }

  /**
   * Get maxRarity
   * @return maxRarity
   */
  @javax.annotation.Nullable
  public Rarity getMaxRarity() {
    return maxRarity;
  }

  public void setMaxRarity(Rarity maxRarity) {
    this.maxRarity = maxRarity;
  }


  public MysteryStatModDefinition minTier(StatModTier minTier) {
    this.minTier = minTier;
    return this;
  }

  /**
   * Get minTier
   * @return minTier
   */
  @javax.annotation.Nullable
  public StatModTier getMinTier() {
    return minTier;
  }

  public void setMinTier(StatModTier minTier) {
    this.minTier = minTier;
  }


  public MysteryStatModDefinition maxTier(StatModTier maxTier) {
    this.maxTier = maxTier;
    return this;
  }

  /**
   * Get maxTier
   * @return maxTier
   */
  @javax.annotation.Nullable
  public StatModTier getMaxTier() {
    return maxTier;
  }

  public void setMaxTier(StatModTier maxTier) {
    this.maxTier = maxTier;
  }


  public MysteryStatModDefinition slot(List<StatModSlot> slot) {
    this.slot = slot;
    return this;
  }

  public MysteryStatModDefinition addSlotItem(StatModSlot slotItem) {
    if (this.slot == null) {
      this.slot = new ArrayList<>();
    }
    this.slot.add(slotItem);
    return this;
  }

  /**
   * Get slot
   * @return slot
   */
  @javax.annotation.Nullable
  public List<StatModSlot> getSlot() {
    return slot;
  }

  public void setSlot(List<StatModSlot> slot) {
    this.slot = slot;
  }


  public MysteryStatModDefinition descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MysteryStatModDefinition mysteryStatModDefinition = (MysteryStatModDefinition) o;
    return Objects.equals(this.id, mysteryStatModDefinition.id) &&
        Objects.equals(this.slotOld, mysteryStatModDefinition.slotOld) &&
        Objects.equals(this.setId, mysteryStatModDefinition.setId) &&
        Objects.equals(this.minRarity, mysteryStatModDefinition.minRarity) &&
        Objects.equals(this.maxRarity, mysteryStatModDefinition.maxRarity) &&
        Objects.equals(this.minTier, mysteryStatModDefinition.minTier) &&
        Objects.equals(this.maxTier, mysteryStatModDefinition.maxTier) &&
        Objects.equals(this.slot, mysteryStatModDefinition.slot) &&
        Objects.equals(this.descKey, mysteryStatModDefinition.descKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, slotOld, setId, minRarity, maxRarity, minTier, maxTier, slot, descKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MysteryStatModDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slotOld: ").append(toIndentedString(slotOld)).append("\n");
    sb.append("    setId: ").append(toIndentedString(setId)).append("\n");
    sb.append("    minRarity: ").append(toIndentedString(minRarity)).append("\n");
    sb.append("    maxRarity: ").append(toIndentedString(maxRarity)).append("\n");
    sb.append("    minTier: ").append(toIndentedString(minTier)).append("\n");
    sb.append("    maxTier: ").append(toIndentedString(maxTier)).append("\n");
    sb.append("    slot: ").append(toIndentedString(slot)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("slotOld");
    openapiFields.add("setId");
    openapiFields.add("minRarity");
    openapiFields.add("maxRarity");
    openapiFields.add("minTier");
    openapiFields.add("maxTier");
    openapiFields.add("slot");
    openapiFields.add("descKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MysteryStatModDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MysteryStatModDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MysteryStatModDefinition is not found in the empty JSON string", MysteryStatModDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MysteryStatModDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MysteryStatModDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `slotOld`
      if (jsonObj.get("slotOld") != null && !jsonObj.get("slotOld").isJsonNull()) {
        StatModSlot.validateJsonElement(jsonObj.get("slotOld"));
      }
      if ((jsonObj.get("setId") != null && !jsonObj.get("setId").isJsonNull()) && !jsonObj.get("setId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setId").toString()));
      }
      // validate the optional field `minRarity`
      if (jsonObj.get("minRarity") != null && !jsonObj.get("minRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("minRarity"));
      }
      // validate the optional field `maxRarity`
      if (jsonObj.get("maxRarity") != null && !jsonObj.get("maxRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("maxRarity"));
      }
      // validate the optional field `minTier`
      if (jsonObj.get("minTier") != null && !jsonObj.get("minTier").isJsonNull()) {
        StatModTier.validateJsonElement(jsonObj.get("minTier"));
      }
      // validate the optional field `maxTier`
      if (jsonObj.get("maxTier") != null && !jsonObj.get("maxTier").isJsonNull()) {
        StatModTier.validateJsonElement(jsonObj.get("maxTier"));
      }
      if (jsonObj.get("slot") != null && !jsonObj.get("slot").isJsonNull()) {
        JsonArray jsonArrayslot = jsonObj.getAsJsonArray("slot");
        if (jsonArrayslot != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slot").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slot` to be an array in the JSON string but got `%s`", jsonObj.get("slot").toString()));
          }

          // validate the optional field `slot` (array)
          for (int i = 0; i < jsonArrayslot.size(); i++) {
            StatModSlot.validateJsonElement(jsonArrayslot.get(i));
          };
        }
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MysteryStatModDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MysteryStatModDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MysteryStatModDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MysteryStatModDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<MysteryStatModDefinition>() {
           @Override
           public void write(JsonWriter out, MysteryStatModDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MysteryStatModDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MysteryStatModDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MysteryStatModDefinition
   * @throws IOException if the JSON string is invalid with respect to MysteryStatModDefinition
   */
  public static MysteryStatModDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MysteryStatModDefinition.class);
  }

  /**
   * Convert an instance of MysteryStatModDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

