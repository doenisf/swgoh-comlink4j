/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.CinematicTrigger;
import io.github.doenisf.comlink4j.Environment;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * CampaignCinematic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CampaignCinematic {
  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private CinematicTrigger trigger;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Environment environment;

  public static final String SERIALIZED_NAME_SUBSEQUENT_VIEWING_ENVIRONMENT = "subsequentViewingEnvironment";
  @SerializedName(SERIALIZED_NAME_SUBSEQUENT_VIEWING_ENVIRONMENT)
  private Environment subsequentViewingEnvironment;

  public CampaignCinematic() {
  }

  public CampaignCinematic trigger(CinematicTrigger trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public CinematicTrigger getTrigger() {
    return trigger;
  }

  public void setTrigger(CinematicTrigger trigger) {
    this.trigger = trigger;
  }


  public CampaignCinematic environment(Environment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Environment getEnvironment() {
    return environment;
  }

  public void setEnvironment(Environment environment) {
    this.environment = environment;
  }


  public CampaignCinematic subsequentViewingEnvironment(Environment subsequentViewingEnvironment) {
    this.subsequentViewingEnvironment = subsequentViewingEnvironment;
    return this;
  }

  /**
   * Get subsequentViewingEnvironment
   * @return subsequentViewingEnvironment
   */
  @javax.annotation.Nullable
  public Environment getSubsequentViewingEnvironment() {
    return subsequentViewingEnvironment;
  }

  public void setSubsequentViewingEnvironment(Environment subsequentViewingEnvironment) {
    this.subsequentViewingEnvironment = subsequentViewingEnvironment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignCinematic campaignCinematic = (CampaignCinematic) o;
    return Objects.equals(this.trigger, campaignCinematic.trigger) &&
        Objects.equals(this.environment, campaignCinematic.environment) &&
        Objects.equals(this.subsequentViewingEnvironment, campaignCinematic.subsequentViewingEnvironment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trigger, environment, subsequentViewingEnvironment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignCinematic {\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    subsequentViewingEnvironment: ").append(toIndentedString(subsequentViewingEnvironment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("trigger");
    openapiFields.add("environment");
    openapiFields.add("subsequentViewingEnvironment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignCinematic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignCinematic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignCinematic is not found in the empty JSON string", CampaignCinematic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignCinematic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignCinematic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        CinematicTrigger.validateJsonElement(jsonObj.get("trigger"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        Environment.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `subsequentViewingEnvironment`
      if (jsonObj.get("subsequentViewingEnvironment") != null && !jsonObj.get("subsequentViewingEnvironment").isJsonNull()) {
        Environment.validateJsonElement(jsonObj.get("subsequentViewingEnvironment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignCinematic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignCinematic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignCinematic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignCinematic.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignCinematic>() {
           @Override
           public void write(JsonWriter out, CampaignCinematic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignCinematic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignCinematic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignCinematic
   * @throws IOException if the JSON string is invalid with respect to CampaignCinematic
   */
  public static CampaignCinematic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignCinematic.class);
  }

  /**
   * Convert an instance of CampaignCinematic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

