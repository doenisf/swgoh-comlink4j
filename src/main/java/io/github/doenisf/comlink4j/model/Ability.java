/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import io.github.doenisf.comlink4j.JSON;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Ability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Ability {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_PREFAB_NAME = "prefabName";
  @SerializedName(SERIALIZED_NAME_PREFAB_NAME)
  private String prefabName;

  public static final String SERIALIZED_NAME_TRIGGER_CONDITION = "triggerCondition";
  @SerializedName(SERIALIZED_NAME_TRIGGER_CONDITION)
  private List<BattleCondition> triggerCondition = new ArrayList<>();

  public static final String SERIALIZED_NAME_STACKING_LINE_OVERRIDE = "stackingLineOverride";
  @SerializedName(SERIALIZED_NAME_STACKING_LINE_OVERRIDE)
  private String stackingLineOverride;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private List<AbilityTier> tier = new ArrayList<>();

  public static final String SERIALIZED_NAME_COOLDOWN = "cooldown";
  @SerializedName(SERIALIZED_NAME_COOLDOWN)
  private Integer cooldown;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_APPLY_TYPE_TOOLTIP_KEY = "applyTypeTooltipKey";
  @SerializedName(SERIALIZED_NAME_APPLY_TYPE_TOOLTIP_KEY)
  private String applyTypeTooltipKey;

  public static final String SERIALIZED_NAME_DESCRIPTIVE_TAG = "descriptiveTag";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIVE_TAG)
  private List<EffectTag> descriptiveTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECT_REFERENCE = "effectReference";
  @SerializedName(SERIALIZED_NAME_EFFECT_REFERENCE)
  private List<EffectReference> effectReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIRMATION_MESSAGE = "confirmationMessage";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_MESSAGE)
  private MessageDialog confirmationMessage;

  public static final String SERIALIZED_NAME_BUTTON_LOCATION = "buttonLocation";
  @SerializedName(SERIALIZED_NAME_BUTTON_LOCATION)
  private AbilityButtonLocationType buttonLocation;

  public static final String SERIALIZED_NAME_SHORT_DESC_KEY = "shortDescKey";
  @SerializedName(SERIALIZED_NAME_SHORT_DESC_KEY)
  private String shortDescKey;

  public static final String SERIALIZED_NAME_ABILITY_TYPE = "abilityType";
  @SerializedName(SERIALIZED_NAME_ABILITY_TYPE)
  private AbilityType abilityType;

  public static final String SERIALIZED_NAME_DETAIL_LOCATION = "detailLocation";
  @SerializedName(SERIALIZED_NAME_DETAIL_LOCATION)
  private UnitDetailsAbilityLocation detailLocation;

  public static final String SERIALIZED_NAME_ALLY_TARGETING_RULE_ID = "allyTargetingRuleId";
  @SerializedName(SERIALIZED_NAME_ALLY_TARGETING_RULE_ID)
  private String allyTargetingRuleId;

  public static final String SERIALIZED_NAME_USE_AS_REINFORCEMENT_DESC = "useAsReinforcementDesc";
  @SerializedName(SERIALIZED_NAME_USE_AS_REINFORCEMENT_DESC)
  private Boolean useAsReinforcementDesc;

  public static final String SERIALIZED_NAME_INTERACTS_WITH_TAG = "interactsWithTag";
  @SerializedName(SERIALIZED_NAME_INTERACTS_WITH_TAG)
  private List<EffectTag> interactsWithTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUB_ICON = "subIcon";
  @SerializedName(SERIALIZED_NAME_SUB_ICON)
  private String subIcon;

  public static final String SERIALIZED_NAME_AI_PARAMS = "aiParams";
  @SerializedName(SERIALIZED_NAME_AI_PARAMS)
  private AbilityAIParams aiParams;

  public static final String SERIALIZED_NAME_COOLDOWN_TYPE = "cooldownType";
  @SerializedName(SERIALIZED_NAME_COOLDOWN_TYPE)
  private AbilityCooldownType cooldownType;

  public static final String SERIALIZED_NAME_ALWAYS_DISPLAY_IN_BATTLE_UI = "alwaysDisplayInBattleUi";
  @SerializedName(SERIALIZED_NAME_ALWAYS_DISPLAY_IN_BATTLE_UI)
  private Boolean alwaysDisplayInBattleUi;

  public static final String SERIALIZED_NAME_HIGHLIGHT_WHEN_READY_IN_BATTLE_UI = "highlightWhenReadyInBattleUi";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT_WHEN_READY_IN_BATTLE_UI)
  private Boolean highlightWhenReadyInBattleUi;

  public static final String SERIALIZED_NAME_HIDE_COOLDOWN_DESCRIPTION = "hideCooldownDescription";
  @SerializedName(SERIALIZED_NAME_HIDE_COOLDOWN_DESCRIPTION)
  private Boolean hideCooldownDescription;

  public static final String SERIALIZED_NAME_BLOCKING_EFFECT_ID = "blockingEffectId";
  @SerializedName(SERIALIZED_NAME_BLOCKING_EFFECT_ID)
  private String blockingEffectId;

  public static final String SERIALIZED_NAME_BLOCKED_LOC_KEY = "blockedLocKey";
  @SerializedName(SERIALIZED_NAME_BLOCKED_LOC_KEY)
  private String blockedLocKey;

  public static final String SERIALIZED_NAME_ULTIMATE_CHARGE_REQUIRED = "ultimateChargeRequired";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_CHARGE_REQUIRED)
  private List<Integer> ultimateChargeRequired = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRANTED_PRIORITY = "grantedPriority";
  @SerializedName(SERIALIZED_NAME_GRANTED_PRIORITY)
  private Integer grantedPriority;

  public static final String SERIALIZED_NAME_SYNERGY = "synergy";
  @SerializedName(SERIALIZED_NAME_SYNERGY)
  private AbilitySynergy synergy;

  public static final String SERIALIZED_NAME_VISUAL_TARGET = "visualTarget";
  @SerializedName(SERIALIZED_NAME_VISUAL_TARGET)
  private EffectTarget visualTarget;

  public Ability() {
  }

  public Ability id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Ability nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public Ability descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public Ability prefabName(String prefabName) {
    this.prefabName = prefabName;
    return this;
  }

  /**
   * Get prefabName
   * @return prefabName
   */
  @javax.annotation.Nullable
  public String getPrefabName() {
    return prefabName;
  }

  public void setPrefabName(String prefabName) {
    this.prefabName = prefabName;
  }


  public Ability triggerCondition(List<BattleCondition> triggerCondition) {
    this.triggerCondition = triggerCondition;
    return this;
  }

  public Ability addTriggerConditionItem(BattleCondition triggerConditionItem) {
    if (this.triggerCondition == null) {
      this.triggerCondition = new ArrayList<>();
    }
    this.triggerCondition.add(triggerConditionItem);
    return this;
  }

  /**
   * Get triggerCondition
   * @return triggerCondition
   */
  @javax.annotation.Nullable
  public List<BattleCondition> getTriggerCondition() {
    return triggerCondition;
  }

  public void setTriggerCondition(List<BattleCondition> triggerCondition) {
    this.triggerCondition = triggerCondition;
  }


  public Ability stackingLineOverride(String stackingLineOverride) {
    this.stackingLineOverride = stackingLineOverride;
    return this;
  }

  /**
   * Get stackingLineOverride
   * @return stackingLineOverride
   */
  @javax.annotation.Nullable
  public String getStackingLineOverride() {
    return stackingLineOverride;
  }

  public void setStackingLineOverride(String stackingLineOverride) {
    this.stackingLineOverride = stackingLineOverride;
  }


  public Ability tier(List<AbilityTier> tier) {
    this.tier = tier;
    return this;
  }

  public Ability addTierItem(AbilityTier tierItem) {
    if (this.tier == null) {
      this.tier = new ArrayList<>();
    }
    this.tier.add(tierItem);
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public List<AbilityTier> getTier() {
    return tier;
  }

  public void setTier(List<AbilityTier> tier) {
    this.tier = tier;
  }


  public Ability cooldown(Integer cooldown) {
    this.cooldown = cooldown;
    return this;
  }

  /**
   * Get cooldown
   * @return cooldown
   */
  @javax.annotation.Nullable
  public Integer getCooldown() {
    return cooldown;
  }

  public void setCooldown(Integer cooldown) {
    this.cooldown = cooldown;
  }


  public Ability icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public Ability applyTypeTooltipKey(String applyTypeTooltipKey) {
    this.applyTypeTooltipKey = applyTypeTooltipKey;
    return this;
  }

  /**
   * Get applyTypeTooltipKey
   * @return applyTypeTooltipKey
   */
  @javax.annotation.Nullable
  public String getApplyTypeTooltipKey() {
    return applyTypeTooltipKey;
  }

  public void setApplyTypeTooltipKey(String applyTypeTooltipKey) {
    this.applyTypeTooltipKey = applyTypeTooltipKey;
  }


  public Ability descriptiveTag(List<EffectTag> descriptiveTag) {
    this.descriptiveTag = descriptiveTag;
    return this;
  }

  public Ability addDescriptiveTagItem(EffectTag descriptiveTagItem) {
    if (this.descriptiveTag == null) {
      this.descriptiveTag = new ArrayList<>();
    }
    this.descriptiveTag.add(descriptiveTagItem);
    return this;
  }

  /**
   * Get descriptiveTag
   * @return descriptiveTag
   */
  @javax.annotation.Nullable
  public List<EffectTag> getDescriptiveTag() {
    return descriptiveTag;
  }

  public void setDescriptiveTag(List<EffectTag> descriptiveTag) {
    this.descriptiveTag = descriptiveTag;
  }


  public Ability effectReference(List<EffectReference> effectReference) {
    this.effectReference = effectReference;
    return this;
  }

  public Ability addEffectReferenceItem(EffectReference effectReferenceItem) {
    if (this.effectReference == null) {
      this.effectReference = new ArrayList<>();
    }
    this.effectReference.add(effectReferenceItem);
    return this;
  }

  /**
   * Get effectReference
   * @return effectReference
   */
  @javax.annotation.Nullable
  public List<EffectReference> getEffectReference() {
    return effectReference;
  }

  public void setEffectReference(List<EffectReference> effectReference) {
    this.effectReference = effectReference;
  }


  public Ability confirmationMessage(MessageDialog confirmationMessage) {
    this.confirmationMessage = confirmationMessage;
    return this;
  }

  /**
   * Get confirmationMessage
   * @return confirmationMessage
   */
  @javax.annotation.Nullable
  public MessageDialog getConfirmationMessage() {
    return confirmationMessage;
  }

  public void setConfirmationMessage(MessageDialog confirmationMessage) {
    this.confirmationMessage = confirmationMessage;
  }


  public Ability buttonLocation(AbilityButtonLocationType buttonLocation) {
    this.buttonLocation = buttonLocation;
    return this;
  }

  /**
   * Get buttonLocation
   * @return buttonLocation
   */
  @javax.annotation.Nullable
  public AbilityButtonLocationType getButtonLocation() {
    return buttonLocation;
  }

  public void setButtonLocation(AbilityButtonLocationType buttonLocation) {
    this.buttonLocation = buttonLocation;
  }


  public Ability shortDescKey(String shortDescKey) {
    this.shortDescKey = shortDescKey;
    return this;
  }

  /**
   * Get shortDescKey
   * @return shortDescKey
   */
  @javax.annotation.Nullable
  public String getShortDescKey() {
    return shortDescKey;
  }

  public void setShortDescKey(String shortDescKey) {
    this.shortDescKey = shortDescKey;
  }


  public Ability abilityType(AbilityType abilityType) {
    this.abilityType = abilityType;
    return this;
  }

  /**
   * Get abilityType
   * @return abilityType
   */
  @javax.annotation.Nullable
  public AbilityType getAbilityType() {
    return abilityType;
  }

  public void setAbilityType(AbilityType abilityType) {
    this.abilityType = abilityType;
  }


  public Ability detailLocation(UnitDetailsAbilityLocation detailLocation) {
    this.detailLocation = detailLocation;
    return this;
  }

  /**
   * Get detailLocation
   * @return detailLocation
   */
  @javax.annotation.Nullable
  public UnitDetailsAbilityLocation getDetailLocation() {
    return detailLocation;
  }

  public void setDetailLocation(UnitDetailsAbilityLocation detailLocation) {
    this.detailLocation = detailLocation;
  }


  public Ability allyTargetingRuleId(String allyTargetingRuleId) {
    this.allyTargetingRuleId = allyTargetingRuleId;
    return this;
  }

  /**
   * Get allyTargetingRuleId
   * @return allyTargetingRuleId
   */
  @javax.annotation.Nullable
  public String getAllyTargetingRuleId() {
    return allyTargetingRuleId;
  }

  public void setAllyTargetingRuleId(String allyTargetingRuleId) {
    this.allyTargetingRuleId = allyTargetingRuleId;
  }


  public Ability useAsReinforcementDesc(Boolean useAsReinforcementDesc) {
    this.useAsReinforcementDesc = useAsReinforcementDesc;
    return this;
  }

  /**
   * Get useAsReinforcementDesc
   * @return useAsReinforcementDesc
   */
  @javax.annotation.Nullable
  public Boolean getUseAsReinforcementDesc() {
    return useAsReinforcementDesc;
  }

  public void setUseAsReinforcementDesc(Boolean useAsReinforcementDesc) {
    this.useAsReinforcementDesc = useAsReinforcementDesc;
  }


  public Ability interactsWithTag(List<EffectTag> interactsWithTag) {
    this.interactsWithTag = interactsWithTag;
    return this;
  }

  public Ability addInteractsWithTagItem(EffectTag interactsWithTagItem) {
    if (this.interactsWithTag == null) {
      this.interactsWithTag = new ArrayList<>();
    }
    this.interactsWithTag.add(interactsWithTagItem);
    return this;
  }

  /**
   * Get interactsWithTag
   * @return interactsWithTag
   */
  @javax.annotation.Nullable
  public List<EffectTag> getInteractsWithTag() {
    return interactsWithTag;
  }

  public void setInteractsWithTag(List<EffectTag> interactsWithTag) {
    this.interactsWithTag = interactsWithTag;
  }


  public Ability subIcon(String subIcon) {
    this.subIcon = subIcon;
    return this;
  }

  /**
   * Get subIcon
   * @return subIcon
   */
  @javax.annotation.Nullable
  public String getSubIcon() {
    return subIcon;
  }

  public void setSubIcon(String subIcon) {
    this.subIcon = subIcon;
  }


  public Ability aiParams(AbilityAIParams aiParams) {
    this.aiParams = aiParams;
    return this;
  }

  /**
   * Get aiParams
   * @return aiParams
   */
  @javax.annotation.Nullable
  public AbilityAIParams getAiParams() {
    return aiParams;
  }

  public void setAiParams(AbilityAIParams aiParams) {
    this.aiParams = aiParams;
  }


  public Ability cooldownType(AbilityCooldownType cooldownType) {
    this.cooldownType = cooldownType;
    return this;
  }

  /**
   * Get cooldownType
   * @return cooldownType
   */
  @javax.annotation.Nullable
  public AbilityCooldownType getCooldownType() {
    return cooldownType;
  }

  public void setCooldownType(AbilityCooldownType cooldownType) {
    this.cooldownType = cooldownType;
  }


  public Ability alwaysDisplayInBattleUi(Boolean alwaysDisplayInBattleUi) {
    this.alwaysDisplayInBattleUi = alwaysDisplayInBattleUi;
    return this;
  }

  /**
   * Get alwaysDisplayInBattleUi
   * @return alwaysDisplayInBattleUi
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysDisplayInBattleUi() {
    return alwaysDisplayInBattleUi;
  }

  public void setAlwaysDisplayInBattleUi(Boolean alwaysDisplayInBattleUi) {
    this.alwaysDisplayInBattleUi = alwaysDisplayInBattleUi;
  }


  public Ability highlightWhenReadyInBattleUi(Boolean highlightWhenReadyInBattleUi) {
    this.highlightWhenReadyInBattleUi = highlightWhenReadyInBattleUi;
    return this;
  }

  /**
   * Get highlightWhenReadyInBattleUi
   * @return highlightWhenReadyInBattleUi
   */
  @javax.annotation.Nullable
  public Boolean getHighlightWhenReadyInBattleUi() {
    return highlightWhenReadyInBattleUi;
  }

  public void setHighlightWhenReadyInBattleUi(Boolean highlightWhenReadyInBattleUi) {
    this.highlightWhenReadyInBattleUi = highlightWhenReadyInBattleUi;
  }


  public Ability hideCooldownDescription(Boolean hideCooldownDescription) {
    this.hideCooldownDescription = hideCooldownDescription;
    return this;
  }

  /**
   * Get hideCooldownDescription
   * @return hideCooldownDescription
   */
  @javax.annotation.Nullable
  public Boolean getHideCooldownDescription() {
    return hideCooldownDescription;
  }

  public void setHideCooldownDescription(Boolean hideCooldownDescription) {
    this.hideCooldownDescription = hideCooldownDescription;
  }


  public Ability blockingEffectId(String blockingEffectId) {
    this.blockingEffectId = blockingEffectId;
    return this;
  }

  /**
   * Get blockingEffectId
   * @return blockingEffectId
   */
  @javax.annotation.Nullable
  public String getBlockingEffectId() {
    return blockingEffectId;
  }

  public void setBlockingEffectId(String blockingEffectId) {
    this.blockingEffectId = blockingEffectId;
  }


  public Ability blockedLocKey(String blockedLocKey) {
    this.blockedLocKey = blockedLocKey;
    return this;
  }

  /**
   * Get blockedLocKey
   * @return blockedLocKey
   */
  @javax.annotation.Nullable
  public String getBlockedLocKey() {
    return blockedLocKey;
  }

  public void setBlockedLocKey(String blockedLocKey) {
    this.blockedLocKey = blockedLocKey;
  }


  public Ability ultimateChargeRequired(List<Integer> ultimateChargeRequired) {
    this.ultimateChargeRequired = ultimateChargeRequired;
    return this;
  }

  public Ability addUltimateChargeRequiredItem(Integer ultimateChargeRequiredItem) {
    if (this.ultimateChargeRequired == null) {
      this.ultimateChargeRequired = new ArrayList<>();
    }
    this.ultimateChargeRequired.add(ultimateChargeRequiredItem);
    return this;
  }

  /**
   * Get ultimateChargeRequired
   * @return ultimateChargeRequired
   */
  @javax.annotation.Nullable
  public List<Integer> getUltimateChargeRequired() {
    return ultimateChargeRequired;
  }

  public void setUltimateChargeRequired(List<Integer> ultimateChargeRequired) {
    this.ultimateChargeRequired = ultimateChargeRequired;
  }


  public Ability grantedPriority(Integer grantedPriority) {
    this.grantedPriority = grantedPriority;
    return this;
  }

  /**
   * Get grantedPriority
   * @return grantedPriority
   */
  @javax.annotation.Nullable
  public Integer getGrantedPriority() {
    return grantedPriority;
  }

  public void setGrantedPriority(Integer grantedPriority) {
    this.grantedPriority = grantedPriority;
  }


  public Ability synergy(AbilitySynergy synergy) {
    this.synergy = synergy;
    return this;
  }

  /**
   * Get synergy
   * @return synergy
   */
  @javax.annotation.Nullable
  public AbilitySynergy getSynergy() {
    return synergy;
  }

  public void setSynergy(AbilitySynergy synergy) {
    this.synergy = synergy;
  }


  public Ability visualTarget(EffectTarget visualTarget) {
    this.visualTarget = visualTarget;
    return this;
  }

  /**
   * Get visualTarget
   * @return visualTarget
   */
  @javax.annotation.Nullable
  public EffectTarget getVisualTarget() {
    return visualTarget;
  }

  public void setVisualTarget(EffectTarget visualTarget) {
    this.visualTarget = visualTarget;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ability ability = (Ability) o;
    return Objects.equals(this.id, ability.id) &&
        Objects.equals(this.nameKey, ability.nameKey) &&
        Objects.equals(this.descKey, ability.descKey) &&
        Objects.equals(this.prefabName, ability.prefabName) &&
        Objects.equals(this.triggerCondition, ability.triggerCondition) &&
        Objects.equals(this.stackingLineOverride, ability.stackingLineOverride) &&
        Objects.equals(this.tier, ability.tier) &&
        Objects.equals(this.cooldown, ability.cooldown) &&
        Objects.equals(this.icon, ability.icon) &&
        Objects.equals(this.applyTypeTooltipKey, ability.applyTypeTooltipKey) &&
        Objects.equals(this.descriptiveTag, ability.descriptiveTag) &&
        Objects.equals(this.effectReference, ability.effectReference) &&
        Objects.equals(this.confirmationMessage, ability.confirmationMessage) &&
        Objects.equals(this.buttonLocation, ability.buttonLocation) &&
        Objects.equals(this.shortDescKey, ability.shortDescKey) &&
        Objects.equals(this.abilityType, ability.abilityType) &&
        Objects.equals(this.detailLocation, ability.detailLocation) &&
        Objects.equals(this.allyTargetingRuleId, ability.allyTargetingRuleId) &&
        Objects.equals(this.useAsReinforcementDesc, ability.useAsReinforcementDesc) &&
        Objects.equals(this.interactsWithTag, ability.interactsWithTag) &&
        Objects.equals(this.subIcon, ability.subIcon) &&
        Objects.equals(this.aiParams, ability.aiParams) &&
        Objects.equals(this.cooldownType, ability.cooldownType) &&
        Objects.equals(this.alwaysDisplayInBattleUi, ability.alwaysDisplayInBattleUi) &&
        Objects.equals(this.highlightWhenReadyInBattleUi, ability.highlightWhenReadyInBattleUi) &&
        Objects.equals(this.hideCooldownDescription, ability.hideCooldownDescription) &&
        Objects.equals(this.blockingEffectId, ability.blockingEffectId) &&
        Objects.equals(this.blockedLocKey, ability.blockedLocKey) &&
        Objects.equals(this.ultimateChargeRequired, ability.ultimateChargeRequired) &&
        Objects.equals(this.grantedPriority, ability.grantedPriority) &&
        Objects.equals(this.synergy, ability.synergy) &&
        Objects.equals(this.visualTarget, ability.visualTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, descKey, prefabName, triggerCondition, stackingLineOverride, tier, cooldown, icon, applyTypeTooltipKey, descriptiveTag, effectReference, confirmationMessage, buttonLocation, shortDescKey, abilityType, detailLocation, allyTargetingRuleId, useAsReinforcementDesc, interactsWithTag, subIcon, aiParams, cooldownType, alwaysDisplayInBattleUi, highlightWhenReadyInBattleUi, hideCooldownDescription, blockingEffectId, blockedLocKey, ultimateChargeRequired, grantedPriority, synergy, visualTarget);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ability {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    prefabName: ").append(toIndentedString(prefabName)).append("\n");
    sb.append("    triggerCondition: ").append(toIndentedString(triggerCondition)).append("\n");
    sb.append("    stackingLineOverride: ").append(toIndentedString(stackingLineOverride)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    cooldown: ").append(toIndentedString(cooldown)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    applyTypeTooltipKey: ").append(toIndentedString(applyTypeTooltipKey)).append("\n");
    sb.append("    descriptiveTag: ").append(toIndentedString(descriptiveTag)).append("\n");
    sb.append("    effectReference: ").append(toIndentedString(effectReference)).append("\n");
    sb.append("    confirmationMessage: ").append(toIndentedString(confirmationMessage)).append("\n");
    sb.append("    buttonLocation: ").append(toIndentedString(buttonLocation)).append("\n");
    sb.append("    shortDescKey: ").append(toIndentedString(shortDescKey)).append("\n");
    sb.append("    abilityType: ").append(toIndentedString(abilityType)).append("\n");
    sb.append("    detailLocation: ").append(toIndentedString(detailLocation)).append("\n");
    sb.append("    allyTargetingRuleId: ").append(toIndentedString(allyTargetingRuleId)).append("\n");
    sb.append("    useAsReinforcementDesc: ").append(toIndentedString(useAsReinforcementDesc)).append("\n");
    sb.append("    interactsWithTag: ").append(toIndentedString(interactsWithTag)).append("\n");
    sb.append("    subIcon: ").append(toIndentedString(subIcon)).append("\n");
    sb.append("    aiParams: ").append(toIndentedString(aiParams)).append("\n");
    sb.append("    cooldownType: ").append(toIndentedString(cooldownType)).append("\n");
    sb.append("    alwaysDisplayInBattleUi: ").append(toIndentedString(alwaysDisplayInBattleUi)).append("\n");
    sb.append("    highlightWhenReadyInBattleUi: ").append(toIndentedString(highlightWhenReadyInBattleUi)).append("\n");
    sb.append("    hideCooldownDescription: ").append(toIndentedString(hideCooldownDescription)).append("\n");
    sb.append("    blockingEffectId: ").append(toIndentedString(blockingEffectId)).append("\n");
    sb.append("    blockedLocKey: ").append(toIndentedString(blockedLocKey)).append("\n");
    sb.append("    ultimateChargeRequired: ").append(toIndentedString(ultimateChargeRequired)).append("\n");
    sb.append("    grantedPriority: ").append(toIndentedString(grantedPriority)).append("\n");
    sb.append("    synergy: ").append(toIndentedString(synergy)).append("\n");
    sb.append("    visualTarget: ").append(toIndentedString(visualTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("descKey");
    openapiFields.add("prefabName");
    openapiFields.add("triggerCondition");
    openapiFields.add("stackingLineOverride");
    openapiFields.add("tier");
    openapiFields.add("cooldown");
    openapiFields.add("icon");
    openapiFields.add("applyTypeTooltipKey");
    openapiFields.add("descriptiveTag");
    openapiFields.add("effectReference");
    openapiFields.add("confirmationMessage");
    openapiFields.add("buttonLocation");
    openapiFields.add("shortDescKey");
    openapiFields.add("abilityType");
    openapiFields.add("detailLocation");
    openapiFields.add("allyTargetingRuleId");
    openapiFields.add("useAsReinforcementDesc");
    openapiFields.add("interactsWithTag");
    openapiFields.add("subIcon");
    openapiFields.add("aiParams");
    openapiFields.add("cooldownType");
    openapiFields.add("alwaysDisplayInBattleUi");
    openapiFields.add("highlightWhenReadyInBattleUi");
    openapiFields.add("hideCooldownDescription");
    openapiFields.add("blockingEffectId");
    openapiFields.add("blockedLocKey");
    openapiFields.add("ultimateChargeRequired");
    openapiFields.add("grantedPriority");
    openapiFields.add("synergy");
    openapiFields.add("visualTarget");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ability is not found in the empty JSON string", Ability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      if ((jsonObj.get("prefabName") != null && !jsonObj.get("prefabName").isJsonNull()) && !jsonObj.get("prefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefabName").toString()));
      }
      if (jsonObj.get("triggerCondition") != null && !jsonObj.get("triggerCondition").isJsonNull()) {
        JsonArray jsonArraytriggerCondition = jsonObj.getAsJsonArray("triggerCondition");
        if (jsonArraytriggerCondition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggerCondition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggerCondition` to be an array in the JSON string but got `%s`", jsonObj.get("triggerCondition").toString()));
          }

          // validate the optional field `triggerCondition` (array)
          for (int i = 0; i < jsonArraytriggerCondition.size(); i++) {
            BattleCondition.validateJsonElement(jsonArraytriggerCondition.get(i));
          };
        }
      }
      if ((jsonObj.get("stackingLineOverride") != null && !jsonObj.get("stackingLineOverride").isJsonNull()) && !jsonObj.get("stackingLineOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackingLineOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackingLineOverride").toString()));
      }
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        JsonArray jsonArraytier = jsonObj.getAsJsonArray("tier");
        if (jsonArraytier != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tier").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tier` to be an array in the JSON string but got `%s`", jsonObj.get("tier").toString()));
          }

          // validate the optional field `tier` (array)
          for (int i = 0; i < jsonArraytier.size(); i++) {
            AbilityTier.validateJsonElement(jsonArraytier.get(i));
          };
        }
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("applyTypeTooltipKey") != null && !jsonObj.get("applyTypeTooltipKey").isJsonNull()) && !jsonObj.get("applyTypeTooltipKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applyTypeTooltipKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applyTypeTooltipKey").toString()));
      }
      if (jsonObj.get("descriptiveTag") != null && !jsonObj.get("descriptiveTag").isJsonNull()) {
        JsonArray jsonArraydescriptiveTag = jsonObj.getAsJsonArray("descriptiveTag");
        if (jsonArraydescriptiveTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("descriptiveTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `descriptiveTag` to be an array in the JSON string but got `%s`", jsonObj.get("descriptiveTag").toString()));
          }

          // validate the optional field `descriptiveTag` (array)
          for (int i = 0; i < jsonArraydescriptiveTag.size(); i++) {
            EffectTag.validateJsonElement(jsonArraydescriptiveTag.get(i));
          };
        }
      }
      if (jsonObj.get("effectReference") != null && !jsonObj.get("effectReference").isJsonNull()) {
        JsonArray jsonArrayeffectReference = jsonObj.getAsJsonArray("effectReference");
        if (jsonArrayeffectReference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectReference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectReference` to be an array in the JSON string but got `%s`", jsonObj.get("effectReference").toString()));
          }

          // validate the optional field `effectReference` (array)
          for (int i = 0; i < jsonArrayeffectReference.size(); i++) {
            EffectReference.validateJsonElement(jsonArrayeffectReference.get(i));
          };
        }
      }
      // validate the optional field `confirmationMessage`
      if (jsonObj.get("confirmationMessage") != null && !jsonObj.get("confirmationMessage").isJsonNull()) {
        MessageDialog.validateJsonElement(jsonObj.get("confirmationMessage"));
      }
      // validate the optional field `buttonLocation`
      if (jsonObj.get("buttonLocation") != null && !jsonObj.get("buttonLocation").isJsonNull()) {
        AbilityButtonLocationType.validateJsonElement(jsonObj.get("buttonLocation"));
      }
      if ((jsonObj.get("shortDescKey") != null && !jsonObj.get("shortDescKey").isJsonNull()) && !jsonObj.get("shortDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescKey").toString()));
      }
      // validate the optional field `abilityType`
      if (jsonObj.get("abilityType") != null && !jsonObj.get("abilityType").isJsonNull()) {
        AbilityType.validateJsonElement(jsonObj.get("abilityType"));
      }
      // validate the optional field `detailLocation`
      if (jsonObj.get("detailLocation") != null && !jsonObj.get("detailLocation").isJsonNull()) {
        UnitDetailsAbilityLocation.validateJsonElement(jsonObj.get("detailLocation"));
      }
      if ((jsonObj.get("allyTargetingRuleId") != null && !jsonObj.get("allyTargetingRuleId").isJsonNull()) && !jsonObj.get("allyTargetingRuleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allyTargetingRuleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allyTargetingRuleId").toString()));
      }
      if (jsonObj.get("interactsWithTag") != null && !jsonObj.get("interactsWithTag").isJsonNull()) {
        JsonArray jsonArrayinteractsWithTag = jsonObj.getAsJsonArray("interactsWithTag");
        if (jsonArrayinteractsWithTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interactsWithTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interactsWithTag` to be an array in the JSON string but got `%s`", jsonObj.get("interactsWithTag").toString()));
          }

          // validate the optional field `interactsWithTag` (array)
          for (int i = 0; i < jsonArrayinteractsWithTag.size(); i++) {
            EffectTag.validateJsonElement(jsonArrayinteractsWithTag.get(i));
          };
        }
      }
      if ((jsonObj.get("subIcon") != null && !jsonObj.get("subIcon").isJsonNull()) && !jsonObj.get("subIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subIcon").toString()));
      }
      // validate the optional field `aiParams`
      if (jsonObj.get("aiParams") != null && !jsonObj.get("aiParams").isJsonNull()) {
        AbilityAIParams.validateJsonElement(jsonObj.get("aiParams"));
      }
      // validate the optional field `cooldownType`
      if (jsonObj.get("cooldownType") != null && !jsonObj.get("cooldownType").isJsonNull()) {
        AbilityCooldownType.validateJsonElement(jsonObj.get("cooldownType"));
      }
      if ((jsonObj.get("blockingEffectId") != null && !jsonObj.get("blockingEffectId").isJsonNull()) && !jsonObj.get("blockingEffectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockingEffectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockingEffectId").toString()));
      }
      if ((jsonObj.get("blockedLocKey") != null && !jsonObj.get("blockedLocKey").isJsonNull()) && !jsonObj.get("blockedLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockedLocKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ultimateChargeRequired") != null && !jsonObj.get("ultimateChargeRequired").isJsonNull() && !jsonObj.get("ultimateChargeRequired").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ultimateChargeRequired` to be an array in the JSON string but got `%s`", jsonObj.get("ultimateChargeRequired").toString()));
      }
      // validate the optional field `synergy`
      if (jsonObj.get("synergy") != null && !jsonObj.get("synergy").isJsonNull()) {
        AbilitySynergy.validateJsonElement(jsonObj.get("synergy"));
      }
      // validate the optional field `visualTarget`
      if (jsonObj.get("visualTarget") != null && !jsonObj.get("visualTarget").isJsonNull()) {
        EffectTarget.validateJsonElement(jsonObj.get("visualTarget"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ability.class));

       return (TypeAdapter<T>) new TypeAdapter<Ability>() {
           @Override
           public void write(JsonWriter out, Ability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ability
   * @throws IOException if the JSON string is invalid with respect to Ability
   */
  public static Ability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ability.class);
  }

  /**
   * Convert an instance of Ability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

