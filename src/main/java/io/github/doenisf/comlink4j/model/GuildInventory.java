/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GuildInventory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GuildInventory {
  public static final String SERIALIZED_NAME_CURRENCY_ITEM = "currencyItem";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ITEM)
  private List<CurrencyItem> currencyItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_DAILY_LIMIT = "currentDailyLimit";
  @SerializedName(SERIALIZED_NAME_CURRENT_DAILY_LIMIT)
  private List<CurrencyItem> currentDailyLimit = new ArrayList<>();

  public GuildInventory() {
  }

  public GuildInventory currencyItem(List<CurrencyItem> currencyItem) {
    this.currencyItem = currencyItem;
    return this;
  }

  public GuildInventory addCurrencyItemItem(CurrencyItem currencyItemItem) {
    if (this.currencyItem == null) {
      this.currencyItem = new ArrayList<>();
    }
    this.currencyItem.add(currencyItemItem);
    return this;
  }

  /**
   * Get currencyItem
   * @return currencyItem
   */
  @javax.annotation.Nullable
  public List<CurrencyItem> getCurrencyItem() {
    return currencyItem;
  }

  public void setCurrencyItem(List<CurrencyItem> currencyItem) {
    this.currencyItem = currencyItem;
  }


  public GuildInventory currentDailyLimit(List<CurrencyItem> currentDailyLimit) {
    this.currentDailyLimit = currentDailyLimit;
    return this;
  }

  public GuildInventory addCurrentDailyLimitItem(CurrencyItem currentDailyLimitItem) {
    if (this.currentDailyLimit == null) {
      this.currentDailyLimit = new ArrayList<>();
    }
    this.currentDailyLimit.add(currentDailyLimitItem);
    return this;
  }

  /**
   * Get currentDailyLimit
   * @return currentDailyLimit
   */
  @javax.annotation.Nullable
  public List<CurrencyItem> getCurrentDailyLimit() {
    return currentDailyLimit;
  }

  public void setCurrentDailyLimit(List<CurrencyItem> currentDailyLimit) {
    this.currentDailyLimit = currentDailyLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuildInventory guildInventory = (GuildInventory) o;
    return Objects.equals(this.currencyItem, guildInventory.currencyItem) &&
        Objects.equals(this.currentDailyLimit, guildInventory.currentDailyLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyItem, currentDailyLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuildInventory {\n");
    sb.append("    currencyItem: ").append(toIndentedString(currencyItem)).append("\n");
    sb.append("    currentDailyLimit: ").append(toIndentedString(currentDailyLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyItem");
    openapiFields.add("currentDailyLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuildInventory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuildInventory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuildInventory is not found in the empty JSON string", GuildInventory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuildInventory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuildInventory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("currencyItem") != null && !jsonObj.get("currencyItem").isJsonNull()) {
        JsonArray jsonArraycurrencyItem = jsonObj.getAsJsonArray("currencyItem");
        if (jsonArraycurrencyItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currencyItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currencyItem` to be an array in the JSON string but got `%s`", jsonObj.get("currencyItem").toString()));
          }

          // validate the optional field `currencyItem` (array)
          for (int i = 0; i < jsonArraycurrencyItem.size(); i++) {
            CurrencyItem.validateJsonElement(jsonArraycurrencyItem.get(i));
          };
        }
      }
      if (jsonObj.get("currentDailyLimit") != null && !jsonObj.get("currentDailyLimit").isJsonNull()) {
        JsonArray jsonArraycurrentDailyLimit = jsonObj.getAsJsonArray("currentDailyLimit");
        if (jsonArraycurrentDailyLimit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currentDailyLimit").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currentDailyLimit` to be an array in the JSON string but got `%s`", jsonObj.get("currentDailyLimit").toString()));
          }

          // validate the optional field `currentDailyLimit` (array)
          for (int i = 0; i < jsonArraycurrentDailyLimit.size(); i++) {
            CurrencyItem.validateJsonElement(jsonArraycurrentDailyLimit.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuildInventory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuildInventory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuildInventory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuildInventory.class));

       return (TypeAdapter<T>) new TypeAdapter<GuildInventory>() {
           @Override
           public void write(JsonWriter out, GuildInventory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuildInventory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuildInventory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuildInventory
   * @throws IOException if the JSON string is invalid with respect to GuildInventory
   */
  public static GuildInventory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuildInventory.class);
  }

  /**
   * Convert an instance of GuildInventory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

