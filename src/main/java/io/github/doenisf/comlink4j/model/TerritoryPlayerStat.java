/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.*;

/**
 * TerritoryPlayerStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryPlayerStat {
  public static final String SERIALIZED_NAME_MEMBER_ID = "memberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private String memberId;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Long score;

  public static final String SERIALIZED_NAME_COVERT_ZONE_RESULT = "covertZoneResult";
  @SerializedName(SERIALIZED_NAME_COVERT_ZONE_RESULT)
  private List<TerritoryStatCovertZoneResult> covertZoneResult = new ArrayList<>();

  public TerritoryPlayerStat() {
  }

  public TerritoryPlayerStat memberId(String memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Get memberId
   * @return memberId
   */
  @javax.annotation.Nullable
  public String getMemberId() {
    return memberId;
  }

  public void setMemberId(String memberId) {
    this.memberId = memberId;
  }


  public TerritoryPlayerStat score(Long score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Long getScore() {
    return score;
  }

  public void setScore(Long score) {
    this.score = score;
  }


  public TerritoryPlayerStat covertZoneResult(List<TerritoryStatCovertZoneResult> covertZoneResult) {
    this.covertZoneResult = covertZoneResult;
    return this;
  }

  public TerritoryPlayerStat addCovertZoneResultItem(TerritoryStatCovertZoneResult covertZoneResultItem) {
    if (this.covertZoneResult == null) {
      this.covertZoneResult = new ArrayList<>();
    }
    this.covertZoneResult.add(covertZoneResultItem);
    return this;
  }

  /**
   * Get covertZoneResult
   * @return covertZoneResult
   */
  @javax.annotation.Nullable
  public List<TerritoryStatCovertZoneResult> getCovertZoneResult() {
    return covertZoneResult;
  }

  public void setCovertZoneResult(List<TerritoryStatCovertZoneResult> covertZoneResult) {
    this.covertZoneResult = covertZoneResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryPlayerStat territoryPlayerStat = (TerritoryPlayerStat) o;
    return Objects.equals(this.memberId, territoryPlayerStat.memberId) &&
        Objects.equals(this.score, territoryPlayerStat.score) &&
        Objects.equals(this.covertZoneResult, territoryPlayerStat.covertZoneResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberId, score, covertZoneResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryPlayerStat {\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    covertZoneResult: ").append(toIndentedString(covertZoneResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("memberId");
    openapiFields.add("score");
    openapiFields.add("covertZoneResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryPlayerStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryPlayerStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryPlayerStat is not found in the empty JSON string", TerritoryPlayerStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryPlayerStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryPlayerStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("memberId") != null && !jsonObj.get("memberId").isJsonNull()) && !jsonObj.get("memberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberId").toString()));
      }
      if (jsonObj.get("covertZoneResult") != null && !jsonObj.get("covertZoneResult").isJsonNull()) {
        JsonArray jsonArraycovertZoneResult = jsonObj.getAsJsonArray("covertZoneResult");
        if (jsonArraycovertZoneResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("covertZoneResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `covertZoneResult` to be an array in the JSON string but got `%s`", jsonObj.get("covertZoneResult").toString()));
          }

          // validate the optional field `covertZoneResult` (array)
          for (int i = 0; i < jsonArraycovertZoneResult.size(); i++) {
            TerritoryStatCovertZoneResult.validateJsonElement(jsonArraycovertZoneResult.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryPlayerStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryPlayerStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryPlayerStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryPlayerStat.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryPlayerStat>() {
           @Override
           public void write(JsonWriter out, TerritoryPlayerStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryPlayerStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryPlayerStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryPlayerStat
   * @throws IOException if the JSON string is invalid with respect to TerritoryPlayerStat
   */
  public static TerritoryPlayerStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryPlayerStat.class);
  }

  /**
   * Convert an instance of TerritoryPlayerStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

