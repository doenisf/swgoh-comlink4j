/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.Rarity;
import io.github.doenisf.comlink4j.RelicTier;
import io.github.doenisf.comlink4j.SkillUpgrade;
import io.github.doenisf.comlink4j.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * UnitUpgrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class UnitUpgrade {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private Rarity rarity;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private UnitTier tier;

  public static final String SERIALIZED_NAME_SKILL_TIER = "skillTier";
  @SerializedName(SERIALIZED_NAME_SKILL_TIER)
  private Integer skillTier;

  public static final String SERIALIZED_NAME_SKILL_OVERRIDE = "skillOverride";
  @SerializedName(SERIALIZED_NAME_SKILL_OVERRIDE)
  private List<SkillUpgrade> skillOverride = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELIC_TIER = "relicTier";
  @SerializedName(SERIALIZED_NAME_RELIC_TIER)
  private RelicTier relicTier;

  public UnitUpgrade() {
  }

  public UnitUpgrade id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UnitUpgrade level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public UnitUpgrade rarity(Rarity rarity) {
    this.rarity = rarity;
    return this;
  }

  /**
   * Get rarity
   * @return rarity
   */
  @javax.annotation.Nullable
  public Rarity getRarity() {
    return rarity;
  }

  public void setRarity(Rarity rarity) {
    this.rarity = rarity;
  }


  public UnitUpgrade tier(UnitTier tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public UnitTier getTier() {
    return tier;
  }

  public void setTier(UnitTier tier) {
    this.tier = tier;
  }


  public UnitUpgrade skillTier(Integer skillTier) {
    this.skillTier = skillTier;
    return this;
  }

  /**
   * Get skillTier
   * @return skillTier
   */
  @javax.annotation.Nullable
  public Integer getSkillTier() {
    return skillTier;
  }

  public void setSkillTier(Integer skillTier) {
    this.skillTier = skillTier;
  }


  public UnitUpgrade skillOverride(List<SkillUpgrade> skillOverride) {
    this.skillOverride = skillOverride;
    return this;
  }

  public UnitUpgrade addSkillOverrideItem(SkillUpgrade skillOverrideItem) {
    if (this.skillOverride == null) {
      this.skillOverride = new ArrayList<>();
    }
    this.skillOverride.add(skillOverrideItem);
    return this;
  }

  /**
   * Get skillOverride
   * @return skillOverride
   */
  @javax.annotation.Nullable
  public List<SkillUpgrade> getSkillOverride() {
    return skillOverride;
  }

  public void setSkillOverride(List<SkillUpgrade> skillOverride) {
    this.skillOverride = skillOverride;
  }


  public UnitUpgrade relicTier(RelicTier relicTier) {
    this.relicTier = relicTier;
    return this;
  }

  /**
   * Get relicTier
   * @return relicTier
   */
  @javax.annotation.Nullable
  public RelicTier getRelicTier() {
    return relicTier;
  }

  public void setRelicTier(RelicTier relicTier) {
    this.relicTier = relicTier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitUpgrade unitUpgrade = (UnitUpgrade) o;
    return Objects.equals(this.id, unitUpgrade.id) &&
        Objects.equals(this.level, unitUpgrade.level) &&
        Objects.equals(this.rarity, unitUpgrade.rarity) &&
        Objects.equals(this.tier, unitUpgrade.tier) &&
        Objects.equals(this.skillTier, unitUpgrade.skillTier) &&
        Objects.equals(this.skillOverride, unitUpgrade.skillOverride) &&
        Objects.equals(this.relicTier, unitUpgrade.relicTier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, level, rarity, tier, skillTier, skillOverride, relicTier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitUpgrade {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    skillTier: ").append(toIndentedString(skillTier)).append("\n");
    sb.append("    skillOverride: ").append(toIndentedString(skillOverride)).append("\n");
    sb.append("    relicTier: ").append(toIndentedString(relicTier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("level");
    openapiFields.add("rarity");
    openapiFields.add("tier");
    openapiFields.add("skillTier");
    openapiFields.add("skillOverride");
    openapiFields.add("relicTier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnitUpgrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitUpgrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitUpgrade is not found in the empty JSON string", UnitUpgrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnitUpgrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitUpgrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `rarity`
      if (jsonObj.get("rarity") != null && !jsonObj.get("rarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("rarity"));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("tier"));
      }
      if (jsonObj.get("skillOverride") != null && !jsonObj.get("skillOverride").isJsonNull()) {
        JsonArray jsonArrayskillOverride = jsonObj.getAsJsonArray("skillOverride");
        if (jsonArrayskillOverride != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skillOverride").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skillOverride` to be an array in the JSON string but got `%s`", jsonObj.get("skillOverride").toString()));
          }

          // validate the optional field `skillOverride` (array)
          for (int i = 0; i < jsonArrayskillOverride.size(); i++) {
            SkillUpgrade.validateJsonElement(jsonArrayskillOverride.get(i));
          };
        }
      }
      // validate the optional field `relicTier`
      if (jsonObj.get("relicTier") != null && !jsonObj.get("relicTier").isJsonNull()) {
        RelicTier.validateJsonElement(jsonObj.get("relicTier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitUpgrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitUpgrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitUpgrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitUpgrade.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitUpgrade>() {
           @Override
           public void write(JsonWriter out, UnitUpgrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitUpgrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnitUpgrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnitUpgrade
   * @throws IOException if the JSON string is invalid with respect to UnitUpgrade
   */
  public static UnitUpgrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitUpgrade.class);
  }

  /**
   * Convert an instance of UnitUpgrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

