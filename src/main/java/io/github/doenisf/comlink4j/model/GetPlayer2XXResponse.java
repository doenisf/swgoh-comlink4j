/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.Datacron;
import io.github.doenisf.comlink4j.model.PlayerPortrait;
import io.github.doenisf.comlink4j.model.PlayerProfileStat;
import io.github.doenisf.comlink4j.model.PlayerPvpProfile;
import io.github.doenisf.comlink4j.model.PlayerRating;
import io.github.doenisf.comlink4j.model.PlayerTitle;
import io.github.doenisf.comlink4j.model.SeasonStatus;
import io.github.doenisf.comlink4j.model.Unit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * GetPlayer2XXResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GetPlayer2XXResponse {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_ALLY_CODE = "allyCode";
  @SerializedName(SERIALIZED_NAME_ALLY_CODE)
  private Long allyCode;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_ROSTER_UNIT = "rosterUnit";
  @SerializedName(SERIALIZED_NAME_ROSTER_UNIT)
  private List<Unit> rosterUnit = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILE_STAT = "profileStat";
  @SerializedName(SERIALIZED_NAME_PROFILE_STAT)
  private List<PlayerProfileStat> profileStat = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_ID = "guildId";
  @SerializedName(SERIALIZED_NAME_GUILD_ID)
  private String guildId;

  public static final String SERIALIZED_NAME_GUILD_NAME = "guildName";
  @SerializedName(SERIALIZED_NAME_GUILD_NAME)
  private String guildName;

  public static final String SERIALIZED_NAME_GUILD_LOGO_BACKGROUND = "guildLogoBackground";
  @SerializedName(SERIALIZED_NAME_GUILD_LOGO_BACKGROUND)
  private String guildLogoBackground;

  public static final String SERIALIZED_NAME_GUILD_BANNER_COLOR = "guildBannerColor";
  @SerializedName(SERIALIZED_NAME_GUILD_BANNER_COLOR)
  private String guildBannerColor;

  public static final String SERIALIZED_NAME_GUILD_BANNER_LOGO = "guildBannerLogo";
  @SerializedName(SERIALIZED_NAME_GUILD_BANNER_LOGO)
  private String guildBannerLogo;

  public static final String SERIALIZED_NAME_PVP_PROFILE = "pvpProfile";
  @SerializedName(SERIALIZED_NAME_PVP_PROFILE)
  private List<PlayerPvpProfile> pvpProfile = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_PLAYER_TITLE = "selectedPlayerTitle";
  @SerializedName(SERIALIZED_NAME_SELECTED_PLAYER_TITLE)
  private PlayerTitle selectedPlayerTitle;

  public static final String SERIALIZED_NAME_UNLOCKED_PLAYER_TITLE = "unlockedPlayerTitle";
  @SerializedName(SERIALIZED_NAME_UNLOCKED_PLAYER_TITLE)
  private List<PlayerTitle> unlockedPlayerTitle = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_TYPE_ID = "guildTypeId";
  @SerializedName(SERIALIZED_NAME_GUILD_TYPE_ID)
  private String guildTypeId;

  public static final String SERIALIZED_NAME_LOCAL_TIME_ZONE_OFFSET_MINUTES = "localTimeZoneOffsetMinutes";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME_ZONE_OFFSET_MINUTES)
  private Integer localTimeZoneOffsetMinutes;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_TIME = "lastActivityTime";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_TIME)
  private Long lastActivityTime;

  public static final String SERIALIZED_NAME_SELECTED_PLAYER_PORTRAIT = "selectedPlayerPortrait";
  @SerializedName(SERIALIZED_NAME_SELECTED_PLAYER_PORTRAIT)
  private PlayerPortrait selectedPlayerPortrait;

  public static final String SERIALIZED_NAME_UNLOCKED_PLAYER_PORTRAIT = "unlockedPlayerPortrait";
  @SerializedName(SERIALIZED_NAME_UNLOCKED_PLAYER_PORTRAIT)
  private List<PlayerPortrait> unlockedPlayerPortrait = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_STATUS = "seasonStatus";
  @SerializedName(SERIALIZED_NAME_SEASON_STATUS)
  private List<SeasonStatus> seasonStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFETIME_SEASON_SCORE = "lifetimeSeasonScore";
  @SerializedName(SERIALIZED_NAME_LIFETIME_SEASON_SCORE)
  private Long lifetimeSeasonScore;

  public static final String SERIALIZED_NAME_PLAYER_RATING = "playerRating";
  @SerializedName(SERIALIZED_NAME_PLAYER_RATING)
  private PlayerRating playerRating;

  public static final String SERIALIZED_NAME_DATACRON = "datacron";
  @SerializedName(SERIALIZED_NAME_DATACRON)
  private List<Datacron> datacron = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUCLEUS_ID = "nucleusId";
  @SerializedName(SERIALIZED_NAME_NUCLEUS_ID)
  private String nucleusId;

  public GetPlayer2XXResponse() {
  }

  public GetPlayer2XXResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetPlayer2XXResponse level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public GetPlayer2XXResponse allyCode(Long allyCode) {
    this.allyCode = allyCode;
    return this;
  }

  /**
   * Get allyCode
   * @return allyCode
   */
  @javax.annotation.Nullable
  public Long getAllyCode() {
    return allyCode;
  }

  public void setAllyCode(Long allyCode) {
    this.allyCode = allyCode;
  }


  public GetPlayer2XXResponse playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }


  public GetPlayer2XXResponse rosterUnit(List<Unit> rosterUnit) {
    this.rosterUnit = rosterUnit;
    return this;
  }

  public GetPlayer2XXResponse addRosterUnitItem(Unit rosterUnitItem) {
    if (this.rosterUnit == null) {
      this.rosterUnit = new ArrayList<>();
    }
    this.rosterUnit.add(rosterUnitItem);
    return this;
  }

  /**
   * Get rosterUnit
   * @return rosterUnit
   */
  @javax.annotation.Nullable
  public List<Unit> getRosterUnit() {
    return rosterUnit;
  }

  public void setRosterUnit(List<Unit> rosterUnit) {
    this.rosterUnit = rosterUnit;
  }


  public GetPlayer2XXResponse profileStat(List<PlayerProfileStat> profileStat) {
    this.profileStat = profileStat;
    return this;
  }

  public GetPlayer2XXResponse addProfileStatItem(PlayerProfileStat profileStatItem) {
    if (this.profileStat == null) {
      this.profileStat = new ArrayList<>();
    }
    this.profileStat.add(profileStatItem);
    return this;
  }

  /**
   * Get profileStat
   * @return profileStat
   */
  @javax.annotation.Nullable
  public List<PlayerProfileStat> getProfileStat() {
    return profileStat;
  }

  public void setProfileStat(List<PlayerProfileStat> profileStat) {
    this.profileStat = profileStat;
  }


  public GetPlayer2XXResponse guildId(String guildId) {
    this.guildId = guildId;
    return this;
  }

  /**
   * Get guildId
   * @return guildId
   */
  @javax.annotation.Nullable
  public String getGuildId() {
    return guildId;
  }

  public void setGuildId(String guildId) {
    this.guildId = guildId;
  }


  public GetPlayer2XXResponse guildName(String guildName) {
    this.guildName = guildName;
    return this;
  }

  /**
   * Get guildName
   * @return guildName
   */
  @javax.annotation.Nullable
  public String getGuildName() {
    return guildName;
  }

  public void setGuildName(String guildName) {
    this.guildName = guildName;
  }


  public GetPlayer2XXResponse guildLogoBackground(String guildLogoBackground) {
    this.guildLogoBackground = guildLogoBackground;
    return this;
  }

  /**
   * Get guildLogoBackground
   * @return guildLogoBackground
   */
  @javax.annotation.Nullable
  public String getGuildLogoBackground() {
    return guildLogoBackground;
  }

  public void setGuildLogoBackground(String guildLogoBackground) {
    this.guildLogoBackground = guildLogoBackground;
  }


  public GetPlayer2XXResponse guildBannerColor(String guildBannerColor) {
    this.guildBannerColor = guildBannerColor;
    return this;
  }

  /**
   * Get guildBannerColor
   * @return guildBannerColor
   */
  @javax.annotation.Nullable
  public String getGuildBannerColor() {
    return guildBannerColor;
  }

  public void setGuildBannerColor(String guildBannerColor) {
    this.guildBannerColor = guildBannerColor;
  }


  public GetPlayer2XXResponse guildBannerLogo(String guildBannerLogo) {
    this.guildBannerLogo = guildBannerLogo;
    return this;
  }

  /**
   * Get guildBannerLogo
   * @return guildBannerLogo
   */
  @javax.annotation.Nullable
  public String getGuildBannerLogo() {
    return guildBannerLogo;
  }

  public void setGuildBannerLogo(String guildBannerLogo) {
    this.guildBannerLogo = guildBannerLogo;
  }


  public GetPlayer2XXResponse pvpProfile(List<PlayerPvpProfile> pvpProfile) {
    this.pvpProfile = pvpProfile;
    return this;
  }

  public GetPlayer2XXResponse addPvpProfileItem(PlayerPvpProfile pvpProfileItem) {
    if (this.pvpProfile == null) {
      this.pvpProfile = new ArrayList<>();
    }
    this.pvpProfile.add(pvpProfileItem);
    return this;
  }

  /**
   * Get pvpProfile
   * @return pvpProfile
   */
  @javax.annotation.Nullable
  public List<PlayerPvpProfile> getPvpProfile() {
    return pvpProfile;
  }

  public void setPvpProfile(List<PlayerPvpProfile> pvpProfile) {
    this.pvpProfile = pvpProfile;
  }


  public GetPlayer2XXResponse selectedPlayerTitle(PlayerTitle selectedPlayerTitle) {
    this.selectedPlayerTitle = selectedPlayerTitle;
    return this;
  }

  /**
   * Get selectedPlayerTitle
   * @return selectedPlayerTitle
   */
  @javax.annotation.Nullable
  public PlayerTitle getSelectedPlayerTitle() {
    return selectedPlayerTitle;
  }

  public void setSelectedPlayerTitle(PlayerTitle selectedPlayerTitle) {
    this.selectedPlayerTitle = selectedPlayerTitle;
  }


  public GetPlayer2XXResponse unlockedPlayerTitle(List<PlayerTitle> unlockedPlayerTitle) {
    this.unlockedPlayerTitle = unlockedPlayerTitle;
    return this;
  }

  public GetPlayer2XXResponse addUnlockedPlayerTitleItem(PlayerTitle unlockedPlayerTitleItem) {
    if (this.unlockedPlayerTitle == null) {
      this.unlockedPlayerTitle = new ArrayList<>();
    }
    this.unlockedPlayerTitle.add(unlockedPlayerTitleItem);
    return this;
  }

  /**
   * Get unlockedPlayerTitle
   * @return unlockedPlayerTitle
   */
  @javax.annotation.Nullable
  public List<PlayerTitle> getUnlockedPlayerTitle() {
    return unlockedPlayerTitle;
  }

  public void setUnlockedPlayerTitle(List<PlayerTitle> unlockedPlayerTitle) {
    this.unlockedPlayerTitle = unlockedPlayerTitle;
  }


  public GetPlayer2XXResponse guildTypeId(String guildTypeId) {
    this.guildTypeId = guildTypeId;
    return this;
  }

  /**
   * Get guildTypeId
   * @return guildTypeId
   */
  @javax.annotation.Nullable
  public String getGuildTypeId() {
    return guildTypeId;
  }

  public void setGuildTypeId(String guildTypeId) {
    this.guildTypeId = guildTypeId;
  }


  public GetPlayer2XXResponse localTimeZoneOffsetMinutes(Integer localTimeZoneOffsetMinutes) {
    this.localTimeZoneOffsetMinutes = localTimeZoneOffsetMinutes;
    return this;
  }

  /**
   * Get localTimeZoneOffsetMinutes
   * @return localTimeZoneOffsetMinutes
   */
  @javax.annotation.Nullable
  public Integer getLocalTimeZoneOffsetMinutes() {
    return localTimeZoneOffsetMinutes;
  }

  public void setLocalTimeZoneOffsetMinutes(Integer localTimeZoneOffsetMinutes) {
    this.localTimeZoneOffsetMinutes = localTimeZoneOffsetMinutes;
  }


  public GetPlayer2XXResponse lastActivityTime(Long lastActivityTime) {
    this.lastActivityTime = lastActivityTime;
    return this;
  }

  /**
   * Get lastActivityTime
   * @return lastActivityTime
   */
  @javax.annotation.Nullable
  public Long getLastActivityTime() {
    return lastActivityTime;
  }

  public void setLastActivityTime(Long lastActivityTime) {
    this.lastActivityTime = lastActivityTime;
  }


  public GetPlayer2XXResponse selectedPlayerPortrait(PlayerPortrait selectedPlayerPortrait) {
    this.selectedPlayerPortrait = selectedPlayerPortrait;
    return this;
  }

  /**
   * Get selectedPlayerPortrait
   * @return selectedPlayerPortrait
   */
  @javax.annotation.Nullable
  public PlayerPortrait getSelectedPlayerPortrait() {
    return selectedPlayerPortrait;
  }

  public void setSelectedPlayerPortrait(PlayerPortrait selectedPlayerPortrait) {
    this.selectedPlayerPortrait = selectedPlayerPortrait;
  }


  public GetPlayer2XXResponse unlockedPlayerPortrait(List<PlayerPortrait> unlockedPlayerPortrait) {
    this.unlockedPlayerPortrait = unlockedPlayerPortrait;
    return this;
  }

  public GetPlayer2XXResponse addUnlockedPlayerPortraitItem(PlayerPortrait unlockedPlayerPortraitItem) {
    if (this.unlockedPlayerPortrait == null) {
      this.unlockedPlayerPortrait = new ArrayList<>();
    }
    this.unlockedPlayerPortrait.add(unlockedPlayerPortraitItem);
    return this;
  }

  /**
   * Get unlockedPlayerPortrait
   * @return unlockedPlayerPortrait
   */
  @javax.annotation.Nullable
  public List<PlayerPortrait> getUnlockedPlayerPortrait() {
    return unlockedPlayerPortrait;
  }

  public void setUnlockedPlayerPortrait(List<PlayerPortrait> unlockedPlayerPortrait) {
    this.unlockedPlayerPortrait = unlockedPlayerPortrait;
  }


  public GetPlayer2XXResponse seasonStatus(List<SeasonStatus> seasonStatus) {
    this.seasonStatus = seasonStatus;
    return this;
  }

  public GetPlayer2XXResponse addSeasonStatusItem(SeasonStatus seasonStatusItem) {
    if (this.seasonStatus == null) {
      this.seasonStatus = new ArrayList<>();
    }
    this.seasonStatus.add(seasonStatusItem);
    return this;
  }

  /**
   * Get seasonStatus
   * @return seasonStatus
   */
  @javax.annotation.Nullable
  public List<SeasonStatus> getSeasonStatus() {
    return seasonStatus;
  }

  public void setSeasonStatus(List<SeasonStatus> seasonStatus) {
    this.seasonStatus = seasonStatus;
  }


  public GetPlayer2XXResponse lifetimeSeasonScore(Long lifetimeSeasonScore) {
    this.lifetimeSeasonScore = lifetimeSeasonScore;
    return this;
  }

  /**
   * Get lifetimeSeasonScore
   * @return lifetimeSeasonScore
   */
  @javax.annotation.Nullable
  public Long getLifetimeSeasonScore() {
    return lifetimeSeasonScore;
  }

  public void setLifetimeSeasonScore(Long lifetimeSeasonScore) {
    this.lifetimeSeasonScore = lifetimeSeasonScore;
  }


  public GetPlayer2XXResponse playerRating(PlayerRating playerRating) {
    this.playerRating = playerRating;
    return this;
  }

  /**
   * Get playerRating
   * @return playerRating
   */
  @javax.annotation.Nullable
  public PlayerRating getPlayerRating() {
    return playerRating;
  }

  public void setPlayerRating(PlayerRating playerRating) {
    this.playerRating = playerRating;
  }


  public GetPlayer2XXResponse datacron(List<Datacron> datacron) {
    this.datacron = datacron;
    return this;
  }

  public GetPlayer2XXResponse addDatacronItem(Datacron datacronItem) {
    if (this.datacron == null) {
      this.datacron = new ArrayList<>();
    }
    this.datacron.add(datacronItem);
    return this;
  }

  /**
   * Get datacron
   * @return datacron
   */
  @javax.annotation.Nullable
  public List<Datacron> getDatacron() {
    return datacron;
  }

  public void setDatacron(List<Datacron> datacron) {
    this.datacron = datacron;
  }


  public GetPlayer2XXResponse nucleusId(String nucleusId) {
    this.nucleusId = nucleusId;
    return this;
  }

  /**
   * Get nucleusId
   * @return nucleusId
   */
  @javax.annotation.Nullable
  public String getNucleusId() {
    return nucleusId;
  }

  public void setNucleusId(String nucleusId) {
    this.nucleusId = nucleusId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPlayer2XXResponse getPlayer2XXResponse = (GetPlayer2XXResponse) o;
    return Objects.equals(this.name, getPlayer2XXResponse.name) &&
        Objects.equals(this.level, getPlayer2XXResponse.level) &&
        Objects.equals(this.allyCode, getPlayer2XXResponse.allyCode) &&
        Objects.equals(this.playerId, getPlayer2XXResponse.playerId) &&
        Objects.equals(this.rosterUnit, getPlayer2XXResponse.rosterUnit) &&
        Objects.equals(this.profileStat, getPlayer2XXResponse.profileStat) &&
        Objects.equals(this.guildId, getPlayer2XXResponse.guildId) &&
        Objects.equals(this.guildName, getPlayer2XXResponse.guildName) &&
        Objects.equals(this.guildLogoBackground, getPlayer2XXResponse.guildLogoBackground) &&
        Objects.equals(this.guildBannerColor, getPlayer2XXResponse.guildBannerColor) &&
        Objects.equals(this.guildBannerLogo, getPlayer2XXResponse.guildBannerLogo) &&
        Objects.equals(this.pvpProfile, getPlayer2XXResponse.pvpProfile) &&
        Objects.equals(this.selectedPlayerTitle, getPlayer2XXResponse.selectedPlayerTitle) &&
        Objects.equals(this.unlockedPlayerTitle, getPlayer2XXResponse.unlockedPlayerTitle) &&
        Objects.equals(this.guildTypeId, getPlayer2XXResponse.guildTypeId) &&
        Objects.equals(this.localTimeZoneOffsetMinutes, getPlayer2XXResponse.localTimeZoneOffsetMinutes) &&
        Objects.equals(this.lastActivityTime, getPlayer2XXResponse.lastActivityTime) &&
        Objects.equals(this.selectedPlayerPortrait, getPlayer2XXResponse.selectedPlayerPortrait) &&
        Objects.equals(this.unlockedPlayerPortrait, getPlayer2XXResponse.unlockedPlayerPortrait) &&
        Objects.equals(this.seasonStatus, getPlayer2XXResponse.seasonStatus) &&
        Objects.equals(this.lifetimeSeasonScore, getPlayer2XXResponse.lifetimeSeasonScore) &&
        Objects.equals(this.playerRating, getPlayer2XXResponse.playerRating) &&
        Objects.equals(this.datacron, getPlayer2XXResponse.datacron) &&
        Objects.equals(this.nucleusId, getPlayer2XXResponse.nucleusId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, level, allyCode, playerId, rosterUnit, profileStat, guildId, guildName, guildLogoBackground, guildBannerColor, guildBannerLogo, pvpProfile, selectedPlayerTitle, unlockedPlayerTitle, guildTypeId, localTimeZoneOffsetMinutes, lastActivityTime, selectedPlayerPortrait, unlockedPlayerPortrait, seasonStatus, lifetimeSeasonScore, playerRating, datacron, nucleusId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPlayer2XXResponse {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    allyCode: ").append(toIndentedString(allyCode)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    rosterUnit: ").append(toIndentedString(rosterUnit)).append("\n");
    sb.append("    profileStat: ").append(toIndentedString(profileStat)).append("\n");
    sb.append("    guildId: ").append(toIndentedString(guildId)).append("\n");
    sb.append("    guildName: ").append(toIndentedString(guildName)).append("\n");
    sb.append("    guildLogoBackground: ").append(toIndentedString(guildLogoBackground)).append("\n");
    sb.append("    guildBannerColor: ").append(toIndentedString(guildBannerColor)).append("\n");
    sb.append("    guildBannerLogo: ").append(toIndentedString(guildBannerLogo)).append("\n");
    sb.append("    pvpProfile: ").append(toIndentedString(pvpProfile)).append("\n");
    sb.append("    selectedPlayerTitle: ").append(toIndentedString(selectedPlayerTitle)).append("\n");
    sb.append("    unlockedPlayerTitle: ").append(toIndentedString(unlockedPlayerTitle)).append("\n");
    sb.append("    guildTypeId: ").append(toIndentedString(guildTypeId)).append("\n");
    sb.append("    localTimeZoneOffsetMinutes: ").append(toIndentedString(localTimeZoneOffsetMinutes)).append("\n");
    sb.append("    lastActivityTime: ").append(toIndentedString(lastActivityTime)).append("\n");
    sb.append("    selectedPlayerPortrait: ").append(toIndentedString(selectedPlayerPortrait)).append("\n");
    sb.append("    unlockedPlayerPortrait: ").append(toIndentedString(unlockedPlayerPortrait)).append("\n");
    sb.append("    seasonStatus: ").append(toIndentedString(seasonStatus)).append("\n");
    sb.append("    lifetimeSeasonScore: ").append(toIndentedString(lifetimeSeasonScore)).append("\n");
    sb.append("    playerRating: ").append(toIndentedString(playerRating)).append("\n");
    sb.append("    datacron: ").append(toIndentedString(datacron)).append("\n");
    sb.append("    nucleusId: ").append(toIndentedString(nucleusId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("level");
    openapiFields.add("allyCode");
    openapiFields.add("playerId");
    openapiFields.add("rosterUnit");
    openapiFields.add("profileStat");
    openapiFields.add("guildId");
    openapiFields.add("guildName");
    openapiFields.add("guildLogoBackground");
    openapiFields.add("guildBannerColor");
    openapiFields.add("guildBannerLogo");
    openapiFields.add("pvpProfile");
    openapiFields.add("selectedPlayerTitle");
    openapiFields.add("unlockedPlayerTitle");
    openapiFields.add("guildTypeId");
    openapiFields.add("localTimeZoneOffsetMinutes");
    openapiFields.add("lastActivityTime");
    openapiFields.add("selectedPlayerPortrait");
    openapiFields.add("unlockedPlayerPortrait");
    openapiFields.add("seasonStatus");
    openapiFields.add("lifetimeSeasonScore");
    openapiFields.add("playerRating");
    openapiFields.add("datacron");
    openapiFields.add("nucleusId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPlayer2XXResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPlayer2XXResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPlayer2XXResponse is not found in the empty JSON string", GetPlayer2XXResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPlayer2XXResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPlayer2XXResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("playerId") != null && !jsonObj.get("playerId").isJsonNull()) && !jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      if (jsonObj.get("rosterUnit") != null && !jsonObj.get("rosterUnit").isJsonNull()) {
        JsonArray jsonArrayrosterUnit = jsonObj.getAsJsonArray("rosterUnit");
        if (jsonArrayrosterUnit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rosterUnit").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rosterUnit` to be an array in the JSON string but got `%s`", jsonObj.get("rosterUnit").toString()));
          }

          // validate the optional field `rosterUnit` (array)
          for (int i = 0; i < jsonArrayrosterUnit.size(); i++) {
            Unit.validateJsonElement(jsonArrayrosterUnit.get(i));
          };
        }
      }
      if (jsonObj.get("profileStat") != null && !jsonObj.get("profileStat").isJsonNull()) {
        JsonArray jsonArrayprofileStat = jsonObj.getAsJsonArray("profileStat");
        if (jsonArrayprofileStat != null) {
          // ensure the json data is an array
          if (!jsonObj.get("profileStat").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `profileStat` to be an array in the JSON string but got `%s`", jsonObj.get("profileStat").toString()));
          }

          // validate the optional field `profileStat` (array)
          for (int i = 0; i < jsonArrayprofileStat.size(); i++) {
            PlayerProfileStat.validateJsonElement(jsonArrayprofileStat.get(i));
          };
        }
      }
      if ((jsonObj.get("guildId") != null && !jsonObj.get("guildId").isJsonNull()) && !jsonObj.get("guildId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildId").toString()));
      }
      if ((jsonObj.get("guildName") != null && !jsonObj.get("guildName").isJsonNull()) && !jsonObj.get("guildName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildName").toString()));
      }
      if ((jsonObj.get("guildLogoBackground") != null && !jsonObj.get("guildLogoBackground").isJsonNull()) && !jsonObj.get("guildLogoBackground").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildLogoBackground` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildLogoBackground").toString()));
      }
      if ((jsonObj.get("guildBannerColor") != null && !jsonObj.get("guildBannerColor").isJsonNull()) && !jsonObj.get("guildBannerColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildBannerColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildBannerColor").toString()));
      }
      if ((jsonObj.get("guildBannerLogo") != null && !jsonObj.get("guildBannerLogo").isJsonNull()) && !jsonObj.get("guildBannerLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildBannerLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildBannerLogo").toString()));
      }
      if (jsonObj.get("pvpProfile") != null && !jsonObj.get("pvpProfile").isJsonNull()) {
        JsonArray jsonArraypvpProfile = jsonObj.getAsJsonArray("pvpProfile");
        if (jsonArraypvpProfile != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pvpProfile").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pvpProfile` to be an array in the JSON string but got `%s`", jsonObj.get("pvpProfile").toString()));
          }

          // validate the optional field `pvpProfile` (array)
          for (int i = 0; i < jsonArraypvpProfile.size(); i++) {
            PlayerPvpProfile.validateJsonElement(jsonArraypvpProfile.get(i));
          };
        }
      }
      // validate the optional field `selectedPlayerTitle`
      if (jsonObj.get("selectedPlayerTitle") != null && !jsonObj.get("selectedPlayerTitle").isJsonNull()) {
        PlayerTitle.validateJsonElement(jsonObj.get("selectedPlayerTitle"));
      }
      if (jsonObj.get("unlockedPlayerTitle") != null && !jsonObj.get("unlockedPlayerTitle").isJsonNull()) {
        JsonArray jsonArrayunlockedPlayerTitle = jsonObj.getAsJsonArray("unlockedPlayerTitle");
        if (jsonArrayunlockedPlayerTitle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unlockedPlayerTitle").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unlockedPlayerTitle` to be an array in the JSON string but got `%s`", jsonObj.get("unlockedPlayerTitle").toString()));
          }

          // validate the optional field `unlockedPlayerTitle` (array)
          for (int i = 0; i < jsonArrayunlockedPlayerTitle.size(); i++) {
            PlayerTitle.validateJsonElement(jsonArrayunlockedPlayerTitle.get(i));
          };
        }
      }
      if ((jsonObj.get("guildTypeId") != null && !jsonObj.get("guildTypeId").isJsonNull()) && !jsonObj.get("guildTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildTypeId").toString()));
      }
      // validate the optional field `selectedPlayerPortrait`
      if (jsonObj.get("selectedPlayerPortrait") != null && !jsonObj.get("selectedPlayerPortrait").isJsonNull()) {
        PlayerPortrait.validateJsonElement(jsonObj.get("selectedPlayerPortrait"));
      }
      if (jsonObj.get("unlockedPlayerPortrait") != null && !jsonObj.get("unlockedPlayerPortrait").isJsonNull()) {
        JsonArray jsonArrayunlockedPlayerPortrait = jsonObj.getAsJsonArray("unlockedPlayerPortrait");
        if (jsonArrayunlockedPlayerPortrait != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unlockedPlayerPortrait").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unlockedPlayerPortrait` to be an array in the JSON string but got `%s`", jsonObj.get("unlockedPlayerPortrait").toString()));
          }

          // validate the optional field `unlockedPlayerPortrait` (array)
          for (int i = 0; i < jsonArrayunlockedPlayerPortrait.size(); i++) {
            PlayerPortrait.validateJsonElement(jsonArrayunlockedPlayerPortrait.get(i));
          };
        }
      }
      if (jsonObj.get("seasonStatus") != null && !jsonObj.get("seasonStatus").isJsonNull()) {
        JsonArray jsonArrayseasonStatus = jsonObj.getAsJsonArray("seasonStatus");
        if (jsonArrayseasonStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonStatus` to be an array in the JSON string but got `%s`", jsonObj.get("seasonStatus").toString()));
          }

          // validate the optional field `seasonStatus` (array)
          for (int i = 0; i < jsonArrayseasonStatus.size(); i++) {
            SeasonStatus.validateJsonElement(jsonArrayseasonStatus.get(i));
          };
        }
      }
      // validate the optional field `playerRating`
      if (jsonObj.get("playerRating") != null && !jsonObj.get("playerRating").isJsonNull()) {
        PlayerRating.validateJsonElement(jsonObj.get("playerRating"));
      }
      if (jsonObj.get("datacron") != null && !jsonObj.get("datacron").isJsonNull()) {
        JsonArray jsonArraydatacron = jsonObj.getAsJsonArray("datacron");
        if (jsonArraydatacron != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datacron").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datacron` to be an array in the JSON string but got `%s`", jsonObj.get("datacron").toString()));
          }

          // validate the optional field `datacron` (array)
          for (int i = 0; i < jsonArraydatacron.size(); i++) {
            Datacron.validateJsonElement(jsonArraydatacron.get(i));
          };
        }
      }
      if ((jsonObj.get("nucleusId") != null && !jsonObj.get("nucleusId").isJsonNull()) && !jsonObj.get("nucleusId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nucleusId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nucleusId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPlayer2XXResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPlayer2XXResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPlayer2XXResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPlayer2XXResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPlayer2XXResponse>() {
           @Override
           public void write(JsonWriter out, GetPlayer2XXResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPlayer2XXResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPlayer2XXResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPlayer2XXResponse
   * @throws IOException if the JSON string is invalid with respect to GetPlayer2XXResponse
   */
  public static GetPlayer2XXResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPlayer2XXResponse.class);
  }

  /**
   * Convert an instance of GetPlayer2XXResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

