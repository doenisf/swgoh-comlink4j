/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.LeaderboardGuild;
import io.github.doenisf.comlink4j.model.LeaderboardStatus;
import io.github.doenisf.comlink4j.model.PlayerRating;
import io.github.doenisf.comlink4j.model.Unit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * LeaderboardPlayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class LeaderboardPlayer {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_GUILD = "guild";
  @SerializedName(SERIALIZED_NAME_GUILD)
  private LeaderboardGuild guild;

  public static final String SERIALIZED_NAME_IS_FAKE = "isFake";
  @SerializedName(SERIALIZED_NAME_IS_FAKE)
  private Boolean isFake;

  public static final String SERIALIZED_NAME_PVP_STATUS = "pvpStatus";
  @SerializedName(SERIALIZED_NAME_PVP_STATUS)
  private LeaderboardStatus pvpStatus;

  public static final String SERIALIZED_NAME_SQUAD_UNIT = "squadUnit";
  @SerializedName(SERIALIZED_NAME_SQUAD_UNIT)
  private List<Unit> squadUnit = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_POWER = "power";
  @SerializedName(SERIALIZED_NAME_POWER)
  private Integer power;

  public static final String SERIALIZED_NAME_PORTRAIT = "portrait";
  @SerializedName(SERIALIZED_NAME_PORTRAIT)
  private String portrait;

  public static final String SERIALIZED_NAME_SEASONS_LIFETIME_SCORE = "seasonsLifetimeScore";
  @SerializedName(SERIALIZED_NAME_SEASONS_LIFETIME_SCORE)
  private Long seasonsLifetimeScore;

  public static final String SERIALIZED_NAME_SEASON_LEAGUE_ID = "seasonLeagueId";
  @SerializedName(SERIALIZED_NAME_SEASON_LEAGUE_ID)
  private String seasonLeagueId;

  public static final String SERIALIZED_NAME_PLAYER_RATING = "playerRating";
  @SerializedName(SERIALIZED_NAME_PLAYER_RATING)
  private PlayerRating playerRating;

  public LeaderboardPlayer() {
  }

  public LeaderboardPlayer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LeaderboardPlayer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LeaderboardPlayer level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public LeaderboardPlayer guild(LeaderboardGuild guild) {
    this.guild = guild;
    return this;
  }

  /**
   * Get guild
   * @return guild
   */
  @javax.annotation.Nullable
  public LeaderboardGuild getGuild() {
    return guild;
  }

  public void setGuild(LeaderboardGuild guild) {
    this.guild = guild;
  }


  public LeaderboardPlayer isFake(Boolean isFake) {
    this.isFake = isFake;
    return this;
  }

  /**
   * Get isFake
   * @return isFake
   */
  @javax.annotation.Nullable
  public Boolean getIsFake() {
    return isFake;
  }

  public void setIsFake(Boolean isFake) {
    this.isFake = isFake;
  }


  public LeaderboardPlayer pvpStatus(LeaderboardStatus pvpStatus) {
    this.pvpStatus = pvpStatus;
    return this;
  }

  /**
   * Get pvpStatus
   * @return pvpStatus
   */
  @javax.annotation.Nullable
  public LeaderboardStatus getPvpStatus() {
    return pvpStatus;
  }

  public void setPvpStatus(LeaderboardStatus pvpStatus) {
    this.pvpStatus = pvpStatus;
  }


  public LeaderboardPlayer squadUnit(List<Unit> squadUnit) {
    this.squadUnit = squadUnit;
    return this;
  }

  public LeaderboardPlayer addSquadUnitItem(Unit squadUnitItem) {
    if (this.squadUnit == null) {
      this.squadUnit = new ArrayList<>();
    }
    this.squadUnit.add(squadUnitItem);
    return this;
  }

  /**
   * Get squadUnit
   * @return squadUnit
   */
  @javax.annotation.Nullable
  public List<Unit> getSquadUnit() {
    return squadUnit;
  }

  public void setSquadUnit(List<Unit> squadUnit) {
    this.squadUnit = squadUnit;
  }


  public LeaderboardPlayer title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public LeaderboardPlayer power(Integer power) {
    this.power = power;
    return this;
  }

  /**
   * Get power
   * @return power
   */
  @javax.annotation.Nullable
  public Integer getPower() {
    return power;
  }

  public void setPower(Integer power) {
    this.power = power;
  }


  public LeaderboardPlayer portrait(String portrait) {
    this.portrait = portrait;
    return this;
  }

  /**
   * Get portrait
   * @return portrait
   */
  @javax.annotation.Nullable
  public String getPortrait() {
    return portrait;
  }

  public void setPortrait(String portrait) {
    this.portrait = portrait;
  }


  public LeaderboardPlayer seasonsLifetimeScore(Long seasonsLifetimeScore) {
    this.seasonsLifetimeScore = seasonsLifetimeScore;
    return this;
  }

  /**
   * Get seasonsLifetimeScore
   * @return seasonsLifetimeScore
   */
  @javax.annotation.Nullable
  public Long getSeasonsLifetimeScore() {
    return seasonsLifetimeScore;
  }

  public void setSeasonsLifetimeScore(Long seasonsLifetimeScore) {
    this.seasonsLifetimeScore = seasonsLifetimeScore;
  }


  public LeaderboardPlayer seasonLeagueId(String seasonLeagueId) {
    this.seasonLeagueId = seasonLeagueId;
    return this;
  }

  /**
   * Get seasonLeagueId
   * @return seasonLeagueId
   */
  @javax.annotation.Nullable
  public String getSeasonLeagueId() {
    return seasonLeagueId;
  }

  public void setSeasonLeagueId(String seasonLeagueId) {
    this.seasonLeagueId = seasonLeagueId;
  }


  public LeaderboardPlayer playerRating(PlayerRating playerRating) {
    this.playerRating = playerRating;
    return this;
  }

  /**
   * Get playerRating
   * @return playerRating
   */
  @javax.annotation.Nullable
  public PlayerRating getPlayerRating() {
    return playerRating;
  }

  public void setPlayerRating(PlayerRating playerRating) {
    this.playerRating = playerRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaderboardPlayer leaderboardPlayer = (LeaderboardPlayer) o;
    return Objects.equals(this.id, leaderboardPlayer.id) &&
        Objects.equals(this.name, leaderboardPlayer.name) &&
        Objects.equals(this.level, leaderboardPlayer.level) &&
        Objects.equals(this.guild, leaderboardPlayer.guild) &&
        Objects.equals(this.isFake, leaderboardPlayer.isFake) &&
        Objects.equals(this.pvpStatus, leaderboardPlayer.pvpStatus) &&
        Objects.equals(this.squadUnit, leaderboardPlayer.squadUnit) &&
        Objects.equals(this.title, leaderboardPlayer.title) &&
        Objects.equals(this.power, leaderboardPlayer.power) &&
        Objects.equals(this.portrait, leaderboardPlayer.portrait) &&
        Objects.equals(this.seasonsLifetimeScore, leaderboardPlayer.seasonsLifetimeScore) &&
        Objects.equals(this.seasonLeagueId, leaderboardPlayer.seasonLeagueId) &&
        Objects.equals(this.playerRating, leaderboardPlayer.playerRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, level, guild, isFake, pvpStatus, squadUnit, title, power, portrait, seasonsLifetimeScore, seasonLeagueId, playerRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaderboardPlayer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    guild: ").append(toIndentedString(guild)).append("\n");
    sb.append("    isFake: ").append(toIndentedString(isFake)).append("\n");
    sb.append("    pvpStatus: ").append(toIndentedString(pvpStatus)).append("\n");
    sb.append("    squadUnit: ").append(toIndentedString(squadUnit)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    portrait: ").append(toIndentedString(portrait)).append("\n");
    sb.append("    seasonsLifetimeScore: ").append(toIndentedString(seasonsLifetimeScore)).append("\n");
    sb.append("    seasonLeagueId: ").append(toIndentedString(seasonLeagueId)).append("\n");
    sb.append("    playerRating: ").append(toIndentedString(playerRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("level");
    openapiFields.add("guild");
    openapiFields.add("isFake");
    openapiFields.add("pvpStatus");
    openapiFields.add("squadUnit");
    openapiFields.add("title");
    openapiFields.add("power");
    openapiFields.add("portrait");
    openapiFields.add("seasonsLifetimeScore");
    openapiFields.add("seasonLeagueId");
    openapiFields.add("playerRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeaderboardPlayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeaderboardPlayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaderboardPlayer is not found in the empty JSON string", LeaderboardPlayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeaderboardPlayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeaderboardPlayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `guild`
      if (jsonObj.get("guild") != null && !jsonObj.get("guild").isJsonNull()) {
        LeaderboardGuild.validateJsonElement(jsonObj.get("guild"));
      }
      // validate the optional field `pvpStatus`
      if (jsonObj.get("pvpStatus") != null && !jsonObj.get("pvpStatus").isJsonNull()) {
        LeaderboardStatus.validateJsonElement(jsonObj.get("pvpStatus"));
      }
      if (jsonObj.get("squadUnit") != null && !jsonObj.get("squadUnit").isJsonNull()) {
        JsonArray jsonArraysquadUnit = jsonObj.getAsJsonArray("squadUnit");
        if (jsonArraysquadUnit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("squadUnit").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `squadUnit` to be an array in the JSON string but got `%s`", jsonObj.get("squadUnit").toString()));
          }

          // validate the optional field `squadUnit` (array)
          for (int i = 0; i < jsonArraysquadUnit.size(); i++) {
            Unit.validateJsonElement(jsonArraysquadUnit.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("portrait") != null && !jsonObj.get("portrait").isJsonNull()) && !jsonObj.get("portrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portrait").toString()));
      }
      if ((jsonObj.get("seasonLeagueId") != null && !jsonObj.get("seasonLeagueId").isJsonNull()) && !jsonObj.get("seasonLeagueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonLeagueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonLeagueId").toString()));
      }
      // validate the optional field `playerRating`
      if (jsonObj.get("playerRating") != null && !jsonObj.get("playerRating").isJsonNull()) {
        PlayerRating.validateJsonElement(jsonObj.get("playerRating"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaderboardPlayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaderboardPlayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaderboardPlayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaderboardPlayer.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaderboardPlayer>() {
           @Override
           public void write(JsonWriter out, LeaderboardPlayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaderboardPlayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeaderboardPlayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeaderboardPlayer
   * @throws IOException if the JSON string is invalid with respect to LeaderboardPlayer
   */
  public static LeaderboardPlayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaderboardPlayer.class);
  }

  /**
   * Convert an instance of LeaderboardPlayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

