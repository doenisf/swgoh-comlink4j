/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.GameEvent;
import io.github.doenisf.comlink4j.model.GuildInventory;
import io.github.doenisf.comlink4j.model.GuildInviteStatus;
import io.github.doenisf.comlink4j.model.GuildMember;
import io.github.doenisf.comlink4j.model.GuildProfile;
import io.github.doenisf.comlink4j.model.GuildProgress;
import io.github.doenisf.comlink4j.model.GuildRaidPointsSummary;
import io.github.doenisf.comlink4j.model.GuildRaidResult;
import io.github.doenisf.comlink4j.model.GuildRaidStatus;
import io.github.doenisf.comlink4j.model.GuildStat;
import io.github.doenisf.comlink4j.model.RoomData;
import io.github.doenisf.comlink4j.model.TerritoryBattleResult;
import io.github.doenisf.comlink4j.model.TerritoryBattleStatus;
import io.github.doenisf.comlink4j.model.TerritoryWarResult;
import io.github.doenisf.comlink4j.model.TerritoryWarStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * Guild
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Guild {
  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private GuildProfile profile;

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private List<GuildMember> member = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVITE_STATUS = "inviteStatus";
  @SerializedName(SERIALIZED_NAME_INVITE_STATUS)
  private List<GuildInviteStatus> inviteStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_RAID_STATUS = "raidStatus";
  @SerializedName(SERIALIZED_NAME_RAID_STATUS)
  private List<GuildRaidStatus> raidStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private GuildInventory inventory;

  public static final String SERIALIZED_NAME_RAID_RESULT = "raidResult";
  @SerializedName(SERIALIZED_NAME_RAID_RESULT)
  private List<GuildRaidResult> raidResult = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private GuildProgress progress;

  public static final String SERIALIZED_NAME_TERRITORY_BATTLE_STATUS = "territoryBattleStatus";
  @SerializedName(SERIALIZED_NAME_TERRITORY_BATTLE_STATUS)
  private List<TerritoryBattleStatus> territoryBattleStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_EVENTS = "guildEvents";
  @SerializedName(SERIALIZED_NAME_GUILD_EVENTS)
  private List<GameEvent> guildEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_BATTLE_RESULT = "territoryBattleResult";
  @SerializedName(SERIALIZED_NAME_TERRITORY_BATTLE_RESULT)
  private List<TerritoryBattleResult> territoryBattleResult = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_WAR_STATUS = "territoryWarStatus";
  @SerializedName(SERIALIZED_NAME_TERRITORY_WAR_STATUS)
  private List<TerritoryWarStatus> territoryWarStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_AVAILABLE = "roomAvailable";
  @SerializedName(SERIALIZED_NAME_ROOM_AVAILABLE)
  private List<RoomData> roomAvailable = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_CHALLENGES_REFRESH = "nextChallengesRefresh";
  @SerializedName(SERIALIZED_NAME_NEXT_CHALLENGES_REFRESH)
  private Long nextChallengesRefresh;

  public static final String SERIALIZED_NAME_STAT = "stat";
  @SerializedName(SERIALIZED_NAME_STAT)
  private List<GuildStat> stat = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECENT_RAID_RESULT = "recentRaidResult";
  @SerializedName(SERIALIZED_NAME_RECENT_RAID_RESULT)
  private List<GuildRaidResult> recentRaidResult = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECENT_TERRITORY_WAR_RESULT = "recentTerritoryWarResult";
  @SerializedName(SERIALIZED_NAME_RECENT_TERRITORY_WAR_RESULT)
  private List<TerritoryWarResult> recentTerritoryWarResult = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_RAID_POINTS_SUMMARY = "lastRaidPointsSummary";
  @SerializedName(SERIALIZED_NAME_LAST_RAID_POINTS_SUMMARY)
  private List<GuildRaidPointsSummary> lastRaidPointsSummary = new ArrayList<>();

  public Guild() {
  }

  public Guild profile(GuildProfile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public GuildProfile getProfile() {
    return profile;
  }

  public void setProfile(GuildProfile profile) {
    this.profile = profile;
  }


  public Guild member(List<GuildMember> member) {
    this.member = member;
    return this;
  }

  public Guild addMemberItem(GuildMember memberItem) {
    if (this.member == null) {
      this.member = new ArrayList<>();
    }
    this.member.add(memberItem);
    return this;
  }

  /**
   * Get member
   * @return member
   */
  @javax.annotation.Nullable
  public List<GuildMember> getMember() {
    return member;
  }

  public void setMember(List<GuildMember> member) {
    this.member = member;
  }


  public Guild inviteStatus(List<GuildInviteStatus> inviteStatus) {
    this.inviteStatus = inviteStatus;
    return this;
  }

  public Guild addInviteStatusItem(GuildInviteStatus inviteStatusItem) {
    if (this.inviteStatus == null) {
      this.inviteStatus = new ArrayList<>();
    }
    this.inviteStatus.add(inviteStatusItem);
    return this;
  }

  /**
   * Get inviteStatus
   * @return inviteStatus
   */
  @javax.annotation.Nullable
  public List<GuildInviteStatus> getInviteStatus() {
    return inviteStatus;
  }

  public void setInviteStatus(List<GuildInviteStatus> inviteStatus) {
    this.inviteStatus = inviteStatus;
  }


  public Guild raidStatus(List<GuildRaidStatus> raidStatus) {
    this.raidStatus = raidStatus;
    return this;
  }

  public Guild addRaidStatusItem(GuildRaidStatus raidStatusItem) {
    if (this.raidStatus == null) {
      this.raidStatus = new ArrayList<>();
    }
    this.raidStatus.add(raidStatusItem);
    return this;
  }

  /**
   * Get raidStatus
   * @return raidStatus
   */
  @javax.annotation.Nullable
  public List<GuildRaidStatus> getRaidStatus() {
    return raidStatus;
  }

  public void setRaidStatus(List<GuildRaidStatus> raidStatus) {
    this.raidStatus = raidStatus;
  }


  public Guild inventory(GuildInventory inventory) {
    this.inventory = inventory;
    return this;
  }

  /**
   * Get inventory
   * @return inventory
   */
  @javax.annotation.Nullable
  public GuildInventory getInventory() {
    return inventory;
  }

  public void setInventory(GuildInventory inventory) {
    this.inventory = inventory;
  }


  public Guild raidResult(List<GuildRaidResult> raidResult) {
    this.raidResult = raidResult;
    return this;
  }

  public Guild addRaidResultItem(GuildRaidResult raidResultItem) {
    if (this.raidResult == null) {
      this.raidResult = new ArrayList<>();
    }
    this.raidResult.add(raidResultItem);
    return this;
  }

  /**
   * Get raidResult
   * @return raidResult
   */
  @javax.annotation.Nullable
  public List<GuildRaidResult> getRaidResult() {
    return raidResult;
  }

  public void setRaidResult(List<GuildRaidResult> raidResult) {
    this.raidResult = raidResult;
  }


  public Guild progress(GuildProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public GuildProgress getProgress() {
    return progress;
  }

  public void setProgress(GuildProgress progress) {
    this.progress = progress;
  }


  public Guild territoryBattleStatus(List<TerritoryBattleStatus> territoryBattleStatus) {
    this.territoryBattleStatus = territoryBattleStatus;
    return this;
  }

  public Guild addTerritoryBattleStatusItem(TerritoryBattleStatus territoryBattleStatusItem) {
    if (this.territoryBattleStatus == null) {
      this.territoryBattleStatus = new ArrayList<>();
    }
    this.territoryBattleStatus.add(territoryBattleStatusItem);
    return this;
  }

  /**
   * Get territoryBattleStatus
   * @return territoryBattleStatus
   */
  @javax.annotation.Nullable
  public List<TerritoryBattleStatus> getTerritoryBattleStatus() {
    return territoryBattleStatus;
  }

  public void setTerritoryBattleStatus(List<TerritoryBattleStatus> territoryBattleStatus) {
    this.territoryBattleStatus = territoryBattleStatus;
  }


  public Guild guildEvents(List<GameEvent> guildEvents) {
    this.guildEvents = guildEvents;
    return this;
  }

  public Guild addGuildEventsItem(GameEvent guildEventsItem) {
    if (this.guildEvents == null) {
      this.guildEvents = new ArrayList<>();
    }
    this.guildEvents.add(guildEventsItem);
    return this;
  }

  /**
   * Get guildEvents
   * @return guildEvents
   */
  @javax.annotation.Nullable
  public List<GameEvent> getGuildEvents() {
    return guildEvents;
  }

  public void setGuildEvents(List<GameEvent> guildEvents) {
    this.guildEvents = guildEvents;
  }


  public Guild territoryBattleResult(List<TerritoryBattleResult> territoryBattleResult) {
    this.territoryBattleResult = territoryBattleResult;
    return this;
  }

  public Guild addTerritoryBattleResultItem(TerritoryBattleResult territoryBattleResultItem) {
    if (this.territoryBattleResult == null) {
      this.territoryBattleResult = new ArrayList<>();
    }
    this.territoryBattleResult.add(territoryBattleResultItem);
    return this;
  }

  /**
   * Get territoryBattleResult
   * @return territoryBattleResult
   */
  @javax.annotation.Nullable
  public List<TerritoryBattleResult> getTerritoryBattleResult() {
    return territoryBattleResult;
  }

  public void setTerritoryBattleResult(List<TerritoryBattleResult> territoryBattleResult) {
    this.territoryBattleResult = territoryBattleResult;
  }


  public Guild territoryWarStatus(List<TerritoryWarStatus> territoryWarStatus) {
    this.territoryWarStatus = territoryWarStatus;
    return this;
  }

  public Guild addTerritoryWarStatusItem(TerritoryWarStatus territoryWarStatusItem) {
    if (this.territoryWarStatus == null) {
      this.territoryWarStatus = new ArrayList<>();
    }
    this.territoryWarStatus.add(territoryWarStatusItem);
    return this;
  }

  /**
   * Get territoryWarStatus
   * @return territoryWarStatus
   */
  @javax.annotation.Nullable
  public List<TerritoryWarStatus> getTerritoryWarStatus() {
    return territoryWarStatus;
  }

  public void setTerritoryWarStatus(List<TerritoryWarStatus> territoryWarStatus) {
    this.territoryWarStatus = territoryWarStatus;
  }


  public Guild roomAvailable(List<RoomData> roomAvailable) {
    this.roomAvailable = roomAvailable;
    return this;
  }

  public Guild addRoomAvailableItem(RoomData roomAvailableItem) {
    if (this.roomAvailable == null) {
      this.roomAvailable = new ArrayList<>();
    }
    this.roomAvailable.add(roomAvailableItem);
    return this;
  }

  /**
   * Get roomAvailable
   * @return roomAvailable
   */
  @javax.annotation.Nullable
  public List<RoomData> getRoomAvailable() {
    return roomAvailable;
  }

  public void setRoomAvailable(List<RoomData> roomAvailable) {
    this.roomAvailable = roomAvailable;
  }


  public Guild nextChallengesRefresh(Long nextChallengesRefresh) {
    this.nextChallengesRefresh = nextChallengesRefresh;
    return this;
  }

  /**
   * Get nextChallengesRefresh
   * @return nextChallengesRefresh
   */
  @javax.annotation.Nullable
  public Long getNextChallengesRefresh() {
    return nextChallengesRefresh;
  }

  public void setNextChallengesRefresh(Long nextChallengesRefresh) {
    this.nextChallengesRefresh = nextChallengesRefresh;
  }


  public Guild stat(List<GuildStat> stat) {
    this.stat = stat;
    return this;
  }

  public Guild addStatItem(GuildStat statItem) {
    if (this.stat == null) {
      this.stat = new ArrayList<>();
    }
    this.stat.add(statItem);
    return this;
  }

  /**
   * Get stat
   * @return stat
   */
  @javax.annotation.Nullable
  public List<GuildStat> getStat() {
    return stat;
  }

  public void setStat(List<GuildStat> stat) {
    this.stat = stat;
  }


  public Guild recentRaidResult(List<GuildRaidResult> recentRaidResult) {
    this.recentRaidResult = recentRaidResult;
    return this;
  }

  public Guild addRecentRaidResultItem(GuildRaidResult recentRaidResultItem) {
    if (this.recentRaidResult == null) {
      this.recentRaidResult = new ArrayList<>();
    }
    this.recentRaidResult.add(recentRaidResultItem);
    return this;
  }

  /**
   * Get recentRaidResult
   * @return recentRaidResult
   */
  @javax.annotation.Nullable
  public List<GuildRaidResult> getRecentRaidResult() {
    return recentRaidResult;
  }

  public void setRecentRaidResult(List<GuildRaidResult> recentRaidResult) {
    this.recentRaidResult = recentRaidResult;
  }


  public Guild recentTerritoryWarResult(List<TerritoryWarResult> recentTerritoryWarResult) {
    this.recentTerritoryWarResult = recentTerritoryWarResult;
    return this;
  }

  public Guild addRecentTerritoryWarResultItem(TerritoryWarResult recentTerritoryWarResultItem) {
    if (this.recentTerritoryWarResult == null) {
      this.recentTerritoryWarResult = new ArrayList<>();
    }
    this.recentTerritoryWarResult.add(recentTerritoryWarResultItem);
    return this;
  }

  /**
   * Get recentTerritoryWarResult
   * @return recentTerritoryWarResult
   */
  @javax.annotation.Nullable
  public List<TerritoryWarResult> getRecentTerritoryWarResult() {
    return recentTerritoryWarResult;
  }

  public void setRecentTerritoryWarResult(List<TerritoryWarResult> recentTerritoryWarResult) {
    this.recentTerritoryWarResult = recentTerritoryWarResult;
  }


  public Guild lastRaidPointsSummary(List<GuildRaidPointsSummary> lastRaidPointsSummary) {
    this.lastRaidPointsSummary = lastRaidPointsSummary;
    return this;
  }

  public Guild addLastRaidPointsSummaryItem(GuildRaidPointsSummary lastRaidPointsSummaryItem) {
    if (this.lastRaidPointsSummary == null) {
      this.lastRaidPointsSummary = new ArrayList<>();
    }
    this.lastRaidPointsSummary.add(lastRaidPointsSummaryItem);
    return this;
  }

  /**
   * Get lastRaidPointsSummary
   * @return lastRaidPointsSummary
   */
  @javax.annotation.Nullable
  public List<GuildRaidPointsSummary> getLastRaidPointsSummary() {
    return lastRaidPointsSummary;
  }

  public void setLastRaidPointsSummary(List<GuildRaidPointsSummary> lastRaidPointsSummary) {
    this.lastRaidPointsSummary = lastRaidPointsSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Guild guild = (Guild) o;
    return Objects.equals(this.profile, guild.profile) &&
        Objects.equals(this.member, guild.member) &&
        Objects.equals(this.inviteStatus, guild.inviteStatus) &&
        Objects.equals(this.raidStatus, guild.raidStatus) &&
        Objects.equals(this.inventory, guild.inventory) &&
        Objects.equals(this.raidResult, guild.raidResult) &&
        Objects.equals(this.progress, guild.progress) &&
        Objects.equals(this.territoryBattleStatus, guild.territoryBattleStatus) &&
        Objects.equals(this.guildEvents, guild.guildEvents) &&
        Objects.equals(this.territoryBattleResult, guild.territoryBattleResult) &&
        Objects.equals(this.territoryWarStatus, guild.territoryWarStatus) &&
        Objects.equals(this.roomAvailable, guild.roomAvailable) &&
        Objects.equals(this.nextChallengesRefresh, guild.nextChallengesRefresh) &&
        Objects.equals(this.stat, guild.stat) &&
        Objects.equals(this.recentRaidResult, guild.recentRaidResult) &&
        Objects.equals(this.recentTerritoryWarResult, guild.recentTerritoryWarResult) &&
        Objects.equals(this.lastRaidPointsSummary, guild.lastRaidPointsSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profile, member, inviteStatus, raidStatus, inventory, raidResult, progress, territoryBattleStatus, guildEvents, territoryBattleResult, territoryWarStatus, roomAvailable, nextChallengesRefresh, stat, recentRaidResult, recentTerritoryWarResult, lastRaidPointsSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Guild {\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    inviteStatus: ").append(toIndentedString(inviteStatus)).append("\n");
    sb.append("    raidStatus: ").append(toIndentedString(raidStatus)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    raidResult: ").append(toIndentedString(raidResult)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    territoryBattleStatus: ").append(toIndentedString(territoryBattleStatus)).append("\n");
    sb.append("    guildEvents: ").append(toIndentedString(guildEvents)).append("\n");
    sb.append("    territoryBattleResult: ").append(toIndentedString(territoryBattleResult)).append("\n");
    sb.append("    territoryWarStatus: ").append(toIndentedString(territoryWarStatus)).append("\n");
    sb.append("    roomAvailable: ").append(toIndentedString(roomAvailable)).append("\n");
    sb.append("    nextChallengesRefresh: ").append(toIndentedString(nextChallengesRefresh)).append("\n");
    sb.append("    stat: ").append(toIndentedString(stat)).append("\n");
    sb.append("    recentRaidResult: ").append(toIndentedString(recentRaidResult)).append("\n");
    sb.append("    recentTerritoryWarResult: ").append(toIndentedString(recentTerritoryWarResult)).append("\n");
    sb.append("    lastRaidPointsSummary: ").append(toIndentedString(lastRaidPointsSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("profile");
    openapiFields.add("member");
    openapiFields.add("inviteStatus");
    openapiFields.add("raidStatus");
    openapiFields.add("inventory");
    openapiFields.add("raidResult");
    openapiFields.add("progress");
    openapiFields.add("territoryBattleStatus");
    openapiFields.add("guildEvents");
    openapiFields.add("territoryBattleResult");
    openapiFields.add("territoryWarStatus");
    openapiFields.add("roomAvailable");
    openapiFields.add("nextChallengesRefresh");
    openapiFields.add("stat");
    openapiFields.add("recentRaidResult");
    openapiFields.add("recentTerritoryWarResult");
    openapiFields.add("lastRaidPointsSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Guild
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Guild.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Guild is not found in the empty JSON string", Guild.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Guild.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Guild` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        GuildProfile.validateJsonElement(jsonObj.get("profile"));
      }
      if (jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) {
        JsonArray jsonArraymember = jsonObj.getAsJsonArray("member");
        if (jsonArraymember != null) {
          // ensure the json data is an array
          if (!jsonObj.get("member").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `member` to be an array in the JSON string but got `%s`", jsonObj.get("member").toString()));
          }

          // validate the optional field `member` (array)
          for (int i = 0; i < jsonArraymember.size(); i++) {
            GuildMember.validateJsonElement(jsonArraymember.get(i));
          };
        }
      }
      if (jsonObj.get("inviteStatus") != null && !jsonObj.get("inviteStatus").isJsonNull()) {
        JsonArray jsonArrayinviteStatus = jsonObj.getAsJsonArray("inviteStatus");
        if (jsonArrayinviteStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inviteStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inviteStatus` to be an array in the JSON string but got `%s`", jsonObj.get("inviteStatus").toString()));
          }

          // validate the optional field `inviteStatus` (array)
          for (int i = 0; i < jsonArrayinviteStatus.size(); i++) {
            GuildInviteStatus.validateJsonElement(jsonArrayinviteStatus.get(i));
          };
        }
      }
      if (jsonObj.get("raidStatus") != null && !jsonObj.get("raidStatus").isJsonNull()) {
        JsonArray jsonArrayraidStatus = jsonObj.getAsJsonArray("raidStatus");
        if (jsonArrayraidStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidStatus` to be an array in the JSON string but got `%s`", jsonObj.get("raidStatus").toString()));
          }

          // validate the optional field `raidStatus` (array)
          for (int i = 0; i < jsonArrayraidStatus.size(); i++) {
            GuildRaidStatus.validateJsonElement(jsonArrayraidStatus.get(i));
          };
        }
      }
      // validate the optional field `inventory`
      if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
        GuildInventory.validateJsonElement(jsonObj.get("inventory"));
      }
      if (jsonObj.get("raidResult") != null && !jsonObj.get("raidResult").isJsonNull()) {
        JsonArray jsonArrayraidResult = jsonObj.getAsJsonArray("raidResult");
        if (jsonArrayraidResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidResult` to be an array in the JSON string but got `%s`", jsonObj.get("raidResult").toString()));
          }

          // validate the optional field `raidResult` (array)
          for (int i = 0; i < jsonArrayraidResult.size(); i++) {
            GuildRaidResult.validateJsonElement(jsonArrayraidResult.get(i));
          };
        }
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        GuildProgress.validateJsonElement(jsonObj.get("progress"));
      }
      if (jsonObj.get("territoryBattleStatus") != null && !jsonObj.get("territoryBattleStatus").isJsonNull()) {
        JsonArray jsonArrayterritoryBattleStatus = jsonObj.getAsJsonArray("territoryBattleStatus");
        if (jsonArrayterritoryBattleStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryBattleStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryBattleStatus` to be an array in the JSON string but got `%s`", jsonObj.get("territoryBattleStatus").toString()));
          }

          // validate the optional field `territoryBattleStatus` (array)
          for (int i = 0; i < jsonArrayterritoryBattleStatus.size(); i++) {
            TerritoryBattleStatus.validateJsonElement(jsonArrayterritoryBattleStatus.get(i));
          };
        }
      }
      if (jsonObj.get("guildEvents") != null && !jsonObj.get("guildEvents").isJsonNull()) {
        JsonArray jsonArrayguildEvents = jsonObj.getAsJsonArray("guildEvents");
        if (jsonArrayguildEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guildEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guildEvents` to be an array in the JSON string but got `%s`", jsonObj.get("guildEvents").toString()));
          }

          // validate the optional field `guildEvents` (array)
          for (int i = 0; i < jsonArrayguildEvents.size(); i++) {
            GameEvent.validateJsonElement(jsonArrayguildEvents.get(i));
          };
        }
      }
      if (jsonObj.get("territoryBattleResult") != null && !jsonObj.get("territoryBattleResult").isJsonNull()) {
        JsonArray jsonArrayterritoryBattleResult = jsonObj.getAsJsonArray("territoryBattleResult");
        if (jsonArrayterritoryBattleResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryBattleResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryBattleResult` to be an array in the JSON string but got `%s`", jsonObj.get("territoryBattleResult").toString()));
          }

          // validate the optional field `territoryBattleResult` (array)
          for (int i = 0; i < jsonArrayterritoryBattleResult.size(); i++) {
            TerritoryBattleResult.validateJsonElement(jsonArrayterritoryBattleResult.get(i));
          };
        }
      }
      if (jsonObj.get("territoryWarStatus") != null && !jsonObj.get("territoryWarStatus").isJsonNull()) {
        JsonArray jsonArrayterritoryWarStatus = jsonObj.getAsJsonArray("territoryWarStatus");
        if (jsonArrayterritoryWarStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryWarStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryWarStatus` to be an array in the JSON string but got `%s`", jsonObj.get("territoryWarStatus").toString()));
          }

          // validate the optional field `territoryWarStatus` (array)
          for (int i = 0; i < jsonArrayterritoryWarStatus.size(); i++) {
            TerritoryWarStatus.validateJsonElement(jsonArrayterritoryWarStatus.get(i));
          };
        }
      }
      if (jsonObj.get("roomAvailable") != null && !jsonObj.get("roomAvailable").isJsonNull()) {
        JsonArray jsonArrayroomAvailable = jsonObj.getAsJsonArray("roomAvailable");
        if (jsonArrayroomAvailable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roomAvailable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roomAvailable` to be an array in the JSON string but got `%s`", jsonObj.get("roomAvailable").toString()));
          }

          // validate the optional field `roomAvailable` (array)
          for (int i = 0; i < jsonArrayroomAvailable.size(); i++) {
            RoomData.validateJsonElement(jsonArrayroomAvailable.get(i));
          };
        }
      }
      if (jsonObj.get("stat") != null && !jsonObj.get("stat").isJsonNull()) {
        JsonArray jsonArraystat = jsonObj.getAsJsonArray("stat");
        if (jsonArraystat != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stat").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stat` to be an array in the JSON string but got `%s`", jsonObj.get("stat").toString()));
          }

          // validate the optional field `stat` (array)
          for (int i = 0; i < jsonArraystat.size(); i++) {
            GuildStat.validateJsonElement(jsonArraystat.get(i));
          };
        }
      }
      if (jsonObj.get("recentRaidResult") != null && !jsonObj.get("recentRaidResult").isJsonNull()) {
        JsonArray jsonArrayrecentRaidResult = jsonObj.getAsJsonArray("recentRaidResult");
        if (jsonArrayrecentRaidResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recentRaidResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recentRaidResult` to be an array in the JSON string but got `%s`", jsonObj.get("recentRaidResult").toString()));
          }

          // validate the optional field `recentRaidResult` (array)
          for (int i = 0; i < jsonArrayrecentRaidResult.size(); i++) {
            GuildRaidResult.validateJsonElement(jsonArrayrecentRaidResult.get(i));
          };
        }
      }
      if (jsonObj.get("recentTerritoryWarResult") != null && !jsonObj.get("recentTerritoryWarResult").isJsonNull()) {
        JsonArray jsonArrayrecentTerritoryWarResult = jsonObj.getAsJsonArray("recentTerritoryWarResult");
        if (jsonArrayrecentTerritoryWarResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recentTerritoryWarResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recentTerritoryWarResult` to be an array in the JSON string but got `%s`", jsonObj.get("recentTerritoryWarResult").toString()));
          }

          // validate the optional field `recentTerritoryWarResult` (array)
          for (int i = 0; i < jsonArrayrecentTerritoryWarResult.size(); i++) {
            TerritoryWarResult.validateJsonElement(jsonArrayrecentTerritoryWarResult.get(i));
          };
        }
      }
      if (jsonObj.get("lastRaidPointsSummary") != null && !jsonObj.get("lastRaidPointsSummary").isJsonNull()) {
        JsonArray jsonArraylastRaidPointsSummary = jsonObj.getAsJsonArray("lastRaidPointsSummary");
        if (jsonArraylastRaidPointsSummary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lastRaidPointsSummary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lastRaidPointsSummary` to be an array in the JSON string but got `%s`", jsonObj.get("lastRaidPointsSummary").toString()));
          }

          // validate the optional field `lastRaidPointsSummary` (array)
          for (int i = 0; i < jsonArraylastRaidPointsSummary.size(); i++) {
            GuildRaidPointsSummary.validateJsonElement(jsonArraylastRaidPointsSummary.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Guild.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Guild' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Guild> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Guild.class));

       return (TypeAdapter<T>) new TypeAdapter<Guild>() {
           @Override
           public void write(JsonWriter out, Guild value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Guild read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Guild given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Guild
   * @throws IOException if the JSON string is invalid with respect to Guild
   */
  public static Guild fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Guild.class);
  }

  /**
   * Convert an instance of Guild to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

