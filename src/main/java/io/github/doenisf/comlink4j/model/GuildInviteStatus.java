/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * GuildInviteStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GuildInviteStatus {
  public static final String SERIALIZED_NAME_GUILD_ID = "guildId";
  @SerializedName(SERIALIZED_NAME_GUILD_ID)
  private String guildId;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private Long expireTime;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private GuildInviteType type;

  public static final String SERIALIZED_NAME_LEADER_UNIT = "leaderUnit";
  @SerializedName(SERIALIZED_NAME_LEADER_UNIT)
  private Unit leaderUnit;

  public static final String SERIALIZED_NAME_SENT_TIME = "sentTime";
  @SerializedName(SERIALIZED_NAME_SENT_TIME)
  private Long sentTime;

  public static final String SERIALIZED_NAME_PLAYER_LEVEL = "playerLevel";
  @SerializedName(SERIALIZED_NAME_PLAYER_LEVEL)
  private Integer playerLevel;

  public static final String SERIALIZED_NAME_PLAYER_NAME = "playerName";
  @SerializedName(SERIALIZED_NAME_PLAYER_NAME)
  private String playerName;

  public GuildInviteStatus() {
  }

  public GuildInviteStatus guildId(String guildId) {
    this.guildId = guildId;
    return this;
  }

  /**
   * Get guildId
   * @return guildId
   */
  @javax.annotation.Nullable
  public String getGuildId() {
    return guildId;
  }

  public void setGuildId(String guildId) {
    this.guildId = guildId;
  }


  public GuildInviteStatus expireTime(Long expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Get expireTime
   * @return expireTime
   */
  @javax.annotation.Nullable
  public Long getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(Long expireTime) {
    this.expireTime = expireTime;
  }


  public GuildInviteStatus playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }


  public GuildInviteStatus type(GuildInviteType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public GuildInviteType getType() {
    return type;
  }

  public void setType(GuildInviteType type) {
    this.type = type;
  }


  public GuildInviteStatus leaderUnit(Unit leaderUnit) {
    this.leaderUnit = leaderUnit;
    return this;
  }

  /**
   * Get leaderUnit
   * @return leaderUnit
   */
  @javax.annotation.Nullable
  public Unit getLeaderUnit() {
    return leaderUnit;
  }

  public void setLeaderUnit(Unit leaderUnit) {
    this.leaderUnit = leaderUnit;
  }


  public GuildInviteStatus sentTime(Long sentTime) {
    this.sentTime = sentTime;
    return this;
  }

  /**
   * Get sentTime
   * @return sentTime
   */
  @javax.annotation.Nullable
  public Long getSentTime() {
    return sentTime;
  }

  public void setSentTime(Long sentTime) {
    this.sentTime = sentTime;
  }


  public GuildInviteStatus playerLevel(Integer playerLevel) {
    this.playerLevel = playerLevel;
    return this;
  }

  /**
   * Get playerLevel
   * @return playerLevel
   */
  @javax.annotation.Nullable
  public Integer getPlayerLevel() {
    return playerLevel;
  }

  public void setPlayerLevel(Integer playerLevel) {
    this.playerLevel = playerLevel;
  }


  public GuildInviteStatus playerName(String playerName) {
    this.playerName = playerName;
    return this;
  }

  /**
   * Get playerName
   * @return playerName
   */
  @javax.annotation.Nullable
  public String getPlayerName() {
    return playerName;
  }

  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuildInviteStatus guildInviteStatus = (GuildInviteStatus) o;
    return Objects.equals(this.guildId, guildInviteStatus.guildId) &&
        Objects.equals(this.expireTime, guildInviteStatus.expireTime) &&
        Objects.equals(this.playerId, guildInviteStatus.playerId) &&
        Objects.equals(this.type, guildInviteStatus.type) &&
        Objects.equals(this.leaderUnit, guildInviteStatus.leaderUnit) &&
        Objects.equals(this.sentTime, guildInviteStatus.sentTime) &&
        Objects.equals(this.playerLevel, guildInviteStatus.playerLevel) &&
        Objects.equals(this.playerName, guildInviteStatus.playerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guildId, expireTime, playerId, type, leaderUnit, sentTime, playerLevel, playerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuildInviteStatus {\n");
    sb.append("    guildId: ").append(toIndentedString(guildId)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    leaderUnit: ").append(toIndentedString(leaderUnit)).append("\n");
    sb.append("    sentTime: ").append(toIndentedString(sentTime)).append("\n");
    sb.append("    playerLevel: ").append(toIndentedString(playerLevel)).append("\n");
    sb.append("    playerName: ").append(toIndentedString(playerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guildId");
    openapiFields.add("expireTime");
    openapiFields.add("playerId");
    openapiFields.add("type");
    openapiFields.add("leaderUnit");
    openapiFields.add("sentTime");
    openapiFields.add("playerLevel");
    openapiFields.add("playerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuildInviteStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuildInviteStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuildInviteStatus is not found in the empty JSON string", GuildInviteStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuildInviteStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuildInviteStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("guildId") != null && !jsonObj.get("guildId").isJsonNull()) && !jsonObj.get("guildId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildId").toString()));
      }
      if ((jsonObj.get("playerId") != null && !jsonObj.get("playerId").isJsonNull()) && !jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        GuildInviteType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `leaderUnit`
      if (jsonObj.get("leaderUnit") != null && !jsonObj.get("leaderUnit").isJsonNull()) {
        Unit.validateJsonElement(jsonObj.get("leaderUnit"));
      }
      if ((jsonObj.get("playerName") != null && !jsonObj.get("playerName").isJsonNull()) && !jsonObj.get("playerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuildInviteStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuildInviteStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuildInviteStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuildInviteStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GuildInviteStatus>() {
           @Override
           public void write(JsonWriter out, GuildInviteStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuildInviteStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuildInviteStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuildInviteStatus
   * @throws IOException if the JSON string is invalid with respect to GuildInviteStatus
   */
  public static GuildInviteStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuildInviteStatus.class);
  }

  /**
   * Convert an instance of GuildInviteStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

