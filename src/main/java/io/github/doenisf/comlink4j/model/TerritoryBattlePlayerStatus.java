/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.TerritoryPlayerUnitStatus;
import io.github.doenisf.comlink4j.model.TerritoryPlayerZoneStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryBattlePlayerStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryBattlePlayerStatus {
  public static final String SERIALIZED_NAME_ZONE_STATUS = "zoneStatus";
  @SerializedName(SERIALIZED_NAME_ZONE_STATUS)
  private List<TerritoryPlayerZoneStatus> zoneStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_STATUS = "unitStatus";
  @SerializedName(SERIALIZED_NAME_UNIT_STATUS)
  private List<TerritoryPlayerUnitStatus> unitStatus = new ArrayList<>();

  public TerritoryBattlePlayerStatus() {
  }

  public TerritoryBattlePlayerStatus zoneStatus(List<TerritoryPlayerZoneStatus> zoneStatus) {
    this.zoneStatus = zoneStatus;
    return this;
  }

  public TerritoryBattlePlayerStatus addZoneStatusItem(TerritoryPlayerZoneStatus zoneStatusItem) {
    if (this.zoneStatus == null) {
      this.zoneStatus = new ArrayList<>();
    }
    this.zoneStatus.add(zoneStatusItem);
    return this;
  }

  /**
   * Get zoneStatus
   * @return zoneStatus
   */
  @javax.annotation.Nullable
  public List<TerritoryPlayerZoneStatus> getZoneStatus() {
    return zoneStatus;
  }

  public void setZoneStatus(List<TerritoryPlayerZoneStatus> zoneStatus) {
    this.zoneStatus = zoneStatus;
  }


  public TerritoryBattlePlayerStatus unitStatus(List<TerritoryPlayerUnitStatus> unitStatus) {
    this.unitStatus = unitStatus;
    return this;
  }

  public TerritoryBattlePlayerStatus addUnitStatusItem(TerritoryPlayerUnitStatus unitStatusItem) {
    if (this.unitStatus == null) {
      this.unitStatus = new ArrayList<>();
    }
    this.unitStatus.add(unitStatusItem);
    return this;
  }

  /**
   * Get unitStatus
   * @return unitStatus
   */
  @javax.annotation.Nullable
  public List<TerritoryPlayerUnitStatus> getUnitStatus() {
    return unitStatus;
  }

  public void setUnitStatus(List<TerritoryPlayerUnitStatus> unitStatus) {
    this.unitStatus = unitStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryBattlePlayerStatus territoryBattlePlayerStatus = (TerritoryBattlePlayerStatus) o;
    return Objects.equals(this.zoneStatus, territoryBattlePlayerStatus.zoneStatus) &&
        Objects.equals(this.unitStatus, territoryBattlePlayerStatus.unitStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneStatus, unitStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryBattlePlayerStatus {\n");
    sb.append("    zoneStatus: ").append(toIndentedString(zoneStatus)).append("\n");
    sb.append("    unitStatus: ").append(toIndentedString(unitStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("zoneStatus");
    openapiFields.add("unitStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryBattlePlayerStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryBattlePlayerStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryBattlePlayerStatus is not found in the empty JSON string", TerritoryBattlePlayerStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryBattlePlayerStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryBattlePlayerStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("zoneStatus") != null && !jsonObj.get("zoneStatus").isJsonNull()) {
        JsonArray jsonArrayzoneStatus = jsonObj.getAsJsonArray("zoneStatus");
        if (jsonArrayzoneStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("zoneStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `zoneStatus` to be an array in the JSON string but got `%s`", jsonObj.get("zoneStatus").toString()));
          }

          // validate the optional field `zoneStatus` (array)
          for (int i = 0; i < jsonArrayzoneStatus.size(); i++) {
            TerritoryPlayerZoneStatus.validateJsonElement(jsonArrayzoneStatus.get(i));
          };
        }
      }
      if (jsonObj.get("unitStatus") != null && !jsonObj.get("unitStatus").isJsonNull()) {
        JsonArray jsonArrayunitStatus = jsonObj.getAsJsonArray("unitStatus");
        if (jsonArrayunitStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unitStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unitStatus` to be an array in the JSON string but got `%s`", jsonObj.get("unitStatus").toString()));
          }

          // validate the optional field `unitStatus` (array)
          for (int i = 0; i < jsonArrayunitStatus.size(); i++) {
            TerritoryPlayerUnitStatus.validateJsonElement(jsonArrayunitStatus.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryBattlePlayerStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryBattlePlayerStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryBattlePlayerStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryBattlePlayerStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryBattlePlayerStatus>() {
           @Override
           public void write(JsonWriter out, TerritoryBattlePlayerStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryBattlePlayerStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryBattlePlayerStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryBattlePlayerStatus
   * @throws IOException if the JSON string is invalid with respect to TerritoryBattlePlayerStatus
   */
  public static TerritoryBattlePlayerStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryBattlePlayerStatus.class);
  }

  /**
   * Convert an instance of TerritoryBattlePlayerStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

