/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.ConquestNode;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * ConquestSector
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ConquestSector {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private List<ConquestNode> node = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFAB_NAME = "prefabName";
  @SerializedName(SERIALIZED_NAME_PREFAB_NAME)
  private String prefabName;

  public static final String SERIALIZED_NAME_ART_TILE = "artTile";
  @SerializedName(SERIALIZED_NAME_ART_TILE)
  private String artTile;

  public static final String SERIALIZED_NAME_TITLE_KEY = "titleKey";
  @SerializedName(SERIALIZED_NAME_TITLE_KEY)
  private String titleKey;

  public static final String SERIALIZED_NAME_ENVIRONMENT_TITLE_KEY = "environmentTitleKey";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_TITLE_KEY)
  private String environmentTitleKey;

  public static final String SERIALIZED_NAME_BACKGROUND_PREFAB_NAME = "backgroundPrefabName";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_PREFAB_NAME)
  private String backgroundPrefabName;

  public ConquestSector() {
  }

  public ConquestSector id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConquestSector node(List<ConquestNode> node) {
    this.node = node;
    return this;
  }

  public ConquestSector addNodeItem(ConquestNode nodeItem) {
    if (this.node == null) {
      this.node = new ArrayList<>();
    }
    this.node.add(nodeItem);
    return this;
  }

  /**
   * Get node
   * @return node
   */
  @javax.annotation.Nullable
  public List<ConquestNode> getNode() {
    return node;
  }

  public void setNode(List<ConquestNode> node) {
    this.node = node;
  }


  public ConquestSector prefabName(String prefabName) {
    this.prefabName = prefabName;
    return this;
  }

  /**
   * Get prefabName
   * @return prefabName
   */
  @javax.annotation.Nullable
  public String getPrefabName() {
    return prefabName;
  }

  public void setPrefabName(String prefabName) {
    this.prefabName = prefabName;
  }


  public ConquestSector artTile(String artTile) {
    this.artTile = artTile;
    return this;
  }

  /**
   * Get artTile
   * @return artTile
   */
  @javax.annotation.Nullable
  public String getArtTile() {
    return artTile;
  }

  public void setArtTile(String artTile) {
    this.artTile = artTile;
  }


  public ConquestSector titleKey(String titleKey) {
    this.titleKey = titleKey;
    return this;
  }

  /**
   * Get titleKey
   * @return titleKey
   */
  @javax.annotation.Nullable
  public String getTitleKey() {
    return titleKey;
  }

  public void setTitleKey(String titleKey) {
    this.titleKey = titleKey;
  }


  public ConquestSector environmentTitleKey(String environmentTitleKey) {
    this.environmentTitleKey = environmentTitleKey;
    return this;
  }

  /**
   * Get environmentTitleKey
   * @return environmentTitleKey
   */
  @javax.annotation.Nullable
  public String getEnvironmentTitleKey() {
    return environmentTitleKey;
  }

  public void setEnvironmentTitleKey(String environmentTitleKey) {
    this.environmentTitleKey = environmentTitleKey;
  }


  public ConquestSector backgroundPrefabName(String backgroundPrefabName) {
    this.backgroundPrefabName = backgroundPrefabName;
    return this;
  }

  /**
   * Get backgroundPrefabName
   * @return backgroundPrefabName
   */
  @javax.annotation.Nullable
  public String getBackgroundPrefabName() {
    return backgroundPrefabName;
  }

  public void setBackgroundPrefabName(String backgroundPrefabName) {
    this.backgroundPrefabName = backgroundPrefabName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConquestSector conquestSector = (ConquestSector) o;
    return Objects.equals(this.id, conquestSector.id) &&
        Objects.equals(this.node, conquestSector.node) &&
        Objects.equals(this.prefabName, conquestSector.prefabName) &&
        Objects.equals(this.artTile, conquestSector.artTile) &&
        Objects.equals(this.titleKey, conquestSector.titleKey) &&
        Objects.equals(this.environmentTitleKey, conquestSector.environmentTitleKey) &&
        Objects.equals(this.backgroundPrefabName, conquestSector.backgroundPrefabName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, node, prefabName, artTile, titleKey, environmentTitleKey, backgroundPrefabName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConquestSector {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    prefabName: ").append(toIndentedString(prefabName)).append("\n");
    sb.append("    artTile: ").append(toIndentedString(artTile)).append("\n");
    sb.append("    titleKey: ").append(toIndentedString(titleKey)).append("\n");
    sb.append("    environmentTitleKey: ").append(toIndentedString(environmentTitleKey)).append("\n");
    sb.append("    backgroundPrefabName: ").append(toIndentedString(backgroundPrefabName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("node");
    openapiFields.add("prefabName");
    openapiFields.add("artTile");
    openapiFields.add("titleKey");
    openapiFields.add("environmentTitleKey");
    openapiFields.add("backgroundPrefabName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConquestSector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConquestSector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConquestSector is not found in the empty JSON string", ConquestSector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConquestSector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConquestSector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) {
        JsonArray jsonArraynode = jsonObj.getAsJsonArray("node");
        if (jsonArraynode != null) {
          // ensure the json data is an array
          if (!jsonObj.get("node").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `node` to be an array in the JSON string but got `%s`", jsonObj.get("node").toString()));
          }

          // validate the optional field `node` (array)
          for (int i = 0; i < jsonArraynode.size(); i++) {
            ConquestNode.validateJsonElement(jsonArraynode.get(i));
          };
        }
      }
      if ((jsonObj.get("prefabName") != null && !jsonObj.get("prefabName").isJsonNull()) && !jsonObj.get("prefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefabName").toString()));
      }
      if ((jsonObj.get("artTile") != null && !jsonObj.get("artTile").isJsonNull()) && !jsonObj.get("artTile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artTile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artTile").toString()));
      }
      if ((jsonObj.get("titleKey") != null && !jsonObj.get("titleKey").isJsonNull()) && !jsonObj.get("titleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleKey").toString()));
      }
      if ((jsonObj.get("environmentTitleKey") != null && !jsonObj.get("environmentTitleKey").isJsonNull()) && !jsonObj.get("environmentTitleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentTitleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentTitleKey").toString()));
      }
      if ((jsonObj.get("backgroundPrefabName") != null && !jsonObj.get("backgroundPrefabName").isJsonNull()) && !jsonObj.get("backgroundPrefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundPrefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundPrefabName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConquestSector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConquestSector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConquestSector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConquestSector.class));

       return (TypeAdapter<T>) new TypeAdapter<ConquestSector>() {
           @Override
           public void write(JsonWriter out, ConquestSector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConquestSector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConquestSector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConquestSector
   * @throws IOException if the JSON string is invalid with respect to ConquestSector
   */
  public static ConquestSector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConquestSector.class);
  }

  /**
   * Convert an instance of ConquestSector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

