/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CombatType;
import io.github.doenisf.comlink4j.model.ForceAlignment;
import io.github.doenisf.comlink4j.model.TerritoryBattleZoneUnitType;
import io.github.doenisf.comlink4j.model.TerritoryRewardBracket;
import io.github.doenisf.comlink4j.model.TerritoryZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryBattleConflictZoneDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryBattleConflictZoneDefinition {
  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public static final String SERIALIZED_NAME_VICTORY_POINT_REWARDS = "victoryPointRewards";
  @SerializedName(SERIALIZED_NAME_VICTORY_POINT_REWARDS)
  private List<TerritoryRewardBracket> victoryPointRewards = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE_DEFINITION = "zoneDefinition";
  @SerializedName(SERIALIZED_NAME_ZONE_DEFINITION)
  private TerritoryZoneDefinition zoneDefinition;

  public static final String SERIALIZED_NAME_CONFLICT_IMAGE = "conflictImage";
  @SerializedName(SERIALIZED_NAME_CONFLICT_IMAGE)
  private String conflictImage;

  public static final String SERIALIZED_NAME_TERRITORY_BATTLE_ZONE_UNIT_TYPE = "territoryBattleZoneUnitType";
  @SerializedName(SERIALIZED_NAME_TERRITORY_BATTLE_ZONE_UNIT_TYPE)
  private TerritoryBattleZoneUnitType territoryBattleZoneUnitType;

  public static final String SERIALIZED_NAME_ALTERNATE_CHASE_ICON = "alternateChaseIcon";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_CHASE_ICON)
  private Boolean alternateChaseIcon;

  public static final String SERIALIZED_NAME_FORCE_ALIGNMENT = "forceAlignment";
  @SerializedName(SERIALIZED_NAME_FORCE_ALIGNMENT)
  private ForceAlignment forceAlignment;

  public static final String SERIALIZED_NAME_IS_BONUS = "isBonus";
  @SerializedName(SERIALIZED_NAME_IS_BONUS)
  private Boolean isBonus;

  public static final String SERIALIZED_NAME_IS_NEWEST_BONUS_ZONE = "isNewestBonusZone";
  @SerializedName(SERIALIZED_NAME_IS_NEWEST_BONUS_ZONE)
  private Boolean isNewestBonusZone;

  public TerritoryBattleConflictZoneDefinition() {
  }

  public TerritoryBattleConflictZoneDefinition combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }


  public TerritoryBattleConflictZoneDefinition victoryPointRewards(List<TerritoryRewardBracket> victoryPointRewards) {
    this.victoryPointRewards = victoryPointRewards;
    return this;
  }

  public TerritoryBattleConflictZoneDefinition addVictoryPointRewardsItem(TerritoryRewardBracket victoryPointRewardsItem) {
    if (this.victoryPointRewards == null) {
      this.victoryPointRewards = new ArrayList<>();
    }
    this.victoryPointRewards.add(victoryPointRewardsItem);
    return this;
  }

  /**
   * Get victoryPointRewards
   * @return victoryPointRewards
   */
  @javax.annotation.Nullable
  public List<TerritoryRewardBracket> getVictoryPointRewards() {
    return victoryPointRewards;
  }

  public void setVictoryPointRewards(List<TerritoryRewardBracket> victoryPointRewards) {
    this.victoryPointRewards = victoryPointRewards;
  }


  public TerritoryBattleConflictZoneDefinition zoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
    return this;
  }

  /**
   * Get zoneDefinition
   * @return zoneDefinition
   */
  @javax.annotation.Nullable
  public TerritoryZoneDefinition getZoneDefinition() {
    return zoneDefinition;
  }

  public void setZoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
  }


  public TerritoryBattleConflictZoneDefinition conflictImage(String conflictImage) {
    this.conflictImage = conflictImage;
    return this;
  }

  /**
   * Get conflictImage
   * @return conflictImage
   */
  @javax.annotation.Nullable
  public String getConflictImage() {
    return conflictImage;
  }

  public void setConflictImage(String conflictImage) {
    this.conflictImage = conflictImage;
  }


  public TerritoryBattleConflictZoneDefinition territoryBattleZoneUnitType(TerritoryBattleZoneUnitType territoryBattleZoneUnitType) {
    this.territoryBattleZoneUnitType = territoryBattleZoneUnitType;
    return this;
  }

  /**
   * Get territoryBattleZoneUnitType
   * @return territoryBattleZoneUnitType
   */
  @javax.annotation.Nullable
  public TerritoryBattleZoneUnitType getTerritoryBattleZoneUnitType() {
    return territoryBattleZoneUnitType;
  }

  public void setTerritoryBattleZoneUnitType(TerritoryBattleZoneUnitType territoryBattleZoneUnitType) {
    this.territoryBattleZoneUnitType = territoryBattleZoneUnitType;
  }


  public TerritoryBattleConflictZoneDefinition alternateChaseIcon(Boolean alternateChaseIcon) {
    this.alternateChaseIcon = alternateChaseIcon;
    return this;
  }

  /**
   * Get alternateChaseIcon
   * @return alternateChaseIcon
   */
  @javax.annotation.Nullable
  public Boolean getAlternateChaseIcon() {
    return alternateChaseIcon;
  }

  public void setAlternateChaseIcon(Boolean alternateChaseIcon) {
    this.alternateChaseIcon = alternateChaseIcon;
  }


  public TerritoryBattleConflictZoneDefinition forceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
    return this;
  }

  /**
   * Get forceAlignment
   * @return forceAlignment
   */
  @javax.annotation.Nullable
  public ForceAlignment getForceAlignment() {
    return forceAlignment;
  }

  public void setForceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
  }


  public TerritoryBattleConflictZoneDefinition isBonus(Boolean isBonus) {
    this.isBonus = isBonus;
    return this;
  }

  /**
   * Get isBonus
   * @return isBonus
   */
  @javax.annotation.Nullable
  public Boolean getIsBonus() {
    return isBonus;
  }

  public void setIsBonus(Boolean isBonus) {
    this.isBonus = isBonus;
  }


  public TerritoryBattleConflictZoneDefinition isNewestBonusZone(Boolean isNewestBonusZone) {
    this.isNewestBonusZone = isNewestBonusZone;
    return this;
  }

  /**
   * Get isNewestBonusZone
   * @return isNewestBonusZone
   */
  @javax.annotation.Nullable
  public Boolean getIsNewestBonusZone() {
    return isNewestBonusZone;
  }

  public void setIsNewestBonusZone(Boolean isNewestBonusZone) {
    this.isNewestBonusZone = isNewestBonusZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryBattleConflictZoneDefinition territoryBattleConflictZoneDefinition = (TerritoryBattleConflictZoneDefinition) o;
    return Objects.equals(this.combatType, territoryBattleConflictZoneDefinition.combatType) &&
        Objects.equals(this.victoryPointRewards, territoryBattleConflictZoneDefinition.victoryPointRewards) &&
        Objects.equals(this.zoneDefinition, territoryBattleConflictZoneDefinition.zoneDefinition) &&
        Objects.equals(this.conflictImage, territoryBattleConflictZoneDefinition.conflictImage) &&
        Objects.equals(this.territoryBattleZoneUnitType, territoryBattleConflictZoneDefinition.territoryBattleZoneUnitType) &&
        Objects.equals(this.alternateChaseIcon, territoryBattleConflictZoneDefinition.alternateChaseIcon) &&
        Objects.equals(this.forceAlignment, territoryBattleConflictZoneDefinition.forceAlignment) &&
        Objects.equals(this.isBonus, territoryBattleConflictZoneDefinition.isBonus) &&
        Objects.equals(this.isNewestBonusZone, territoryBattleConflictZoneDefinition.isNewestBonusZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(combatType, victoryPointRewards, zoneDefinition, conflictImage, territoryBattleZoneUnitType, alternateChaseIcon, forceAlignment, isBonus, isNewestBonusZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryBattleConflictZoneDefinition {\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("    victoryPointRewards: ").append(toIndentedString(victoryPointRewards)).append("\n");
    sb.append("    zoneDefinition: ").append(toIndentedString(zoneDefinition)).append("\n");
    sb.append("    conflictImage: ").append(toIndentedString(conflictImage)).append("\n");
    sb.append("    territoryBattleZoneUnitType: ").append(toIndentedString(territoryBattleZoneUnitType)).append("\n");
    sb.append("    alternateChaseIcon: ").append(toIndentedString(alternateChaseIcon)).append("\n");
    sb.append("    forceAlignment: ").append(toIndentedString(forceAlignment)).append("\n");
    sb.append("    isBonus: ").append(toIndentedString(isBonus)).append("\n");
    sb.append("    isNewestBonusZone: ").append(toIndentedString(isNewestBonusZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("combatType");
    openapiFields.add("victoryPointRewards");
    openapiFields.add("zoneDefinition");
    openapiFields.add("conflictImage");
    openapiFields.add("territoryBattleZoneUnitType");
    openapiFields.add("alternateChaseIcon");
    openapiFields.add("forceAlignment");
    openapiFields.add("isBonus");
    openapiFields.add("isNewestBonusZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryBattleConflictZoneDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryBattleConflictZoneDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryBattleConflictZoneDefinition is not found in the empty JSON string", TerritoryBattleConflictZoneDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryBattleConflictZoneDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryBattleConflictZoneDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
      if (jsonObj.get("victoryPointRewards") != null && !jsonObj.get("victoryPointRewards").isJsonNull()) {
        JsonArray jsonArrayvictoryPointRewards = jsonObj.getAsJsonArray("victoryPointRewards");
        if (jsonArrayvictoryPointRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("victoryPointRewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `victoryPointRewards` to be an array in the JSON string but got `%s`", jsonObj.get("victoryPointRewards").toString()));
          }

          // validate the optional field `victoryPointRewards` (array)
          for (int i = 0; i < jsonArrayvictoryPointRewards.size(); i++) {
            TerritoryRewardBracket.validateJsonElement(jsonArrayvictoryPointRewards.get(i));
          };
        }
      }
      // validate the optional field `zoneDefinition`
      if (jsonObj.get("zoneDefinition") != null && !jsonObj.get("zoneDefinition").isJsonNull()) {
        TerritoryZoneDefinition.validateJsonElement(jsonObj.get("zoneDefinition"));
      }
      if ((jsonObj.get("conflictImage") != null && !jsonObj.get("conflictImage").isJsonNull()) && !jsonObj.get("conflictImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflictImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflictImage").toString()));
      }
      // validate the optional field `territoryBattleZoneUnitType`
      if (jsonObj.get("territoryBattleZoneUnitType") != null && !jsonObj.get("territoryBattleZoneUnitType").isJsonNull()) {
        TerritoryBattleZoneUnitType.validateJsonElement(jsonObj.get("territoryBattleZoneUnitType"));
      }
      // validate the optional field `forceAlignment`
      if (jsonObj.get("forceAlignment") != null && !jsonObj.get("forceAlignment").isJsonNull()) {
        ForceAlignment.validateJsonElement(jsonObj.get("forceAlignment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryBattleConflictZoneDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryBattleConflictZoneDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryBattleConflictZoneDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryBattleConflictZoneDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryBattleConflictZoneDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryBattleConflictZoneDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryBattleConflictZoneDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryBattleConflictZoneDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryBattleConflictZoneDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryBattleConflictZoneDefinition
   */
  public static TerritoryBattleConflictZoneDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryBattleConflictZoneDefinition.class);
  }

  /**
   * Convert an instance of TerritoryBattleConflictZoneDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

