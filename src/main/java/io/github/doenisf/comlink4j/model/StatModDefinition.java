/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.LookupActionLink;
import io.github.doenisf.comlink4j.model.LookupMission;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.StatModSlot;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * StatModDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class StatModDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SLOT = "slot";
  @SerializedName(SERIALIZED_NAME_SLOT)
  private StatModSlot slot;

  public static final String SERIALIZED_NAME_SET_ID = "setId";
  @SerializedName(SERIALIZED_NAME_SET_ID)
  private String setId;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private Rarity rarity;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_MISSION_LOOKUP = "missionLookup";
  @SerializedName(SERIALIZED_NAME_MISSION_LOOKUP)
  private List<LookupMission> missionLookup = new ArrayList<>();

  public static final String SERIALIZED_NAME_RAID_LOOKUP = "raidLookup";
  @SerializedName(SERIALIZED_NAME_RAID_LOOKUP)
  private List<LookupMission> raidLookup = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTION_LINK_LOOKUP = "actionLinkLookup";
  @SerializedName(SERIALIZED_NAME_ACTION_LINK_LOOKUP)
  private List<LookupActionLink> actionLinkLookup = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEVEL_TABLE_ID = "levelTableId";
  @SerializedName(SERIALIZED_NAME_LEVEL_TABLE_ID)
  private String levelTableId;

  public static final String SERIALIZED_NAME_PROMOTION_ID = "promotionId";
  @SerializedName(SERIALIZED_NAME_PROMOTION_ID)
  private String promotionId;

  public static final String SERIALIZED_NAME_PROMOTION_RECIPE_ID = "promotionRecipeId";
  @SerializedName(SERIALIZED_NAME_PROMOTION_RECIPE_ID)
  private String promotionRecipeId;

  public static final String SERIALIZED_NAME_TIER_UP_RECIPE_TABLE_ID = "tierUpRecipeTableId";
  @SerializedName(SERIALIZED_NAME_TIER_UP_RECIPE_TABLE_ID)
  private String tierUpRecipeTableId;

  public static final String SERIALIZED_NAME_OVERCLOCK_RECIPE_TABLE_ID = "overclockRecipeTableId";
  @SerializedName(SERIALIZED_NAME_OVERCLOCK_RECIPE_TABLE_ID)
  private String overclockRecipeTableId;

  public static final String SERIALIZED_NAME_REROLL_CAP_TABLE_ID = "rerollCapTableId";
  @SerializedName(SERIALIZED_NAME_REROLL_CAP_TABLE_ID)
  private String rerollCapTableId;

  public static final String SERIALIZED_NAME_RAID_IMMEDIATE_LOOKUP = "raidImmediateLookup";
  @SerializedName(SERIALIZED_NAME_RAID_IMMEDIATE_LOOKUP)
  private List<LookupMission> raidImmediateLookup = new ArrayList<>();

  public StatModDefinition() {
  }

  public StatModDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StatModDefinition slot(StatModSlot slot) {
    this.slot = slot;
    return this;
  }

  /**
   * Get slot
   * @return slot
   */
  @javax.annotation.Nullable
  public StatModSlot getSlot() {
    return slot;
  }

  public void setSlot(StatModSlot slot) {
    this.slot = slot;
  }


  public StatModDefinition setId(String setId) {
    this.setId = setId;
    return this;
  }

  /**
   * Get setId
   * @return setId
   */
  @javax.annotation.Nullable
  public String getSetId() {
    return setId;
  }

  public void setSetId(String setId) {
    this.setId = setId;
  }


  public StatModDefinition rarity(Rarity rarity) {
    this.rarity = rarity;
    return this;
  }

  /**
   * Get rarity
   * @return rarity
   */
  @javax.annotation.Nullable
  public Rarity getRarity() {
    return rarity;
  }

  public void setRarity(Rarity rarity) {
    this.rarity = rarity;
  }


  public StatModDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public StatModDefinition descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public StatModDefinition missionLookup(List<LookupMission> missionLookup) {
    this.missionLookup = missionLookup;
    return this;
  }

  public StatModDefinition addMissionLookupItem(LookupMission missionLookupItem) {
    if (this.missionLookup == null) {
      this.missionLookup = new ArrayList<>();
    }
    this.missionLookup.add(missionLookupItem);
    return this;
  }

  /**
   * Get missionLookup
   * @return missionLookup
   */
  @javax.annotation.Nullable
  public List<LookupMission> getMissionLookup() {
    return missionLookup;
  }

  public void setMissionLookup(List<LookupMission> missionLookup) {
    this.missionLookup = missionLookup;
  }


  public StatModDefinition raidLookup(List<LookupMission> raidLookup) {
    this.raidLookup = raidLookup;
    return this;
  }

  public StatModDefinition addRaidLookupItem(LookupMission raidLookupItem) {
    if (this.raidLookup == null) {
      this.raidLookup = new ArrayList<>();
    }
    this.raidLookup.add(raidLookupItem);
    return this;
  }

  /**
   * Get raidLookup
   * @return raidLookup
   */
  @javax.annotation.Nullable
  public List<LookupMission> getRaidLookup() {
    return raidLookup;
  }

  public void setRaidLookup(List<LookupMission> raidLookup) {
    this.raidLookup = raidLookup;
  }


  public StatModDefinition actionLinkLookup(List<LookupActionLink> actionLinkLookup) {
    this.actionLinkLookup = actionLinkLookup;
    return this;
  }

  public StatModDefinition addActionLinkLookupItem(LookupActionLink actionLinkLookupItem) {
    if (this.actionLinkLookup == null) {
      this.actionLinkLookup = new ArrayList<>();
    }
    this.actionLinkLookup.add(actionLinkLookupItem);
    return this;
  }

  /**
   * Get actionLinkLookup
   * @return actionLinkLookup
   */
  @javax.annotation.Nullable
  public List<LookupActionLink> getActionLinkLookup() {
    return actionLinkLookup;
  }

  public void setActionLinkLookup(List<LookupActionLink> actionLinkLookup) {
    this.actionLinkLookup = actionLinkLookup;
  }


  public StatModDefinition levelTableId(String levelTableId) {
    this.levelTableId = levelTableId;
    return this;
  }

  /**
   * Get levelTableId
   * @return levelTableId
   */
  @javax.annotation.Nullable
  public String getLevelTableId() {
    return levelTableId;
  }

  public void setLevelTableId(String levelTableId) {
    this.levelTableId = levelTableId;
  }


  public StatModDefinition promotionId(String promotionId) {
    this.promotionId = promotionId;
    return this;
  }

  /**
   * Get promotionId
   * @return promotionId
   */
  @javax.annotation.Nullable
  public String getPromotionId() {
    return promotionId;
  }

  public void setPromotionId(String promotionId) {
    this.promotionId = promotionId;
  }


  public StatModDefinition promotionRecipeId(String promotionRecipeId) {
    this.promotionRecipeId = promotionRecipeId;
    return this;
  }

  /**
   * Get promotionRecipeId
   * @return promotionRecipeId
   */
  @javax.annotation.Nullable
  public String getPromotionRecipeId() {
    return promotionRecipeId;
  }

  public void setPromotionRecipeId(String promotionRecipeId) {
    this.promotionRecipeId = promotionRecipeId;
  }


  public StatModDefinition tierUpRecipeTableId(String tierUpRecipeTableId) {
    this.tierUpRecipeTableId = tierUpRecipeTableId;
    return this;
  }

  /**
   * Get tierUpRecipeTableId
   * @return tierUpRecipeTableId
   */
  @javax.annotation.Nullable
  public String getTierUpRecipeTableId() {
    return tierUpRecipeTableId;
  }

  public void setTierUpRecipeTableId(String tierUpRecipeTableId) {
    this.tierUpRecipeTableId = tierUpRecipeTableId;
  }


  public StatModDefinition overclockRecipeTableId(String overclockRecipeTableId) {
    this.overclockRecipeTableId = overclockRecipeTableId;
    return this;
  }

  /**
   * Get overclockRecipeTableId
   * @return overclockRecipeTableId
   */
  @javax.annotation.Nullable
  public String getOverclockRecipeTableId() {
    return overclockRecipeTableId;
  }

  public void setOverclockRecipeTableId(String overclockRecipeTableId) {
    this.overclockRecipeTableId = overclockRecipeTableId;
  }


  public StatModDefinition rerollCapTableId(String rerollCapTableId) {
    this.rerollCapTableId = rerollCapTableId;
    return this;
  }

  /**
   * Get rerollCapTableId
   * @return rerollCapTableId
   */
  @javax.annotation.Nullable
  public String getRerollCapTableId() {
    return rerollCapTableId;
  }

  public void setRerollCapTableId(String rerollCapTableId) {
    this.rerollCapTableId = rerollCapTableId;
  }


  public StatModDefinition raidImmediateLookup(List<LookupMission> raidImmediateLookup) {
    this.raidImmediateLookup = raidImmediateLookup;
    return this;
  }

  public StatModDefinition addRaidImmediateLookupItem(LookupMission raidImmediateLookupItem) {
    if (this.raidImmediateLookup == null) {
      this.raidImmediateLookup = new ArrayList<>();
    }
    this.raidImmediateLookup.add(raidImmediateLookupItem);
    return this;
  }

  /**
   * Get raidImmediateLookup
   * @return raidImmediateLookup
   */
  @javax.annotation.Nullable
  public List<LookupMission> getRaidImmediateLookup() {
    return raidImmediateLookup;
  }

  public void setRaidImmediateLookup(List<LookupMission> raidImmediateLookup) {
    this.raidImmediateLookup = raidImmediateLookup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatModDefinition statModDefinition = (StatModDefinition) o;
    return Objects.equals(this.id, statModDefinition.id) &&
        Objects.equals(this.slot, statModDefinition.slot) &&
        Objects.equals(this.setId, statModDefinition.setId) &&
        Objects.equals(this.rarity, statModDefinition.rarity) &&
        Objects.equals(this.nameKey, statModDefinition.nameKey) &&
        Objects.equals(this.descKey, statModDefinition.descKey) &&
        Objects.equals(this.missionLookup, statModDefinition.missionLookup) &&
        Objects.equals(this.raidLookup, statModDefinition.raidLookup) &&
        Objects.equals(this.actionLinkLookup, statModDefinition.actionLinkLookup) &&
        Objects.equals(this.levelTableId, statModDefinition.levelTableId) &&
        Objects.equals(this.promotionId, statModDefinition.promotionId) &&
        Objects.equals(this.promotionRecipeId, statModDefinition.promotionRecipeId) &&
        Objects.equals(this.tierUpRecipeTableId, statModDefinition.tierUpRecipeTableId) &&
        Objects.equals(this.overclockRecipeTableId, statModDefinition.overclockRecipeTableId) &&
        Objects.equals(this.rerollCapTableId, statModDefinition.rerollCapTableId) &&
        Objects.equals(this.raidImmediateLookup, statModDefinition.raidImmediateLookup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, slot, setId, rarity, nameKey, descKey, missionLookup, raidLookup, actionLinkLookup, levelTableId, promotionId, promotionRecipeId, tierUpRecipeTableId, overclockRecipeTableId, rerollCapTableId, raidImmediateLookup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatModDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slot: ").append(toIndentedString(slot)).append("\n");
    sb.append("    setId: ").append(toIndentedString(setId)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    missionLookup: ").append(toIndentedString(missionLookup)).append("\n");
    sb.append("    raidLookup: ").append(toIndentedString(raidLookup)).append("\n");
    sb.append("    actionLinkLookup: ").append(toIndentedString(actionLinkLookup)).append("\n");
    sb.append("    levelTableId: ").append(toIndentedString(levelTableId)).append("\n");
    sb.append("    promotionId: ").append(toIndentedString(promotionId)).append("\n");
    sb.append("    promotionRecipeId: ").append(toIndentedString(promotionRecipeId)).append("\n");
    sb.append("    tierUpRecipeTableId: ").append(toIndentedString(tierUpRecipeTableId)).append("\n");
    sb.append("    overclockRecipeTableId: ").append(toIndentedString(overclockRecipeTableId)).append("\n");
    sb.append("    rerollCapTableId: ").append(toIndentedString(rerollCapTableId)).append("\n");
    sb.append("    raidImmediateLookup: ").append(toIndentedString(raidImmediateLookup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("slot");
    openapiFields.add("setId");
    openapiFields.add("rarity");
    openapiFields.add("nameKey");
    openapiFields.add("descKey");
    openapiFields.add("missionLookup");
    openapiFields.add("raidLookup");
    openapiFields.add("actionLinkLookup");
    openapiFields.add("levelTableId");
    openapiFields.add("promotionId");
    openapiFields.add("promotionRecipeId");
    openapiFields.add("tierUpRecipeTableId");
    openapiFields.add("overclockRecipeTableId");
    openapiFields.add("rerollCapTableId");
    openapiFields.add("raidImmediateLookup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatModDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatModDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatModDefinition is not found in the empty JSON string", StatModDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatModDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatModDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `slot`
      if (jsonObj.get("slot") != null && !jsonObj.get("slot").isJsonNull()) {
        StatModSlot.validateJsonElement(jsonObj.get("slot"));
      }
      if ((jsonObj.get("setId") != null && !jsonObj.get("setId").isJsonNull()) && !jsonObj.get("setId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setId").toString()));
      }
      // validate the optional field `rarity`
      if (jsonObj.get("rarity") != null && !jsonObj.get("rarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("rarity"));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      if (jsonObj.get("missionLookup") != null && !jsonObj.get("missionLookup").isJsonNull()) {
        JsonArray jsonArraymissionLookup = jsonObj.getAsJsonArray("missionLookup");
        if (jsonArraymissionLookup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("missionLookup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `missionLookup` to be an array in the JSON string but got `%s`", jsonObj.get("missionLookup").toString()));
          }

          // validate the optional field `missionLookup` (array)
          for (int i = 0; i < jsonArraymissionLookup.size(); i++) {
            LookupMission.validateJsonElement(jsonArraymissionLookup.get(i));
          };
        }
      }
      if (jsonObj.get("raidLookup") != null && !jsonObj.get("raidLookup").isJsonNull()) {
        JsonArray jsonArrayraidLookup = jsonObj.getAsJsonArray("raidLookup");
        if (jsonArrayraidLookup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidLookup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidLookup` to be an array in the JSON string but got `%s`", jsonObj.get("raidLookup").toString()));
          }

          // validate the optional field `raidLookup` (array)
          for (int i = 0; i < jsonArrayraidLookup.size(); i++) {
            LookupMission.validateJsonElement(jsonArrayraidLookup.get(i));
          };
        }
      }
      if (jsonObj.get("actionLinkLookup") != null && !jsonObj.get("actionLinkLookup").isJsonNull()) {
        JsonArray jsonArrayactionLinkLookup = jsonObj.getAsJsonArray("actionLinkLookup");
        if (jsonArrayactionLinkLookup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actionLinkLookup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actionLinkLookup` to be an array in the JSON string but got `%s`", jsonObj.get("actionLinkLookup").toString()));
          }

          // validate the optional field `actionLinkLookup` (array)
          for (int i = 0; i < jsonArrayactionLinkLookup.size(); i++) {
            LookupActionLink.validateJsonElement(jsonArrayactionLinkLookup.get(i));
          };
        }
      }
      if ((jsonObj.get("levelTableId") != null && !jsonObj.get("levelTableId").isJsonNull()) && !jsonObj.get("levelTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `levelTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("levelTableId").toString()));
      }
      if ((jsonObj.get("promotionId") != null && !jsonObj.get("promotionId").isJsonNull()) && !jsonObj.get("promotionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionId").toString()));
      }
      if ((jsonObj.get("promotionRecipeId") != null && !jsonObj.get("promotionRecipeId").isJsonNull()) && !jsonObj.get("promotionRecipeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionRecipeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionRecipeId").toString()));
      }
      if ((jsonObj.get("tierUpRecipeTableId") != null && !jsonObj.get("tierUpRecipeTableId").isJsonNull()) && !jsonObj.get("tierUpRecipeTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tierUpRecipeTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tierUpRecipeTableId").toString()));
      }
      if ((jsonObj.get("overclockRecipeTableId") != null && !jsonObj.get("overclockRecipeTableId").isJsonNull()) && !jsonObj.get("overclockRecipeTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overclockRecipeTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overclockRecipeTableId").toString()));
      }
      if ((jsonObj.get("rerollCapTableId") != null && !jsonObj.get("rerollCapTableId").isJsonNull()) && !jsonObj.get("rerollCapTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerollCapTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rerollCapTableId").toString()));
      }
      if (jsonObj.get("raidImmediateLookup") != null && !jsonObj.get("raidImmediateLookup").isJsonNull()) {
        JsonArray jsonArrayraidImmediateLookup = jsonObj.getAsJsonArray("raidImmediateLookup");
        if (jsonArrayraidImmediateLookup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidImmediateLookup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidImmediateLookup` to be an array in the JSON string but got `%s`", jsonObj.get("raidImmediateLookup").toString()));
          }

          // validate the optional field `raidImmediateLookup` (array)
          for (int i = 0; i < jsonArrayraidImmediateLookup.size(); i++) {
            LookupMission.validateJsonElement(jsonArrayraidImmediateLookup.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatModDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatModDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatModDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatModDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<StatModDefinition>() {
           @Override
           public void write(JsonWriter out, StatModDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatModDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatModDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatModDefinition
   * @throws IOException if the JSON string is invalid with respect to StatModDefinition
   */
  public static StatModDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatModDefinition.class);
  }

  /**
   * Convert an instance of StatModDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

