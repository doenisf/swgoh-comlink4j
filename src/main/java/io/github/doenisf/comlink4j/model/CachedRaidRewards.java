/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.RankRewardPreview;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * CachedRaidRewards
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CachedRaidRewards {
  public static final String SERIALIZED_NAME_RANK_REWARD_PREVIEW = "rankRewardPreview";
  @SerializedName(SERIALIZED_NAME_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> rankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMMEDIATE_REGULAR_RANK_REWARD_PREVIEW = "immediateRegularRankRewardPreview";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_REGULAR_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> immediateRegularRankRewardPreview = new ArrayList<>();

  public CachedRaidRewards() {
  }

  public CachedRaidRewards rankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
    return this;
  }

  public CachedRaidRewards addRankRewardPreviewItem(RankRewardPreview rankRewardPreviewItem) {
    if (this.rankRewardPreview == null) {
      this.rankRewardPreview = new ArrayList<>();
    }
    this.rankRewardPreview.add(rankRewardPreviewItem);
    return this;
  }

  /**
   * Get rankRewardPreview
   * @return rankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getRankRewardPreview() {
    return rankRewardPreview;
  }

  public void setRankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
  }


  public CachedRaidRewards immediateRegularRankRewardPreview(List<RankRewardPreview> immediateRegularRankRewardPreview) {
    this.immediateRegularRankRewardPreview = immediateRegularRankRewardPreview;
    return this;
  }

  public CachedRaidRewards addImmediateRegularRankRewardPreviewItem(RankRewardPreview immediateRegularRankRewardPreviewItem) {
    if (this.immediateRegularRankRewardPreview == null) {
      this.immediateRegularRankRewardPreview = new ArrayList<>();
    }
    this.immediateRegularRankRewardPreview.add(immediateRegularRankRewardPreviewItem);
    return this;
  }

  /**
   * Get immediateRegularRankRewardPreview
   * @return immediateRegularRankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getImmediateRegularRankRewardPreview() {
    return immediateRegularRankRewardPreview;
  }

  public void setImmediateRegularRankRewardPreview(List<RankRewardPreview> immediateRegularRankRewardPreview) {
    this.immediateRegularRankRewardPreview = immediateRegularRankRewardPreview;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CachedRaidRewards cachedRaidRewards = (CachedRaidRewards) o;
    return Objects.equals(this.rankRewardPreview, cachedRaidRewards.rankRewardPreview) &&
        Objects.equals(this.immediateRegularRankRewardPreview, cachedRaidRewards.immediateRegularRankRewardPreview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rankRewardPreview, immediateRegularRankRewardPreview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CachedRaidRewards {\n");
    sb.append("    rankRewardPreview: ").append(toIndentedString(rankRewardPreview)).append("\n");
    sb.append("    immediateRegularRankRewardPreview: ").append(toIndentedString(immediateRegularRankRewardPreview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rankRewardPreview");
    openapiFields.add("immediateRegularRankRewardPreview");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CachedRaidRewards
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CachedRaidRewards.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CachedRaidRewards is not found in the empty JSON string", CachedRaidRewards.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CachedRaidRewards.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CachedRaidRewards` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rankRewardPreview") != null && !jsonObj.get("rankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayrankRewardPreview = jsonObj.getAsJsonArray("rankRewardPreview");
        if (jsonArrayrankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rankRewardPreview").toString()));
          }

          // validate the optional field `rankRewardPreview` (array)
          for (int i = 0; i < jsonArrayrankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayrankRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("immediateRegularRankRewardPreview") != null && !jsonObj.get("immediateRegularRankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayimmediateRegularRankRewardPreview = jsonObj.getAsJsonArray("immediateRegularRankRewardPreview");
        if (jsonArrayimmediateRegularRankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("immediateRegularRankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `immediateRegularRankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("immediateRegularRankRewardPreview").toString()));
          }

          // validate the optional field `immediateRegularRankRewardPreview` (array)
          for (int i = 0; i < jsonArrayimmediateRegularRankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayimmediateRegularRankRewardPreview.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CachedRaidRewards.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CachedRaidRewards' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CachedRaidRewards> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CachedRaidRewards.class));

       return (TypeAdapter<T>) new TypeAdapter<CachedRaidRewards>() {
           @Override
           public void write(JsonWriter out, CachedRaidRewards value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CachedRaidRewards read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CachedRaidRewards given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CachedRaidRewards
   * @throws IOException if the JSON string is invalid with respect to CachedRaidRewards
   */
  public static CachedRaidRewards fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CachedRaidRewards.class);
  }

  /**
   * Convert an instance of CachedRaidRewards to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

