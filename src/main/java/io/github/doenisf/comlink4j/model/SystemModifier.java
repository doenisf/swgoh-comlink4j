/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.ActionLink;
import io.github.doenisf.comlink4j.model.AdditionalItemModifier;
import io.github.doenisf.comlink4j.model.ModifierLocation;
import io.github.doenisf.comlink4j.model.ScaleItemModifier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * SystemModifier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class SystemModifier {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SCALE_ITEM_MODIFIER = "scaleItemModifier";
  @SerializedName(SERIALIZED_NAME_SCALE_ITEM_MODIFIER)
  private ScaleItemModifier scaleItemModifier;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private List<ModifierLocation> location = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_ITEM_MODIFIER = "additionalItemModifier";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ITEM_MODIFIER)
  private AdditionalItemModifier additionalItemModifier;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_ACTION_LINK = "actionLink";
  @SerializedName(SERIALIZED_NAME_ACTION_LINK)
  private ActionLink actionLink;

  public SystemModifier() {
  }

  public SystemModifier id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SystemModifier scaleItemModifier(ScaleItemModifier scaleItemModifier) {
    this.scaleItemModifier = scaleItemModifier;
    return this;
  }

  /**
   * Get scaleItemModifier
   * @return scaleItemModifier
   */
  @javax.annotation.Nullable
  public ScaleItemModifier getScaleItemModifier() {
    return scaleItemModifier;
  }

  public void setScaleItemModifier(ScaleItemModifier scaleItemModifier) {
    this.scaleItemModifier = scaleItemModifier;
  }


  public SystemModifier location(List<ModifierLocation> location) {
    this.location = location;
    return this;
  }

  public SystemModifier addLocationItem(ModifierLocation locationItem) {
    if (this.location == null) {
      this.location = new ArrayList<>();
    }
    this.location.add(locationItem);
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public List<ModifierLocation> getLocation() {
    return location;
  }

  public void setLocation(List<ModifierLocation> location) {
    this.location = location;
  }


  public SystemModifier additionalItemModifier(AdditionalItemModifier additionalItemModifier) {
    this.additionalItemModifier = additionalItemModifier;
    return this;
  }

  /**
   * Get additionalItemModifier
   * @return additionalItemModifier
   */
  @javax.annotation.Nullable
  public AdditionalItemModifier getAdditionalItemModifier() {
    return additionalItemModifier;
  }

  public void setAdditionalItemModifier(AdditionalItemModifier additionalItemModifier) {
    this.additionalItemModifier = additionalItemModifier;
  }


  public SystemModifier descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public SystemModifier actionLink(ActionLink actionLink) {
    this.actionLink = actionLink;
    return this;
  }

  /**
   * Get actionLink
   * @return actionLink
   */
  @javax.annotation.Nullable
  public ActionLink getActionLink() {
    return actionLink;
  }

  public void setActionLink(ActionLink actionLink) {
    this.actionLink = actionLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemModifier systemModifier = (SystemModifier) o;
    return Objects.equals(this.id, systemModifier.id) &&
        Objects.equals(this.scaleItemModifier, systemModifier.scaleItemModifier) &&
        Objects.equals(this.location, systemModifier.location) &&
        Objects.equals(this.additionalItemModifier, systemModifier.additionalItemModifier) &&
        Objects.equals(this.descKey, systemModifier.descKey) &&
        Objects.equals(this.actionLink, systemModifier.actionLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, scaleItemModifier, location, additionalItemModifier, descKey, actionLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemModifier {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    scaleItemModifier: ").append(toIndentedString(scaleItemModifier)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    additionalItemModifier: ").append(toIndentedString(additionalItemModifier)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    actionLink: ").append(toIndentedString(actionLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("scaleItemModifier");
    openapiFields.add("location");
    openapiFields.add("additionalItemModifier");
    openapiFields.add("descKey");
    openapiFields.add("actionLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemModifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemModifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemModifier is not found in the empty JSON string", SystemModifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemModifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemModifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `scaleItemModifier`
      if (jsonObj.get("scaleItemModifier") != null && !jsonObj.get("scaleItemModifier").isJsonNull()) {
        ScaleItemModifier.validateJsonElement(jsonObj.get("scaleItemModifier"));
      }
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        JsonArray jsonArraylocation = jsonObj.getAsJsonArray("location");
        if (jsonArraylocation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("location").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `location` to be an array in the JSON string but got `%s`", jsonObj.get("location").toString()));
          }

          // validate the optional field `location` (array)
          for (int i = 0; i < jsonArraylocation.size(); i++) {
            ModifierLocation.validateJsonElement(jsonArraylocation.get(i));
          };
        }
      }
      // validate the optional field `additionalItemModifier`
      if (jsonObj.get("additionalItemModifier") != null && !jsonObj.get("additionalItemModifier").isJsonNull()) {
        AdditionalItemModifier.validateJsonElement(jsonObj.get("additionalItemModifier"));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      // validate the optional field `actionLink`
      if (jsonObj.get("actionLink") != null && !jsonObj.get("actionLink").isJsonNull()) {
        ActionLink.validateJsonElement(jsonObj.get("actionLink"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemModifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemModifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemModifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemModifier.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemModifier>() {
           @Override
           public void write(JsonWriter out, SystemModifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemModifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemModifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemModifier
   * @throws IOException if the JSON string is invalid with respect to SystemModifier
   */
  public static SystemModifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemModifier.class);
  }

  /**
   * Convert an instance of SystemModifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

