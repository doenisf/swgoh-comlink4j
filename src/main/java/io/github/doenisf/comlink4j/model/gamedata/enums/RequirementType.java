package io.github.doenisf.comlink4j.model.gamedata.enums;

import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.util.GsonEnumAdapter;
import lombok.Getter;

import java.io.IOException;

@Getter
@GsonEnumAdapter
public enum RequirementType {
    RequirementType_DEFAULT(0),
    CURRENCYREQUIREMENT(3),
    ROSTERCHARACTERNOTCATEGORYNOTINSQUADREQUIREMENT(10),
    SQUADSIZEMAXIMUMREQUIREMENT(11),
    ROSTERCHARACTERCATEGORYNOTINUSEREQUIREMENT(12),
    ROSTERCHARACTERNOTINUSEREQUIREMENT(13),
    SQUADSIZEMINIMUMREQUIREMENT(14),
    ENEMYTHREATLEVELREQUIREMENT(15),
    ANYCHARACTERREADYFORPROMOTION(16),
    UNITTRAININGAVAILABLE(19),
    PLAYERLEVELMINREQUIREMENT(20),
    ROSTERUNITTYPEREQUIREMENT(22),
    ROSTERUNITTYPEMAXREQUIREMENT(23),
    UNITABILITYUPGRADEAVAILABLE(24),
    UNITGEAREQUIPAVAILABLE(25),
    CURRENTUNITGEAREQUIPAVAILABLE(26),
    PLAYERUNITHEALTHBELOWPERCENT(27),
    REQUIREMENTINVALID(28),
    CURRENTCHARACTERREADYFORPROMOTION(29),
    BATTLEANYSTATUSEFFECTACTIVE(30),
    STOREITEMAVAILABLEFORPURCHASE(31),
    CURRENTMISSIONHASGEARDROP(32),
    PLAYERLEVELMAXREQUIREMENT(33),
    CAMPAIGNREQUIREMENT(34),
    ANYDAILYACTIVITYREADYFORCLAIM(35),
    FACEBOOKLOGINAVAILABLE(36),
    ANYUNITREACHEDMAXRARITY(37),
    CURRENTCHARACTERREADYFORTIERUP(38),
    EVENTACTIVE(39),
    BATTLEANYUNITHASSHIELD(40),
    CURRENTCHARACTERMINTIER(41),
    UNITLEVELMAXREQUIREMENT(42),
    UNITLEVELMINREQUIREMENT(43),
    ROSTERUNITREQUIREMENT(44),
    UNITSHARDREQUIREMENT(45),
    ROSTERUNITCOMBATTYPEREQUIREMENT(46),
    BATTLETURNCOUNT(47),
    BATTLEENCOUNTERSTARTED(48),
    BATTLEUNITTURNSQUADCELLINDEX(49),
    ROSTERUNITCLASSREQUIREMENT(50),
    SHIPSUNLOCKED(51),
    UNITHASALLYABILITYREQUIREMENT(52),
    UNITHASREINFORCEMENTABILITYREADY(53),
    REINFORCEMENTSLOTAVAILABLE(54),
    ROSTERCANBUILDVALIDSQUADREQUIREMENT(55),
    BATTLEACTIVECOMBATTYPE(56),
    BATTLEPLAYERUNITABILITYCANBEACTIVATED(57),
    BATTLETURNOWNER(58),
    ROSTERUNITNOTOWNEDREQUIREMENT(59),
    UNITUNLOCKREQUIREMENT(60),
    GUILDTERRITORYMAPCONFLICTCOMPLETED(61),
    GUILDTERRITORYRECONSCOREMIN(62),
    GUILDTERRITORYRECONSCOREMAX(63),
    UNITDEPLOYREQUIREMENT(64),
    GUILDTERRITORYZONESTATUS(65),
    TERRITORYWAREVENTAVAILABLE(66),
    CHALLENGEQUESTREWARDSPENDING(67),
    QUESTCOMPLETEREQUIREMENT(68),
    GRANDARENAEVENTACTIVE(69),
    GUILDSTATREQUIREMENT(70),
    GUILDCAMPAIGNWINREQUIREMENT(71),
    GUILDGALACTICPOWERMIN(72),
    AUTOBATTLEINACTIVE(73),
    AUTOBATTLEACTIVE(74),
    BATTLENOTPAUSED(75),
    BATTLESETTINGSCLOSED(76),
    SEASONSMAXDIVISION(77),
    SEASONSMINDIVISION(78),
    SEASONSINDIVISION(79),
    SEASONSMAXLEAGUE(80),
    SEASONSMINLEAGUE(81),
    SEASONSINLEAGUE(82),
    PLAYERPORTRAITOWNED(83),
    SEASONSEQUALHIGHESTLIFETIMELEAGUE(84),
    SEASONSMAXHIGHESTLIFETIMELEAGUE(85),
    SEASONSMINHIGHESTLIFETIMELEAGUE(86),
    EQUIPMENTOWNEDCOUNT(87),
    RELICUNLOCKAVAILABLE(88),
    MESSAGEGROUPAVAILABLE(89),
    REQUIREMENT(90),
    DAYSSINCEINSTALLMINREQUIREMENT(91),
    DAYSSINCEINSTALLMAXREQUIREMENT(92),
    UNITMINRELICLEVEL(93),
    ANYUNITMINRELICLEVEL(94),
    GALACTICBUNDLEREQUIREMENT(95),
    UNITMINGALACTICPOWER(96),
    UNITMAXGALACTICPOWER(97),
    OWNEDUNITMAXRARITY(98),
    EVENTCOMPLETEDREQUIREMENT(99),
    GALACTICPOWERHIGHWATERMARKREQUIREMENT(100),
    PLAYERISELIGIBLEFORACTIVETERRITORYBATTLE(101),
    TERRITORYBATTLEMINROUND(102),
    TERRITORYBATTLEMAXROUND(103),
    RAIDACTIVEREQUIREMENT(104),
    CHALLENGEREQUIREMENT(105),
    PLAYERINGUILDREQUIREMENT(106),
    EVENTMISSIONSVIEWVISIBLE(107),
    FINDFLOWFIRSTTIMEREWARD(108),
    CAMPAIGNTIMESCOMPLETED(109),
    CURRENTCHARACTERREADYFORABILITYUPGRADE(110),
    CONQUESTACTIVEEVENTJOINED(111),
    LOGINCALENDARACTIVE(112),
    GALACTICLEGENDSOWNEDMIN(113),
    DATACRONSOWNEDMIN(114),
    UNITOWNEDSHARDREQUIREMENT(115),
    WINMISSIONNTIMES(116),
    FILLSPECIFICPLATOON(117),
    CONQUESTPASSOWNED(118);

    private final int value;

    RequirementType(int value) {
        this.value = value;
    }

    public static RequirementType fromValue(int value) {
        for (RequirementType type : values()) {
            if (type.value == value) {
                return type;
            }
        }
        throw new IllegalArgumentException("Unknown value: " + value);
    }

    public static class Adapter extends TypeAdapter<RequirementType> {

        @Override
        public void write(JsonWriter out, RequirementType value) throws IOException {
            out.value(value.name());
        }

        @Override
        public RequirementType read(JsonReader in) throws IOException {
            return RequirementType.fromValue(in.nextInt());
        }
    }
}
