/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.BucketItem;
import io.github.doenisf.comlink4j.RecipeType;
import io.github.doenisf.comlink4j.Requirement;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * Recipe
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Recipe {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private BucketItem result;

  public static final String SERIALIZED_NAME_INGREDIENTS = "ingredients";
  @SerializedName(SERIALIZED_NAME_INGREDIENTS)
  private List<BucketItem> ingredients = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RecipeType type;

  public static final String SERIALIZED_NAME_VIEW_REQUIREMENT = "viewRequirement";
  @SerializedName(SERIALIZED_NAME_VIEW_REQUIREMENT)
  private Requirement viewRequirement;

  public static final String SERIALIZED_NAME_UNLOCK_LEVEL = "unlockLevel";
  @SerializedName(SERIALIZED_NAME_UNLOCK_LEVEL)
  private Integer unlockLevel;

  public static final String SERIALIZED_NAME_CRAFT_REQUIREMENT = "craftRequirement";
  @SerializedName(SERIALIZED_NAME_CRAFT_REQUIREMENT)
  private Requirement craftRequirement;

  public Recipe() {
  }

  public Recipe id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Recipe descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public Recipe result(BucketItem result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public BucketItem getResult() {
    return result;
  }

  public void setResult(BucketItem result) {
    this.result = result;
  }


  public Recipe ingredients(List<BucketItem> ingredients) {
    this.ingredients = ingredients;
    return this;
  }

  public Recipe addIngredientsItem(BucketItem ingredientsItem) {
    if (this.ingredients == null) {
      this.ingredients = new ArrayList<>();
    }
    this.ingredients.add(ingredientsItem);
    return this;
  }

  /**
   * Get ingredients
   * @return ingredients
   */
  @javax.annotation.Nullable
  public List<BucketItem> getIngredients() {
    return ingredients;
  }

  public void setIngredients(List<BucketItem> ingredients) {
    this.ingredients = ingredients;
  }


  public Recipe type(RecipeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public RecipeType getType() {
    return type;
  }

  public void setType(RecipeType type) {
    this.type = type;
  }


  public Recipe viewRequirement(Requirement viewRequirement) {
    this.viewRequirement = viewRequirement;
    return this;
  }

  /**
   * Get viewRequirement
   * @return viewRequirement
   */
  @javax.annotation.Nullable
  public Requirement getViewRequirement() {
    return viewRequirement;
  }

  public void setViewRequirement(Requirement viewRequirement) {
    this.viewRequirement = viewRequirement;
  }


  public Recipe unlockLevel(Integer unlockLevel) {
    this.unlockLevel = unlockLevel;
    return this;
  }

  /**
   * Get unlockLevel
   * @return unlockLevel
   */
  @javax.annotation.Nullable
  public Integer getUnlockLevel() {
    return unlockLevel;
  }

  public void setUnlockLevel(Integer unlockLevel) {
    this.unlockLevel = unlockLevel;
  }


  public Recipe craftRequirement(Requirement craftRequirement) {
    this.craftRequirement = craftRequirement;
    return this;
  }

  /**
   * Get craftRequirement
   * @return craftRequirement
   */
  @javax.annotation.Nullable
  public Requirement getCraftRequirement() {
    return craftRequirement;
  }

  public void setCraftRequirement(Requirement craftRequirement) {
    this.craftRequirement = craftRequirement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recipe recipe = (Recipe) o;
    return Objects.equals(this.id, recipe.id) &&
        Objects.equals(this.descKey, recipe.descKey) &&
        Objects.equals(this.result, recipe.result) &&
        Objects.equals(this.ingredients, recipe.ingredients) &&
        Objects.equals(this.type, recipe.type) &&
        Objects.equals(this.viewRequirement, recipe.viewRequirement) &&
        Objects.equals(this.unlockLevel, recipe.unlockLevel) &&
        Objects.equals(this.craftRequirement, recipe.craftRequirement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, descKey, result, ingredients, type, viewRequirement, unlockLevel, craftRequirement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recipe {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    ingredients: ").append(toIndentedString(ingredients)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    viewRequirement: ").append(toIndentedString(viewRequirement)).append("\n");
    sb.append("    unlockLevel: ").append(toIndentedString(unlockLevel)).append("\n");
    sb.append("    craftRequirement: ").append(toIndentedString(craftRequirement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("descKey");
    openapiFields.add("result");
    openapiFields.add("ingredients");
    openapiFields.add("type");
    openapiFields.add("viewRequirement");
    openapiFields.add("unlockLevel");
    openapiFields.add("craftRequirement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Recipe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Recipe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recipe is not found in the empty JSON string", Recipe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Recipe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Recipe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        BucketItem.validateJsonElement(jsonObj.get("result"));
      }
      if (jsonObj.get("ingredients") != null && !jsonObj.get("ingredients").isJsonNull()) {
        JsonArray jsonArrayingredients = jsonObj.getAsJsonArray("ingredients");
        if (jsonArrayingredients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ingredients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ingredients` to be an array in the JSON string but got `%s`", jsonObj.get("ingredients").toString()));
          }

          // validate the optional field `ingredients` (array)
          for (int i = 0; i < jsonArrayingredients.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayingredients.get(i));
          };
        }
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        RecipeType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `viewRequirement`
      if (jsonObj.get("viewRequirement") != null && !jsonObj.get("viewRequirement").isJsonNull()) {
        Requirement.validateJsonElement(jsonObj.get("viewRequirement"));
      }
      // validate the optional field `craftRequirement`
      if (jsonObj.get("craftRequirement") != null && !jsonObj.get("craftRequirement").isJsonNull()) {
        Requirement.validateJsonElement(jsonObj.get("craftRequirement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recipe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recipe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recipe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recipe.class));

       return (TypeAdapter<T>) new TypeAdapter<Recipe>() {
           @Override
           public void write(JsonWriter out, Recipe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Recipe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Recipe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Recipe
   * @throws IOException if the JSON string is invalid with respect to Recipe
   */
  public static Recipe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recipe.class);
  }

  /**
   * Convert an instance of Recipe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

