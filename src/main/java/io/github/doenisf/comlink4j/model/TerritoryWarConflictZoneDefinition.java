/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.CombatType;
import io.github.doenisf.comlink4j.EntryCategoryAllowed;
import io.github.doenisf.comlink4j.Environment;
import io.github.doenisf.comlink4j.TerritoryReward;
import io.github.doenisf.comlink4j.TerritoryWarPointStructure;
import io.github.doenisf.comlink4j.TerritoryZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * TerritoryWarConflictZoneDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryWarConflictZoneDefinition {
  public static final String SERIALIZED_NAME_ZONE_DEFINITION = "zoneDefinition";
  @SerializedName(SERIALIZED_NAME_ZONE_DEFINITION)
  private TerritoryZoneDefinition zoneDefinition;

  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public static final String SERIALIZED_NAME_CONFLICT_IMAGE = "conflictImage";
  @SerializedName(SERIALIZED_NAME_CONFLICT_IMAGE)
  private String conflictImage;

  public static final String SERIALIZED_NAME_CONFLICT_REQUIREMENT = "conflictRequirement";
  @SerializedName(SERIALIZED_NAME_CONFLICT_REQUIREMENT)
  private String conflictRequirement;

  public static final String SERIALIZED_NAME_CONFLICT_DETAIL = "conflictDetail";
  @SerializedName(SERIALIZED_NAME_CONFLICT_DETAIL)
  private String conflictDetail;

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_DEFENSE_ENTRY_CATEGORY_ALLOWED = "defenseEntryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_DEFENSE_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed defenseEntryCategoryAllowed;

  public static final String SERIALIZED_NAME_DEPLOY_DEFENSIVE_SQUAD_REWARD = "deployDefensiveSquadReward";
  @SerializedName(SERIALIZED_NAME_DEPLOY_DEFENSIVE_SQUAD_REWARD)
  private TerritoryReward deployDefensiveSquadReward;

  public static final String SERIALIZED_NAME_OFFENSIVE_WIN_REWARD = "offensiveWinReward";
  @SerializedName(SERIALIZED_NAME_OFFENSIVE_WIN_REWARD)
  private TerritoryReward offensiveWinReward;

  public static final String SERIALIZED_NAME_COMPLETE_ZONE_REWARD = "completeZoneReward";
  @SerializedName(SERIALIZED_NAME_COMPLETE_ZONE_REWARD)
  private TerritoryReward completeZoneReward;

  public static final String SERIALIZED_NAME_COMPLETE_ZONE_REWARD_PER_DEFENSIVE_SQUAD = "completeZoneRewardPerDefensiveSquad";
  @SerializedName(SERIALIZED_NAME_COMPLETE_ZONE_REWARD_PER_DEFENSIVE_SQUAD)
  private TerritoryReward completeZoneRewardPerDefensiveSquad;

  public static final String SERIALIZED_NAME_BATTLE_ENVIRONMENTS = "battleEnvironments";
  @SerializedName(SERIALIZED_NAME_BATTLE_ENVIRONMENTS)
  private List<Environment> battleEnvironments = new ArrayList<>();

  public static final String SERIALIZED_NAME_POINT_STRUCTURE = "pointStructure";
  @SerializedName(SERIALIZED_NAME_POINT_STRUCTURE)
  private TerritoryWarPointStructure pointStructure;

  public TerritoryWarConflictZoneDefinition() {
  }

  public TerritoryWarConflictZoneDefinition zoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
    return this;
  }

  /**
   * Get zoneDefinition
   * @return zoneDefinition
   */
  @javax.annotation.Nullable
  public TerritoryZoneDefinition getZoneDefinition() {
    return zoneDefinition;
  }

  public void setZoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
  }


  public TerritoryWarConflictZoneDefinition combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }


  public TerritoryWarConflictZoneDefinition conflictImage(String conflictImage) {
    this.conflictImage = conflictImage;
    return this;
  }

  /**
   * Get conflictImage
   * @return conflictImage
   */
  @javax.annotation.Nullable
  public String getConflictImage() {
    return conflictImage;
  }

  public void setConflictImage(String conflictImage) {
    this.conflictImage = conflictImage;
  }


  public TerritoryWarConflictZoneDefinition conflictRequirement(String conflictRequirement) {
    this.conflictRequirement = conflictRequirement;
    return this;
  }

  /**
   * Get conflictRequirement
   * @return conflictRequirement
   */
  @javax.annotation.Nullable
  public String getConflictRequirement() {
    return conflictRequirement;
  }

  public void setConflictRequirement(String conflictRequirement) {
    this.conflictRequirement = conflictRequirement;
  }


  public TerritoryWarConflictZoneDefinition conflictDetail(String conflictDetail) {
    this.conflictDetail = conflictDetail;
    return this;
  }

  /**
   * Get conflictDetail
   * @return conflictDetail
   */
  @javax.annotation.Nullable
  public String getConflictDetail() {
    return conflictDetail;
  }

  public void setConflictDetail(String conflictDetail) {
    this.conflictDetail = conflictDetail;
  }


  public TerritoryWarConflictZoneDefinition entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public TerritoryWarConflictZoneDefinition defenseEntryCategoryAllowed(EntryCategoryAllowed defenseEntryCategoryAllowed) {
    this.defenseEntryCategoryAllowed = defenseEntryCategoryAllowed;
    return this;
  }

  /**
   * Get defenseEntryCategoryAllowed
   * @return defenseEntryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getDefenseEntryCategoryAllowed() {
    return defenseEntryCategoryAllowed;
  }

  public void setDefenseEntryCategoryAllowed(EntryCategoryAllowed defenseEntryCategoryAllowed) {
    this.defenseEntryCategoryAllowed = defenseEntryCategoryAllowed;
  }


  public TerritoryWarConflictZoneDefinition deployDefensiveSquadReward(TerritoryReward deployDefensiveSquadReward) {
    this.deployDefensiveSquadReward = deployDefensiveSquadReward;
    return this;
  }

  /**
   * Get deployDefensiveSquadReward
   * @return deployDefensiveSquadReward
   */
  @javax.annotation.Nullable
  public TerritoryReward getDeployDefensiveSquadReward() {
    return deployDefensiveSquadReward;
  }

  public void setDeployDefensiveSquadReward(TerritoryReward deployDefensiveSquadReward) {
    this.deployDefensiveSquadReward = deployDefensiveSquadReward;
  }


  public TerritoryWarConflictZoneDefinition offensiveWinReward(TerritoryReward offensiveWinReward) {
    this.offensiveWinReward = offensiveWinReward;
    return this;
  }

  /**
   * Get offensiveWinReward
   * @return offensiveWinReward
   */
  @javax.annotation.Nullable
  public TerritoryReward getOffensiveWinReward() {
    return offensiveWinReward;
  }

  public void setOffensiveWinReward(TerritoryReward offensiveWinReward) {
    this.offensiveWinReward = offensiveWinReward;
  }


  public TerritoryWarConflictZoneDefinition completeZoneReward(TerritoryReward completeZoneReward) {
    this.completeZoneReward = completeZoneReward;
    return this;
  }

  /**
   * Get completeZoneReward
   * @return completeZoneReward
   */
  @javax.annotation.Nullable
  public TerritoryReward getCompleteZoneReward() {
    return completeZoneReward;
  }

  public void setCompleteZoneReward(TerritoryReward completeZoneReward) {
    this.completeZoneReward = completeZoneReward;
  }


  public TerritoryWarConflictZoneDefinition completeZoneRewardPerDefensiveSquad(TerritoryReward completeZoneRewardPerDefensiveSquad) {
    this.completeZoneRewardPerDefensiveSquad = completeZoneRewardPerDefensiveSquad;
    return this;
  }

  /**
   * Get completeZoneRewardPerDefensiveSquad
   * @return completeZoneRewardPerDefensiveSquad
   */
  @javax.annotation.Nullable
  public TerritoryReward getCompleteZoneRewardPerDefensiveSquad() {
    return completeZoneRewardPerDefensiveSquad;
  }

  public void setCompleteZoneRewardPerDefensiveSquad(TerritoryReward completeZoneRewardPerDefensiveSquad) {
    this.completeZoneRewardPerDefensiveSquad = completeZoneRewardPerDefensiveSquad;
  }


  public TerritoryWarConflictZoneDefinition battleEnvironments(List<Environment> battleEnvironments) {
    this.battleEnvironments = battleEnvironments;
    return this;
  }

  public TerritoryWarConflictZoneDefinition addBattleEnvironmentsItem(Environment battleEnvironmentsItem) {
    if (this.battleEnvironments == null) {
      this.battleEnvironments = new ArrayList<>();
    }
    this.battleEnvironments.add(battleEnvironmentsItem);
    return this;
  }

  /**
   * Get battleEnvironments
   * @return battleEnvironments
   */
  @javax.annotation.Nullable
  public List<Environment> getBattleEnvironments() {
    return battleEnvironments;
  }

  public void setBattleEnvironments(List<Environment> battleEnvironments) {
    this.battleEnvironments = battleEnvironments;
  }


  public TerritoryWarConflictZoneDefinition pointStructure(TerritoryWarPointStructure pointStructure) {
    this.pointStructure = pointStructure;
    return this;
  }

  /**
   * Get pointStructure
   * @return pointStructure
   */
  @javax.annotation.Nullable
  public TerritoryWarPointStructure getPointStructure() {
    return pointStructure;
  }

  public void setPointStructure(TerritoryWarPointStructure pointStructure) {
    this.pointStructure = pointStructure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryWarConflictZoneDefinition territoryWarConflictZoneDefinition = (TerritoryWarConflictZoneDefinition) o;
    return Objects.equals(this.zoneDefinition, territoryWarConflictZoneDefinition.zoneDefinition) &&
        Objects.equals(this.combatType, territoryWarConflictZoneDefinition.combatType) &&
        Objects.equals(this.conflictImage, territoryWarConflictZoneDefinition.conflictImage) &&
        Objects.equals(this.conflictRequirement, territoryWarConflictZoneDefinition.conflictRequirement) &&
        Objects.equals(this.conflictDetail, territoryWarConflictZoneDefinition.conflictDetail) &&
        Objects.equals(this.entryCategoryAllowed, territoryWarConflictZoneDefinition.entryCategoryAllowed) &&
        Objects.equals(this.defenseEntryCategoryAllowed, territoryWarConflictZoneDefinition.defenseEntryCategoryAllowed) &&
        Objects.equals(this.deployDefensiveSquadReward, territoryWarConflictZoneDefinition.deployDefensiveSquadReward) &&
        Objects.equals(this.offensiveWinReward, territoryWarConflictZoneDefinition.offensiveWinReward) &&
        Objects.equals(this.completeZoneReward, territoryWarConflictZoneDefinition.completeZoneReward) &&
        Objects.equals(this.completeZoneRewardPerDefensiveSquad, territoryWarConflictZoneDefinition.completeZoneRewardPerDefensiveSquad) &&
        Objects.equals(this.battleEnvironments, territoryWarConflictZoneDefinition.battleEnvironments) &&
        Objects.equals(this.pointStructure, territoryWarConflictZoneDefinition.pointStructure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneDefinition, combatType, conflictImage, conflictRequirement, conflictDetail, entryCategoryAllowed, defenseEntryCategoryAllowed, deployDefensiveSquadReward, offensiveWinReward, completeZoneReward, completeZoneRewardPerDefensiveSquad, battleEnvironments, pointStructure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryWarConflictZoneDefinition {\n");
    sb.append("    zoneDefinition: ").append(toIndentedString(zoneDefinition)).append("\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("    conflictImage: ").append(toIndentedString(conflictImage)).append("\n");
    sb.append("    conflictRequirement: ").append(toIndentedString(conflictRequirement)).append("\n");
    sb.append("    conflictDetail: ").append(toIndentedString(conflictDetail)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    defenseEntryCategoryAllowed: ").append(toIndentedString(defenseEntryCategoryAllowed)).append("\n");
    sb.append("    deployDefensiveSquadReward: ").append(toIndentedString(deployDefensiveSquadReward)).append("\n");
    sb.append("    offensiveWinReward: ").append(toIndentedString(offensiveWinReward)).append("\n");
    sb.append("    completeZoneReward: ").append(toIndentedString(completeZoneReward)).append("\n");
    sb.append("    completeZoneRewardPerDefensiveSquad: ").append(toIndentedString(completeZoneRewardPerDefensiveSquad)).append("\n");
    sb.append("    battleEnvironments: ").append(toIndentedString(battleEnvironments)).append("\n");
    sb.append("    pointStructure: ").append(toIndentedString(pointStructure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("zoneDefinition");
    openapiFields.add("combatType");
    openapiFields.add("conflictImage");
    openapiFields.add("conflictRequirement");
    openapiFields.add("conflictDetail");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("defenseEntryCategoryAllowed");
    openapiFields.add("deployDefensiveSquadReward");
    openapiFields.add("offensiveWinReward");
    openapiFields.add("completeZoneReward");
    openapiFields.add("completeZoneRewardPerDefensiveSquad");
    openapiFields.add("battleEnvironments");
    openapiFields.add("pointStructure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryWarConflictZoneDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryWarConflictZoneDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryWarConflictZoneDefinition is not found in the empty JSON string", TerritoryWarConflictZoneDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryWarConflictZoneDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryWarConflictZoneDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `zoneDefinition`
      if (jsonObj.get("zoneDefinition") != null && !jsonObj.get("zoneDefinition").isJsonNull()) {
        TerritoryZoneDefinition.validateJsonElement(jsonObj.get("zoneDefinition"));
      }
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
      if ((jsonObj.get("conflictImage") != null && !jsonObj.get("conflictImage").isJsonNull()) && !jsonObj.get("conflictImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflictImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflictImage").toString()));
      }
      if ((jsonObj.get("conflictRequirement") != null && !jsonObj.get("conflictRequirement").isJsonNull()) && !jsonObj.get("conflictRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflictRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflictRequirement").toString()));
      }
      if ((jsonObj.get("conflictDetail") != null && !jsonObj.get("conflictDetail").isJsonNull()) && !jsonObj.get("conflictDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflictDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflictDetail").toString()));
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
      // validate the optional field `defenseEntryCategoryAllowed`
      if (jsonObj.get("defenseEntryCategoryAllowed") != null && !jsonObj.get("defenseEntryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("defenseEntryCategoryAllowed"));
      }
      // validate the optional field `deployDefensiveSquadReward`
      if (jsonObj.get("deployDefensiveSquadReward") != null && !jsonObj.get("deployDefensiveSquadReward").isJsonNull()) {
        TerritoryReward.validateJsonElement(jsonObj.get("deployDefensiveSquadReward"));
      }
      // validate the optional field `offensiveWinReward`
      if (jsonObj.get("offensiveWinReward") != null && !jsonObj.get("offensiveWinReward").isJsonNull()) {
        TerritoryReward.validateJsonElement(jsonObj.get("offensiveWinReward"));
      }
      // validate the optional field `completeZoneReward`
      if (jsonObj.get("completeZoneReward") != null && !jsonObj.get("completeZoneReward").isJsonNull()) {
        TerritoryReward.validateJsonElement(jsonObj.get("completeZoneReward"));
      }
      // validate the optional field `completeZoneRewardPerDefensiveSquad`
      if (jsonObj.get("completeZoneRewardPerDefensiveSquad") != null && !jsonObj.get("completeZoneRewardPerDefensiveSquad").isJsonNull()) {
        TerritoryReward.validateJsonElement(jsonObj.get("completeZoneRewardPerDefensiveSquad"));
      }
      if (jsonObj.get("battleEnvironments") != null && !jsonObj.get("battleEnvironments").isJsonNull()) {
        JsonArray jsonArraybattleEnvironments = jsonObj.getAsJsonArray("battleEnvironments");
        if (jsonArraybattleEnvironments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battleEnvironments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battleEnvironments` to be an array in the JSON string but got `%s`", jsonObj.get("battleEnvironments").toString()));
          }

          // validate the optional field `battleEnvironments` (array)
          for (int i = 0; i < jsonArraybattleEnvironments.size(); i++) {
            Environment.validateJsonElement(jsonArraybattleEnvironments.get(i));
          };
        }
      }
      // validate the optional field `pointStructure`
      if (jsonObj.get("pointStructure") != null && !jsonObj.get("pointStructure").isJsonNull()) {
        TerritoryWarPointStructure.validateJsonElement(jsonObj.get("pointStructure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryWarConflictZoneDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryWarConflictZoneDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryWarConflictZoneDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryWarConflictZoneDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryWarConflictZoneDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryWarConflictZoneDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryWarConflictZoneDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryWarConflictZoneDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryWarConflictZoneDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryWarConflictZoneDefinition
   */
  public static TerritoryWarConflictZoneDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryWarConflictZoneDefinition.class);
  }

  /**
   * Convert an instance of TerritoryWarConflictZoneDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

