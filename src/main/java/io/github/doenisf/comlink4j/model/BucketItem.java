/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.ItemType;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.StatMod;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * BucketItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class BucketItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ItemType type;

  public static final String SERIALIZED_NAME_MIN_QUANTITY = "minQuantity";
  @SerializedName(SERIALIZED_NAME_MIN_QUANTITY)
  private Integer minQuantity;

  public static final String SERIALIZED_NAME_MAX_QUANTITY = "maxQuantity";
  @SerializedName(SERIALIZED_NAME_MAX_QUANTITY)
  private Integer maxQuantity;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private Rarity rarity;

  public static final String SERIALIZED_NAME_STAT_MOD = "statMod";
  @SerializedName(SERIALIZED_NAME_STAT_MOD)
  private StatMod statMod;

  public static final String SERIALIZED_NAME_PREVIEW_PRIORITY = "previewPriority";
  @SerializedName(SERIALIZED_NAME_PREVIEW_PRIORITY)
  private Integer previewPriority;

  public static final String SERIALIZED_NAME_UNIT_LEVEL = "unitLevel";
  @SerializedName(SERIALIZED_NAME_UNIT_LEVEL)
  private Integer unitLevel;

  public static final String SERIALIZED_NAME_UNIT_TIER = "unitTier";
  @SerializedName(SERIALIZED_NAME_UNIT_TIER)
  private UnitTier unitTier;

  public static final String SERIALIZED_NAME_PRIMARY_REWARD = "primaryReward";
  @SerializedName(SERIALIZED_NAME_PRIMARY_REWARD)
  private Boolean primaryReward;

  public BucketItem() {
  }

  public BucketItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BucketItem type(ItemType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ItemType getType() {
    return type;
  }

  public void setType(ItemType type) {
    this.type = type;
  }


  public BucketItem minQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
    return this;
  }

  /**
   * Get minQuantity
   * @return minQuantity
   */
  @javax.annotation.Nullable
  public Integer getMinQuantity() {
    return minQuantity;
  }

  public void setMinQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
  }


  public BucketItem maxQuantity(Integer maxQuantity) {
    this.maxQuantity = maxQuantity;
    return this;
  }

  /**
   * Get maxQuantity
   * @return maxQuantity
   */
  @javax.annotation.Nullable
  public Integer getMaxQuantity() {
    return maxQuantity;
  }

  public void setMaxQuantity(Integer maxQuantity) {
    this.maxQuantity = maxQuantity;
  }


  public BucketItem rarity(Rarity rarity) {
    this.rarity = rarity;
    return this;
  }

  /**
   * Get rarity
   * @return rarity
   */
  @javax.annotation.Nullable
  public Rarity getRarity() {
    return rarity;
  }

  public void setRarity(Rarity rarity) {
    this.rarity = rarity;
  }


  public BucketItem statMod(StatMod statMod) {
    this.statMod = statMod;
    return this;
  }

  /**
   * Get statMod
   * @return statMod
   */
  @javax.annotation.Nullable
  public StatMod getStatMod() {
    return statMod;
  }

  public void setStatMod(StatMod statMod) {
    this.statMod = statMod;
  }


  public BucketItem previewPriority(Integer previewPriority) {
    this.previewPriority = previewPriority;
    return this;
  }

  /**
   * Get previewPriority
   * @return previewPriority
   */
  @javax.annotation.Nullable
  public Integer getPreviewPriority() {
    return previewPriority;
  }

  public void setPreviewPriority(Integer previewPriority) {
    this.previewPriority = previewPriority;
  }


  public BucketItem unitLevel(Integer unitLevel) {
    this.unitLevel = unitLevel;
    return this;
  }

  /**
   * Get unitLevel
   * @return unitLevel
   */
  @javax.annotation.Nullable
  public Integer getUnitLevel() {
    return unitLevel;
  }

  public void setUnitLevel(Integer unitLevel) {
    this.unitLevel = unitLevel;
  }


  public BucketItem unitTier(UnitTier unitTier) {
    this.unitTier = unitTier;
    return this;
  }

  /**
   * Get unitTier
   * @return unitTier
   */
  @javax.annotation.Nullable
  public UnitTier getUnitTier() {
    return unitTier;
  }

  public void setUnitTier(UnitTier unitTier) {
    this.unitTier = unitTier;
  }


  public BucketItem primaryReward(Boolean primaryReward) {
    this.primaryReward = primaryReward;
    return this;
  }

  /**
   * Get primaryReward
   * @return primaryReward
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryReward() {
    return primaryReward;
  }

  public void setPrimaryReward(Boolean primaryReward) {
    this.primaryReward = primaryReward;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketItem bucketItem = (BucketItem) o;
    return Objects.equals(this.id, bucketItem.id) &&
        Objects.equals(this.type, bucketItem.type) &&
        Objects.equals(this.minQuantity, bucketItem.minQuantity) &&
        Objects.equals(this.maxQuantity, bucketItem.maxQuantity) &&
        Objects.equals(this.rarity, bucketItem.rarity) &&
        Objects.equals(this.statMod, bucketItem.statMod) &&
        Objects.equals(this.previewPriority, bucketItem.previewPriority) &&
        Objects.equals(this.unitLevel, bucketItem.unitLevel) &&
        Objects.equals(this.unitTier, bucketItem.unitTier) &&
        Objects.equals(this.primaryReward, bucketItem.primaryReward);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, minQuantity, maxQuantity, rarity, statMod, previewPriority, unitLevel, unitTier, primaryReward);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    minQuantity: ").append(toIndentedString(minQuantity)).append("\n");
    sb.append("    maxQuantity: ").append(toIndentedString(maxQuantity)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    statMod: ").append(toIndentedString(statMod)).append("\n");
    sb.append("    previewPriority: ").append(toIndentedString(previewPriority)).append("\n");
    sb.append("    unitLevel: ").append(toIndentedString(unitLevel)).append("\n");
    sb.append("    unitTier: ").append(toIndentedString(unitTier)).append("\n");
    sb.append("    primaryReward: ").append(toIndentedString(primaryReward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("minQuantity");
    openapiFields.add("maxQuantity");
    openapiFields.add("rarity");
    openapiFields.add("statMod");
    openapiFields.add("previewPriority");
    openapiFields.add("unitLevel");
    openapiFields.add("unitTier");
    openapiFields.add("primaryReward");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketItem is not found in the empty JSON string", BucketItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ItemType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `rarity`
      if (jsonObj.get("rarity") != null && !jsonObj.get("rarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("rarity"));
      }
      // validate the optional field `statMod`
      if (jsonObj.get("statMod") != null && !jsonObj.get("statMod").isJsonNull()) {
        StatMod.validateJsonElement(jsonObj.get("statMod"));
      }
      // validate the optional field `unitTier`
      if (jsonObj.get("unitTier") != null && !jsonObj.get("unitTier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("unitTier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketItem>() {
           @Override
           public void write(JsonWriter out, BucketItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketItem
   * @throws IOException if the JSON string is invalid with respect to BucketItem
   */
  public static BucketItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketItem.class);
  }

  /**
   * Convert an instance of BucketItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

