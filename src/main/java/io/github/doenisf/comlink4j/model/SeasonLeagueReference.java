/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.LeagueDivisionRewardPreview;
import io.github.doenisf.comlink4j.model.SeasonLeaguePromoteSystem;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * SeasonLeagueReference
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class SeasonLeagueReference {
  public static final String SERIALIZED_NAME_DEFINITION_ID = "definitionId";
  @SerializedName(SERIALIZED_NAME_DEFINITION_ID)
  private String definitionId;

  public static final String SERIALIZED_NAME_PROMOTE_SYSTEM = "promoteSystem";
  @SerializedName(SERIALIZED_NAME_PROMOTE_SYSTEM)
  private SeasonLeaguePromoteSystem promoteSystem;

  public static final String SERIALIZED_NAME_PROMOTE_CONDITION = "promoteCondition";
  @SerializedName(SERIALIZED_NAME_PROMOTE_CONDITION)
  private Integer promoteCondition;

  public static final String SERIALIZED_NAME_REWARD_PREVIEW = "rewardPreview";
  @SerializedName(SERIALIZED_NAME_REWARD_PREVIEW)
  private List<LeagueDivisionRewardPreview> rewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMOTE_CONDITION_TABLE = "promoteConditionTable";
  @SerializedName(SERIALIZED_NAME_PROMOTE_CONDITION_TABLE)
  private String promoteConditionTable;

  public SeasonLeagueReference() {
  }

  public SeasonLeagueReference definitionId(String definitionId) {
    this.definitionId = definitionId;
    return this;
  }

  /**
   * Get definitionId
   * @return definitionId
   */
  @javax.annotation.Nullable
  public String getDefinitionId() {
    return definitionId;
  }

  public void setDefinitionId(String definitionId) {
    this.definitionId = definitionId;
  }


  public SeasonLeagueReference promoteSystem(SeasonLeaguePromoteSystem promoteSystem) {
    this.promoteSystem = promoteSystem;
    return this;
  }

  /**
   * Get promoteSystem
   * @return promoteSystem
   */
  @javax.annotation.Nullable
  public SeasonLeaguePromoteSystem getPromoteSystem() {
    return promoteSystem;
  }

  public void setPromoteSystem(SeasonLeaguePromoteSystem promoteSystem) {
    this.promoteSystem = promoteSystem;
  }


  public SeasonLeagueReference promoteCondition(Integer promoteCondition) {
    this.promoteCondition = promoteCondition;
    return this;
  }

  /**
   * Get promoteCondition
   * @return promoteCondition
   */
  @javax.annotation.Nullable
  public Integer getPromoteCondition() {
    return promoteCondition;
  }

  public void setPromoteCondition(Integer promoteCondition) {
    this.promoteCondition = promoteCondition;
  }


  public SeasonLeagueReference rewardPreview(List<LeagueDivisionRewardPreview> rewardPreview) {
    this.rewardPreview = rewardPreview;
    return this;
  }

  public SeasonLeagueReference addRewardPreviewItem(LeagueDivisionRewardPreview rewardPreviewItem) {
    if (this.rewardPreview == null) {
      this.rewardPreview = new ArrayList<>();
    }
    this.rewardPreview.add(rewardPreviewItem);
    return this;
  }

  /**
   * Get rewardPreview
   * @return rewardPreview
   */
  @javax.annotation.Nullable
  public List<LeagueDivisionRewardPreview> getRewardPreview() {
    return rewardPreview;
  }

  public void setRewardPreview(List<LeagueDivisionRewardPreview> rewardPreview) {
    this.rewardPreview = rewardPreview;
  }


  public SeasonLeagueReference promoteConditionTable(String promoteConditionTable) {
    this.promoteConditionTable = promoteConditionTable;
    return this;
  }

  /**
   * Get promoteConditionTable
   * @return promoteConditionTable
   */
  @javax.annotation.Nullable
  public String getPromoteConditionTable() {
    return promoteConditionTable;
  }

  public void setPromoteConditionTable(String promoteConditionTable) {
    this.promoteConditionTable = promoteConditionTable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeasonLeagueReference seasonLeagueReference = (SeasonLeagueReference) o;
    return Objects.equals(this.definitionId, seasonLeagueReference.definitionId) &&
        Objects.equals(this.promoteSystem, seasonLeagueReference.promoteSystem) &&
        Objects.equals(this.promoteCondition, seasonLeagueReference.promoteCondition) &&
        Objects.equals(this.rewardPreview, seasonLeagueReference.rewardPreview) &&
        Objects.equals(this.promoteConditionTable, seasonLeagueReference.promoteConditionTable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(definitionId, promoteSystem, promoteCondition, rewardPreview, promoteConditionTable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeasonLeagueReference {\n");
    sb.append("    definitionId: ").append(toIndentedString(definitionId)).append("\n");
    sb.append("    promoteSystem: ").append(toIndentedString(promoteSystem)).append("\n");
    sb.append("    promoteCondition: ").append(toIndentedString(promoteCondition)).append("\n");
    sb.append("    rewardPreview: ").append(toIndentedString(rewardPreview)).append("\n");
    sb.append("    promoteConditionTable: ").append(toIndentedString(promoteConditionTable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("definitionId");
    openapiFields.add("promoteSystem");
    openapiFields.add("promoteCondition");
    openapiFields.add("rewardPreview");
    openapiFields.add("promoteConditionTable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeasonLeagueReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeasonLeagueReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeasonLeagueReference is not found in the empty JSON string", SeasonLeagueReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeasonLeagueReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeasonLeagueReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("definitionId") != null && !jsonObj.get("definitionId").isJsonNull()) && !jsonObj.get("definitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definitionId").toString()));
      }
      // validate the optional field `promoteSystem`
      if (jsonObj.get("promoteSystem") != null && !jsonObj.get("promoteSystem").isJsonNull()) {
        SeasonLeaguePromoteSystem.validateJsonElement(jsonObj.get("promoteSystem"));
      }
      if (jsonObj.get("rewardPreview") != null && !jsonObj.get("rewardPreview").isJsonNull()) {
        JsonArray jsonArrayrewardPreview = jsonObj.getAsJsonArray("rewardPreview");
        if (jsonArrayrewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rewardPreview").toString()));
          }

          // validate the optional field `rewardPreview` (array)
          for (int i = 0; i < jsonArrayrewardPreview.size(); i++) {
            LeagueDivisionRewardPreview.validateJsonElement(jsonArrayrewardPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("promoteConditionTable") != null && !jsonObj.get("promoteConditionTable").isJsonNull()) && !jsonObj.get("promoteConditionTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promoteConditionTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promoteConditionTable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeasonLeagueReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeasonLeagueReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeasonLeagueReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeasonLeagueReference.class));

       return (TypeAdapter<T>) new TypeAdapter<SeasonLeagueReference>() {
           @Override
           public void write(JsonWriter out, SeasonLeagueReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeasonLeagueReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeasonLeagueReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeasonLeagueReference
   * @throws IOException if the JSON string is invalid with respect to SeasonLeagueReference
   */
  public static SeasonLeagueReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeasonLeagueReference.class);
  }

  /**
   * Convert an instance of SeasonLeagueReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

