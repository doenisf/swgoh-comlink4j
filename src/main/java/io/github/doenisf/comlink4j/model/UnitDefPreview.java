/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.AbilityReference;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * UnitDefPreview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class UnitDefPreview {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_THUMBNAIL_NAME = "thumbnailName";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_NAME)
  private String thumbnailName;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_BASIC_ATTACK_REF = "basicAttackRef";
  @SerializedName(SERIALIZED_NAME_BASIC_ATTACK_REF)
  private AbilityReference basicAttackRef;

  public static final String SERIALIZED_NAME_LIMIT_BREAK_REF = "limitBreakRef";
  @SerializedName(SERIALIZED_NAME_LIMIT_BREAK_REF)
  private List<AbilityReference> limitBreakRef = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIQUE_ABILITY_REF = "uniqueAbilityRef";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ABILITY_REF)
  private List<AbilityReference> uniqueAbilityRef = new ArrayList<>();

  public UnitDefPreview() {
  }

  public UnitDefPreview id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UnitDefPreview thumbnailName(String thumbnailName) {
    this.thumbnailName = thumbnailName;
    return this;
  }

  /**
   * Get thumbnailName
   * @return thumbnailName
   */
  @javax.annotation.Nullable
  public String getThumbnailName() {
    return thumbnailName;
  }

  public void setThumbnailName(String thumbnailName) {
    this.thumbnailName = thumbnailName;
  }


  public UnitDefPreview nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public UnitDefPreview basicAttackRef(AbilityReference basicAttackRef) {
    this.basicAttackRef = basicAttackRef;
    return this;
  }

  /**
   * Get basicAttackRef
   * @return basicAttackRef
   */
  @javax.annotation.Nullable
  public AbilityReference getBasicAttackRef() {
    return basicAttackRef;
  }

  public void setBasicAttackRef(AbilityReference basicAttackRef) {
    this.basicAttackRef = basicAttackRef;
  }


  public UnitDefPreview limitBreakRef(List<AbilityReference> limitBreakRef) {
    this.limitBreakRef = limitBreakRef;
    return this;
  }

  public UnitDefPreview addLimitBreakRefItem(AbilityReference limitBreakRefItem) {
    if (this.limitBreakRef == null) {
      this.limitBreakRef = new ArrayList<>();
    }
    this.limitBreakRef.add(limitBreakRefItem);
    return this;
  }

  /**
   * Get limitBreakRef
   * @return limitBreakRef
   */
  @javax.annotation.Nullable
  public List<AbilityReference> getLimitBreakRef() {
    return limitBreakRef;
  }

  public void setLimitBreakRef(List<AbilityReference> limitBreakRef) {
    this.limitBreakRef = limitBreakRef;
  }


  public UnitDefPreview uniqueAbilityRef(List<AbilityReference> uniqueAbilityRef) {
    this.uniqueAbilityRef = uniqueAbilityRef;
    return this;
  }

  public UnitDefPreview addUniqueAbilityRefItem(AbilityReference uniqueAbilityRefItem) {
    if (this.uniqueAbilityRef == null) {
      this.uniqueAbilityRef = new ArrayList<>();
    }
    this.uniqueAbilityRef.add(uniqueAbilityRefItem);
    return this;
  }

  /**
   * Get uniqueAbilityRef
   * @return uniqueAbilityRef
   */
  @javax.annotation.Nullable
  public List<AbilityReference> getUniqueAbilityRef() {
    return uniqueAbilityRef;
  }

  public void setUniqueAbilityRef(List<AbilityReference> uniqueAbilityRef) {
    this.uniqueAbilityRef = uniqueAbilityRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitDefPreview unitDefPreview = (UnitDefPreview) o;
    return Objects.equals(this.id, unitDefPreview.id) &&
        Objects.equals(this.thumbnailName, unitDefPreview.thumbnailName) &&
        Objects.equals(this.nameKey, unitDefPreview.nameKey) &&
        Objects.equals(this.basicAttackRef, unitDefPreview.basicAttackRef) &&
        Objects.equals(this.limitBreakRef, unitDefPreview.limitBreakRef) &&
        Objects.equals(this.uniqueAbilityRef, unitDefPreview.uniqueAbilityRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, thumbnailName, nameKey, basicAttackRef, limitBreakRef, uniqueAbilityRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitDefPreview {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    thumbnailName: ").append(toIndentedString(thumbnailName)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    basicAttackRef: ").append(toIndentedString(basicAttackRef)).append("\n");
    sb.append("    limitBreakRef: ").append(toIndentedString(limitBreakRef)).append("\n");
    sb.append("    uniqueAbilityRef: ").append(toIndentedString(uniqueAbilityRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("thumbnailName");
    openapiFields.add("nameKey");
    openapiFields.add("basicAttackRef");
    openapiFields.add("limitBreakRef");
    openapiFields.add("uniqueAbilityRef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnitDefPreview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitDefPreview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitDefPreview is not found in the empty JSON string", UnitDefPreview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnitDefPreview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitDefPreview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("thumbnailName") != null && !jsonObj.get("thumbnailName").isJsonNull()) && !jsonObj.get("thumbnailName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailName").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      // validate the optional field `basicAttackRef`
      if (jsonObj.get("basicAttackRef") != null && !jsonObj.get("basicAttackRef").isJsonNull()) {
        AbilityReference.validateJsonElement(jsonObj.get("basicAttackRef"));
      }
      if (jsonObj.get("limitBreakRef") != null && !jsonObj.get("limitBreakRef").isJsonNull()) {
        JsonArray jsonArraylimitBreakRef = jsonObj.getAsJsonArray("limitBreakRef");
        if (jsonArraylimitBreakRef != null) {
          // ensure the json data is an array
          if (!jsonObj.get("limitBreakRef").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `limitBreakRef` to be an array in the JSON string but got `%s`", jsonObj.get("limitBreakRef").toString()));
          }

          // validate the optional field `limitBreakRef` (array)
          for (int i = 0; i < jsonArraylimitBreakRef.size(); i++) {
            AbilityReference.validateJsonElement(jsonArraylimitBreakRef.get(i));
          };
        }
      }
      if (jsonObj.get("uniqueAbilityRef") != null && !jsonObj.get("uniqueAbilityRef").isJsonNull()) {
        JsonArray jsonArrayuniqueAbilityRef = jsonObj.getAsJsonArray("uniqueAbilityRef");
        if (jsonArrayuniqueAbilityRef != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uniqueAbilityRef").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uniqueAbilityRef` to be an array in the JSON string but got `%s`", jsonObj.get("uniqueAbilityRef").toString()));
          }

          // validate the optional field `uniqueAbilityRef` (array)
          for (int i = 0; i < jsonArrayuniqueAbilityRef.size(); i++) {
            AbilityReference.validateJsonElement(jsonArrayuniqueAbilityRef.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitDefPreview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitDefPreview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitDefPreview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitDefPreview.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitDefPreview>() {
           @Override
           public void write(JsonWriter out, UnitDefPreview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitDefPreview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnitDefPreview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnitDefPreview
   * @throws IOException if the JSON string is invalid with respect to UnitDefPreview
   */
  public static UnitDefPreview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitDefPreview.class);
  }

  /**
   * Convert an instance of UnitDefPreview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

