/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.Ability;
import io.github.doenisf.comlink4j.model.AbilityDecisionTree;
import io.github.doenisf.comlink4j.model.ArtifactDefinition;
import io.github.doenisf.comlink4j.model.ArtifactTierDefinition;
import io.github.doenisf.comlink4j.model.BattleEnvironment;
import io.github.doenisf.comlink4j.model.CalendarCategoryDefinition;
import io.github.doenisf.comlink4j.model.Campaign;
import io.github.doenisf.comlink4j.model.Category;
import io.github.doenisf.comlink4j.model.Challenge;
import io.github.doenisf.comlink4j.model.ChallengeStyle;
import io.github.doenisf.comlink4j.model.ConquestDefinition;
import io.github.doenisf.comlink4j.model.ConquestMission;
import io.github.doenisf.comlink4j.model.ConsumableDefinition;
import io.github.doenisf.comlink4j.model.ConsumableTierDefinition;
import io.github.doenisf.comlink4j.model.ConsumableType;
import io.github.doenisf.comlink4j.model.ConversionSet;
import io.github.doenisf.comlink4j.model.Cooldown;
import io.github.doenisf.comlink4j.model.CraftingMaterialDef;
import io.github.doenisf.comlink4j.model.DailyActionCap;
import io.github.doenisf.comlink4j.model.DailyLoginRewardDefinition;
import io.github.doenisf.comlink4j.model.DatacronAffixTemplateSet;
import io.github.doenisf.comlink4j.model.DatacronHelpEntry;
import io.github.doenisf.comlink4j.model.DatacronSet;
import io.github.doenisf.comlink4j.model.DatacronTemplate;
import io.github.doenisf.comlink4j.model.Effect;
import io.github.doenisf.comlink4j.model.EffectTarget;
import io.github.doenisf.comlink4j.model.EnergyRewardDefinition;
import io.github.doenisf.comlink4j.model.EnvironmentCollection;
import io.github.doenisf.comlink4j.model.EquipmentDef;
import io.github.doenisf.comlink4j.model.EventBonus;
import io.github.doenisf.comlink4j.model.EventSampling;
import io.github.doenisf.comlink4j.model.GalacticBundle;
import io.github.doenisf.comlink4j.model.GuildBannerDef;
import io.github.doenisf.comlink4j.model.GuildExchangeItem;
import io.github.doenisf.comlink4j.model.GuildRaid;
import io.github.doenisf.comlink4j.model.GuildRaidConfig;
import io.github.doenisf.comlink4j.model.GuildRaidGlobalConfig;
import io.github.doenisf.comlink4j.model.HelpEntry;
import io.github.doenisf.comlink4j.model.LinkedStoreItem;
import io.github.doenisf.comlink4j.model.ModRecommendation;
import io.github.doenisf.comlink4j.model.MysteryBoxDefinition;
import io.github.doenisf.comlink4j.model.MysteryStatModDefinition;
import io.github.doenisf.comlink4j.model.PersistentVfx;
import io.github.doenisf.comlink4j.model.PlayerPortraitDefinition;
import io.github.doenisf.comlink4j.model.PlayerTitleDefinition;
import io.github.doenisf.comlink4j.model.PowerUpBundle;
import io.github.doenisf.comlink4j.model.Recipe;
import io.github.doenisf.comlink4j.model.RecommendedSquad;
import io.github.doenisf.comlink4j.model.RelicTierDefinition;
import io.github.doenisf.comlink4j.model.Requirement;
import io.github.doenisf.comlink4j.model.SaveSquadConfig;
import io.github.doenisf.comlink4j.model.SeasonDefinition;
import io.github.doenisf.comlink4j.model.SeasonDivisionDefinition;
import io.github.doenisf.comlink4j.model.SeasonLeagueDefinition;
import io.github.doenisf.comlink4j.model.SeasonRewardTable;
import io.github.doenisf.comlink4j.model.SkillDefinition;
import io.github.doenisf.comlink4j.model.SocialStatus;
import io.github.doenisf.comlink4j.model.StarterGuildDef;
import io.github.doenisf.comlink4j.model.StatModDefinition;
import io.github.doenisf.comlink4j.model.StatModSetDefinition;
import io.github.doenisf.comlink4j.model.StatProgression;
import io.github.doenisf.comlink4j.model.Table;
import io.github.doenisf.comlink4j.model.TargetingSet;
import io.github.doenisf.comlink4j.model.TerritoryBattleDefinition;
import io.github.doenisf.comlink4j.model.TerritoryTournamentDailyRewardTable;
import io.github.doenisf.comlink4j.model.TerritoryTournamentDefinition;
import io.github.doenisf.comlink4j.model.TerritoryTournamentDivisionDefinition;
import io.github.doenisf.comlink4j.model.TerritoryTournamentLeagueDefinition;
import io.github.doenisf.comlink4j.model.TerritoryWarDefinition;
import io.github.doenisf.comlink4j.model.TimeZoneChangeConfig;
import io.github.doenisf.comlink4j.model.UnitDef;
import io.github.doenisf.comlink4j.model.UnitDefPreview;
import io.github.doenisf.comlink4j.model.UnitGuideDefinition;
import io.github.doenisf.comlink4j.model.UnitGuideLayout;
import io.github.doenisf.comlink4j.model.UnlockAnnouncementDefinition;
import io.github.doenisf.comlink4j.model.WarDef;
import io.github.doenisf.comlink4j.model.XpTable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * GetGameData2XXResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GetGameData2XXResponse {
  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private List<UnitDef> units = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATTLE_ENVIRONMENTS = "battleEnvironments";
  @SerializedName(SERIALIZED_NAME_BATTLE_ENVIRONMENTS)
  private List<BattleEnvironment> battleEnvironments = new ArrayList<>();

  public static final String SERIALIZED_NAME_XP_TABLE = "xpTable";
  @SerializedName(SERIALIZED_NAME_XP_TABLE)
  private List<XpTable> xpTable = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATERIAL = "material";
  @SerializedName(SERIALIZED_NAME_MATERIAL)
  private List<CraftingMaterialDef> material = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPE = "recipe";
  @SerializedName(SERIALIZED_NAME_RECIPE)
  private List<Recipe> recipe = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAT_PROGRESSION = "statProgression";
  @SerializedName(SERIALIZED_NAME_STAT_PROGRESSION)
  private List<StatProgression> statProgression = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<Category> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_HELP_ENTRY = "helpEntry";
  @SerializedName(SERIALIZED_NAME_HELP_ENTRY)
  private List<HelpEntry> helpEntry = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHALLENGE = "challenge";
  @SerializedName(SERIALIZED_NAME_CHALLENGE)
  private List<Challenge> challenge = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKILL = "skill";
  @SerializedName(SERIALIZED_NAME_SKILL)
  private List<SkillDefinition> skill = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_SAMPLING = "eventSampling";
  @SerializedName(SERIALIZED_NAME_EVENT_SAMPLING)
  private List<EventSampling> eventSampling = new ArrayList<>();

  public static final String SERIALIZED_NAME_EQUIPMENT = "equipment";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT)
  private List<EquipmentDef> equipment = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAR_DEFINITION = "warDefinition";
  @SerializedName(SERIALIZED_NAME_WAR_DEFINITION)
  private List<WarDef> warDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETING_SET = "targetingSet";
  @SerializedName(SERIALIZED_NAME_TARGETING_SET)
  private List<TargetingSet> targetingSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_ABILITY = "ability";
  @SerializedName(SERIALIZED_NAME_ABILITY)
  private List<Ability> ability = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECT = "effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private List<Effect> effect = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIREMENT = "requirement";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT)
  private List<Requirement> requirement = new ArrayList<>();

  public static final String SERIALIZED_NAME_POWER_UP_BUNDLE = "powerUpBundle";
  @SerializedName(SERIALIZED_NAME_POWER_UP_BUNDLE)
  private List<PowerUpBundle> powerUpBundle = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_BANNER = "guildBanner";
  @SerializedName(SERIALIZED_NAME_GUILD_BANNER)
  private GuildBannerDef guildBanner;

  public static final String SERIALIZED_NAME_RAID_CONFIG = "raidConfig";
  @SerializedName(SERIALIZED_NAME_RAID_CONFIG)
  private List<GuildRaidConfig> raidConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_RAID = "guildRaid";
  @SerializedName(SERIALIZED_NAME_GUILD_RAID)
  private List<GuildRaid> guildRaid = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAT_MOD_SET = "statModSet";
  @SerializedName(SERIALIZED_NAME_STAT_MOD_SET)
  private List<StatModSetDefinition> statModSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAT_MOD = "statMod";
  @SerializedName(SERIALIZED_NAME_STAT_MOD)
  private List<StatModDefinition> statMod = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_EXCHANGE_ITEM = "guildExchangeItem";
  @SerializedName(SERIALIZED_NAME_GUILD_EXCHANGE_ITEM)
  private List<GuildExchangeItem> guildExchangeItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private List<Table> table = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNLOCK_ANNOUNCEMENT_DEFINITION = "unlockAnnouncementDefinition";
  @SerializedName(SERIALIZED_NAME_UNLOCK_ANNOUNCEMENT_DEFINITION)
  private List<UnlockAnnouncementDefinition> unlockAnnouncementDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATTLE_TARGETING_RULE = "battleTargetingRule";
  @SerializedName(SERIALIZED_NAME_BATTLE_TARGETING_RULE)
  private List<EffectTarget> battleTargetingRule = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_BATTLE_DEFINITION = "territoryBattleDefinition";
  @SerializedName(SERIALIZED_NAME_TERRITORY_BATTLE_DEFINITION)
  private List<TerritoryBattleDefinition> territoryBattleDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_WAR_DEFINITION = "territoryWarDefinition";
  @SerializedName(SERIALIZED_NAME_TERRITORY_WAR_DEFINITION)
  private List<TerritoryWarDefinition> territoryWarDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_COLLECTION = "environmentCollection";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_COLLECTION)
  private List<EnvironmentCollection> environmentCollection = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHALLENGE_STYLE = "challengeStyle";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_STYLE)
  private List<ChallengeStyle> challengeStyle = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOCIAL_STATUS = "socialStatus";
  @SerializedName(SERIALIZED_NAME_SOCIAL_STATUS)
  private SocialStatus socialStatus;

  public static final String SERIALIZED_NAME_STARTER_GUILD = "starterGuild";
  @SerializedName(SERIALIZED_NAME_STARTER_GUILD)
  private List<StarterGuildDef> starterGuild = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYER_TITLE = "playerTitle";
  @SerializedName(SERIALIZED_NAME_PLAYER_TITLE)
  private List<PlayerTitleDefinition> playerTitle = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOD_RECOMMENDATION = "modRecommendation";
  @SerializedName(SERIALIZED_NAME_MOD_RECOMMENDATION)
  private List<ModRecommendation> modRecommendation = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSISTENT_VFX = "persistentVfx";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_VFX)
  private List<PersistentVfx> persistentVfx = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_TOURNAMENT_DEFINITION = "territoryTournamentDefinition";
  @SerializedName(SERIALIZED_NAME_TERRITORY_TOURNAMENT_DEFINITION)
  private List<TerritoryTournamentDefinition> territoryTournamentDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_BONUS = "eventBonus";
  @SerializedName(SERIALIZED_NAME_EVENT_BONUS)
  private List<EventBonus> eventBonus = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_DEFINITION = "seasonDefinition";
  @SerializedName(SERIALIZED_NAME_SEASON_DEFINITION)
  private List<SeasonDefinition> seasonDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYER_PORTRAIT = "playerPortrait";
  @SerializedName(SERIALIZED_NAME_PLAYER_PORTRAIT)
  private List<PlayerPortraitDefinition> playerPortrait = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE_CHANGE_CONFIG = "timeZoneChangeConfig";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_CHANGE_CONFIG)
  private TimeZoneChangeConfig timeZoneChangeConfig;

  public static final String SERIALIZED_NAME_EFFECT_ICON_PRIORITY = "effectIconPriority";
  @SerializedName(SERIALIZED_NAME_EFFECT_ICON_PRIORITY)
  private List<String> effectIconPriority = new ArrayList<>();

  public static final String SERIALIZED_NAME_MYSTERY_BOX = "mysteryBox";
  @SerializedName(SERIALIZED_NAME_MYSTERY_BOX)
  private List<MysteryBoxDefinition> mysteryBox = new ArrayList<>();

  public static final String SERIALIZED_NAME_MYSTERY_STAT_MOD = "mysteryStatMod";
  @SerializedName(SERIALIZED_NAME_MYSTERY_STAT_MOD)
  private List<MysteryStatModDefinition> mysteryStatMod = new ArrayList<>();

  public static final String SERIALIZED_NAME_COOLDOWN = "cooldown";
  @SerializedName(SERIALIZED_NAME_COOLDOWN)
  private List<Cooldown> cooldown = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAILY_ACTION_CAP = "dailyActionCap";
  @SerializedName(SERIALIZED_NAME_DAILY_ACTION_CAP)
  private List<DailyActionCap> dailyActionCap = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENERGY_REWARD = "energyReward";
  @SerializedName(SERIALIZED_NAME_ENERGY_REWARD)
  private List<EnergyRewardDefinition> energyReward = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_TOURNAMENT_MATCHMAKING_DESC_KEY = "territoryTournamentMatchmakingDescKey";
  @SerializedName(SERIALIZED_NAME_TERRITORY_TOURNAMENT_MATCHMAKING_DESC_KEY)
  private String territoryTournamentMatchmakingDescKey;

  public static final String SERIALIZED_NAME_SEASON_LEAGUE_DEFINITION = "seasonLeagueDefinition";
  @SerializedName(SERIALIZED_NAME_SEASON_LEAGUE_DEFINITION)
  private List<SeasonLeagueDefinition> seasonLeagueDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_DIVISION_DEFINITION = "seasonDivisionDefinition";
  @SerializedName(SERIALIZED_NAME_SEASON_DIVISION_DEFINITION)
  private List<SeasonDivisionDefinition> seasonDivisionDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_REWARD_TABLE = "seasonRewardTable";
  @SerializedName(SERIALIZED_NAME_SEASON_REWARD_TABLE)
  private List<SeasonRewardTable> seasonRewardTable = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELIC_TIER_DEFINITION = "relicTierDefinition";
  @SerializedName(SERIALIZED_NAME_RELIC_TIER_DEFINITION)
  private List<RelicTierDefinition> relicTierDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCAVENGER_CONVERSION_SET = "scavengerConversionSet";
  @SerializedName(SERIALIZED_NAME_SCAVENGER_CONVERSION_SET)
  private List<ConversionSet> scavengerConversionSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_GUIDE_DEFINITION = "unitGuideDefinition";
  @SerializedName(SERIALIZED_NAME_UNIT_GUIDE_DEFINITION)
  private List<UnitGuideDefinition> unitGuideDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_GALACTIC_BUNDLE = "galacticBundle";
  @SerializedName(SERIALIZED_NAME_GALACTIC_BUNDLE)
  private List<GalacticBundle> galacticBundle = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_STORE_ITEM = "linkedStoreItem";
  @SerializedName(SERIALIZED_NAME_LINKED_STORE_ITEM)
  private List<LinkedStoreItem> linkedStoreItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_TOURNAMENT_LEAGUE_DEFINITION = "territoryTournamentLeagueDefinition";
  @SerializedName(SERIALIZED_NAME_TERRITORY_TOURNAMENT_LEAGUE_DEFINITION)
  private List<TerritoryTournamentLeagueDefinition> territoryTournamentLeagueDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_TOURNAMENT_DIVISION_DEFINITION = "territoryTournamentDivisionDefinition";
  @SerializedName(SERIALIZED_NAME_TERRITORY_TOURNAMENT_DIVISION_DEFINITION)
  private List<TerritoryTournamentDivisionDefinition> territoryTournamentDivisionDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAVED_SQUAD_CONFIG = "savedSquadConfig";
  @SerializedName(SERIALIZED_NAME_SAVED_SQUAD_CONFIG)
  private List<SaveSquadConfig> savedSquadConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_RAID_GLOBAL_CONFIG = "guildRaidGlobalConfig";
  @SerializedName(SERIALIZED_NAME_GUILD_RAID_GLOBAL_CONFIG)
  private GuildRaidGlobalConfig guildRaidGlobalConfig;

  public static final String SERIALIZED_NAME_CAMPAIGN = "campaign";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN)
  private List<Campaign> campaign = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONQUEST_DEFINITION = "conquestDefinition";
  @SerializedName(SERIALIZED_NAME_CONQUEST_DEFINITION)
  private List<ConquestDefinition> conquestDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONQUEST_MISSION = "conquestMission";
  @SerializedName(SERIALIZED_NAME_CONQUEST_MISSION)
  private List<ConquestMission> conquestMission = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTIFACT_DEFINITION = "artifactDefinition";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_DEFINITION)
  private List<ArtifactDefinition> artifactDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_ABILITY_DECISION_TREE = "abilityDecisionTree";
  @SerializedName(SERIALIZED_NAME_ABILITY_DECISION_TREE)
  private List<AbilityDecisionTree> abilityDecisionTree = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSUMABLE_DEFINITION = "consumableDefinition";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE_DEFINITION)
  private List<ConsumableDefinition> consumableDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSUMABLE_TYPE = "consumableType";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE_TYPE)
  private List<ConsumableType> consumableType = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTIFACT_TIER_DEFINITION = "artifactTierDefinition";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_TIER_DEFINITION)
  private List<ArtifactTierDefinition> artifactTierDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSUMABLE_TIER_DEFINITION = "consumableTierDefinition";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE_TIER_DEFINITION)
  private List<ConsumableTierDefinition> consumableTierDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOMMENDED_SQUAD = "recommendedSquad";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_SQUAD)
  private List<RecommendedSquad> recommendedSquad = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_GUIDE_LAYOUT = "unitGuideLayout";
  @SerializedName(SERIALIZED_NAME_UNIT_GUIDE_LAYOUT)
  private List<UnitGuideLayout> unitGuideLayout = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAILY_LOGIN_REWARD_DEFINITION = "dailyLoginRewardDefinition";
  @SerializedName(SERIALIZED_NAME_DAILY_LOGIN_REWARD_DEFINITION)
  private List<DailyLoginRewardDefinition> dailyLoginRewardDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALENDAR_CATEGORY_DEFINITION = "calendarCategoryDefinition";
  @SerializedName(SERIALIZED_NAME_CALENDAR_CATEGORY_DEFINITION)
  private List<CalendarCategoryDefinition> calendarCategoryDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_TOURNAMENT_DAILY_REWARD_TABLE = "territoryTournamentDailyRewardTable";
  @SerializedName(SERIALIZED_NAME_TERRITORY_TOURNAMENT_DAILY_REWARD_TABLE)
  private TerritoryTournamentDailyRewardTable territoryTournamentDailyRewardTable;

  public static final String SERIALIZED_NAME_DATACRON_SET = "datacronSet";
  @SerializedName(SERIALIZED_NAME_DATACRON_SET)
  private List<DatacronSet> datacronSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATACRON_TEMPLATE = "datacronTemplate";
  @SerializedName(SERIALIZED_NAME_DATACRON_TEMPLATE)
  private List<DatacronTemplate> datacronTemplate = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATACRON_AFFIX_TEMPLATE_SET = "datacronAffixTemplateSet";
  @SerializedName(SERIALIZED_NAME_DATACRON_AFFIX_TEMPLATE_SET)
  private List<DatacronAffixTemplateSet> datacronAffixTemplateSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATACRON_HELP_ENTRY = "datacronHelpEntry";
  @SerializedName(SERIALIZED_NAME_DATACRON_HELP_ENTRY)
  private List<DatacronHelpEntry> datacronHelpEntry = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAYABLE_ENEMY = "displayableEnemy";
  @SerializedName(SERIALIZED_NAME_DISPLAYABLE_ENEMY)
  private List<UnitDefPreview> displayableEnemy = new ArrayList<>();

  public GetGameData2XXResponse() {
  }

  public GetGameData2XXResponse units(List<UnitDef> units) {
    this.units = units;
    return this;
  }

  public GetGameData2XXResponse addUnitsItem(UnitDef unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public List<UnitDef> getUnits() {
    return units;
  }

  public void setUnits(List<UnitDef> units) {
    this.units = units;
  }


  public GetGameData2XXResponse battleEnvironments(List<BattleEnvironment> battleEnvironments) {
    this.battleEnvironments = battleEnvironments;
    return this;
  }

  public GetGameData2XXResponse addBattleEnvironmentsItem(BattleEnvironment battleEnvironmentsItem) {
    if (this.battleEnvironments == null) {
      this.battleEnvironments = new ArrayList<>();
    }
    this.battleEnvironments.add(battleEnvironmentsItem);
    return this;
  }

  /**
   * Get battleEnvironments
   * @return battleEnvironments
   */
  @javax.annotation.Nullable
  public List<BattleEnvironment> getBattleEnvironments() {
    return battleEnvironments;
  }

  public void setBattleEnvironments(List<BattleEnvironment> battleEnvironments) {
    this.battleEnvironments = battleEnvironments;
  }


  public GetGameData2XXResponse xpTable(List<XpTable> xpTable) {
    this.xpTable = xpTable;
    return this;
  }

  public GetGameData2XXResponse addXpTableItem(XpTable xpTableItem) {
    if (this.xpTable == null) {
      this.xpTable = new ArrayList<>();
    }
    this.xpTable.add(xpTableItem);
    return this;
  }

  /**
   * Get xpTable
   * @return xpTable
   */
  @javax.annotation.Nullable
  public List<XpTable> getXpTable() {
    return xpTable;
  }

  public void setXpTable(List<XpTable> xpTable) {
    this.xpTable = xpTable;
  }


  public GetGameData2XXResponse material(List<CraftingMaterialDef> material) {
    this.material = material;
    return this;
  }

  public GetGameData2XXResponse addMaterialItem(CraftingMaterialDef materialItem) {
    if (this.material == null) {
      this.material = new ArrayList<>();
    }
    this.material.add(materialItem);
    return this;
  }

  /**
   * Get material
   * @return material
   */
  @javax.annotation.Nullable
  public List<CraftingMaterialDef> getMaterial() {
    return material;
  }

  public void setMaterial(List<CraftingMaterialDef> material) {
    this.material = material;
  }


  public GetGameData2XXResponse recipe(List<Recipe> recipe) {
    this.recipe = recipe;
    return this;
  }

  public GetGameData2XXResponse addRecipeItem(Recipe recipeItem) {
    if (this.recipe == null) {
      this.recipe = new ArrayList<>();
    }
    this.recipe.add(recipeItem);
    return this;
  }

  /**
   * Get recipe
   * @return recipe
   */
  @javax.annotation.Nullable
  public List<Recipe> getRecipe() {
    return recipe;
  }

  public void setRecipe(List<Recipe> recipe) {
    this.recipe = recipe;
  }


  public GetGameData2XXResponse statProgression(List<StatProgression> statProgression) {
    this.statProgression = statProgression;
    return this;
  }

  public GetGameData2XXResponse addStatProgressionItem(StatProgression statProgressionItem) {
    if (this.statProgression == null) {
      this.statProgression = new ArrayList<>();
    }
    this.statProgression.add(statProgressionItem);
    return this;
  }

  /**
   * Get statProgression
   * @return statProgression
   */
  @javax.annotation.Nullable
  public List<StatProgression> getStatProgression() {
    return statProgression;
  }

  public void setStatProgression(List<StatProgression> statProgression) {
    this.statProgression = statProgression;
  }


  public GetGameData2XXResponse category(List<Category> category) {
    this.category = category;
    return this;
  }

  public GetGameData2XXResponse addCategoryItem(Category categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public List<Category> getCategory() {
    return category;
  }

  public void setCategory(List<Category> category) {
    this.category = category;
  }


  public GetGameData2XXResponse helpEntry(List<HelpEntry> helpEntry) {
    this.helpEntry = helpEntry;
    return this;
  }

  public GetGameData2XXResponse addHelpEntryItem(HelpEntry helpEntryItem) {
    if (this.helpEntry == null) {
      this.helpEntry = new ArrayList<>();
    }
    this.helpEntry.add(helpEntryItem);
    return this;
  }

  /**
   * Get helpEntry
   * @return helpEntry
   */
  @javax.annotation.Nullable
  public List<HelpEntry> getHelpEntry() {
    return helpEntry;
  }

  public void setHelpEntry(List<HelpEntry> helpEntry) {
    this.helpEntry = helpEntry;
  }


  public GetGameData2XXResponse challenge(List<Challenge> challenge) {
    this.challenge = challenge;
    return this;
  }

  public GetGameData2XXResponse addChallengeItem(Challenge challengeItem) {
    if (this.challenge == null) {
      this.challenge = new ArrayList<>();
    }
    this.challenge.add(challengeItem);
    return this;
  }

  /**
   * Get challenge
   * @return challenge
   */
  @javax.annotation.Nullable
  public List<Challenge> getChallenge() {
    return challenge;
  }

  public void setChallenge(List<Challenge> challenge) {
    this.challenge = challenge;
  }


  public GetGameData2XXResponse skill(List<SkillDefinition> skill) {
    this.skill = skill;
    return this;
  }

  public GetGameData2XXResponse addSkillItem(SkillDefinition skillItem) {
    if (this.skill == null) {
      this.skill = new ArrayList<>();
    }
    this.skill.add(skillItem);
    return this;
  }

  /**
   * Get skill
   * @return skill
   */
  @javax.annotation.Nullable
  public List<SkillDefinition> getSkill() {
    return skill;
  }

  public void setSkill(List<SkillDefinition> skill) {
    this.skill = skill;
  }


  public GetGameData2XXResponse eventSampling(List<EventSampling> eventSampling) {
    this.eventSampling = eventSampling;
    return this;
  }

  public GetGameData2XXResponse addEventSamplingItem(EventSampling eventSamplingItem) {
    if (this.eventSampling == null) {
      this.eventSampling = new ArrayList<>();
    }
    this.eventSampling.add(eventSamplingItem);
    return this;
  }

  /**
   * Get eventSampling
   * @return eventSampling
   */
  @javax.annotation.Nullable
  public List<EventSampling> getEventSampling() {
    return eventSampling;
  }

  public void setEventSampling(List<EventSampling> eventSampling) {
    this.eventSampling = eventSampling;
  }


  public GetGameData2XXResponse equipment(List<EquipmentDef> equipment) {
    this.equipment = equipment;
    return this;
  }

  public GetGameData2XXResponse addEquipmentItem(EquipmentDef equipmentItem) {
    if (this.equipment == null) {
      this.equipment = new ArrayList<>();
    }
    this.equipment.add(equipmentItem);
    return this;
  }

  /**
   * Get equipment
   * @return equipment
   */
  @javax.annotation.Nullable
  public List<EquipmentDef> getEquipment() {
    return equipment;
  }

  public void setEquipment(List<EquipmentDef> equipment) {
    this.equipment = equipment;
  }


  public GetGameData2XXResponse warDefinition(List<WarDef> warDefinition) {
    this.warDefinition = warDefinition;
    return this;
  }

  public GetGameData2XXResponse addWarDefinitionItem(WarDef warDefinitionItem) {
    if (this.warDefinition == null) {
      this.warDefinition = new ArrayList<>();
    }
    this.warDefinition.add(warDefinitionItem);
    return this;
  }

  /**
   * Get warDefinition
   * @return warDefinition
   */
  @javax.annotation.Nullable
  public List<WarDef> getWarDefinition() {
    return warDefinition;
  }

  public void setWarDefinition(List<WarDef> warDefinition) {
    this.warDefinition = warDefinition;
  }


  public GetGameData2XXResponse targetingSet(List<TargetingSet> targetingSet) {
    this.targetingSet = targetingSet;
    return this;
  }

  public GetGameData2XXResponse addTargetingSetItem(TargetingSet targetingSetItem) {
    if (this.targetingSet == null) {
      this.targetingSet = new ArrayList<>();
    }
    this.targetingSet.add(targetingSetItem);
    return this;
  }

  /**
   * Get targetingSet
   * @return targetingSet
   */
  @javax.annotation.Nullable
  public List<TargetingSet> getTargetingSet() {
    return targetingSet;
  }

  public void setTargetingSet(List<TargetingSet> targetingSet) {
    this.targetingSet = targetingSet;
  }


  public GetGameData2XXResponse ability(List<Ability> ability) {
    this.ability = ability;
    return this;
  }

  public GetGameData2XXResponse addAbilityItem(Ability abilityItem) {
    if (this.ability == null) {
      this.ability = new ArrayList<>();
    }
    this.ability.add(abilityItem);
    return this;
  }

  /**
   * Get ability
   * @return ability
   */
  @javax.annotation.Nullable
  public List<Ability> getAbility() {
    return ability;
  }

  public void setAbility(List<Ability> ability) {
    this.ability = ability;
  }


  public GetGameData2XXResponse effect(List<Effect> effect) {
    this.effect = effect;
    return this;
  }

  public GetGameData2XXResponse addEffectItem(Effect effectItem) {
    if (this.effect == null) {
      this.effect = new ArrayList<>();
    }
    this.effect.add(effectItem);
    return this;
  }

  /**
   * Get effect
   * @return effect
   */
  @javax.annotation.Nullable
  public List<Effect> getEffect() {
    return effect;
  }

  public void setEffect(List<Effect> effect) {
    this.effect = effect;
  }


  public GetGameData2XXResponse requirement(List<Requirement> requirement) {
    this.requirement = requirement;
    return this;
  }

  public GetGameData2XXResponse addRequirementItem(Requirement requirementItem) {
    if (this.requirement == null) {
      this.requirement = new ArrayList<>();
    }
    this.requirement.add(requirementItem);
    return this;
  }

  /**
   * Get requirement
   * @return requirement
   */
  @javax.annotation.Nullable
  public List<Requirement> getRequirement() {
    return requirement;
  }

  public void setRequirement(List<Requirement> requirement) {
    this.requirement = requirement;
  }


  public GetGameData2XXResponse powerUpBundle(List<PowerUpBundle> powerUpBundle) {
    this.powerUpBundle = powerUpBundle;
    return this;
  }

  public GetGameData2XXResponse addPowerUpBundleItem(PowerUpBundle powerUpBundleItem) {
    if (this.powerUpBundle == null) {
      this.powerUpBundle = new ArrayList<>();
    }
    this.powerUpBundle.add(powerUpBundleItem);
    return this;
  }

  /**
   * Get powerUpBundle
   * @return powerUpBundle
   */
  @javax.annotation.Nullable
  public List<PowerUpBundle> getPowerUpBundle() {
    return powerUpBundle;
  }

  public void setPowerUpBundle(List<PowerUpBundle> powerUpBundle) {
    this.powerUpBundle = powerUpBundle;
  }


  public GetGameData2XXResponse guildBanner(GuildBannerDef guildBanner) {
    this.guildBanner = guildBanner;
    return this;
  }

  /**
   * Get guildBanner
   * @return guildBanner
   */
  @javax.annotation.Nullable
  public GuildBannerDef getGuildBanner() {
    return guildBanner;
  }

  public void setGuildBanner(GuildBannerDef guildBanner) {
    this.guildBanner = guildBanner;
  }


  public GetGameData2XXResponse raidConfig(List<GuildRaidConfig> raidConfig) {
    this.raidConfig = raidConfig;
    return this;
  }

  public GetGameData2XXResponse addRaidConfigItem(GuildRaidConfig raidConfigItem) {
    if (this.raidConfig == null) {
      this.raidConfig = new ArrayList<>();
    }
    this.raidConfig.add(raidConfigItem);
    return this;
  }

  /**
   * Get raidConfig
   * @return raidConfig
   */
  @javax.annotation.Nullable
  public List<GuildRaidConfig> getRaidConfig() {
    return raidConfig;
  }

  public void setRaidConfig(List<GuildRaidConfig> raidConfig) {
    this.raidConfig = raidConfig;
  }


  public GetGameData2XXResponse guildRaid(List<GuildRaid> guildRaid) {
    this.guildRaid = guildRaid;
    return this;
  }

  public GetGameData2XXResponse addGuildRaidItem(GuildRaid guildRaidItem) {
    if (this.guildRaid == null) {
      this.guildRaid = new ArrayList<>();
    }
    this.guildRaid.add(guildRaidItem);
    return this;
  }

  /**
   * Get guildRaid
   * @return guildRaid
   */
  @javax.annotation.Nullable
  public List<GuildRaid> getGuildRaid() {
    return guildRaid;
  }

  public void setGuildRaid(List<GuildRaid> guildRaid) {
    this.guildRaid = guildRaid;
  }


  public GetGameData2XXResponse statModSet(List<StatModSetDefinition> statModSet) {
    this.statModSet = statModSet;
    return this;
  }

  public GetGameData2XXResponse addStatModSetItem(StatModSetDefinition statModSetItem) {
    if (this.statModSet == null) {
      this.statModSet = new ArrayList<>();
    }
    this.statModSet.add(statModSetItem);
    return this;
  }

  /**
   * Get statModSet
   * @return statModSet
   */
  @javax.annotation.Nullable
  public List<StatModSetDefinition> getStatModSet() {
    return statModSet;
  }

  public void setStatModSet(List<StatModSetDefinition> statModSet) {
    this.statModSet = statModSet;
  }


  public GetGameData2XXResponse statMod(List<StatModDefinition> statMod) {
    this.statMod = statMod;
    return this;
  }

  public GetGameData2XXResponse addStatModItem(StatModDefinition statModItem) {
    if (this.statMod == null) {
      this.statMod = new ArrayList<>();
    }
    this.statMod.add(statModItem);
    return this;
  }

  /**
   * Get statMod
   * @return statMod
   */
  @javax.annotation.Nullable
  public List<StatModDefinition> getStatMod() {
    return statMod;
  }

  public void setStatMod(List<StatModDefinition> statMod) {
    this.statMod = statMod;
  }


  public GetGameData2XXResponse guildExchangeItem(List<GuildExchangeItem> guildExchangeItem) {
    this.guildExchangeItem = guildExchangeItem;
    return this;
  }

  public GetGameData2XXResponse addGuildExchangeItemItem(GuildExchangeItem guildExchangeItemItem) {
    if (this.guildExchangeItem == null) {
      this.guildExchangeItem = new ArrayList<>();
    }
    this.guildExchangeItem.add(guildExchangeItemItem);
    return this;
  }

  /**
   * Get guildExchangeItem
   * @return guildExchangeItem
   */
  @javax.annotation.Nullable
  public List<GuildExchangeItem> getGuildExchangeItem() {
    return guildExchangeItem;
  }

  public void setGuildExchangeItem(List<GuildExchangeItem> guildExchangeItem) {
    this.guildExchangeItem = guildExchangeItem;
  }


  public GetGameData2XXResponse table(List<Table> table) {
    this.table = table;
    return this;
  }

  public GetGameData2XXResponse addTableItem(Table tableItem) {
    if (this.table == null) {
      this.table = new ArrayList<>();
    }
    this.table.add(tableItem);
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public List<Table> getTable() {
    return table;
  }

  public void setTable(List<Table> table) {
    this.table = table;
  }


  public GetGameData2XXResponse unlockAnnouncementDefinition(List<UnlockAnnouncementDefinition> unlockAnnouncementDefinition) {
    this.unlockAnnouncementDefinition = unlockAnnouncementDefinition;
    return this;
  }

  public GetGameData2XXResponse addUnlockAnnouncementDefinitionItem(UnlockAnnouncementDefinition unlockAnnouncementDefinitionItem) {
    if (this.unlockAnnouncementDefinition == null) {
      this.unlockAnnouncementDefinition = new ArrayList<>();
    }
    this.unlockAnnouncementDefinition.add(unlockAnnouncementDefinitionItem);
    return this;
  }

  /**
   * Get unlockAnnouncementDefinition
   * @return unlockAnnouncementDefinition
   */
  @javax.annotation.Nullable
  public List<UnlockAnnouncementDefinition> getUnlockAnnouncementDefinition() {
    return unlockAnnouncementDefinition;
  }

  public void setUnlockAnnouncementDefinition(List<UnlockAnnouncementDefinition> unlockAnnouncementDefinition) {
    this.unlockAnnouncementDefinition = unlockAnnouncementDefinition;
  }


  public GetGameData2XXResponse battleTargetingRule(List<EffectTarget> battleTargetingRule) {
    this.battleTargetingRule = battleTargetingRule;
    return this;
  }

  public GetGameData2XXResponse addBattleTargetingRuleItem(EffectTarget battleTargetingRuleItem) {
    if (this.battleTargetingRule == null) {
      this.battleTargetingRule = new ArrayList<>();
    }
    this.battleTargetingRule.add(battleTargetingRuleItem);
    return this;
  }

  /**
   * Get battleTargetingRule
   * @return battleTargetingRule
   */
  @javax.annotation.Nullable
  public List<EffectTarget> getBattleTargetingRule() {
    return battleTargetingRule;
  }

  public void setBattleTargetingRule(List<EffectTarget> battleTargetingRule) {
    this.battleTargetingRule = battleTargetingRule;
  }


  public GetGameData2XXResponse territoryBattleDefinition(List<TerritoryBattleDefinition> territoryBattleDefinition) {
    this.territoryBattleDefinition = territoryBattleDefinition;
    return this;
  }

  public GetGameData2XXResponse addTerritoryBattleDefinitionItem(TerritoryBattleDefinition territoryBattleDefinitionItem) {
    if (this.territoryBattleDefinition == null) {
      this.territoryBattleDefinition = new ArrayList<>();
    }
    this.territoryBattleDefinition.add(territoryBattleDefinitionItem);
    return this;
  }

  /**
   * Get territoryBattleDefinition
   * @return territoryBattleDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryBattleDefinition> getTerritoryBattleDefinition() {
    return territoryBattleDefinition;
  }

  public void setTerritoryBattleDefinition(List<TerritoryBattleDefinition> territoryBattleDefinition) {
    this.territoryBattleDefinition = territoryBattleDefinition;
  }


  public GetGameData2XXResponse territoryWarDefinition(List<TerritoryWarDefinition> territoryWarDefinition) {
    this.territoryWarDefinition = territoryWarDefinition;
    return this;
  }

  public GetGameData2XXResponse addTerritoryWarDefinitionItem(TerritoryWarDefinition territoryWarDefinitionItem) {
    if (this.territoryWarDefinition == null) {
      this.territoryWarDefinition = new ArrayList<>();
    }
    this.territoryWarDefinition.add(territoryWarDefinitionItem);
    return this;
  }

  /**
   * Get territoryWarDefinition
   * @return territoryWarDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryWarDefinition> getTerritoryWarDefinition() {
    return territoryWarDefinition;
  }

  public void setTerritoryWarDefinition(List<TerritoryWarDefinition> territoryWarDefinition) {
    this.territoryWarDefinition = territoryWarDefinition;
  }


  public GetGameData2XXResponse environmentCollection(List<EnvironmentCollection> environmentCollection) {
    this.environmentCollection = environmentCollection;
    return this;
  }

  public GetGameData2XXResponse addEnvironmentCollectionItem(EnvironmentCollection environmentCollectionItem) {
    if (this.environmentCollection == null) {
      this.environmentCollection = new ArrayList<>();
    }
    this.environmentCollection.add(environmentCollectionItem);
    return this;
  }

  /**
   * Get environmentCollection
   * @return environmentCollection
   */
  @javax.annotation.Nullable
  public List<EnvironmentCollection> getEnvironmentCollection() {
    return environmentCollection;
  }

  public void setEnvironmentCollection(List<EnvironmentCollection> environmentCollection) {
    this.environmentCollection = environmentCollection;
  }


  public GetGameData2XXResponse challengeStyle(List<ChallengeStyle> challengeStyle) {
    this.challengeStyle = challengeStyle;
    return this;
  }

  public GetGameData2XXResponse addChallengeStyleItem(ChallengeStyle challengeStyleItem) {
    if (this.challengeStyle == null) {
      this.challengeStyle = new ArrayList<>();
    }
    this.challengeStyle.add(challengeStyleItem);
    return this;
  }

  /**
   * Get challengeStyle
   * @return challengeStyle
   */
  @javax.annotation.Nullable
  public List<ChallengeStyle> getChallengeStyle() {
    return challengeStyle;
  }

  public void setChallengeStyle(List<ChallengeStyle> challengeStyle) {
    this.challengeStyle = challengeStyle;
  }


  public GetGameData2XXResponse socialStatus(SocialStatus socialStatus) {
    this.socialStatus = socialStatus;
    return this;
  }

  /**
   * Get socialStatus
   * @return socialStatus
   */
  @javax.annotation.Nullable
  public SocialStatus getSocialStatus() {
    return socialStatus;
  }

  public void setSocialStatus(SocialStatus socialStatus) {
    this.socialStatus = socialStatus;
  }


  public GetGameData2XXResponse starterGuild(List<StarterGuildDef> starterGuild) {
    this.starterGuild = starterGuild;
    return this;
  }

  public GetGameData2XXResponse addStarterGuildItem(StarterGuildDef starterGuildItem) {
    if (this.starterGuild == null) {
      this.starterGuild = new ArrayList<>();
    }
    this.starterGuild.add(starterGuildItem);
    return this;
  }

  /**
   * Get starterGuild
   * @return starterGuild
   */
  @javax.annotation.Nullable
  public List<StarterGuildDef> getStarterGuild() {
    return starterGuild;
  }

  public void setStarterGuild(List<StarterGuildDef> starterGuild) {
    this.starterGuild = starterGuild;
  }


  public GetGameData2XXResponse playerTitle(List<PlayerTitleDefinition> playerTitle) {
    this.playerTitle = playerTitle;
    return this;
  }

  public GetGameData2XXResponse addPlayerTitleItem(PlayerTitleDefinition playerTitleItem) {
    if (this.playerTitle == null) {
      this.playerTitle = new ArrayList<>();
    }
    this.playerTitle.add(playerTitleItem);
    return this;
  }

  /**
   * Get playerTitle
   * @return playerTitle
   */
  @javax.annotation.Nullable
  public List<PlayerTitleDefinition> getPlayerTitle() {
    return playerTitle;
  }

  public void setPlayerTitle(List<PlayerTitleDefinition> playerTitle) {
    this.playerTitle = playerTitle;
  }


  public GetGameData2XXResponse modRecommendation(List<ModRecommendation> modRecommendation) {
    this.modRecommendation = modRecommendation;
    return this;
  }

  public GetGameData2XXResponse addModRecommendationItem(ModRecommendation modRecommendationItem) {
    if (this.modRecommendation == null) {
      this.modRecommendation = new ArrayList<>();
    }
    this.modRecommendation.add(modRecommendationItem);
    return this;
  }

  /**
   * Get modRecommendation
   * @return modRecommendation
   */
  @javax.annotation.Nullable
  public List<ModRecommendation> getModRecommendation() {
    return modRecommendation;
  }

  public void setModRecommendation(List<ModRecommendation> modRecommendation) {
    this.modRecommendation = modRecommendation;
  }


  public GetGameData2XXResponse persistentVfx(List<PersistentVfx> persistentVfx) {
    this.persistentVfx = persistentVfx;
    return this;
  }

  public GetGameData2XXResponse addPersistentVfxItem(PersistentVfx persistentVfxItem) {
    if (this.persistentVfx == null) {
      this.persistentVfx = new ArrayList<>();
    }
    this.persistentVfx.add(persistentVfxItem);
    return this;
  }

  /**
   * Get persistentVfx
   * @return persistentVfx
   */
  @javax.annotation.Nullable
  public List<PersistentVfx> getPersistentVfx() {
    return persistentVfx;
  }

  public void setPersistentVfx(List<PersistentVfx> persistentVfx) {
    this.persistentVfx = persistentVfx;
  }


  public GetGameData2XXResponse territoryTournamentDefinition(List<TerritoryTournamentDefinition> territoryTournamentDefinition) {
    this.territoryTournamentDefinition = territoryTournamentDefinition;
    return this;
  }

  public GetGameData2XXResponse addTerritoryTournamentDefinitionItem(TerritoryTournamentDefinition territoryTournamentDefinitionItem) {
    if (this.territoryTournamentDefinition == null) {
      this.territoryTournamentDefinition = new ArrayList<>();
    }
    this.territoryTournamentDefinition.add(territoryTournamentDefinitionItem);
    return this;
  }

  /**
   * Get territoryTournamentDefinition
   * @return territoryTournamentDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryTournamentDefinition> getTerritoryTournamentDefinition() {
    return territoryTournamentDefinition;
  }

  public void setTerritoryTournamentDefinition(List<TerritoryTournamentDefinition> territoryTournamentDefinition) {
    this.territoryTournamentDefinition = territoryTournamentDefinition;
  }


  public GetGameData2XXResponse eventBonus(List<EventBonus> eventBonus) {
    this.eventBonus = eventBonus;
    return this;
  }

  public GetGameData2XXResponse addEventBonusItem(EventBonus eventBonusItem) {
    if (this.eventBonus == null) {
      this.eventBonus = new ArrayList<>();
    }
    this.eventBonus.add(eventBonusItem);
    return this;
  }

  /**
   * Get eventBonus
   * @return eventBonus
   */
  @javax.annotation.Nullable
  public List<EventBonus> getEventBonus() {
    return eventBonus;
  }

  public void setEventBonus(List<EventBonus> eventBonus) {
    this.eventBonus = eventBonus;
  }


  public GetGameData2XXResponse seasonDefinition(List<SeasonDefinition> seasonDefinition) {
    this.seasonDefinition = seasonDefinition;
    return this;
  }

  public GetGameData2XXResponse addSeasonDefinitionItem(SeasonDefinition seasonDefinitionItem) {
    if (this.seasonDefinition == null) {
      this.seasonDefinition = new ArrayList<>();
    }
    this.seasonDefinition.add(seasonDefinitionItem);
    return this;
  }

  /**
   * Get seasonDefinition
   * @return seasonDefinition
   */
  @javax.annotation.Nullable
  public List<SeasonDefinition> getSeasonDefinition() {
    return seasonDefinition;
  }

  public void setSeasonDefinition(List<SeasonDefinition> seasonDefinition) {
    this.seasonDefinition = seasonDefinition;
  }


  public GetGameData2XXResponse playerPortrait(List<PlayerPortraitDefinition> playerPortrait) {
    this.playerPortrait = playerPortrait;
    return this;
  }

  public GetGameData2XXResponse addPlayerPortraitItem(PlayerPortraitDefinition playerPortraitItem) {
    if (this.playerPortrait == null) {
      this.playerPortrait = new ArrayList<>();
    }
    this.playerPortrait.add(playerPortraitItem);
    return this;
  }

  /**
   * Get playerPortrait
   * @return playerPortrait
   */
  @javax.annotation.Nullable
  public List<PlayerPortraitDefinition> getPlayerPortrait() {
    return playerPortrait;
  }

  public void setPlayerPortrait(List<PlayerPortraitDefinition> playerPortrait) {
    this.playerPortrait = playerPortrait;
  }


  public GetGameData2XXResponse timeZoneChangeConfig(TimeZoneChangeConfig timeZoneChangeConfig) {
    this.timeZoneChangeConfig = timeZoneChangeConfig;
    return this;
  }

  /**
   * Get timeZoneChangeConfig
   * @return timeZoneChangeConfig
   */
  @javax.annotation.Nullable
  public TimeZoneChangeConfig getTimeZoneChangeConfig() {
    return timeZoneChangeConfig;
  }

  public void setTimeZoneChangeConfig(TimeZoneChangeConfig timeZoneChangeConfig) {
    this.timeZoneChangeConfig = timeZoneChangeConfig;
  }


  public GetGameData2XXResponse effectIconPriority(List<String> effectIconPriority) {
    this.effectIconPriority = effectIconPriority;
    return this;
  }

  public GetGameData2XXResponse addEffectIconPriorityItem(String effectIconPriorityItem) {
    if (this.effectIconPriority == null) {
      this.effectIconPriority = new ArrayList<>();
    }
    this.effectIconPriority.add(effectIconPriorityItem);
    return this;
  }

  /**
   * Get effectIconPriority
   * @return effectIconPriority
   */
  @javax.annotation.Nullable
  public List<String> getEffectIconPriority() {
    return effectIconPriority;
  }

  public void setEffectIconPriority(List<String> effectIconPriority) {
    this.effectIconPriority = effectIconPriority;
  }


  public GetGameData2XXResponse mysteryBox(List<MysteryBoxDefinition> mysteryBox) {
    this.mysteryBox = mysteryBox;
    return this;
  }

  public GetGameData2XXResponse addMysteryBoxItem(MysteryBoxDefinition mysteryBoxItem) {
    if (this.mysteryBox == null) {
      this.mysteryBox = new ArrayList<>();
    }
    this.mysteryBox.add(mysteryBoxItem);
    return this;
  }

  /**
   * Get mysteryBox
   * @return mysteryBox
   */
  @javax.annotation.Nullable
  public List<MysteryBoxDefinition> getMysteryBox() {
    return mysteryBox;
  }

  public void setMysteryBox(List<MysteryBoxDefinition> mysteryBox) {
    this.mysteryBox = mysteryBox;
  }


  public GetGameData2XXResponse mysteryStatMod(List<MysteryStatModDefinition> mysteryStatMod) {
    this.mysteryStatMod = mysteryStatMod;
    return this;
  }

  public GetGameData2XXResponse addMysteryStatModItem(MysteryStatModDefinition mysteryStatModItem) {
    if (this.mysteryStatMod == null) {
      this.mysteryStatMod = new ArrayList<>();
    }
    this.mysteryStatMod.add(mysteryStatModItem);
    return this;
  }

  /**
   * Get mysteryStatMod
   * @return mysteryStatMod
   */
  @javax.annotation.Nullable
  public List<MysteryStatModDefinition> getMysteryStatMod() {
    return mysteryStatMod;
  }

  public void setMysteryStatMod(List<MysteryStatModDefinition> mysteryStatMod) {
    this.mysteryStatMod = mysteryStatMod;
  }


  public GetGameData2XXResponse cooldown(List<Cooldown> cooldown) {
    this.cooldown = cooldown;
    return this;
  }

  public GetGameData2XXResponse addCooldownItem(Cooldown cooldownItem) {
    if (this.cooldown == null) {
      this.cooldown = new ArrayList<>();
    }
    this.cooldown.add(cooldownItem);
    return this;
  }

  /**
   * Get cooldown
   * @return cooldown
   */
  @javax.annotation.Nullable
  public List<Cooldown> getCooldown() {
    return cooldown;
  }

  public void setCooldown(List<Cooldown> cooldown) {
    this.cooldown = cooldown;
  }


  public GetGameData2XXResponse dailyActionCap(List<DailyActionCap> dailyActionCap) {
    this.dailyActionCap = dailyActionCap;
    return this;
  }

  public GetGameData2XXResponse addDailyActionCapItem(DailyActionCap dailyActionCapItem) {
    if (this.dailyActionCap == null) {
      this.dailyActionCap = new ArrayList<>();
    }
    this.dailyActionCap.add(dailyActionCapItem);
    return this;
  }

  /**
   * Get dailyActionCap
   * @return dailyActionCap
   */
  @javax.annotation.Nullable
  public List<DailyActionCap> getDailyActionCap() {
    return dailyActionCap;
  }

  public void setDailyActionCap(List<DailyActionCap> dailyActionCap) {
    this.dailyActionCap = dailyActionCap;
  }


  public GetGameData2XXResponse energyReward(List<EnergyRewardDefinition> energyReward) {
    this.energyReward = energyReward;
    return this;
  }

  public GetGameData2XXResponse addEnergyRewardItem(EnergyRewardDefinition energyRewardItem) {
    if (this.energyReward == null) {
      this.energyReward = new ArrayList<>();
    }
    this.energyReward.add(energyRewardItem);
    return this;
  }

  /**
   * Get energyReward
   * @return energyReward
   */
  @javax.annotation.Nullable
  public List<EnergyRewardDefinition> getEnergyReward() {
    return energyReward;
  }

  public void setEnergyReward(List<EnergyRewardDefinition> energyReward) {
    this.energyReward = energyReward;
  }


  public GetGameData2XXResponse territoryTournamentMatchmakingDescKey(String territoryTournamentMatchmakingDescKey) {
    this.territoryTournamentMatchmakingDescKey = territoryTournamentMatchmakingDescKey;
    return this;
  }

  /**
   * Get territoryTournamentMatchmakingDescKey
   * @return territoryTournamentMatchmakingDescKey
   */
  @javax.annotation.Nullable
  public String getTerritoryTournamentMatchmakingDescKey() {
    return territoryTournamentMatchmakingDescKey;
  }

  public void setTerritoryTournamentMatchmakingDescKey(String territoryTournamentMatchmakingDescKey) {
    this.territoryTournamentMatchmakingDescKey = territoryTournamentMatchmakingDescKey;
  }


  public GetGameData2XXResponse seasonLeagueDefinition(List<SeasonLeagueDefinition> seasonLeagueDefinition) {
    this.seasonLeagueDefinition = seasonLeagueDefinition;
    return this;
  }

  public GetGameData2XXResponse addSeasonLeagueDefinitionItem(SeasonLeagueDefinition seasonLeagueDefinitionItem) {
    if (this.seasonLeagueDefinition == null) {
      this.seasonLeagueDefinition = new ArrayList<>();
    }
    this.seasonLeagueDefinition.add(seasonLeagueDefinitionItem);
    return this;
  }

  /**
   * Get seasonLeagueDefinition
   * @return seasonLeagueDefinition
   */
  @javax.annotation.Nullable
  public List<SeasonLeagueDefinition> getSeasonLeagueDefinition() {
    return seasonLeagueDefinition;
  }

  public void setSeasonLeagueDefinition(List<SeasonLeagueDefinition> seasonLeagueDefinition) {
    this.seasonLeagueDefinition = seasonLeagueDefinition;
  }


  public GetGameData2XXResponse seasonDivisionDefinition(List<SeasonDivisionDefinition> seasonDivisionDefinition) {
    this.seasonDivisionDefinition = seasonDivisionDefinition;
    return this;
  }

  public GetGameData2XXResponse addSeasonDivisionDefinitionItem(SeasonDivisionDefinition seasonDivisionDefinitionItem) {
    if (this.seasonDivisionDefinition == null) {
      this.seasonDivisionDefinition = new ArrayList<>();
    }
    this.seasonDivisionDefinition.add(seasonDivisionDefinitionItem);
    return this;
  }

  /**
   * Get seasonDivisionDefinition
   * @return seasonDivisionDefinition
   */
  @javax.annotation.Nullable
  public List<SeasonDivisionDefinition> getSeasonDivisionDefinition() {
    return seasonDivisionDefinition;
  }

  public void setSeasonDivisionDefinition(List<SeasonDivisionDefinition> seasonDivisionDefinition) {
    this.seasonDivisionDefinition = seasonDivisionDefinition;
  }


  public GetGameData2XXResponse seasonRewardTable(List<SeasonRewardTable> seasonRewardTable) {
    this.seasonRewardTable = seasonRewardTable;
    return this;
  }

  public GetGameData2XXResponse addSeasonRewardTableItem(SeasonRewardTable seasonRewardTableItem) {
    if (this.seasonRewardTable == null) {
      this.seasonRewardTable = new ArrayList<>();
    }
    this.seasonRewardTable.add(seasonRewardTableItem);
    return this;
  }

  /**
   * Get seasonRewardTable
   * @return seasonRewardTable
   */
  @javax.annotation.Nullable
  public List<SeasonRewardTable> getSeasonRewardTable() {
    return seasonRewardTable;
  }

  public void setSeasonRewardTable(List<SeasonRewardTable> seasonRewardTable) {
    this.seasonRewardTable = seasonRewardTable;
  }


  public GetGameData2XXResponse relicTierDefinition(List<RelicTierDefinition> relicTierDefinition) {
    this.relicTierDefinition = relicTierDefinition;
    return this;
  }

  public GetGameData2XXResponse addRelicTierDefinitionItem(RelicTierDefinition relicTierDefinitionItem) {
    if (this.relicTierDefinition == null) {
      this.relicTierDefinition = new ArrayList<>();
    }
    this.relicTierDefinition.add(relicTierDefinitionItem);
    return this;
  }

  /**
   * Get relicTierDefinition
   * @return relicTierDefinition
   */
  @javax.annotation.Nullable
  public List<RelicTierDefinition> getRelicTierDefinition() {
    return relicTierDefinition;
  }

  public void setRelicTierDefinition(List<RelicTierDefinition> relicTierDefinition) {
    this.relicTierDefinition = relicTierDefinition;
  }


  public GetGameData2XXResponse scavengerConversionSet(List<ConversionSet> scavengerConversionSet) {
    this.scavengerConversionSet = scavengerConversionSet;
    return this;
  }

  public GetGameData2XXResponse addScavengerConversionSetItem(ConversionSet scavengerConversionSetItem) {
    if (this.scavengerConversionSet == null) {
      this.scavengerConversionSet = new ArrayList<>();
    }
    this.scavengerConversionSet.add(scavengerConversionSetItem);
    return this;
  }

  /**
   * Get scavengerConversionSet
   * @return scavengerConversionSet
   */
  @javax.annotation.Nullable
  public List<ConversionSet> getScavengerConversionSet() {
    return scavengerConversionSet;
  }

  public void setScavengerConversionSet(List<ConversionSet> scavengerConversionSet) {
    this.scavengerConversionSet = scavengerConversionSet;
  }


  public GetGameData2XXResponse unitGuideDefinition(List<UnitGuideDefinition> unitGuideDefinition) {
    this.unitGuideDefinition = unitGuideDefinition;
    return this;
  }

  public GetGameData2XXResponse addUnitGuideDefinitionItem(UnitGuideDefinition unitGuideDefinitionItem) {
    if (this.unitGuideDefinition == null) {
      this.unitGuideDefinition = new ArrayList<>();
    }
    this.unitGuideDefinition.add(unitGuideDefinitionItem);
    return this;
  }

  /**
   * Get unitGuideDefinition
   * @return unitGuideDefinition
   */
  @javax.annotation.Nullable
  public List<UnitGuideDefinition> getUnitGuideDefinition() {
    return unitGuideDefinition;
  }

  public void setUnitGuideDefinition(List<UnitGuideDefinition> unitGuideDefinition) {
    this.unitGuideDefinition = unitGuideDefinition;
  }


  public GetGameData2XXResponse galacticBundle(List<GalacticBundle> galacticBundle) {
    this.galacticBundle = galacticBundle;
    return this;
  }

  public GetGameData2XXResponse addGalacticBundleItem(GalacticBundle galacticBundleItem) {
    if (this.galacticBundle == null) {
      this.galacticBundle = new ArrayList<>();
    }
    this.galacticBundle.add(galacticBundleItem);
    return this;
  }

  /**
   * Get galacticBundle
   * @return galacticBundle
   */
  @javax.annotation.Nullable
  public List<GalacticBundle> getGalacticBundle() {
    return galacticBundle;
  }

  public void setGalacticBundle(List<GalacticBundle> galacticBundle) {
    this.galacticBundle = galacticBundle;
  }


  public GetGameData2XXResponse linkedStoreItem(List<LinkedStoreItem> linkedStoreItem) {
    this.linkedStoreItem = linkedStoreItem;
    return this;
  }

  public GetGameData2XXResponse addLinkedStoreItemItem(LinkedStoreItem linkedStoreItemItem) {
    if (this.linkedStoreItem == null) {
      this.linkedStoreItem = new ArrayList<>();
    }
    this.linkedStoreItem.add(linkedStoreItemItem);
    return this;
  }

  /**
   * Get linkedStoreItem
   * @return linkedStoreItem
   */
  @javax.annotation.Nullable
  public List<LinkedStoreItem> getLinkedStoreItem() {
    return linkedStoreItem;
  }

  public void setLinkedStoreItem(List<LinkedStoreItem> linkedStoreItem) {
    this.linkedStoreItem = linkedStoreItem;
  }


  public GetGameData2XXResponse territoryTournamentLeagueDefinition(List<TerritoryTournamentLeagueDefinition> territoryTournamentLeagueDefinition) {
    this.territoryTournamentLeagueDefinition = territoryTournamentLeagueDefinition;
    return this;
  }

  public GetGameData2XXResponse addTerritoryTournamentLeagueDefinitionItem(TerritoryTournamentLeagueDefinition territoryTournamentLeagueDefinitionItem) {
    if (this.territoryTournamentLeagueDefinition == null) {
      this.territoryTournamentLeagueDefinition = new ArrayList<>();
    }
    this.territoryTournamentLeagueDefinition.add(territoryTournamentLeagueDefinitionItem);
    return this;
  }

  /**
   * Get territoryTournamentLeagueDefinition
   * @return territoryTournamentLeagueDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryTournamentLeagueDefinition> getTerritoryTournamentLeagueDefinition() {
    return territoryTournamentLeagueDefinition;
  }

  public void setTerritoryTournamentLeagueDefinition(List<TerritoryTournamentLeagueDefinition> territoryTournamentLeagueDefinition) {
    this.territoryTournamentLeagueDefinition = territoryTournamentLeagueDefinition;
  }


  public GetGameData2XXResponse territoryTournamentDivisionDefinition(List<TerritoryTournamentDivisionDefinition> territoryTournamentDivisionDefinition) {
    this.territoryTournamentDivisionDefinition = territoryTournamentDivisionDefinition;
    return this;
  }

  public GetGameData2XXResponse addTerritoryTournamentDivisionDefinitionItem(TerritoryTournamentDivisionDefinition territoryTournamentDivisionDefinitionItem) {
    if (this.territoryTournamentDivisionDefinition == null) {
      this.territoryTournamentDivisionDefinition = new ArrayList<>();
    }
    this.territoryTournamentDivisionDefinition.add(territoryTournamentDivisionDefinitionItem);
    return this;
  }

  /**
   * Get territoryTournamentDivisionDefinition
   * @return territoryTournamentDivisionDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryTournamentDivisionDefinition> getTerritoryTournamentDivisionDefinition() {
    return territoryTournamentDivisionDefinition;
  }

  public void setTerritoryTournamentDivisionDefinition(List<TerritoryTournamentDivisionDefinition> territoryTournamentDivisionDefinition) {
    this.territoryTournamentDivisionDefinition = territoryTournamentDivisionDefinition;
  }


  public GetGameData2XXResponse savedSquadConfig(List<SaveSquadConfig> savedSquadConfig) {
    this.savedSquadConfig = savedSquadConfig;
    return this;
  }

  public GetGameData2XXResponse addSavedSquadConfigItem(SaveSquadConfig savedSquadConfigItem) {
    if (this.savedSquadConfig == null) {
      this.savedSquadConfig = new ArrayList<>();
    }
    this.savedSquadConfig.add(savedSquadConfigItem);
    return this;
  }

  /**
   * Get savedSquadConfig
   * @return savedSquadConfig
   */
  @javax.annotation.Nullable
  public List<SaveSquadConfig> getSavedSquadConfig() {
    return savedSquadConfig;
  }

  public void setSavedSquadConfig(List<SaveSquadConfig> savedSquadConfig) {
    this.savedSquadConfig = savedSquadConfig;
  }


  public GetGameData2XXResponse guildRaidGlobalConfig(GuildRaidGlobalConfig guildRaidGlobalConfig) {
    this.guildRaidGlobalConfig = guildRaidGlobalConfig;
    return this;
  }

  /**
   * Get guildRaidGlobalConfig
   * @return guildRaidGlobalConfig
   */
  @javax.annotation.Nullable
  public GuildRaidGlobalConfig getGuildRaidGlobalConfig() {
    return guildRaidGlobalConfig;
  }

  public void setGuildRaidGlobalConfig(GuildRaidGlobalConfig guildRaidGlobalConfig) {
    this.guildRaidGlobalConfig = guildRaidGlobalConfig;
  }


  public GetGameData2XXResponse campaign(List<Campaign> campaign) {
    this.campaign = campaign;
    return this;
  }

  public GetGameData2XXResponse addCampaignItem(Campaign campaignItem) {
    if (this.campaign == null) {
      this.campaign = new ArrayList<>();
    }
    this.campaign.add(campaignItem);
    return this;
  }

  /**
   * Get campaign
   * @return campaign
   */
  @javax.annotation.Nullable
  public List<Campaign> getCampaign() {
    return campaign;
  }

  public void setCampaign(List<Campaign> campaign) {
    this.campaign = campaign;
  }


  public GetGameData2XXResponse conquestDefinition(List<ConquestDefinition> conquestDefinition) {
    this.conquestDefinition = conquestDefinition;
    return this;
  }

  public GetGameData2XXResponse addConquestDefinitionItem(ConquestDefinition conquestDefinitionItem) {
    if (this.conquestDefinition == null) {
      this.conquestDefinition = new ArrayList<>();
    }
    this.conquestDefinition.add(conquestDefinitionItem);
    return this;
  }

  /**
   * Get conquestDefinition
   * @return conquestDefinition
   */
  @javax.annotation.Nullable
  public List<ConquestDefinition> getConquestDefinition() {
    return conquestDefinition;
  }

  public void setConquestDefinition(List<ConquestDefinition> conquestDefinition) {
    this.conquestDefinition = conquestDefinition;
  }


  public GetGameData2XXResponse conquestMission(List<ConquestMission> conquestMission) {
    this.conquestMission = conquestMission;
    return this;
  }

  public GetGameData2XXResponse addConquestMissionItem(ConquestMission conquestMissionItem) {
    if (this.conquestMission == null) {
      this.conquestMission = new ArrayList<>();
    }
    this.conquestMission.add(conquestMissionItem);
    return this;
  }

  /**
   * Get conquestMission
   * @return conquestMission
   */
  @javax.annotation.Nullable
  public List<ConquestMission> getConquestMission() {
    return conquestMission;
  }

  public void setConquestMission(List<ConquestMission> conquestMission) {
    this.conquestMission = conquestMission;
  }


  public GetGameData2XXResponse artifactDefinition(List<ArtifactDefinition> artifactDefinition) {
    this.artifactDefinition = artifactDefinition;
    return this;
  }

  public GetGameData2XXResponse addArtifactDefinitionItem(ArtifactDefinition artifactDefinitionItem) {
    if (this.artifactDefinition == null) {
      this.artifactDefinition = new ArrayList<>();
    }
    this.artifactDefinition.add(artifactDefinitionItem);
    return this;
  }

  /**
   * Get artifactDefinition
   * @return artifactDefinition
   */
  @javax.annotation.Nullable
  public List<ArtifactDefinition> getArtifactDefinition() {
    return artifactDefinition;
  }

  public void setArtifactDefinition(List<ArtifactDefinition> artifactDefinition) {
    this.artifactDefinition = artifactDefinition;
  }


  public GetGameData2XXResponse abilityDecisionTree(List<AbilityDecisionTree> abilityDecisionTree) {
    this.abilityDecisionTree = abilityDecisionTree;
    return this;
  }

  public GetGameData2XXResponse addAbilityDecisionTreeItem(AbilityDecisionTree abilityDecisionTreeItem) {
    if (this.abilityDecisionTree == null) {
      this.abilityDecisionTree = new ArrayList<>();
    }
    this.abilityDecisionTree.add(abilityDecisionTreeItem);
    return this;
  }

  /**
   * Get abilityDecisionTree
   * @return abilityDecisionTree
   */
  @javax.annotation.Nullable
  public List<AbilityDecisionTree> getAbilityDecisionTree() {
    return abilityDecisionTree;
  }

  public void setAbilityDecisionTree(List<AbilityDecisionTree> abilityDecisionTree) {
    this.abilityDecisionTree = abilityDecisionTree;
  }


  public GetGameData2XXResponse consumableDefinition(List<ConsumableDefinition> consumableDefinition) {
    this.consumableDefinition = consumableDefinition;
    return this;
  }

  public GetGameData2XXResponse addConsumableDefinitionItem(ConsumableDefinition consumableDefinitionItem) {
    if (this.consumableDefinition == null) {
      this.consumableDefinition = new ArrayList<>();
    }
    this.consumableDefinition.add(consumableDefinitionItem);
    return this;
  }

  /**
   * Get consumableDefinition
   * @return consumableDefinition
   */
  @javax.annotation.Nullable
  public List<ConsumableDefinition> getConsumableDefinition() {
    return consumableDefinition;
  }

  public void setConsumableDefinition(List<ConsumableDefinition> consumableDefinition) {
    this.consumableDefinition = consumableDefinition;
  }


  public GetGameData2XXResponse consumableType(List<ConsumableType> consumableType) {
    this.consumableType = consumableType;
    return this;
  }

  public GetGameData2XXResponse addConsumableTypeItem(ConsumableType consumableTypeItem) {
    if (this.consumableType == null) {
      this.consumableType = new ArrayList<>();
    }
    this.consumableType.add(consumableTypeItem);
    return this;
  }

  /**
   * Get consumableType
   * @return consumableType
   */
  @javax.annotation.Nullable
  public List<ConsumableType> getConsumableType() {
    return consumableType;
  }

  public void setConsumableType(List<ConsumableType> consumableType) {
    this.consumableType = consumableType;
  }


  public GetGameData2XXResponse artifactTierDefinition(List<ArtifactTierDefinition> artifactTierDefinition) {
    this.artifactTierDefinition = artifactTierDefinition;
    return this;
  }

  public GetGameData2XXResponse addArtifactTierDefinitionItem(ArtifactTierDefinition artifactTierDefinitionItem) {
    if (this.artifactTierDefinition == null) {
      this.artifactTierDefinition = new ArrayList<>();
    }
    this.artifactTierDefinition.add(artifactTierDefinitionItem);
    return this;
  }

  /**
   * Get artifactTierDefinition
   * @return artifactTierDefinition
   */
  @javax.annotation.Nullable
  public List<ArtifactTierDefinition> getArtifactTierDefinition() {
    return artifactTierDefinition;
  }

  public void setArtifactTierDefinition(List<ArtifactTierDefinition> artifactTierDefinition) {
    this.artifactTierDefinition = artifactTierDefinition;
  }


  public GetGameData2XXResponse consumableTierDefinition(List<ConsumableTierDefinition> consumableTierDefinition) {
    this.consumableTierDefinition = consumableTierDefinition;
    return this;
  }

  public GetGameData2XXResponse addConsumableTierDefinitionItem(ConsumableTierDefinition consumableTierDefinitionItem) {
    if (this.consumableTierDefinition == null) {
      this.consumableTierDefinition = new ArrayList<>();
    }
    this.consumableTierDefinition.add(consumableTierDefinitionItem);
    return this;
  }

  /**
   * Get consumableTierDefinition
   * @return consumableTierDefinition
   */
  @javax.annotation.Nullable
  public List<ConsumableTierDefinition> getConsumableTierDefinition() {
    return consumableTierDefinition;
  }

  public void setConsumableTierDefinition(List<ConsumableTierDefinition> consumableTierDefinition) {
    this.consumableTierDefinition = consumableTierDefinition;
  }


  public GetGameData2XXResponse recommendedSquad(List<RecommendedSquad> recommendedSquad) {
    this.recommendedSquad = recommendedSquad;
    return this;
  }

  public GetGameData2XXResponse addRecommendedSquadItem(RecommendedSquad recommendedSquadItem) {
    if (this.recommendedSquad == null) {
      this.recommendedSquad = new ArrayList<>();
    }
    this.recommendedSquad.add(recommendedSquadItem);
    return this;
  }

  /**
   * Get recommendedSquad
   * @return recommendedSquad
   */
  @javax.annotation.Nullable
  public List<RecommendedSquad> getRecommendedSquad() {
    return recommendedSquad;
  }

  public void setRecommendedSquad(List<RecommendedSquad> recommendedSquad) {
    this.recommendedSquad = recommendedSquad;
  }


  public GetGameData2XXResponse unitGuideLayout(List<UnitGuideLayout> unitGuideLayout) {
    this.unitGuideLayout = unitGuideLayout;
    return this;
  }

  public GetGameData2XXResponse addUnitGuideLayoutItem(UnitGuideLayout unitGuideLayoutItem) {
    if (this.unitGuideLayout == null) {
      this.unitGuideLayout = new ArrayList<>();
    }
    this.unitGuideLayout.add(unitGuideLayoutItem);
    return this;
  }

  /**
   * Get unitGuideLayout
   * @return unitGuideLayout
   */
  @javax.annotation.Nullable
  public List<UnitGuideLayout> getUnitGuideLayout() {
    return unitGuideLayout;
  }

  public void setUnitGuideLayout(List<UnitGuideLayout> unitGuideLayout) {
    this.unitGuideLayout = unitGuideLayout;
  }


  public GetGameData2XXResponse dailyLoginRewardDefinition(List<DailyLoginRewardDefinition> dailyLoginRewardDefinition) {
    this.dailyLoginRewardDefinition = dailyLoginRewardDefinition;
    return this;
  }

  public GetGameData2XXResponse addDailyLoginRewardDefinitionItem(DailyLoginRewardDefinition dailyLoginRewardDefinitionItem) {
    if (this.dailyLoginRewardDefinition == null) {
      this.dailyLoginRewardDefinition = new ArrayList<>();
    }
    this.dailyLoginRewardDefinition.add(dailyLoginRewardDefinitionItem);
    return this;
  }

  /**
   * Get dailyLoginRewardDefinition
   * @return dailyLoginRewardDefinition
   */
  @javax.annotation.Nullable
  public List<DailyLoginRewardDefinition> getDailyLoginRewardDefinition() {
    return dailyLoginRewardDefinition;
  }

  public void setDailyLoginRewardDefinition(List<DailyLoginRewardDefinition> dailyLoginRewardDefinition) {
    this.dailyLoginRewardDefinition = dailyLoginRewardDefinition;
  }


  public GetGameData2XXResponse calendarCategoryDefinition(List<CalendarCategoryDefinition> calendarCategoryDefinition) {
    this.calendarCategoryDefinition = calendarCategoryDefinition;
    return this;
  }

  public GetGameData2XXResponse addCalendarCategoryDefinitionItem(CalendarCategoryDefinition calendarCategoryDefinitionItem) {
    if (this.calendarCategoryDefinition == null) {
      this.calendarCategoryDefinition = new ArrayList<>();
    }
    this.calendarCategoryDefinition.add(calendarCategoryDefinitionItem);
    return this;
  }

  /**
   * Get calendarCategoryDefinition
   * @return calendarCategoryDefinition
   */
  @javax.annotation.Nullable
  public List<CalendarCategoryDefinition> getCalendarCategoryDefinition() {
    return calendarCategoryDefinition;
  }

  public void setCalendarCategoryDefinition(List<CalendarCategoryDefinition> calendarCategoryDefinition) {
    this.calendarCategoryDefinition = calendarCategoryDefinition;
  }


  public GetGameData2XXResponse territoryTournamentDailyRewardTable(TerritoryTournamentDailyRewardTable territoryTournamentDailyRewardTable) {
    this.territoryTournamentDailyRewardTable = territoryTournamentDailyRewardTable;
    return this;
  }

  /**
   * Get territoryTournamentDailyRewardTable
   * @return territoryTournamentDailyRewardTable
   */
  @javax.annotation.Nullable
  public TerritoryTournamentDailyRewardTable getTerritoryTournamentDailyRewardTable() {
    return territoryTournamentDailyRewardTable;
  }

  public void setTerritoryTournamentDailyRewardTable(TerritoryTournamentDailyRewardTable territoryTournamentDailyRewardTable) {
    this.territoryTournamentDailyRewardTable = territoryTournamentDailyRewardTable;
  }


  public GetGameData2XXResponse datacronSet(List<DatacronSet> datacronSet) {
    this.datacronSet = datacronSet;
    return this;
  }

  public GetGameData2XXResponse addDatacronSetItem(DatacronSet datacronSetItem) {
    if (this.datacronSet == null) {
      this.datacronSet = new ArrayList<>();
    }
    this.datacronSet.add(datacronSetItem);
    return this;
  }

  /**
   * Get datacronSet
   * @return datacronSet
   */
  @javax.annotation.Nullable
  public List<DatacronSet> getDatacronSet() {
    return datacronSet;
  }

  public void setDatacronSet(List<DatacronSet> datacronSet) {
    this.datacronSet = datacronSet;
  }


  public GetGameData2XXResponse datacronTemplate(List<DatacronTemplate> datacronTemplate) {
    this.datacronTemplate = datacronTemplate;
    return this;
  }

  public GetGameData2XXResponse addDatacronTemplateItem(DatacronTemplate datacronTemplateItem) {
    if (this.datacronTemplate == null) {
      this.datacronTemplate = new ArrayList<>();
    }
    this.datacronTemplate.add(datacronTemplateItem);
    return this;
  }

  /**
   * Get datacronTemplate
   * @return datacronTemplate
   */
  @javax.annotation.Nullable
  public List<DatacronTemplate> getDatacronTemplate() {
    return datacronTemplate;
  }

  public void setDatacronTemplate(List<DatacronTemplate> datacronTemplate) {
    this.datacronTemplate = datacronTemplate;
  }


  public GetGameData2XXResponse datacronAffixTemplateSet(List<DatacronAffixTemplateSet> datacronAffixTemplateSet) {
    this.datacronAffixTemplateSet = datacronAffixTemplateSet;
    return this;
  }

  public GetGameData2XXResponse addDatacronAffixTemplateSetItem(DatacronAffixTemplateSet datacronAffixTemplateSetItem) {
    if (this.datacronAffixTemplateSet == null) {
      this.datacronAffixTemplateSet = new ArrayList<>();
    }
    this.datacronAffixTemplateSet.add(datacronAffixTemplateSetItem);
    return this;
  }

  /**
   * Get datacronAffixTemplateSet
   * @return datacronAffixTemplateSet
   */
  @javax.annotation.Nullable
  public List<DatacronAffixTemplateSet> getDatacronAffixTemplateSet() {
    return datacronAffixTemplateSet;
  }

  public void setDatacronAffixTemplateSet(List<DatacronAffixTemplateSet> datacronAffixTemplateSet) {
    this.datacronAffixTemplateSet = datacronAffixTemplateSet;
  }


  public GetGameData2XXResponse datacronHelpEntry(List<DatacronHelpEntry> datacronHelpEntry) {
    this.datacronHelpEntry = datacronHelpEntry;
    return this;
  }

  public GetGameData2XXResponse addDatacronHelpEntryItem(DatacronHelpEntry datacronHelpEntryItem) {
    if (this.datacronHelpEntry == null) {
      this.datacronHelpEntry = new ArrayList<>();
    }
    this.datacronHelpEntry.add(datacronHelpEntryItem);
    return this;
  }

  /**
   * Get datacronHelpEntry
   * @return datacronHelpEntry
   */
  @javax.annotation.Nullable
  public List<DatacronHelpEntry> getDatacronHelpEntry() {
    return datacronHelpEntry;
  }

  public void setDatacronHelpEntry(List<DatacronHelpEntry> datacronHelpEntry) {
    this.datacronHelpEntry = datacronHelpEntry;
  }


  public GetGameData2XXResponse displayableEnemy(List<UnitDefPreview> displayableEnemy) {
    this.displayableEnemy = displayableEnemy;
    return this;
  }

  public GetGameData2XXResponse addDisplayableEnemyItem(UnitDefPreview displayableEnemyItem) {
    if (this.displayableEnemy == null) {
      this.displayableEnemy = new ArrayList<>();
    }
    this.displayableEnemy.add(displayableEnemyItem);
    return this;
  }

  /**
   * Get displayableEnemy
   * @return displayableEnemy
   */
  @javax.annotation.Nullable
  public List<UnitDefPreview> getDisplayableEnemy() {
    return displayableEnemy;
  }

  public void setDisplayableEnemy(List<UnitDefPreview> displayableEnemy) {
    this.displayableEnemy = displayableEnemy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetGameData2XXResponse getGameData2XXResponse = (GetGameData2XXResponse) o;
    return Objects.equals(this.units, getGameData2XXResponse.units) &&
        Objects.equals(this.battleEnvironments, getGameData2XXResponse.battleEnvironments) &&
        Objects.equals(this.xpTable, getGameData2XXResponse.xpTable) &&
        Objects.equals(this.material, getGameData2XXResponse.material) &&
        Objects.equals(this.recipe, getGameData2XXResponse.recipe) &&
        Objects.equals(this.statProgression, getGameData2XXResponse.statProgression) &&
        Objects.equals(this.category, getGameData2XXResponse.category) &&
        Objects.equals(this.helpEntry, getGameData2XXResponse.helpEntry) &&
        Objects.equals(this.challenge, getGameData2XXResponse.challenge) &&
        Objects.equals(this.skill, getGameData2XXResponse.skill) &&
        Objects.equals(this.eventSampling, getGameData2XXResponse.eventSampling) &&
        Objects.equals(this.equipment, getGameData2XXResponse.equipment) &&
        Objects.equals(this.warDefinition, getGameData2XXResponse.warDefinition) &&
        Objects.equals(this.targetingSet, getGameData2XXResponse.targetingSet) &&
        Objects.equals(this.ability, getGameData2XXResponse.ability) &&
        Objects.equals(this.effect, getGameData2XXResponse.effect) &&
        Objects.equals(this.requirement, getGameData2XXResponse.requirement) &&
        Objects.equals(this.powerUpBundle, getGameData2XXResponse.powerUpBundle) &&
        Objects.equals(this.guildBanner, getGameData2XXResponse.guildBanner) &&
        Objects.equals(this.raidConfig, getGameData2XXResponse.raidConfig) &&
        Objects.equals(this.guildRaid, getGameData2XXResponse.guildRaid) &&
        Objects.equals(this.statModSet, getGameData2XXResponse.statModSet) &&
        Objects.equals(this.statMod, getGameData2XXResponse.statMod) &&
        Objects.equals(this.guildExchangeItem, getGameData2XXResponse.guildExchangeItem) &&
        Objects.equals(this.table, getGameData2XXResponse.table) &&
        Objects.equals(this.unlockAnnouncementDefinition, getGameData2XXResponse.unlockAnnouncementDefinition) &&
        Objects.equals(this.battleTargetingRule, getGameData2XXResponse.battleTargetingRule) &&
        Objects.equals(this.territoryBattleDefinition, getGameData2XXResponse.territoryBattleDefinition) &&
        Objects.equals(this.territoryWarDefinition, getGameData2XXResponse.territoryWarDefinition) &&
        Objects.equals(this.environmentCollection, getGameData2XXResponse.environmentCollection) &&
        Objects.equals(this.challengeStyle, getGameData2XXResponse.challengeStyle) &&
        Objects.equals(this.socialStatus, getGameData2XXResponse.socialStatus) &&
        Objects.equals(this.starterGuild, getGameData2XXResponse.starterGuild) &&
        Objects.equals(this.playerTitle, getGameData2XXResponse.playerTitle) &&
        Objects.equals(this.modRecommendation, getGameData2XXResponse.modRecommendation) &&
        Objects.equals(this.persistentVfx, getGameData2XXResponse.persistentVfx) &&
        Objects.equals(this.territoryTournamentDefinition, getGameData2XXResponse.territoryTournamentDefinition) &&
        Objects.equals(this.eventBonus, getGameData2XXResponse.eventBonus) &&
        Objects.equals(this.seasonDefinition, getGameData2XXResponse.seasonDefinition) &&
        Objects.equals(this.playerPortrait, getGameData2XXResponse.playerPortrait) &&
        Objects.equals(this.timeZoneChangeConfig, getGameData2XXResponse.timeZoneChangeConfig) &&
        Objects.equals(this.effectIconPriority, getGameData2XXResponse.effectIconPriority) &&
        Objects.equals(this.mysteryBox, getGameData2XXResponse.mysteryBox) &&
        Objects.equals(this.mysteryStatMod, getGameData2XXResponse.mysteryStatMod) &&
        Objects.equals(this.cooldown, getGameData2XXResponse.cooldown) &&
        Objects.equals(this.dailyActionCap, getGameData2XXResponse.dailyActionCap) &&
        Objects.equals(this.energyReward, getGameData2XXResponse.energyReward) &&
        Objects.equals(this.territoryTournamentMatchmakingDescKey, getGameData2XXResponse.territoryTournamentMatchmakingDescKey) &&
        Objects.equals(this.seasonLeagueDefinition, getGameData2XXResponse.seasonLeagueDefinition) &&
        Objects.equals(this.seasonDivisionDefinition, getGameData2XXResponse.seasonDivisionDefinition) &&
        Objects.equals(this.seasonRewardTable, getGameData2XXResponse.seasonRewardTable) &&
        Objects.equals(this.relicTierDefinition, getGameData2XXResponse.relicTierDefinition) &&
        Objects.equals(this.scavengerConversionSet, getGameData2XXResponse.scavengerConversionSet) &&
        Objects.equals(this.unitGuideDefinition, getGameData2XXResponse.unitGuideDefinition) &&
        Objects.equals(this.galacticBundle, getGameData2XXResponse.galacticBundle) &&
        Objects.equals(this.linkedStoreItem, getGameData2XXResponse.linkedStoreItem) &&
        Objects.equals(this.territoryTournamentLeagueDefinition, getGameData2XXResponse.territoryTournamentLeagueDefinition) &&
        Objects.equals(this.territoryTournamentDivisionDefinition, getGameData2XXResponse.territoryTournamentDivisionDefinition) &&
        Objects.equals(this.savedSquadConfig, getGameData2XXResponse.savedSquadConfig) &&
        Objects.equals(this.guildRaidGlobalConfig, getGameData2XXResponse.guildRaidGlobalConfig) &&
        Objects.equals(this.campaign, getGameData2XXResponse.campaign) &&
        Objects.equals(this.conquestDefinition, getGameData2XXResponse.conquestDefinition) &&
        Objects.equals(this.conquestMission, getGameData2XXResponse.conquestMission) &&
        Objects.equals(this.artifactDefinition, getGameData2XXResponse.artifactDefinition) &&
        Objects.equals(this.abilityDecisionTree, getGameData2XXResponse.abilityDecisionTree) &&
        Objects.equals(this.consumableDefinition, getGameData2XXResponse.consumableDefinition) &&
        Objects.equals(this.consumableType, getGameData2XXResponse.consumableType) &&
        Objects.equals(this.artifactTierDefinition, getGameData2XXResponse.artifactTierDefinition) &&
        Objects.equals(this.consumableTierDefinition, getGameData2XXResponse.consumableTierDefinition) &&
        Objects.equals(this.recommendedSquad, getGameData2XXResponse.recommendedSquad) &&
        Objects.equals(this.unitGuideLayout, getGameData2XXResponse.unitGuideLayout) &&
        Objects.equals(this.dailyLoginRewardDefinition, getGameData2XXResponse.dailyLoginRewardDefinition) &&
        Objects.equals(this.calendarCategoryDefinition, getGameData2XXResponse.calendarCategoryDefinition) &&
        Objects.equals(this.territoryTournamentDailyRewardTable, getGameData2XXResponse.territoryTournamentDailyRewardTable) &&
        Objects.equals(this.datacronSet, getGameData2XXResponse.datacronSet) &&
        Objects.equals(this.datacronTemplate, getGameData2XXResponse.datacronTemplate) &&
        Objects.equals(this.datacronAffixTemplateSet, getGameData2XXResponse.datacronAffixTemplateSet) &&
        Objects.equals(this.datacronHelpEntry, getGameData2XXResponse.datacronHelpEntry) &&
        Objects.equals(this.displayableEnemy, getGameData2XXResponse.displayableEnemy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(units, battleEnvironments, xpTable, material, recipe, statProgression, category, helpEntry, challenge, skill, eventSampling, equipment, warDefinition, targetingSet, ability, effect, requirement, powerUpBundle, guildBanner, raidConfig, guildRaid, statModSet, statMod, guildExchangeItem, table, unlockAnnouncementDefinition, battleTargetingRule, territoryBattleDefinition, territoryWarDefinition, environmentCollection, challengeStyle, socialStatus, starterGuild, playerTitle, modRecommendation, persistentVfx, territoryTournamentDefinition, eventBonus, seasonDefinition, playerPortrait, timeZoneChangeConfig, effectIconPriority, mysteryBox, mysteryStatMod, cooldown, dailyActionCap, energyReward, territoryTournamentMatchmakingDescKey, seasonLeagueDefinition, seasonDivisionDefinition, seasonRewardTable, relicTierDefinition, scavengerConversionSet, unitGuideDefinition, galacticBundle, linkedStoreItem, territoryTournamentLeagueDefinition, territoryTournamentDivisionDefinition, savedSquadConfig, guildRaidGlobalConfig, campaign, conquestDefinition, conquestMission, artifactDefinition, abilityDecisionTree, consumableDefinition, consumableType, artifactTierDefinition, consumableTierDefinition, recommendedSquad, unitGuideLayout, dailyLoginRewardDefinition, calendarCategoryDefinition, territoryTournamentDailyRewardTable, datacronSet, datacronTemplate, datacronAffixTemplateSet, datacronHelpEntry, displayableEnemy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetGameData2XXResponse {\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    battleEnvironments: ").append(toIndentedString(battleEnvironments)).append("\n");
    sb.append("    xpTable: ").append(toIndentedString(xpTable)).append("\n");
    sb.append("    material: ").append(toIndentedString(material)).append("\n");
    sb.append("    recipe: ").append(toIndentedString(recipe)).append("\n");
    sb.append("    statProgression: ").append(toIndentedString(statProgression)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    helpEntry: ").append(toIndentedString(helpEntry)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    skill: ").append(toIndentedString(skill)).append("\n");
    sb.append("    eventSampling: ").append(toIndentedString(eventSampling)).append("\n");
    sb.append("    equipment: ").append(toIndentedString(equipment)).append("\n");
    sb.append("    warDefinition: ").append(toIndentedString(warDefinition)).append("\n");
    sb.append("    targetingSet: ").append(toIndentedString(targetingSet)).append("\n");
    sb.append("    ability: ").append(toIndentedString(ability)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    powerUpBundle: ").append(toIndentedString(powerUpBundle)).append("\n");
    sb.append("    guildBanner: ").append(toIndentedString(guildBanner)).append("\n");
    sb.append("    raidConfig: ").append(toIndentedString(raidConfig)).append("\n");
    sb.append("    guildRaid: ").append(toIndentedString(guildRaid)).append("\n");
    sb.append("    statModSet: ").append(toIndentedString(statModSet)).append("\n");
    sb.append("    statMod: ").append(toIndentedString(statMod)).append("\n");
    sb.append("    guildExchangeItem: ").append(toIndentedString(guildExchangeItem)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    unlockAnnouncementDefinition: ").append(toIndentedString(unlockAnnouncementDefinition)).append("\n");
    sb.append("    battleTargetingRule: ").append(toIndentedString(battleTargetingRule)).append("\n");
    sb.append("    territoryBattleDefinition: ").append(toIndentedString(territoryBattleDefinition)).append("\n");
    sb.append("    territoryWarDefinition: ").append(toIndentedString(territoryWarDefinition)).append("\n");
    sb.append("    environmentCollection: ").append(toIndentedString(environmentCollection)).append("\n");
    sb.append("    challengeStyle: ").append(toIndentedString(challengeStyle)).append("\n");
    sb.append("    socialStatus: ").append(toIndentedString(socialStatus)).append("\n");
    sb.append("    starterGuild: ").append(toIndentedString(starterGuild)).append("\n");
    sb.append("    playerTitle: ").append(toIndentedString(playerTitle)).append("\n");
    sb.append("    modRecommendation: ").append(toIndentedString(modRecommendation)).append("\n");
    sb.append("    persistentVfx: ").append(toIndentedString(persistentVfx)).append("\n");
    sb.append("    territoryTournamentDefinition: ").append(toIndentedString(territoryTournamentDefinition)).append("\n");
    sb.append("    eventBonus: ").append(toIndentedString(eventBonus)).append("\n");
    sb.append("    seasonDefinition: ").append(toIndentedString(seasonDefinition)).append("\n");
    sb.append("    playerPortrait: ").append(toIndentedString(playerPortrait)).append("\n");
    sb.append("    timeZoneChangeConfig: ").append(toIndentedString(timeZoneChangeConfig)).append("\n");
    sb.append("    effectIconPriority: ").append(toIndentedString(effectIconPriority)).append("\n");
    sb.append("    mysteryBox: ").append(toIndentedString(mysteryBox)).append("\n");
    sb.append("    mysteryStatMod: ").append(toIndentedString(mysteryStatMod)).append("\n");
    sb.append("    cooldown: ").append(toIndentedString(cooldown)).append("\n");
    sb.append("    dailyActionCap: ").append(toIndentedString(dailyActionCap)).append("\n");
    sb.append("    energyReward: ").append(toIndentedString(energyReward)).append("\n");
    sb.append("    territoryTournamentMatchmakingDescKey: ").append(toIndentedString(territoryTournamentMatchmakingDescKey)).append("\n");
    sb.append("    seasonLeagueDefinition: ").append(toIndentedString(seasonLeagueDefinition)).append("\n");
    sb.append("    seasonDivisionDefinition: ").append(toIndentedString(seasonDivisionDefinition)).append("\n");
    sb.append("    seasonRewardTable: ").append(toIndentedString(seasonRewardTable)).append("\n");
    sb.append("    relicTierDefinition: ").append(toIndentedString(relicTierDefinition)).append("\n");
    sb.append("    scavengerConversionSet: ").append(toIndentedString(scavengerConversionSet)).append("\n");
    sb.append("    unitGuideDefinition: ").append(toIndentedString(unitGuideDefinition)).append("\n");
    sb.append("    galacticBundle: ").append(toIndentedString(galacticBundle)).append("\n");
    sb.append("    linkedStoreItem: ").append(toIndentedString(linkedStoreItem)).append("\n");
    sb.append("    territoryTournamentLeagueDefinition: ").append(toIndentedString(territoryTournamentLeagueDefinition)).append("\n");
    sb.append("    territoryTournamentDivisionDefinition: ").append(toIndentedString(territoryTournamentDivisionDefinition)).append("\n");
    sb.append("    savedSquadConfig: ").append(toIndentedString(savedSquadConfig)).append("\n");
    sb.append("    guildRaidGlobalConfig: ").append(toIndentedString(guildRaidGlobalConfig)).append("\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("    conquestDefinition: ").append(toIndentedString(conquestDefinition)).append("\n");
    sb.append("    conquestMission: ").append(toIndentedString(conquestMission)).append("\n");
    sb.append("    artifactDefinition: ").append(toIndentedString(artifactDefinition)).append("\n");
    sb.append("    abilityDecisionTree: ").append(toIndentedString(abilityDecisionTree)).append("\n");
    sb.append("    consumableDefinition: ").append(toIndentedString(consumableDefinition)).append("\n");
    sb.append("    consumableType: ").append(toIndentedString(consumableType)).append("\n");
    sb.append("    artifactTierDefinition: ").append(toIndentedString(artifactTierDefinition)).append("\n");
    sb.append("    consumableTierDefinition: ").append(toIndentedString(consumableTierDefinition)).append("\n");
    sb.append("    recommendedSquad: ").append(toIndentedString(recommendedSquad)).append("\n");
    sb.append("    unitGuideLayout: ").append(toIndentedString(unitGuideLayout)).append("\n");
    sb.append("    dailyLoginRewardDefinition: ").append(toIndentedString(dailyLoginRewardDefinition)).append("\n");
    sb.append("    calendarCategoryDefinition: ").append(toIndentedString(calendarCategoryDefinition)).append("\n");
    sb.append("    territoryTournamentDailyRewardTable: ").append(toIndentedString(territoryTournamentDailyRewardTable)).append("\n");
    sb.append("    datacronSet: ").append(toIndentedString(datacronSet)).append("\n");
    sb.append("    datacronTemplate: ").append(toIndentedString(datacronTemplate)).append("\n");
    sb.append("    datacronAffixTemplateSet: ").append(toIndentedString(datacronAffixTemplateSet)).append("\n");
    sb.append("    datacronHelpEntry: ").append(toIndentedString(datacronHelpEntry)).append("\n");
    sb.append("    displayableEnemy: ").append(toIndentedString(displayableEnemy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("units");
    openapiFields.add("battleEnvironments");
    openapiFields.add("xpTable");
    openapiFields.add("material");
    openapiFields.add("recipe");
    openapiFields.add("statProgression");
    openapiFields.add("category");
    openapiFields.add("helpEntry");
    openapiFields.add("challenge");
    openapiFields.add("skill");
    openapiFields.add("eventSampling");
    openapiFields.add("equipment");
    openapiFields.add("warDefinition");
    openapiFields.add("targetingSet");
    openapiFields.add("ability");
    openapiFields.add("effect");
    openapiFields.add("requirement");
    openapiFields.add("powerUpBundle");
    openapiFields.add("guildBanner");
    openapiFields.add("raidConfig");
    openapiFields.add("guildRaid");
    openapiFields.add("statModSet");
    openapiFields.add("statMod");
    openapiFields.add("guildExchangeItem");
    openapiFields.add("table");
    openapiFields.add("unlockAnnouncementDefinition");
    openapiFields.add("battleTargetingRule");
    openapiFields.add("territoryBattleDefinition");
    openapiFields.add("territoryWarDefinition");
    openapiFields.add("environmentCollection");
    openapiFields.add("challengeStyle");
    openapiFields.add("socialStatus");
    openapiFields.add("starterGuild");
    openapiFields.add("playerTitle");
    openapiFields.add("modRecommendation");
    openapiFields.add("persistentVfx");
    openapiFields.add("territoryTournamentDefinition");
    openapiFields.add("eventBonus");
    openapiFields.add("seasonDefinition");
    openapiFields.add("playerPortrait");
    openapiFields.add("timeZoneChangeConfig");
    openapiFields.add("effectIconPriority");
    openapiFields.add("mysteryBox");
    openapiFields.add("mysteryStatMod");
    openapiFields.add("cooldown");
    openapiFields.add("dailyActionCap");
    openapiFields.add("energyReward");
    openapiFields.add("territoryTournamentMatchmakingDescKey");
    openapiFields.add("seasonLeagueDefinition");
    openapiFields.add("seasonDivisionDefinition");
    openapiFields.add("seasonRewardTable");
    openapiFields.add("relicTierDefinition");
    openapiFields.add("scavengerConversionSet");
    openapiFields.add("unitGuideDefinition");
    openapiFields.add("galacticBundle");
    openapiFields.add("linkedStoreItem");
    openapiFields.add("territoryTournamentLeagueDefinition");
    openapiFields.add("territoryTournamentDivisionDefinition");
    openapiFields.add("savedSquadConfig");
    openapiFields.add("guildRaidGlobalConfig");
    openapiFields.add("campaign");
    openapiFields.add("conquestDefinition");
    openapiFields.add("conquestMission");
    openapiFields.add("artifactDefinition");
    openapiFields.add("abilityDecisionTree");
    openapiFields.add("consumableDefinition");
    openapiFields.add("consumableType");
    openapiFields.add("artifactTierDefinition");
    openapiFields.add("consumableTierDefinition");
    openapiFields.add("recommendedSquad");
    openapiFields.add("unitGuideLayout");
    openapiFields.add("dailyLoginRewardDefinition");
    openapiFields.add("calendarCategoryDefinition");
    openapiFields.add("territoryTournamentDailyRewardTable");
    openapiFields.add("datacronSet");
    openapiFields.add("datacronTemplate");
    openapiFields.add("datacronAffixTemplateSet");
    openapiFields.add("datacronHelpEntry");
    openapiFields.add("displayableEnemy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetGameData2XXResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetGameData2XXResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetGameData2XXResponse is not found in the empty JSON string", GetGameData2XXResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetGameData2XXResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGameData2XXResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) {
        JsonArray jsonArrayunits = jsonObj.getAsJsonArray("units");
        if (jsonArrayunits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("units").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `units` to be an array in the JSON string but got `%s`", jsonObj.get("units").toString()));
          }

          // validate the optional field `units` (array)
          for (int i = 0; i < jsonArrayunits.size(); i++) {
            UnitDef.validateJsonElement(jsonArrayunits.get(i));
          };
        }
      }
      if (jsonObj.get("battleEnvironments") != null && !jsonObj.get("battleEnvironments").isJsonNull()) {
        JsonArray jsonArraybattleEnvironments = jsonObj.getAsJsonArray("battleEnvironments");
        if (jsonArraybattleEnvironments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battleEnvironments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battleEnvironments` to be an array in the JSON string but got `%s`", jsonObj.get("battleEnvironments").toString()));
          }

          // validate the optional field `battleEnvironments` (array)
          for (int i = 0; i < jsonArraybattleEnvironments.size(); i++) {
            BattleEnvironment.validateJsonElement(jsonArraybattleEnvironments.get(i));
          };
        }
      }
      if (jsonObj.get("xpTable") != null && !jsonObj.get("xpTable").isJsonNull()) {
        JsonArray jsonArrayxpTable = jsonObj.getAsJsonArray("xpTable");
        if (jsonArrayxpTable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("xpTable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `xpTable` to be an array in the JSON string but got `%s`", jsonObj.get("xpTable").toString()));
          }

          // validate the optional field `xpTable` (array)
          for (int i = 0; i < jsonArrayxpTable.size(); i++) {
            XpTable.validateJsonElement(jsonArrayxpTable.get(i));
          };
        }
      }
      if (jsonObj.get("material") != null && !jsonObj.get("material").isJsonNull()) {
        JsonArray jsonArraymaterial = jsonObj.getAsJsonArray("material");
        if (jsonArraymaterial != null) {
          // ensure the json data is an array
          if (!jsonObj.get("material").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `material` to be an array in the JSON string but got `%s`", jsonObj.get("material").toString()));
          }

          // validate the optional field `material` (array)
          for (int i = 0; i < jsonArraymaterial.size(); i++) {
            CraftingMaterialDef.validateJsonElement(jsonArraymaterial.get(i));
          };
        }
      }
      if (jsonObj.get("recipe") != null && !jsonObj.get("recipe").isJsonNull()) {
        JsonArray jsonArrayrecipe = jsonObj.getAsJsonArray("recipe");
        if (jsonArrayrecipe != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipe").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipe` to be an array in the JSON string but got `%s`", jsonObj.get("recipe").toString()));
          }

          // validate the optional field `recipe` (array)
          for (int i = 0; i < jsonArrayrecipe.size(); i++) {
            Recipe.validateJsonElement(jsonArrayrecipe.get(i));
          };
        }
      }
      if (jsonObj.get("statProgression") != null && !jsonObj.get("statProgression").isJsonNull()) {
        JsonArray jsonArraystatProgression = jsonObj.getAsJsonArray("statProgression");
        if (jsonArraystatProgression != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statProgression").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statProgression` to be an array in the JSON string but got `%s`", jsonObj.get("statProgression").toString()));
          }

          // validate the optional field `statProgression` (array)
          for (int i = 0; i < jsonArraystatProgression.size(); i++) {
            StatProgression.validateJsonElement(jsonArraystatProgression.get(i));
          };
        }
      }
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        JsonArray jsonArraycategory = jsonObj.getAsJsonArray("category");
        if (jsonArraycategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("category").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
          }

          // validate the optional field `category` (array)
          for (int i = 0; i < jsonArraycategory.size(); i++) {
            Category.validateJsonElement(jsonArraycategory.get(i));
          };
        }
      }
      if (jsonObj.get("helpEntry") != null && !jsonObj.get("helpEntry").isJsonNull()) {
        JsonArray jsonArrayhelpEntry = jsonObj.getAsJsonArray("helpEntry");
        if (jsonArrayhelpEntry != null) {
          // ensure the json data is an array
          if (!jsonObj.get("helpEntry").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `helpEntry` to be an array in the JSON string but got `%s`", jsonObj.get("helpEntry").toString()));
          }

          // validate the optional field `helpEntry` (array)
          for (int i = 0; i < jsonArrayhelpEntry.size(); i++) {
            HelpEntry.validateJsonElement(jsonArrayhelpEntry.get(i));
          };
        }
      }
      if (jsonObj.get("challenge") != null && !jsonObj.get("challenge").isJsonNull()) {
        JsonArray jsonArraychallenge = jsonObj.getAsJsonArray("challenge");
        if (jsonArraychallenge != null) {
          // ensure the json data is an array
          if (!jsonObj.get("challenge").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `challenge` to be an array in the JSON string but got `%s`", jsonObj.get("challenge").toString()));
          }

          // validate the optional field `challenge` (array)
          for (int i = 0; i < jsonArraychallenge.size(); i++) {
            Challenge.validateJsonElement(jsonArraychallenge.get(i));
          };
        }
      }
      if (jsonObj.get("skill") != null && !jsonObj.get("skill").isJsonNull()) {
        JsonArray jsonArrayskill = jsonObj.getAsJsonArray("skill");
        if (jsonArrayskill != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skill").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skill` to be an array in the JSON string but got `%s`", jsonObj.get("skill").toString()));
          }

          // validate the optional field `skill` (array)
          for (int i = 0; i < jsonArrayskill.size(); i++) {
            SkillDefinition.validateJsonElement(jsonArrayskill.get(i));
          };
        }
      }
      if (jsonObj.get("eventSampling") != null && !jsonObj.get("eventSampling").isJsonNull()) {
        JsonArray jsonArrayeventSampling = jsonObj.getAsJsonArray("eventSampling");
        if (jsonArrayeventSampling != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventSampling").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventSampling` to be an array in the JSON string but got `%s`", jsonObj.get("eventSampling").toString()));
          }

          // validate the optional field `eventSampling` (array)
          for (int i = 0; i < jsonArrayeventSampling.size(); i++) {
            EventSampling.validateJsonElement(jsonArrayeventSampling.get(i));
          };
        }
      }
      if (jsonObj.get("equipment") != null && !jsonObj.get("equipment").isJsonNull()) {
        JsonArray jsonArrayequipment = jsonObj.getAsJsonArray("equipment");
        if (jsonArrayequipment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("equipment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `equipment` to be an array in the JSON string but got `%s`", jsonObj.get("equipment").toString()));
          }

          // validate the optional field `equipment` (array)
          for (int i = 0; i < jsonArrayequipment.size(); i++) {
            EquipmentDef.validateJsonElement(jsonArrayequipment.get(i));
          };
        }
      }
      if (jsonObj.get("warDefinition") != null && !jsonObj.get("warDefinition").isJsonNull()) {
        JsonArray jsonArraywarDefinition = jsonObj.getAsJsonArray("warDefinition");
        if (jsonArraywarDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("warDefinition").toString()));
          }

          // validate the optional field `warDefinition` (array)
          for (int i = 0; i < jsonArraywarDefinition.size(); i++) {
            WarDef.validateJsonElement(jsonArraywarDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("targetingSet") != null && !jsonObj.get("targetingSet").isJsonNull()) {
        JsonArray jsonArraytargetingSet = jsonObj.getAsJsonArray("targetingSet");
        if (jsonArraytargetingSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetingSet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetingSet` to be an array in the JSON string but got `%s`", jsonObj.get("targetingSet").toString()));
          }

          // validate the optional field `targetingSet` (array)
          for (int i = 0; i < jsonArraytargetingSet.size(); i++) {
            TargetingSet.validateJsonElement(jsonArraytargetingSet.get(i));
          };
        }
      }
      if (jsonObj.get("ability") != null && !jsonObj.get("ability").isJsonNull()) {
        JsonArray jsonArrayability = jsonObj.getAsJsonArray("ability");
        if (jsonArrayability != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ability").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ability` to be an array in the JSON string but got `%s`", jsonObj.get("ability").toString()));
          }

          // validate the optional field `ability` (array)
          for (int i = 0; i < jsonArrayability.size(); i++) {
            Ability.validateJsonElement(jsonArrayability.get(i));
          };
        }
      }
      if (jsonObj.get("effect") != null && !jsonObj.get("effect").isJsonNull()) {
        JsonArray jsonArrayeffect = jsonObj.getAsJsonArray("effect");
        if (jsonArrayeffect != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effect").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effect` to be an array in the JSON string but got `%s`", jsonObj.get("effect").toString()));
          }

          // validate the optional field `effect` (array)
          for (int i = 0; i < jsonArrayeffect.size(); i++) {
            Effect.validateJsonElement(jsonArrayeffect.get(i));
          };
        }
      }
      if (jsonObj.get("requirement") != null && !jsonObj.get("requirement").isJsonNull()) {
        JsonArray jsonArrayrequirement = jsonObj.getAsJsonArray("requirement");
        if (jsonArrayrequirement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requirement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requirement` to be an array in the JSON string but got `%s`", jsonObj.get("requirement").toString()));
          }

          // validate the optional field `requirement` (array)
          for (int i = 0; i < jsonArrayrequirement.size(); i++) {
            Requirement.validateJsonElement(jsonArrayrequirement.get(i));
          };
        }
      }
      if (jsonObj.get("powerUpBundle") != null && !jsonObj.get("powerUpBundle").isJsonNull()) {
        JsonArray jsonArraypowerUpBundle = jsonObj.getAsJsonArray("powerUpBundle");
        if (jsonArraypowerUpBundle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("powerUpBundle").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `powerUpBundle` to be an array in the JSON string but got `%s`", jsonObj.get("powerUpBundle").toString()));
          }

          // validate the optional field `powerUpBundle` (array)
          for (int i = 0; i < jsonArraypowerUpBundle.size(); i++) {
            PowerUpBundle.validateJsonElement(jsonArraypowerUpBundle.get(i));
          };
        }
      }
      // validate the optional field `guildBanner`
      if (jsonObj.get("guildBanner") != null && !jsonObj.get("guildBanner").isJsonNull()) {
        GuildBannerDef.validateJsonElement(jsonObj.get("guildBanner"));
      }
      if (jsonObj.get("raidConfig") != null && !jsonObj.get("raidConfig").isJsonNull()) {
        JsonArray jsonArrayraidConfig = jsonObj.getAsJsonArray("raidConfig");
        if (jsonArrayraidConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidConfig` to be an array in the JSON string but got `%s`", jsonObj.get("raidConfig").toString()));
          }

          // validate the optional field `raidConfig` (array)
          for (int i = 0; i < jsonArrayraidConfig.size(); i++) {
            GuildRaidConfig.validateJsonElement(jsonArrayraidConfig.get(i));
          };
        }
      }
      if (jsonObj.get("guildRaid") != null && !jsonObj.get("guildRaid").isJsonNull()) {
        JsonArray jsonArrayguildRaid = jsonObj.getAsJsonArray("guildRaid");
        if (jsonArrayguildRaid != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guildRaid").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guildRaid` to be an array in the JSON string but got `%s`", jsonObj.get("guildRaid").toString()));
          }

          // validate the optional field `guildRaid` (array)
          for (int i = 0; i < jsonArrayguildRaid.size(); i++) {
            GuildRaid.validateJsonElement(jsonArrayguildRaid.get(i));
          };
        }
      }
      if (jsonObj.get("statModSet") != null && !jsonObj.get("statModSet").isJsonNull()) {
        JsonArray jsonArraystatModSet = jsonObj.getAsJsonArray("statModSet");
        if (jsonArraystatModSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statModSet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statModSet` to be an array in the JSON string but got `%s`", jsonObj.get("statModSet").toString()));
          }

          // validate the optional field `statModSet` (array)
          for (int i = 0; i < jsonArraystatModSet.size(); i++) {
            StatModSetDefinition.validateJsonElement(jsonArraystatModSet.get(i));
          };
        }
      }
      if (jsonObj.get("statMod") != null && !jsonObj.get("statMod").isJsonNull()) {
        JsonArray jsonArraystatMod = jsonObj.getAsJsonArray("statMod");
        if (jsonArraystatMod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statMod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statMod` to be an array in the JSON string but got `%s`", jsonObj.get("statMod").toString()));
          }

          // validate the optional field `statMod` (array)
          for (int i = 0; i < jsonArraystatMod.size(); i++) {
            StatModDefinition.validateJsonElement(jsonArraystatMod.get(i));
          };
        }
      }
      if (jsonObj.get("guildExchangeItem") != null && !jsonObj.get("guildExchangeItem").isJsonNull()) {
        JsonArray jsonArrayguildExchangeItem = jsonObj.getAsJsonArray("guildExchangeItem");
        if (jsonArrayguildExchangeItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guildExchangeItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guildExchangeItem` to be an array in the JSON string but got `%s`", jsonObj.get("guildExchangeItem").toString()));
          }

          // validate the optional field `guildExchangeItem` (array)
          for (int i = 0; i < jsonArrayguildExchangeItem.size(); i++) {
            GuildExchangeItem.validateJsonElement(jsonArrayguildExchangeItem.get(i));
          };
        }
      }
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        JsonArray jsonArraytable = jsonObj.getAsJsonArray("table");
        if (jsonArraytable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("table").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `table` to be an array in the JSON string but got `%s`", jsonObj.get("table").toString()));
          }

          // validate the optional field `table` (array)
          for (int i = 0; i < jsonArraytable.size(); i++) {
            Table.validateJsonElement(jsonArraytable.get(i));
          };
        }
      }
      if (jsonObj.get("unlockAnnouncementDefinition") != null && !jsonObj.get("unlockAnnouncementDefinition").isJsonNull()) {
        JsonArray jsonArrayunlockAnnouncementDefinition = jsonObj.getAsJsonArray("unlockAnnouncementDefinition");
        if (jsonArrayunlockAnnouncementDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unlockAnnouncementDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unlockAnnouncementDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("unlockAnnouncementDefinition").toString()));
          }

          // validate the optional field `unlockAnnouncementDefinition` (array)
          for (int i = 0; i < jsonArrayunlockAnnouncementDefinition.size(); i++) {
            UnlockAnnouncementDefinition.validateJsonElement(jsonArrayunlockAnnouncementDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("battleTargetingRule") != null && !jsonObj.get("battleTargetingRule").isJsonNull()) {
        JsonArray jsonArraybattleTargetingRule = jsonObj.getAsJsonArray("battleTargetingRule");
        if (jsonArraybattleTargetingRule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battleTargetingRule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battleTargetingRule` to be an array in the JSON string but got `%s`", jsonObj.get("battleTargetingRule").toString()));
          }

          // validate the optional field `battleTargetingRule` (array)
          for (int i = 0; i < jsonArraybattleTargetingRule.size(); i++) {
            EffectTarget.validateJsonElement(jsonArraybattleTargetingRule.get(i));
          };
        }
      }
      if (jsonObj.get("territoryBattleDefinition") != null && !jsonObj.get("territoryBattleDefinition").isJsonNull()) {
        JsonArray jsonArrayterritoryBattleDefinition = jsonObj.getAsJsonArray("territoryBattleDefinition");
        if (jsonArrayterritoryBattleDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryBattleDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryBattleDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("territoryBattleDefinition").toString()));
          }

          // validate the optional field `territoryBattleDefinition` (array)
          for (int i = 0; i < jsonArrayterritoryBattleDefinition.size(); i++) {
            TerritoryBattleDefinition.validateJsonElement(jsonArrayterritoryBattleDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("territoryWarDefinition") != null && !jsonObj.get("territoryWarDefinition").isJsonNull()) {
        JsonArray jsonArrayterritoryWarDefinition = jsonObj.getAsJsonArray("territoryWarDefinition");
        if (jsonArrayterritoryWarDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryWarDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryWarDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("territoryWarDefinition").toString()));
          }

          // validate the optional field `territoryWarDefinition` (array)
          for (int i = 0; i < jsonArrayterritoryWarDefinition.size(); i++) {
            TerritoryWarDefinition.validateJsonElement(jsonArrayterritoryWarDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("environmentCollection") != null && !jsonObj.get("environmentCollection").isJsonNull()) {
        JsonArray jsonArrayenvironmentCollection = jsonObj.getAsJsonArray("environmentCollection");
        if (jsonArrayenvironmentCollection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentCollection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentCollection` to be an array in the JSON string but got `%s`", jsonObj.get("environmentCollection").toString()));
          }

          // validate the optional field `environmentCollection` (array)
          for (int i = 0; i < jsonArrayenvironmentCollection.size(); i++) {
            EnvironmentCollection.validateJsonElement(jsonArrayenvironmentCollection.get(i));
          };
        }
      }
      if (jsonObj.get("challengeStyle") != null && !jsonObj.get("challengeStyle").isJsonNull()) {
        JsonArray jsonArraychallengeStyle = jsonObj.getAsJsonArray("challengeStyle");
        if (jsonArraychallengeStyle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("challengeStyle").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `challengeStyle` to be an array in the JSON string but got `%s`", jsonObj.get("challengeStyle").toString()));
          }

          // validate the optional field `challengeStyle` (array)
          for (int i = 0; i < jsonArraychallengeStyle.size(); i++) {
            ChallengeStyle.validateJsonElement(jsonArraychallengeStyle.get(i));
          };
        }
      }
      // validate the optional field `socialStatus`
      if (jsonObj.get("socialStatus") != null && !jsonObj.get("socialStatus").isJsonNull()) {
        SocialStatus.validateJsonElement(jsonObj.get("socialStatus"));
      }
      if (jsonObj.get("starterGuild") != null && !jsonObj.get("starterGuild").isJsonNull()) {
        JsonArray jsonArraystarterGuild = jsonObj.getAsJsonArray("starterGuild");
        if (jsonArraystarterGuild != null) {
          // ensure the json data is an array
          if (!jsonObj.get("starterGuild").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `starterGuild` to be an array in the JSON string but got `%s`", jsonObj.get("starterGuild").toString()));
          }

          // validate the optional field `starterGuild` (array)
          for (int i = 0; i < jsonArraystarterGuild.size(); i++) {
            StarterGuildDef.validateJsonElement(jsonArraystarterGuild.get(i));
          };
        }
      }
      if (jsonObj.get("playerTitle") != null && !jsonObj.get("playerTitle").isJsonNull()) {
        JsonArray jsonArrayplayerTitle = jsonObj.getAsJsonArray("playerTitle");
        if (jsonArrayplayerTitle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("playerTitle").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `playerTitle` to be an array in the JSON string but got `%s`", jsonObj.get("playerTitle").toString()));
          }

          // validate the optional field `playerTitle` (array)
          for (int i = 0; i < jsonArrayplayerTitle.size(); i++) {
            PlayerTitleDefinition.validateJsonElement(jsonArrayplayerTitle.get(i));
          };
        }
      }
      if (jsonObj.get("modRecommendation") != null && !jsonObj.get("modRecommendation").isJsonNull()) {
        JsonArray jsonArraymodRecommendation = jsonObj.getAsJsonArray("modRecommendation");
        if (jsonArraymodRecommendation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modRecommendation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modRecommendation` to be an array in the JSON string but got `%s`", jsonObj.get("modRecommendation").toString()));
          }

          // validate the optional field `modRecommendation` (array)
          for (int i = 0; i < jsonArraymodRecommendation.size(); i++) {
            ModRecommendation.validateJsonElement(jsonArraymodRecommendation.get(i));
          };
        }
      }
      if (jsonObj.get("persistentVfx") != null && !jsonObj.get("persistentVfx").isJsonNull()) {
        JsonArray jsonArraypersistentVfx = jsonObj.getAsJsonArray("persistentVfx");
        if (jsonArraypersistentVfx != null) {
          // ensure the json data is an array
          if (!jsonObj.get("persistentVfx").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `persistentVfx` to be an array in the JSON string but got `%s`", jsonObj.get("persistentVfx").toString()));
          }

          // validate the optional field `persistentVfx` (array)
          for (int i = 0; i < jsonArraypersistentVfx.size(); i++) {
            PersistentVfx.validateJsonElement(jsonArraypersistentVfx.get(i));
          };
        }
      }
      if (jsonObj.get("territoryTournamentDefinition") != null && !jsonObj.get("territoryTournamentDefinition").isJsonNull()) {
        JsonArray jsonArrayterritoryTournamentDefinition = jsonObj.getAsJsonArray("territoryTournamentDefinition");
        if (jsonArrayterritoryTournamentDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryTournamentDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryTournamentDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("territoryTournamentDefinition").toString()));
          }

          // validate the optional field `territoryTournamentDefinition` (array)
          for (int i = 0; i < jsonArrayterritoryTournamentDefinition.size(); i++) {
            TerritoryTournamentDefinition.validateJsonElement(jsonArrayterritoryTournamentDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("eventBonus") != null && !jsonObj.get("eventBonus").isJsonNull()) {
        JsonArray jsonArrayeventBonus = jsonObj.getAsJsonArray("eventBonus");
        if (jsonArrayeventBonus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventBonus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventBonus` to be an array in the JSON string but got `%s`", jsonObj.get("eventBonus").toString()));
          }

          // validate the optional field `eventBonus` (array)
          for (int i = 0; i < jsonArrayeventBonus.size(); i++) {
            EventBonus.validateJsonElement(jsonArrayeventBonus.get(i));
          };
        }
      }
      if (jsonObj.get("seasonDefinition") != null && !jsonObj.get("seasonDefinition").isJsonNull()) {
        JsonArray jsonArrayseasonDefinition = jsonObj.getAsJsonArray("seasonDefinition");
        if (jsonArrayseasonDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("seasonDefinition").toString()));
          }

          // validate the optional field `seasonDefinition` (array)
          for (int i = 0; i < jsonArrayseasonDefinition.size(); i++) {
            SeasonDefinition.validateJsonElement(jsonArrayseasonDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("playerPortrait") != null && !jsonObj.get("playerPortrait").isJsonNull()) {
        JsonArray jsonArrayplayerPortrait = jsonObj.getAsJsonArray("playerPortrait");
        if (jsonArrayplayerPortrait != null) {
          // ensure the json data is an array
          if (!jsonObj.get("playerPortrait").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `playerPortrait` to be an array in the JSON string but got `%s`", jsonObj.get("playerPortrait").toString()));
          }

          // validate the optional field `playerPortrait` (array)
          for (int i = 0; i < jsonArrayplayerPortrait.size(); i++) {
            PlayerPortraitDefinition.validateJsonElement(jsonArrayplayerPortrait.get(i));
          };
        }
      }
      // validate the optional field `timeZoneChangeConfig`
      if (jsonObj.get("timeZoneChangeConfig") != null && !jsonObj.get("timeZoneChangeConfig").isJsonNull()) {
        TimeZoneChangeConfig.validateJsonElement(jsonObj.get("timeZoneChangeConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("effectIconPriority") != null && !jsonObj.get("effectIconPriority").isJsonNull() && !jsonObj.get("effectIconPriority").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectIconPriority` to be an array in the JSON string but got `%s`", jsonObj.get("effectIconPriority").toString()));
      }
      if (jsonObj.get("mysteryBox") != null && !jsonObj.get("mysteryBox").isJsonNull()) {
        JsonArray jsonArraymysteryBox = jsonObj.getAsJsonArray("mysteryBox");
        if (jsonArraymysteryBox != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mysteryBox").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mysteryBox` to be an array in the JSON string but got `%s`", jsonObj.get("mysteryBox").toString()));
          }

          // validate the optional field `mysteryBox` (array)
          for (int i = 0; i < jsonArraymysteryBox.size(); i++) {
            MysteryBoxDefinition.validateJsonElement(jsonArraymysteryBox.get(i));
          };
        }
      }
      if (jsonObj.get("mysteryStatMod") != null && !jsonObj.get("mysteryStatMod").isJsonNull()) {
        JsonArray jsonArraymysteryStatMod = jsonObj.getAsJsonArray("mysteryStatMod");
        if (jsonArraymysteryStatMod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mysteryStatMod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mysteryStatMod` to be an array in the JSON string but got `%s`", jsonObj.get("mysteryStatMod").toString()));
          }

          // validate the optional field `mysteryStatMod` (array)
          for (int i = 0; i < jsonArraymysteryStatMod.size(); i++) {
            MysteryStatModDefinition.validateJsonElement(jsonArraymysteryStatMod.get(i));
          };
        }
      }
      if (jsonObj.get("cooldown") != null && !jsonObj.get("cooldown").isJsonNull()) {
        JsonArray jsonArraycooldown = jsonObj.getAsJsonArray("cooldown");
        if (jsonArraycooldown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cooldown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cooldown` to be an array in the JSON string but got `%s`", jsonObj.get("cooldown").toString()));
          }

          // validate the optional field `cooldown` (array)
          for (int i = 0; i < jsonArraycooldown.size(); i++) {
            Cooldown.validateJsonElement(jsonArraycooldown.get(i));
          };
        }
      }
      if (jsonObj.get("dailyActionCap") != null && !jsonObj.get("dailyActionCap").isJsonNull()) {
        JsonArray jsonArraydailyActionCap = jsonObj.getAsJsonArray("dailyActionCap");
        if (jsonArraydailyActionCap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dailyActionCap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dailyActionCap` to be an array in the JSON string but got `%s`", jsonObj.get("dailyActionCap").toString()));
          }

          // validate the optional field `dailyActionCap` (array)
          for (int i = 0; i < jsonArraydailyActionCap.size(); i++) {
            DailyActionCap.validateJsonElement(jsonArraydailyActionCap.get(i));
          };
        }
      }
      if (jsonObj.get("energyReward") != null && !jsonObj.get("energyReward").isJsonNull()) {
        JsonArray jsonArrayenergyReward = jsonObj.getAsJsonArray("energyReward");
        if (jsonArrayenergyReward != null) {
          // ensure the json data is an array
          if (!jsonObj.get("energyReward").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `energyReward` to be an array in the JSON string but got `%s`", jsonObj.get("energyReward").toString()));
          }

          // validate the optional field `energyReward` (array)
          for (int i = 0; i < jsonArrayenergyReward.size(); i++) {
            EnergyRewardDefinition.validateJsonElement(jsonArrayenergyReward.get(i));
          };
        }
      }
      if ((jsonObj.get("territoryTournamentMatchmakingDescKey") != null && !jsonObj.get("territoryTournamentMatchmakingDescKey").isJsonNull()) && !jsonObj.get("territoryTournamentMatchmakingDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `territoryTournamentMatchmakingDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("territoryTournamentMatchmakingDescKey").toString()));
      }
      if (jsonObj.get("seasonLeagueDefinition") != null && !jsonObj.get("seasonLeagueDefinition").isJsonNull()) {
        JsonArray jsonArrayseasonLeagueDefinition = jsonObj.getAsJsonArray("seasonLeagueDefinition");
        if (jsonArrayseasonLeagueDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonLeagueDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonLeagueDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("seasonLeagueDefinition").toString()));
          }

          // validate the optional field `seasonLeagueDefinition` (array)
          for (int i = 0; i < jsonArrayseasonLeagueDefinition.size(); i++) {
            SeasonLeagueDefinition.validateJsonElement(jsonArrayseasonLeagueDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("seasonDivisionDefinition") != null && !jsonObj.get("seasonDivisionDefinition").isJsonNull()) {
        JsonArray jsonArrayseasonDivisionDefinition = jsonObj.getAsJsonArray("seasonDivisionDefinition");
        if (jsonArrayseasonDivisionDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonDivisionDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonDivisionDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("seasonDivisionDefinition").toString()));
          }

          // validate the optional field `seasonDivisionDefinition` (array)
          for (int i = 0; i < jsonArrayseasonDivisionDefinition.size(); i++) {
            SeasonDivisionDefinition.validateJsonElement(jsonArrayseasonDivisionDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("seasonRewardTable") != null && !jsonObj.get("seasonRewardTable").isJsonNull()) {
        JsonArray jsonArrayseasonRewardTable = jsonObj.getAsJsonArray("seasonRewardTable");
        if (jsonArrayseasonRewardTable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonRewardTable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonRewardTable` to be an array in the JSON string but got `%s`", jsonObj.get("seasonRewardTable").toString()));
          }

          // validate the optional field `seasonRewardTable` (array)
          for (int i = 0; i < jsonArrayseasonRewardTable.size(); i++) {
            SeasonRewardTable.validateJsonElement(jsonArrayseasonRewardTable.get(i));
          };
        }
      }
      if (jsonObj.get("relicTierDefinition") != null && !jsonObj.get("relicTierDefinition").isJsonNull()) {
        JsonArray jsonArrayrelicTierDefinition = jsonObj.getAsJsonArray("relicTierDefinition");
        if (jsonArrayrelicTierDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relicTierDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relicTierDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("relicTierDefinition").toString()));
          }

          // validate the optional field `relicTierDefinition` (array)
          for (int i = 0; i < jsonArrayrelicTierDefinition.size(); i++) {
            RelicTierDefinition.validateJsonElement(jsonArrayrelicTierDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("scavengerConversionSet") != null && !jsonObj.get("scavengerConversionSet").isJsonNull()) {
        JsonArray jsonArrayscavengerConversionSet = jsonObj.getAsJsonArray("scavengerConversionSet");
        if (jsonArrayscavengerConversionSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scavengerConversionSet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scavengerConversionSet` to be an array in the JSON string but got `%s`", jsonObj.get("scavengerConversionSet").toString()));
          }

          // validate the optional field `scavengerConversionSet` (array)
          for (int i = 0; i < jsonArrayscavengerConversionSet.size(); i++) {
            ConversionSet.validateJsonElement(jsonArrayscavengerConversionSet.get(i));
          };
        }
      }
      if (jsonObj.get("unitGuideDefinition") != null && !jsonObj.get("unitGuideDefinition").isJsonNull()) {
        JsonArray jsonArrayunitGuideDefinition = jsonObj.getAsJsonArray("unitGuideDefinition");
        if (jsonArrayunitGuideDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unitGuideDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unitGuideDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("unitGuideDefinition").toString()));
          }

          // validate the optional field `unitGuideDefinition` (array)
          for (int i = 0; i < jsonArrayunitGuideDefinition.size(); i++) {
            UnitGuideDefinition.validateJsonElement(jsonArrayunitGuideDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("galacticBundle") != null && !jsonObj.get("galacticBundle").isJsonNull()) {
        JsonArray jsonArraygalacticBundle = jsonObj.getAsJsonArray("galacticBundle");
        if (jsonArraygalacticBundle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("galacticBundle").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `galacticBundle` to be an array in the JSON string but got `%s`", jsonObj.get("galacticBundle").toString()));
          }

          // validate the optional field `galacticBundle` (array)
          for (int i = 0; i < jsonArraygalacticBundle.size(); i++) {
            GalacticBundle.validateJsonElement(jsonArraygalacticBundle.get(i));
          };
        }
      }
      if (jsonObj.get("linkedStoreItem") != null && !jsonObj.get("linkedStoreItem").isJsonNull()) {
        JsonArray jsonArraylinkedStoreItem = jsonObj.getAsJsonArray("linkedStoreItem");
        if (jsonArraylinkedStoreItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedStoreItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedStoreItem` to be an array in the JSON string but got `%s`", jsonObj.get("linkedStoreItem").toString()));
          }

          // validate the optional field `linkedStoreItem` (array)
          for (int i = 0; i < jsonArraylinkedStoreItem.size(); i++) {
            LinkedStoreItem.validateJsonElement(jsonArraylinkedStoreItem.get(i));
          };
        }
      }
      if (jsonObj.get("territoryTournamentLeagueDefinition") != null && !jsonObj.get("territoryTournamentLeagueDefinition").isJsonNull()) {
        JsonArray jsonArrayterritoryTournamentLeagueDefinition = jsonObj.getAsJsonArray("territoryTournamentLeagueDefinition");
        if (jsonArrayterritoryTournamentLeagueDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryTournamentLeagueDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryTournamentLeagueDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("territoryTournamentLeagueDefinition").toString()));
          }

          // validate the optional field `territoryTournamentLeagueDefinition` (array)
          for (int i = 0; i < jsonArrayterritoryTournamentLeagueDefinition.size(); i++) {
            TerritoryTournamentLeagueDefinition.validateJsonElement(jsonArrayterritoryTournamentLeagueDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("territoryTournamentDivisionDefinition") != null && !jsonObj.get("territoryTournamentDivisionDefinition").isJsonNull()) {
        JsonArray jsonArrayterritoryTournamentDivisionDefinition = jsonObj.getAsJsonArray("territoryTournamentDivisionDefinition");
        if (jsonArrayterritoryTournamentDivisionDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("territoryTournamentDivisionDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `territoryTournamentDivisionDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("territoryTournamentDivisionDefinition").toString()));
          }

          // validate the optional field `territoryTournamentDivisionDefinition` (array)
          for (int i = 0; i < jsonArrayterritoryTournamentDivisionDefinition.size(); i++) {
            TerritoryTournamentDivisionDefinition.validateJsonElement(jsonArrayterritoryTournamentDivisionDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("savedSquadConfig") != null && !jsonObj.get("savedSquadConfig").isJsonNull()) {
        JsonArray jsonArraysavedSquadConfig = jsonObj.getAsJsonArray("savedSquadConfig");
        if (jsonArraysavedSquadConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("savedSquadConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `savedSquadConfig` to be an array in the JSON string but got `%s`", jsonObj.get("savedSquadConfig").toString()));
          }

          // validate the optional field `savedSquadConfig` (array)
          for (int i = 0; i < jsonArraysavedSquadConfig.size(); i++) {
            SaveSquadConfig.validateJsonElement(jsonArraysavedSquadConfig.get(i));
          };
        }
      }
      // validate the optional field `guildRaidGlobalConfig`
      if (jsonObj.get("guildRaidGlobalConfig") != null && !jsonObj.get("guildRaidGlobalConfig").isJsonNull()) {
        GuildRaidGlobalConfig.validateJsonElement(jsonObj.get("guildRaidGlobalConfig"));
      }
      if (jsonObj.get("campaign") != null && !jsonObj.get("campaign").isJsonNull()) {
        JsonArray jsonArraycampaign = jsonObj.getAsJsonArray("campaign");
        if (jsonArraycampaign != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaign").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaign` to be an array in the JSON string but got `%s`", jsonObj.get("campaign").toString()));
          }

          // validate the optional field `campaign` (array)
          for (int i = 0; i < jsonArraycampaign.size(); i++) {
            Campaign.validateJsonElement(jsonArraycampaign.get(i));
          };
        }
      }
      if (jsonObj.get("conquestDefinition") != null && !jsonObj.get("conquestDefinition").isJsonNull()) {
        JsonArray jsonArrayconquestDefinition = jsonObj.getAsJsonArray("conquestDefinition");
        if (jsonArrayconquestDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conquestDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conquestDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("conquestDefinition").toString()));
          }

          // validate the optional field `conquestDefinition` (array)
          for (int i = 0; i < jsonArrayconquestDefinition.size(); i++) {
            ConquestDefinition.validateJsonElement(jsonArrayconquestDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("conquestMission") != null && !jsonObj.get("conquestMission").isJsonNull()) {
        JsonArray jsonArrayconquestMission = jsonObj.getAsJsonArray("conquestMission");
        if (jsonArrayconquestMission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conquestMission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conquestMission` to be an array in the JSON string but got `%s`", jsonObj.get("conquestMission").toString()));
          }

          // validate the optional field `conquestMission` (array)
          for (int i = 0; i < jsonArrayconquestMission.size(); i++) {
            ConquestMission.validateJsonElement(jsonArrayconquestMission.get(i));
          };
        }
      }
      if (jsonObj.get("artifactDefinition") != null && !jsonObj.get("artifactDefinition").isJsonNull()) {
        JsonArray jsonArrayartifactDefinition = jsonObj.getAsJsonArray("artifactDefinition");
        if (jsonArrayartifactDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artifactDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artifactDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("artifactDefinition").toString()));
          }

          // validate the optional field `artifactDefinition` (array)
          for (int i = 0; i < jsonArrayartifactDefinition.size(); i++) {
            ArtifactDefinition.validateJsonElement(jsonArrayartifactDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("abilityDecisionTree") != null && !jsonObj.get("abilityDecisionTree").isJsonNull()) {
        JsonArray jsonArrayabilityDecisionTree = jsonObj.getAsJsonArray("abilityDecisionTree");
        if (jsonArrayabilityDecisionTree != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abilityDecisionTree").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abilityDecisionTree` to be an array in the JSON string but got `%s`", jsonObj.get("abilityDecisionTree").toString()));
          }

          // validate the optional field `abilityDecisionTree` (array)
          for (int i = 0; i < jsonArrayabilityDecisionTree.size(); i++) {
            AbilityDecisionTree.validateJsonElement(jsonArrayabilityDecisionTree.get(i));
          };
        }
      }
      if (jsonObj.get("consumableDefinition") != null && !jsonObj.get("consumableDefinition").isJsonNull()) {
        JsonArray jsonArrayconsumableDefinition = jsonObj.getAsJsonArray("consumableDefinition");
        if (jsonArrayconsumableDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumableDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumableDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("consumableDefinition").toString()));
          }

          // validate the optional field `consumableDefinition` (array)
          for (int i = 0; i < jsonArrayconsumableDefinition.size(); i++) {
            ConsumableDefinition.validateJsonElement(jsonArrayconsumableDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("consumableType") != null && !jsonObj.get("consumableType").isJsonNull()) {
        JsonArray jsonArrayconsumableType = jsonObj.getAsJsonArray("consumableType");
        if (jsonArrayconsumableType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumableType").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumableType` to be an array in the JSON string but got `%s`", jsonObj.get("consumableType").toString()));
          }

          // validate the optional field `consumableType` (array)
          for (int i = 0; i < jsonArrayconsumableType.size(); i++) {
            ConsumableType.validateJsonElement(jsonArrayconsumableType.get(i));
          };
        }
      }
      if (jsonObj.get("artifactTierDefinition") != null && !jsonObj.get("artifactTierDefinition").isJsonNull()) {
        JsonArray jsonArrayartifactTierDefinition = jsonObj.getAsJsonArray("artifactTierDefinition");
        if (jsonArrayartifactTierDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artifactTierDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artifactTierDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("artifactTierDefinition").toString()));
          }

          // validate the optional field `artifactTierDefinition` (array)
          for (int i = 0; i < jsonArrayartifactTierDefinition.size(); i++) {
            ArtifactTierDefinition.validateJsonElement(jsonArrayartifactTierDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("consumableTierDefinition") != null && !jsonObj.get("consumableTierDefinition").isJsonNull()) {
        JsonArray jsonArrayconsumableTierDefinition = jsonObj.getAsJsonArray("consumableTierDefinition");
        if (jsonArrayconsumableTierDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumableTierDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumableTierDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("consumableTierDefinition").toString()));
          }

          // validate the optional field `consumableTierDefinition` (array)
          for (int i = 0; i < jsonArrayconsumableTierDefinition.size(); i++) {
            ConsumableTierDefinition.validateJsonElement(jsonArrayconsumableTierDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("recommendedSquad") != null && !jsonObj.get("recommendedSquad").isJsonNull()) {
        JsonArray jsonArrayrecommendedSquad = jsonObj.getAsJsonArray("recommendedSquad");
        if (jsonArrayrecommendedSquad != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recommendedSquad").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recommendedSquad` to be an array in the JSON string but got `%s`", jsonObj.get("recommendedSquad").toString()));
          }

          // validate the optional field `recommendedSquad` (array)
          for (int i = 0; i < jsonArrayrecommendedSquad.size(); i++) {
            RecommendedSquad.validateJsonElement(jsonArrayrecommendedSquad.get(i));
          };
        }
      }
      if (jsonObj.get("unitGuideLayout") != null && !jsonObj.get("unitGuideLayout").isJsonNull()) {
        JsonArray jsonArrayunitGuideLayout = jsonObj.getAsJsonArray("unitGuideLayout");
        if (jsonArrayunitGuideLayout != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unitGuideLayout").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unitGuideLayout` to be an array in the JSON string but got `%s`", jsonObj.get("unitGuideLayout").toString()));
          }

          // validate the optional field `unitGuideLayout` (array)
          for (int i = 0; i < jsonArrayunitGuideLayout.size(); i++) {
            UnitGuideLayout.validateJsonElement(jsonArrayunitGuideLayout.get(i));
          };
        }
      }
      if (jsonObj.get("dailyLoginRewardDefinition") != null && !jsonObj.get("dailyLoginRewardDefinition").isJsonNull()) {
        JsonArray jsonArraydailyLoginRewardDefinition = jsonObj.getAsJsonArray("dailyLoginRewardDefinition");
        if (jsonArraydailyLoginRewardDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dailyLoginRewardDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dailyLoginRewardDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("dailyLoginRewardDefinition").toString()));
          }

          // validate the optional field `dailyLoginRewardDefinition` (array)
          for (int i = 0; i < jsonArraydailyLoginRewardDefinition.size(); i++) {
            DailyLoginRewardDefinition.validateJsonElement(jsonArraydailyLoginRewardDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("calendarCategoryDefinition") != null && !jsonObj.get("calendarCategoryDefinition").isJsonNull()) {
        JsonArray jsonArraycalendarCategoryDefinition = jsonObj.getAsJsonArray("calendarCategoryDefinition");
        if (jsonArraycalendarCategoryDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("calendarCategoryDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `calendarCategoryDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("calendarCategoryDefinition").toString()));
          }

          // validate the optional field `calendarCategoryDefinition` (array)
          for (int i = 0; i < jsonArraycalendarCategoryDefinition.size(); i++) {
            CalendarCategoryDefinition.validateJsonElement(jsonArraycalendarCategoryDefinition.get(i));
          };
        }
      }
      // validate the optional field `territoryTournamentDailyRewardTable`
      if (jsonObj.get("territoryTournamentDailyRewardTable") != null && !jsonObj.get("territoryTournamentDailyRewardTable").isJsonNull()) {
        TerritoryTournamentDailyRewardTable.validateJsonElement(jsonObj.get("territoryTournamentDailyRewardTable"));
      }
      if (jsonObj.get("datacronSet") != null && !jsonObj.get("datacronSet").isJsonNull()) {
        JsonArray jsonArraydatacronSet = jsonObj.getAsJsonArray("datacronSet");
        if (jsonArraydatacronSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datacronSet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datacronSet` to be an array in the JSON string but got `%s`", jsonObj.get("datacronSet").toString()));
          }

          // validate the optional field `datacronSet` (array)
          for (int i = 0; i < jsonArraydatacronSet.size(); i++) {
            DatacronSet.validateJsonElement(jsonArraydatacronSet.get(i));
          };
        }
      }
      if (jsonObj.get("datacronTemplate") != null && !jsonObj.get("datacronTemplate").isJsonNull()) {
        JsonArray jsonArraydatacronTemplate = jsonObj.getAsJsonArray("datacronTemplate");
        if (jsonArraydatacronTemplate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datacronTemplate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datacronTemplate` to be an array in the JSON string but got `%s`", jsonObj.get("datacronTemplate").toString()));
          }

          // validate the optional field `datacronTemplate` (array)
          for (int i = 0; i < jsonArraydatacronTemplate.size(); i++) {
            DatacronTemplate.validateJsonElement(jsonArraydatacronTemplate.get(i));
          };
        }
      }
      if (jsonObj.get("datacronAffixTemplateSet") != null && !jsonObj.get("datacronAffixTemplateSet").isJsonNull()) {
        JsonArray jsonArraydatacronAffixTemplateSet = jsonObj.getAsJsonArray("datacronAffixTemplateSet");
        if (jsonArraydatacronAffixTemplateSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datacronAffixTemplateSet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datacronAffixTemplateSet` to be an array in the JSON string but got `%s`", jsonObj.get("datacronAffixTemplateSet").toString()));
          }

          // validate the optional field `datacronAffixTemplateSet` (array)
          for (int i = 0; i < jsonArraydatacronAffixTemplateSet.size(); i++) {
            DatacronAffixTemplateSet.validateJsonElement(jsonArraydatacronAffixTemplateSet.get(i));
          };
        }
      }
      if (jsonObj.get("datacronHelpEntry") != null && !jsonObj.get("datacronHelpEntry").isJsonNull()) {
        JsonArray jsonArraydatacronHelpEntry = jsonObj.getAsJsonArray("datacronHelpEntry");
        if (jsonArraydatacronHelpEntry != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datacronHelpEntry").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datacronHelpEntry` to be an array in the JSON string but got `%s`", jsonObj.get("datacronHelpEntry").toString()));
          }

          // validate the optional field `datacronHelpEntry` (array)
          for (int i = 0; i < jsonArraydatacronHelpEntry.size(); i++) {
            DatacronHelpEntry.validateJsonElement(jsonArraydatacronHelpEntry.get(i));
          };
        }
      }
      if (jsonObj.get("displayableEnemy") != null && !jsonObj.get("displayableEnemy").isJsonNull()) {
        JsonArray jsonArraydisplayableEnemy = jsonObj.getAsJsonArray("displayableEnemy");
        if (jsonArraydisplayableEnemy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("displayableEnemy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `displayableEnemy` to be an array in the JSON string but got `%s`", jsonObj.get("displayableEnemy").toString()));
          }

          // validate the optional field `displayableEnemy` (array)
          for (int i = 0; i < jsonArraydisplayableEnemy.size(); i++) {
            UnitDefPreview.validateJsonElement(jsonArraydisplayableEnemy.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetGameData2XXResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetGameData2XXResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetGameData2XXResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetGameData2XXResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetGameData2XXResponse>() {
           @Override
           public void write(JsonWriter out, GetGameData2XXResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetGameData2XXResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetGameData2XXResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetGameData2XXResponse
   * @throws IOException if the JSON string is invalid with respect to GetGameData2XXResponse
   */
  public static GetGameData2XXResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetGameData2XXResponse.class);
  }

  /**
   * Convert an instance of GetGameData2XXResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

