/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.ModRecommendationPrimaryStat;
import io.github.doenisf.comlink4j.ModRecommendationSetBonus;
import io.github.doenisf.comlink4j.UnitStat;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * ModRecommendation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ModRecommendation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SET_RECOMMENDATION = "setRecommendation";
  @SerializedName(SERIALIZED_NAME_SET_RECOMMENDATION)
  private List<ModRecommendationSetBonus> setRecommendation = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_STAT_RECOMMENDATION = "primaryStatRecommendation";
  @SerializedName(SERIALIZED_NAME_PRIMARY_STAT_RECOMMENDATION)
  private List<ModRecommendationPrimaryStat> primaryStatRecommendation = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDARY_STAT_RECOMMENDATION = "secondaryStatRecommendation";
  @SerializedName(SERIALIZED_NAME_SECONDARY_STAT_RECOMMENDATION)
  private List<UnitStat> secondaryStatRecommendation = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIP_KEY = "tipKey";
  @SerializedName(SERIALIZED_NAME_TIP_KEY)
  private String tipKey;

  public ModRecommendation() {
  }

  public ModRecommendation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ModRecommendation setRecommendation(List<ModRecommendationSetBonus> setRecommendation) {
    this.setRecommendation = setRecommendation;
    return this;
  }

  public ModRecommendation addSetRecommendationItem(ModRecommendationSetBonus setRecommendationItem) {
    if (this.setRecommendation == null) {
      this.setRecommendation = new ArrayList<>();
    }
    this.setRecommendation.add(setRecommendationItem);
    return this;
  }

  /**
   * Get setRecommendation
   * @return setRecommendation
   */
  @javax.annotation.Nullable
  public List<ModRecommendationSetBonus> getSetRecommendation() {
    return setRecommendation;
  }

  public void setSetRecommendation(List<ModRecommendationSetBonus> setRecommendation) {
    this.setRecommendation = setRecommendation;
  }


  public ModRecommendation primaryStatRecommendation(List<ModRecommendationPrimaryStat> primaryStatRecommendation) {
    this.primaryStatRecommendation = primaryStatRecommendation;
    return this;
  }

  public ModRecommendation addPrimaryStatRecommendationItem(ModRecommendationPrimaryStat primaryStatRecommendationItem) {
    if (this.primaryStatRecommendation == null) {
      this.primaryStatRecommendation = new ArrayList<>();
    }
    this.primaryStatRecommendation.add(primaryStatRecommendationItem);
    return this;
  }

  /**
   * Get primaryStatRecommendation
   * @return primaryStatRecommendation
   */
  @javax.annotation.Nullable
  public List<ModRecommendationPrimaryStat> getPrimaryStatRecommendation() {
    return primaryStatRecommendation;
  }

  public void setPrimaryStatRecommendation(List<ModRecommendationPrimaryStat> primaryStatRecommendation) {
    this.primaryStatRecommendation = primaryStatRecommendation;
  }


  public ModRecommendation secondaryStatRecommendation(List<UnitStat> secondaryStatRecommendation) {
    this.secondaryStatRecommendation = secondaryStatRecommendation;
    return this;
  }

  public ModRecommendation addSecondaryStatRecommendationItem(UnitStat secondaryStatRecommendationItem) {
    if (this.secondaryStatRecommendation == null) {
      this.secondaryStatRecommendation = new ArrayList<>();
    }
    this.secondaryStatRecommendation.add(secondaryStatRecommendationItem);
    return this;
  }

  /**
   * Get secondaryStatRecommendation
   * @return secondaryStatRecommendation
   */
  @javax.annotation.Nullable
  public List<UnitStat> getSecondaryStatRecommendation() {
    return secondaryStatRecommendation;
  }

  public void setSecondaryStatRecommendation(List<UnitStat> secondaryStatRecommendation) {
    this.secondaryStatRecommendation = secondaryStatRecommendation;
  }


  public ModRecommendation tipKey(String tipKey) {
    this.tipKey = tipKey;
    return this;
  }

  /**
   * Get tipKey
   * @return tipKey
   */
  @javax.annotation.Nullable
  public String getTipKey() {
    return tipKey;
  }

  public void setTipKey(String tipKey) {
    this.tipKey = tipKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModRecommendation modRecommendation = (ModRecommendation) o;
    return Objects.equals(this.id, modRecommendation.id) &&
        Objects.equals(this.setRecommendation, modRecommendation.setRecommendation) &&
        Objects.equals(this.primaryStatRecommendation, modRecommendation.primaryStatRecommendation) &&
        Objects.equals(this.secondaryStatRecommendation, modRecommendation.secondaryStatRecommendation) &&
        Objects.equals(this.tipKey, modRecommendation.tipKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, setRecommendation, primaryStatRecommendation, secondaryStatRecommendation, tipKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModRecommendation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    setRecommendation: ").append(toIndentedString(setRecommendation)).append("\n");
    sb.append("    primaryStatRecommendation: ").append(toIndentedString(primaryStatRecommendation)).append("\n");
    sb.append("    secondaryStatRecommendation: ").append(toIndentedString(secondaryStatRecommendation)).append("\n");
    sb.append("    tipKey: ").append(toIndentedString(tipKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("setRecommendation");
    openapiFields.add("primaryStatRecommendation");
    openapiFields.add("secondaryStatRecommendation");
    openapiFields.add("tipKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModRecommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModRecommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModRecommendation is not found in the empty JSON string", ModRecommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModRecommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModRecommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("setRecommendation") != null && !jsonObj.get("setRecommendation").isJsonNull()) {
        JsonArray jsonArraysetRecommendation = jsonObj.getAsJsonArray("setRecommendation");
        if (jsonArraysetRecommendation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("setRecommendation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `setRecommendation` to be an array in the JSON string but got `%s`", jsonObj.get("setRecommendation").toString()));
          }

          // validate the optional field `setRecommendation` (array)
          for (int i = 0; i < jsonArraysetRecommendation.size(); i++) {
            ModRecommendationSetBonus.validateJsonElement(jsonArraysetRecommendation.get(i));
          };
        }
      }
      if (jsonObj.get("primaryStatRecommendation") != null && !jsonObj.get("primaryStatRecommendation").isJsonNull()) {
        JsonArray jsonArrayprimaryStatRecommendation = jsonObj.getAsJsonArray("primaryStatRecommendation");
        if (jsonArrayprimaryStatRecommendation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("primaryStatRecommendation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primaryStatRecommendation` to be an array in the JSON string but got `%s`", jsonObj.get("primaryStatRecommendation").toString()));
          }

          // validate the optional field `primaryStatRecommendation` (array)
          for (int i = 0; i < jsonArrayprimaryStatRecommendation.size(); i++) {
            ModRecommendationPrimaryStat.validateJsonElement(jsonArrayprimaryStatRecommendation.get(i));
          };
        }
      }
      if (jsonObj.get("secondaryStatRecommendation") != null && !jsonObj.get("secondaryStatRecommendation").isJsonNull()) {
        JsonArray jsonArraysecondaryStatRecommendation = jsonObj.getAsJsonArray("secondaryStatRecommendation");
        if (jsonArraysecondaryStatRecommendation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secondaryStatRecommendation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secondaryStatRecommendation` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryStatRecommendation").toString()));
          }

          // validate the optional field `secondaryStatRecommendation` (array)
          for (int i = 0; i < jsonArraysecondaryStatRecommendation.size(); i++) {
            UnitStat.validateJsonElement(jsonArraysecondaryStatRecommendation.get(i));
          };
        }
      }
      if ((jsonObj.get("tipKey") != null && !jsonObj.get("tipKey").isJsonNull()) && !jsonObj.get("tipKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tipKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tipKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModRecommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModRecommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModRecommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModRecommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<ModRecommendation>() {
           @Override
           public void write(JsonWriter out, ModRecommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModRecommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModRecommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModRecommendation
   * @throws IOException if the JSON string is invalid with respect to ModRecommendation
   */
  public static ModRecommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModRecommendation.class);
  }

  /**
   * Convert an instance of ModRecommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

