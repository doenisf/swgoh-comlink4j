/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CategoryMatchType;
import io.github.doenisf.comlink4j.model.MandatoryRosterUnit;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.RelicTier;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * EntryCategoryAllowed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class EntryCategoryAllowed {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private List<String> categoryId = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAXIMUM_ALLOWED_UNIT_QUANTITY = "maximumAllowedUnitQuantity";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_ALLOWED_UNIT_QUANTITY)
  private Integer maximumAllowedUnitQuantity;

  public static final String SERIALIZED_NAME_MATCH_TYPE = "matchType";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private CategoryMatchType matchType;

  public static final String SERIALIZED_NAME_MINIMUM_REQUIRED_UNIT_QUANTITY = "minimumRequiredUnitQuantity";
  @SerializedName(SERIALIZED_NAME_MINIMUM_REQUIRED_UNIT_QUANTITY)
  private Integer minimumRequiredUnitQuantity;

  public static final String SERIALIZED_NAME_MINIMUM_UNIT_RARITY = "minimumUnitRarity";
  @SerializedName(SERIALIZED_NAME_MINIMUM_UNIT_RARITY)
  private Rarity minimumUnitRarity;

  public static final String SERIALIZED_NAME_MINIMUM_OWNED_UNIT_QUANTITY = "minimumOwnedUnitQuantity";
  @SerializedName(SERIALIZED_NAME_MINIMUM_OWNED_UNIT_QUANTITY)
  private Integer minimumOwnedUnitQuantity;

  public static final String SERIALIZED_NAME_MINIMUM_UNIT_LEVEL = "minimumUnitLevel";
  @SerializedName(SERIALIZED_NAME_MINIMUM_UNIT_LEVEL)
  private Integer minimumUnitLevel;

  public static final String SERIALIZED_NAME_MINIMUM_UNIT_TIER = "minimumUnitTier";
  @SerializedName(SERIALIZED_NAME_MINIMUM_UNIT_TIER)
  private UnitTier minimumUnitTier;

  public static final String SERIALIZED_NAME_MAXIMUM_REINFORCEMENT = "maximumReinforcement";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_REINFORCEMENT)
  private Integer maximumReinforcement;

  public static final String SERIALIZED_NAME_COMMANDER_CATEGORY_ID = "commanderCategoryId";
  @SerializedName(SERIALIZED_NAME_COMMANDER_CATEGORY_ID)
  private List<String> commanderCategoryId = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUM_REINFORCEMENT = "minimumReinforcement";
  @SerializedName(SERIALIZED_NAME_MINIMUM_REINFORCEMENT)
  private Integer minimumReinforcement;

  public static final String SERIALIZED_NAME_MINIMUM_GALACTIC_POWER = "minimumGalacticPower";
  @SerializedName(SERIALIZED_NAME_MINIMUM_GALACTIC_POWER)
  private Integer minimumGalacticPower;

  public static final String SERIALIZED_NAME_MANDATORY_ROSTER_UNIT = "mandatoryRosterUnit";
  @SerializedName(SERIALIZED_NAME_MANDATORY_ROSTER_UNIT)
  private List<MandatoryRosterUnit> mandatoryRosterUnit = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDE_CATEGORY_ID = "excludeCategoryId";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_CATEGORY_ID)
  private List<String> excludeCategoryId = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUM_RELIC_TIER = "minimumRelicTier";
  @SerializedName(SERIALIZED_NAME_MINIMUM_RELIC_TIER)
  private RelicTier minimumRelicTier;

  public static final String SERIALIZED_NAME_MINIMUM_MOD_RARITY = "minimumModRarity";
  @SerializedName(SERIALIZED_NAME_MINIMUM_MOD_RARITY)
  private Rarity minimumModRarity;

  public static final String SERIALIZED_NAME_MINIMUM_ABILITY_LEVEL_AVG = "minimumAbilityLevelAvg";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ABILITY_LEVEL_AVG)
  private Integer minimumAbilityLevelAvg;

  public static final String SERIALIZED_NAME_MINIMUM_ABILITY_LEVEL_ALL = "minimumAbilityLevelAll";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ABILITY_LEVEL_ALL)
  private Integer minimumAbilityLevelAll;

  public static final String SERIALIZED_NAME_LEGEND_LIMIT = "legendLimit";
  @SerializedName(SERIALIZED_NAME_LEGEND_LIMIT)
  private Integer legendLimit;

  public static final String SERIALIZED_NAME_UNIT_GUIDE_MINIMUM_REQUIRED_UNIT_QUANTITY = "unitGuideMinimumRequiredUnitQuantity";
  @SerializedName(SERIALIZED_NAME_UNIT_GUIDE_MINIMUM_REQUIRED_UNIT_QUANTITY)
  private Integer unitGuideMinimumRequiredUnitQuantity;

  public static final String SERIALIZED_NAME_BIG_UNIT_LIMIT = "bigUnitLimit";
  @SerializedName(SERIALIZED_NAME_BIG_UNIT_LIMIT)
  private Integer bigUnitLimit;

  public EntryCategoryAllowed() {
  }

  public EntryCategoryAllowed categoryId(List<String> categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  public EntryCategoryAllowed addCategoryIdItem(String categoryIdItem) {
    if (this.categoryId == null) {
      this.categoryId = new ArrayList<>();
    }
    this.categoryId.add(categoryIdItem);
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public List<String> getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(List<String> categoryId) {
    this.categoryId = categoryId;
  }


  public EntryCategoryAllowed maximumAllowedUnitQuantity(Integer maximumAllowedUnitQuantity) {
    this.maximumAllowedUnitQuantity = maximumAllowedUnitQuantity;
    return this;
  }

  /**
   * Get maximumAllowedUnitQuantity
   * @return maximumAllowedUnitQuantity
   */
  @javax.annotation.Nullable
  public Integer getMaximumAllowedUnitQuantity() {
    return maximumAllowedUnitQuantity;
  }

  public void setMaximumAllowedUnitQuantity(Integer maximumAllowedUnitQuantity) {
    this.maximumAllowedUnitQuantity = maximumAllowedUnitQuantity;
  }


  public EntryCategoryAllowed matchType(CategoryMatchType matchType) {
    this.matchType = matchType;
    return this;
  }

  /**
   * Get matchType
   * @return matchType
   */
  @javax.annotation.Nullable
  public CategoryMatchType getMatchType() {
    return matchType;
  }

  public void setMatchType(CategoryMatchType matchType) {
    this.matchType = matchType;
  }


  public EntryCategoryAllowed minimumRequiredUnitQuantity(Integer minimumRequiredUnitQuantity) {
    this.minimumRequiredUnitQuantity = minimumRequiredUnitQuantity;
    return this;
  }

  /**
   * Get minimumRequiredUnitQuantity
   * @return minimumRequiredUnitQuantity
   */
  @javax.annotation.Nullable
  public Integer getMinimumRequiredUnitQuantity() {
    return minimumRequiredUnitQuantity;
  }

  public void setMinimumRequiredUnitQuantity(Integer minimumRequiredUnitQuantity) {
    this.minimumRequiredUnitQuantity = minimumRequiredUnitQuantity;
  }


  public EntryCategoryAllowed minimumUnitRarity(Rarity minimumUnitRarity) {
    this.minimumUnitRarity = minimumUnitRarity;
    return this;
  }

  /**
   * Get minimumUnitRarity
   * @return minimumUnitRarity
   */
  @javax.annotation.Nullable
  public Rarity getMinimumUnitRarity() {
    return minimumUnitRarity;
  }

  public void setMinimumUnitRarity(Rarity minimumUnitRarity) {
    this.minimumUnitRarity = minimumUnitRarity;
  }


  public EntryCategoryAllowed minimumOwnedUnitQuantity(Integer minimumOwnedUnitQuantity) {
    this.minimumOwnedUnitQuantity = minimumOwnedUnitQuantity;
    return this;
  }

  /**
   * Get minimumOwnedUnitQuantity
   * @return minimumOwnedUnitQuantity
   */
  @javax.annotation.Nullable
  public Integer getMinimumOwnedUnitQuantity() {
    return minimumOwnedUnitQuantity;
  }

  public void setMinimumOwnedUnitQuantity(Integer minimumOwnedUnitQuantity) {
    this.minimumOwnedUnitQuantity = minimumOwnedUnitQuantity;
  }


  public EntryCategoryAllowed minimumUnitLevel(Integer minimumUnitLevel) {
    this.minimumUnitLevel = minimumUnitLevel;
    return this;
  }

  /**
   * Get minimumUnitLevel
   * @return minimumUnitLevel
   */
  @javax.annotation.Nullable
  public Integer getMinimumUnitLevel() {
    return minimumUnitLevel;
  }

  public void setMinimumUnitLevel(Integer minimumUnitLevel) {
    this.minimumUnitLevel = minimumUnitLevel;
  }


  public EntryCategoryAllowed minimumUnitTier(UnitTier minimumUnitTier) {
    this.minimumUnitTier = minimumUnitTier;
    return this;
  }

  /**
   * Get minimumUnitTier
   * @return minimumUnitTier
   */
  @javax.annotation.Nullable
  public UnitTier getMinimumUnitTier() {
    return minimumUnitTier;
  }

  public void setMinimumUnitTier(UnitTier minimumUnitTier) {
    this.minimumUnitTier = minimumUnitTier;
  }


  public EntryCategoryAllowed maximumReinforcement(Integer maximumReinforcement) {
    this.maximumReinforcement = maximumReinforcement;
    return this;
  }

  /**
   * Get maximumReinforcement
   * @return maximumReinforcement
   */
  @javax.annotation.Nullable
  public Integer getMaximumReinforcement() {
    return maximumReinforcement;
  }

  public void setMaximumReinforcement(Integer maximumReinforcement) {
    this.maximumReinforcement = maximumReinforcement;
  }


  public EntryCategoryAllowed commanderCategoryId(List<String> commanderCategoryId) {
    this.commanderCategoryId = commanderCategoryId;
    return this;
  }

  public EntryCategoryAllowed addCommanderCategoryIdItem(String commanderCategoryIdItem) {
    if (this.commanderCategoryId == null) {
      this.commanderCategoryId = new ArrayList<>();
    }
    this.commanderCategoryId.add(commanderCategoryIdItem);
    return this;
  }

  /**
   * Get commanderCategoryId
   * @return commanderCategoryId
   */
  @javax.annotation.Nullable
  public List<String> getCommanderCategoryId() {
    return commanderCategoryId;
  }

  public void setCommanderCategoryId(List<String> commanderCategoryId) {
    this.commanderCategoryId = commanderCategoryId;
  }


  public EntryCategoryAllowed minimumReinforcement(Integer minimumReinforcement) {
    this.minimumReinforcement = minimumReinforcement;
    return this;
  }

  /**
   * Get minimumReinforcement
   * @return minimumReinforcement
   */
  @javax.annotation.Nullable
  public Integer getMinimumReinforcement() {
    return minimumReinforcement;
  }

  public void setMinimumReinforcement(Integer minimumReinforcement) {
    this.minimumReinforcement = minimumReinforcement;
  }


  public EntryCategoryAllowed minimumGalacticPower(Integer minimumGalacticPower) {
    this.minimumGalacticPower = minimumGalacticPower;
    return this;
  }

  /**
   * Get minimumGalacticPower
   * @return minimumGalacticPower
   */
  @javax.annotation.Nullable
  public Integer getMinimumGalacticPower() {
    return minimumGalacticPower;
  }

  public void setMinimumGalacticPower(Integer minimumGalacticPower) {
    this.minimumGalacticPower = minimumGalacticPower;
  }


  public EntryCategoryAllowed mandatoryRosterUnit(List<MandatoryRosterUnit> mandatoryRosterUnit) {
    this.mandatoryRosterUnit = mandatoryRosterUnit;
    return this;
  }

  public EntryCategoryAllowed addMandatoryRosterUnitItem(MandatoryRosterUnit mandatoryRosterUnitItem) {
    if (this.mandatoryRosterUnit == null) {
      this.mandatoryRosterUnit = new ArrayList<>();
    }
    this.mandatoryRosterUnit.add(mandatoryRosterUnitItem);
    return this;
  }

  /**
   * Get mandatoryRosterUnit
   * @return mandatoryRosterUnit
   */
  @javax.annotation.Nullable
  public List<MandatoryRosterUnit> getMandatoryRosterUnit() {
    return mandatoryRosterUnit;
  }

  public void setMandatoryRosterUnit(List<MandatoryRosterUnit> mandatoryRosterUnit) {
    this.mandatoryRosterUnit = mandatoryRosterUnit;
  }


  public EntryCategoryAllowed excludeCategoryId(List<String> excludeCategoryId) {
    this.excludeCategoryId = excludeCategoryId;
    return this;
  }

  public EntryCategoryAllowed addExcludeCategoryIdItem(String excludeCategoryIdItem) {
    if (this.excludeCategoryId == null) {
      this.excludeCategoryId = new ArrayList<>();
    }
    this.excludeCategoryId.add(excludeCategoryIdItem);
    return this;
  }

  /**
   * Get excludeCategoryId
   * @return excludeCategoryId
   */
  @javax.annotation.Nullable
  public List<String> getExcludeCategoryId() {
    return excludeCategoryId;
  }

  public void setExcludeCategoryId(List<String> excludeCategoryId) {
    this.excludeCategoryId = excludeCategoryId;
  }


  public EntryCategoryAllowed minimumRelicTier(RelicTier minimumRelicTier) {
    this.minimumRelicTier = minimumRelicTier;
    return this;
  }

  /**
   * Get minimumRelicTier
   * @return minimumRelicTier
   */
  @javax.annotation.Nullable
  public RelicTier getMinimumRelicTier() {
    return minimumRelicTier;
  }

  public void setMinimumRelicTier(RelicTier minimumRelicTier) {
    this.minimumRelicTier = minimumRelicTier;
  }


  public EntryCategoryAllowed minimumModRarity(Rarity minimumModRarity) {
    this.minimumModRarity = minimumModRarity;
    return this;
  }

  /**
   * Get minimumModRarity
   * @return minimumModRarity
   */
  @javax.annotation.Nullable
  public Rarity getMinimumModRarity() {
    return minimumModRarity;
  }

  public void setMinimumModRarity(Rarity minimumModRarity) {
    this.minimumModRarity = minimumModRarity;
  }


  public EntryCategoryAllowed minimumAbilityLevelAvg(Integer minimumAbilityLevelAvg) {
    this.minimumAbilityLevelAvg = minimumAbilityLevelAvg;
    return this;
  }

  /**
   * Get minimumAbilityLevelAvg
   * @return minimumAbilityLevelAvg
   */
  @javax.annotation.Nullable
  public Integer getMinimumAbilityLevelAvg() {
    return minimumAbilityLevelAvg;
  }

  public void setMinimumAbilityLevelAvg(Integer minimumAbilityLevelAvg) {
    this.minimumAbilityLevelAvg = minimumAbilityLevelAvg;
  }


  public EntryCategoryAllowed minimumAbilityLevelAll(Integer minimumAbilityLevelAll) {
    this.minimumAbilityLevelAll = minimumAbilityLevelAll;
    return this;
  }

  /**
   * Get minimumAbilityLevelAll
   * @return minimumAbilityLevelAll
   */
  @javax.annotation.Nullable
  public Integer getMinimumAbilityLevelAll() {
    return minimumAbilityLevelAll;
  }

  public void setMinimumAbilityLevelAll(Integer minimumAbilityLevelAll) {
    this.minimumAbilityLevelAll = minimumAbilityLevelAll;
  }


  public EntryCategoryAllowed legendLimit(Integer legendLimit) {
    this.legendLimit = legendLimit;
    return this;
  }

  /**
   * Get legendLimit
   * @return legendLimit
   */
  @javax.annotation.Nullable
  public Integer getLegendLimit() {
    return legendLimit;
  }

  public void setLegendLimit(Integer legendLimit) {
    this.legendLimit = legendLimit;
  }


  public EntryCategoryAllowed unitGuideMinimumRequiredUnitQuantity(Integer unitGuideMinimumRequiredUnitQuantity) {
    this.unitGuideMinimumRequiredUnitQuantity = unitGuideMinimumRequiredUnitQuantity;
    return this;
  }

  /**
   * Get unitGuideMinimumRequiredUnitQuantity
   * @return unitGuideMinimumRequiredUnitQuantity
   */
  @javax.annotation.Nullable
  public Integer getUnitGuideMinimumRequiredUnitQuantity() {
    return unitGuideMinimumRequiredUnitQuantity;
  }

  public void setUnitGuideMinimumRequiredUnitQuantity(Integer unitGuideMinimumRequiredUnitQuantity) {
    this.unitGuideMinimumRequiredUnitQuantity = unitGuideMinimumRequiredUnitQuantity;
  }


  public EntryCategoryAllowed bigUnitLimit(Integer bigUnitLimit) {
    this.bigUnitLimit = bigUnitLimit;
    return this;
  }

  /**
   * Get bigUnitLimit
   * @return bigUnitLimit
   */
  @javax.annotation.Nullable
  public Integer getBigUnitLimit() {
    return bigUnitLimit;
  }

  public void setBigUnitLimit(Integer bigUnitLimit) {
    this.bigUnitLimit = bigUnitLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryCategoryAllowed entryCategoryAllowed = (EntryCategoryAllowed) o;
    return Objects.equals(this.categoryId, entryCategoryAllowed.categoryId) &&
        Objects.equals(this.maximumAllowedUnitQuantity, entryCategoryAllowed.maximumAllowedUnitQuantity) &&
        Objects.equals(this.matchType, entryCategoryAllowed.matchType) &&
        Objects.equals(this.minimumRequiredUnitQuantity, entryCategoryAllowed.minimumRequiredUnitQuantity) &&
        Objects.equals(this.minimumUnitRarity, entryCategoryAllowed.minimumUnitRarity) &&
        Objects.equals(this.minimumOwnedUnitQuantity, entryCategoryAllowed.minimumOwnedUnitQuantity) &&
        Objects.equals(this.minimumUnitLevel, entryCategoryAllowed.minimumUnitLevel) &&
        Objects.equals(this.minimumUnitTier, entryCategoryAllowed.minimumUnitTier) &&
        Objects.equals(this.maximumReinforcement, entryCategoryAllowed.maximumReinforcement) &&
        Objects.equals(this.commanderCategoryId, entryCategoryAllowed.commanderCategoryId) &&
        Objects.equals(this.minimumReinforcement, entryCategoryAllowed.minimumReinforcement) &&
        Objects.equals(this.minimumGalacticPower, entryCategoryAllowed.minimumGalacticPower) &&
        Objects.equals(this.mandatoryRosterUnit, entryCategoryAllowed.mandatoryRosterUnit) &&
        Objects.equals(this.excludeCategoryId, entryCategoryAllowed.excludeCategoryId) &&
        Objects.equals(this.minimumRelicTier, entryCategoryAllowed.minimumRelicTier) &&
        Objects.equals(this.minimumModRarity, entryCategoryAllowed.minimumModRarity) &&
        Objects.equals(this.minimumAbilityLevelAvg, entryCategoryAllowed.minimumAbilityLevelAvg) &&
        Objects.equals(this.minimumAbilityLevelAll, entryCategoryAllowed.minimumAbilityLevelAll) &&
        Objects.equals(this.legendLimit, entryCategoryAllowed.legendLimit) &&
        Objects.equals(this.unitGuideMinimumRequiredUnitQuantity, entryCategoryAllowed.unitGuideMinimumRequiredUnitQuantity) &&
        Objects.equals(this.bigUnitLimit, entryCategoryAllowed.bigUnitLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, maximumAllowedUnitQuantity, matchType, minimumRequiredUnitQuantity, minimumUnitRarity, minimumOwnedUnitQuantity, minimumUnitLevel, minimumUnitTier, maximumReinforcement, commanderCategoryId, minimumReinforcement, minimumGalacticPower, mandatoryRosterUnit, excludeCategoryId, minimumRelicTier, minimumModRarity, minimumAbilityLevelAvg, minimumAbilityLevelAll, legendLimit, unitGuideMinimumRequiredUnitQuantity, bigUnitLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryCategoryAllowed {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    maximumAllowedUnitQuantity: ").append(toIndentedString(maximumAllowedUnitQuantity)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    minimumRequiredUnitQuantity: ").append(toIndentedString(minimumRequiredUnitQuantity)).append("\n");
    sb.append("    minimumUnitRarity: ").append(toIndentedString(minimumUnitRarity)).append("\n");
    sb.append("    minimumOwnedUnitQuantity: ").append(toIndentedString(minimumOwnedUnitQuantity)).append("\n");
    sb.append("    minimumUnitLevel: ").append(toIndentedString(minimumUnitLevel)).append("\n");
    sb.append("    minimumUnitTier: ").append(toIndentedString(minimumUnitTier)).append("\n");
    sb.append("    maximumReinforcement: ").append(toIndentedString(maximumReinforcement)).append("\n");
    sb.append("    commanderCategoryId: ").append(toIndentedString(commanderCategoryId)).append("\n");
    sb.append("    minimumReinforcement: ").append(toIndentedString(minimumReinforcement)).append("\n");
    sb.append("    minimumGalacticPower: ").append(toIndentedString(minimumGalacticPower)).append("\n");
    sb.append("    mandatoryRosterUnit: ").append(toIndentedString(mandatoryRosterUnit)).append("\n");
    sb.append("    excludeCategoryId: ").append(toIndentedString(excludeCategoryId)).append("\n");
    sb.append("    minimumRelicTier: ").append(toIndentedString(minimumRelicTier)).append("\n");
    sb.append("    minimumModRarity: ").append(toIndentedString(minimumModRarity)).append("\n");
    sb.append("    minimumAbilityLevelAvg: ").append(toIndentedString(minimumAbilityLevelAvg)).append("\n");
    sb.append("    minimumAbilityLevelAll: ").append(toIndentedString(minimumAbilityLevelAll)).append("\n");
    sb.append("    legendLimit: ").append(toIndentedString(legendLimit)).append("\n");
    sb.append("    unitGuideMinimumRequiredUnitQuantity: ").append(toIndentedString(unitGuideMinimumRequiredUnitQuantity)).append("\n");
    sb.append("    bigUnitLimit: ").append(toIndentedString(bigUnitLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("maximumAllowedUnitQuantity");
    openapiFields.add("matchType");
    openapiFields.add("minimumRequiredUnitQuantity");
    openapiFields.add("minimumUnitRarity");
    openapiFields.add("minimumOwnedUnitQuantity");
    openapiFields.add("minimumUnitLevel");
    openapiFields.add("minimumUnitTier");
    openapiFields.add("maximumReinforcement");
    openapiFields.add("commanderCategoryId");
    openapiFields.add("minimumReinforcement");
    openapiFields.add("minimumGalacticPower");
    openapiFields.add("mandatoryRosterUnit");
    openapiFields.add("excludeCategoryId");
    openapiFields.add("minimumRelicTier");
    openapiFields.add("minimumModRarity");
    openapiFields.add("minimumAbilityLevelAvg");
    openapiFields.add("minimumAbilityLevelAll");
    openapiFields.add("legendLimit");
    openapiFields.add("unitGuideMinimumRequiredUnitQuantity");
    openapiFields.add("bigUnitLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryCategoryAllowed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryCategoryAllowed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryCategoryAllowed is not found in the empty JSON string", EntryCategoryAllowed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryCategoryAllowed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryCategoryAllowed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull() && !jsonObj.get("categoryId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be an array in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      // validate the optional field `matchType`
      if (jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) {
        CategoryMatchType.validateJsonElement(jsonObj.get("matchType"));
      }
      // validate the optional field `minimumUnitRarity`
      if (jsonObj.get("minimumUnitRarity") != null && !jsonObj.get("minimumUnitRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("minimumUnitRarity"));
      }
      // validate the optional field `minimumUnitTier`
      if (jsonObj.get("minimumUnitTier") != null && !jsonObj.get("minimumUnitTier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("minimumUnitTier"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("commanderCategoryId") != null && !jsonObj.get("commanderCategoryId").isJsonNull() && !jsonObj.get("commanderCategoryId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `commanderCategoryId` to be an array in the JSON string but got `%s`", jsonObj.get("commanderCategoryId").toString()));
      }
      if (jsonObj.get("mandatoryRosterUnit") != null && !jsonObj.get("mandatoryRosterUnit").isJsonNull()) {
        JsonArray jsonArraymandatoryRosterUnit = jsonObj.getAsJsonArray("mandatoryRosterUnit");
        if (jsonArraymandatoryRosterUnit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mandatoryRosterUnit").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mandatoryRosterUnit` to be an array in the JSON string but got `%s`", jsonObj.get("mandatoryRosterUnit").toString()));
          }

          // validate the optional field `mandatoryRosterUnit` (array)
          for (int i = 0; i < jsonArraymandatoryRosterUnit.size(); i++) {
            MandatoryRosterUnit.validateJsonElement(jsonArraymandatoryRosterUnit.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeCategoryId") != null && !jsonObj.get("excludeCategoryId").isJsonNull() && !jsonObj.get("excludeCategoryId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeCategoryId` to be an array in the JSON string but got `%s`", jsonObj.get("excludeCategoryId").toString()));
      }
      // validate the optional field `minimumRelicTier`
      if (jsonObj.get("minimumRelicTier") != null && !jsonObj.get("minimumRelicTier").isJsonNull()) {
        RelicTier.validateJsonElement(jsonObj.get("minimumRelicTier"));
      }
      // validate the optional field `minimumModRarity`
      if (jsonObj.get("minimumModRarity") != null && !jsonObj.get("minimumModRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("minimumModRarity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryCategoryAllowed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryCategoryAllowed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryCategoryAllowed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryCategoryAllowed.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryCategoryAllowed>() {
           @Override
           public void write(JsonWriter out, EntryCategoryAllowed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryCategoryAllowed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryCategoryAllowed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryCategoryAllowed
   * @throws IOException if the JSON string is invalid with respect to EntryCategoryAllowed
   */
  public static EntryCategoryAllowed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryCategoryAllowed.class);
  }

  /**
   * Convert an instance of EntryCategoryAllowed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

