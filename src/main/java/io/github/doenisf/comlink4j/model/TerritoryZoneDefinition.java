/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.Requirement;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryZoneDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryZoneDefinition {
  public static final String SERIALIZED_NAME_ZONE_ID = "zoneId";
  @SerializedName(SERIALIZED_NAME_ZONE_ID)
  private String zoneId;

  public static final String SERIALIZED_NAME_PREFAB_NAME = "prefabName";
  @SerializedName(SERIALIZED_NAME_PREFAB_NAME)
  private String prefabName;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESCRIPTION_KEY = "descriptionKey";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_KEY)
  private String descriptionKey;

  public static final String SERIALIZED_NAME_LINKED_CONFLICT_ID = "linkedConflictId";
  @SerializedName(SERIALIZED_NAME_LINKED_CONFLICT_ID)
  private String linkedConflictId;

  public static final String SERIALIZED_NAME_MAX_ATTEMPTS_ALLOWED = "maxAttemptsAllowed";
  @SerializedName(SERIALIZED_NAME_MAX_ATTEMPTS_ALLOWED)
  private Integer maxAttemptsAllowed;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT = "unlockRequirement";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT)
  private Requirement unlockRequirement;

  public static final String SERIALIZED_NAME_MAX_UNIT_COUNT_PER_PLAYER = "maxUnitCountPerPlayer";
  @SerializedName(SERIALIZED_NAME_MAX_UNIT_COUNT_PER_PLAYER)
  private Integer maxUnitCountPerPlayer;

  public static final String SERIALIZED_NAME_GRANTED_ABILITIES = "grantedAbilities";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITIES)
  private List<MissionGrantedAbility> grantedAbilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL_VIEW_ICON_OVERRIDE_NAME = "detailViewIconOverrideName";
  @SerializedName(SERIALIZED_NAME_DETAIL_VIEW_ICON_OVERRIDE_NAME)
  private String detailViewIconOverrideName;

  public static final String SERIALIZED_NAME_MAP_ICON_OVERRIDE_NAME = "mapIconOverrideName";
  @SerializedName(SERIALIZED_NAME_MAP_ICON_OVERRIDE_NAME)
  private String mapIconOverrideName;

  public TerritoryZoneDefinition() {
  }

  public TerritoryZoneDefinition zoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  /**
   * Get zoneId
   * @return zoneId
   */
  @javax.annotation.Nullable
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(String zoneId) {
    this.zoneId = zoneId;
  }


  public TerritoryZoneDefinition prefabName(String prefabName) {
    this.prefabName = prefabName;
    return this;
  }

  /**
   * Get prefabName
   * @return prefabName
   */
  @javax.annotation.Nullable
  public String getPrefabName() {
    return prefabName;
  }

  public void setPrefabName(String prefabName) {
    this.prefabName = prefabName;
  }


  public TerritoryZoneDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public TerritoryZoneDefinition descriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
    return this;
  }

  /**
   * Get descriptionKey
   * @return descriptionKey
   */
  @javax.annotation.Nullable
  public String getDescriptionKey() {
    return descriptionKey;
  }

  public void setDescriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
  }


  public TerritoryZoneDefinition linkedConflictId(String linkedConflictId) {
    this.linkedConflictId = linkedConflictId;
    return this;
  }

  /**
   * Get linkedConflictId
   * @return linkedConflictId
   */
  @javax.annotation.Nullable
  public String getLinkedConflictId() {
    return linkedConflictId;
  }

  public void setLinkedConflictId(String linkedConflictId) {
    this.linkedConflictId = linkedConflictId;
  }


  public TerritoryZoneDefinition maxAttemptsAllowed(Integer maxAttemptsAllowed) {
    this.maxAttemptsAllowed = maxAttemptsAllowed;
    return this;
  }

  /**
   * Get maxAttemptsAllowed
   * @return maxAttemptsAllowed
   */
  @javax.annotation.Nullable
  public Integer getMaxAttemptsAllowed() {
    return maxAttemptsAllowed;
  }

  public void setMaxAttemptsAllowed(Integer maxAttemptsAllowed) {
    this.maxAttemptsAllowed = maxAttemptsAllowed;
  }


  public TerritoryZoneDefinition unlockRequirement(Requirement unlockRequirement) {
    this.unlockRequirement = unlockRequirement;
    return this;
  }

  /**
   * Get unlockRequirement
   * @return unlockRequirement
   */
  @javax.annotation.Nullable
  public Requirement getUnlockRequirement() {
    return unlockRequirement;
  }

  public void setUnlockRequirement(Requirement unlockRequirement) {
    this.unlockRequirement = unlockRequirement;
  }


  public TerritoryZoneDefinition maxUnitCountPerPlayer(Integer maxUnitCountPerPlayer) {
    this.maxUnitCountPerPlayer = maxUnitCountPerPlayer;
    return this;
  }

  /**
   * Get maxUnitCountPerPlayer
   * @return maxUnitCountPerPlayer
   */
  @javax.annotation.Nullable
  public Integer getMaxUnitCountPerPlayer() {
    return maxUnitCountPerPlayer;
  }

  public void setMaxUnitCountPerPlayer(Integer maxUnitCountPerPlayer) {
    this.maxUnitCountPerPlayer = maxUnitCountPerPlayer;
  }


  public TerritoryZoneDefinition grantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
    return this;
  }

  public TerritoryZoneDefinition addGrantedAbilitiesItem(MissionGrantedAbility grantedAbilitiesItem) {
    if (this.grantedAbilities == null) {
      this.grantedAbilities = new ArrayList<>();
    }
    this.grantedAbilities.add(grantedAbilitiesItem);
    return this;
  }

  /**
   * Get grantedAbilities
   * @return grantedAbilities
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbilities() {
    return grantedAbilities;
  }

  public void setGrantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
  }


  public TerritoryZoneDefinition detailViewIconOverrideName(String detailViewIconOverrideName) {
    this.detailViewIconOverrideName = detailViewIconOverrideName;
    return this;
  }

  /**
   * Get detailViewIconOverrideName
   * @return detailViewIconOverrideName
   */
  @javax.annotation.Nullable
  public String getDetailViewIconOverrideName() {
    return detailViewIconOverrideName;
  }

  public void setDetailViewIconOverrideName(String detailViewIconOverrideName) {
    this.detailViewIconOverrideName = detailViewIconOverrideName;
  }


  public TerritoryZoneDefinition mapIconOverrideName(String mapIconOverrideName) {
    this.mapIconOverrideName = mapIconOverrideName;
    return this;
  }

  /**
   * Get mapIconOverrideName
   * @return mapIconOverrideName
   */
  @javax.annotation.Nullable
  public String getMapIconOverrideName() {
    return mapIconOverrideName;
  }

  public void setMapIconOverrideName(String mapIconOverrideName) {
    this.mapIconOverrideName = mapIconOverrideName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryZoneDefinition territoryZoneDefinition = (TerritoryZoneDefinition) o;
    return Objects.equals(this.zoneId, territoryZoneDefinition.zoneId) &&
        Objects.equals(this.prefabName, territoryZoneDefinition.prefabName) &&
        Objects.equals(this.nameKey, territoryZoneDefinition.nameKey) &&
        Objects.equals(this.descriptionKey, territoryZoneDefinition.descriptionKey) &&
        Objects.equals(this.linkedConflictId, territoryZoneDefinition.linkedConflictId) &&
        Objects.equals(this.maxAttemptsAllowed, territoryZoneDefinition.maxAttemptsAllowed) &&
        Objects.equals(this.unlockRequirement, territoryZoneDefinition.unlockRequirement) &&
        Objects.equals(this.maxUnitCountPerPlayer, territoryZoneDefinition.maxUnitCountPerPlayer) &&
        Objects.equals(this.grantedAbilities, territoryZoneDefinition.grantedAbilities) &&
        Objects.equals(this.detailViewIconOverrideName, territoryZoneDefinition.detailViewIconOverrideName) &&
        Objects.equals(this.mapIconOverrideName, territoryZoneDefinition.mapIconOverrideName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneId, prefabName, nameKey, descriptionKey, linkedConflictId, maxAttemptsAllowed, unlockRequirement, maxUnitCountPerPlayer, grantedAbilities, detailViewIconOverrideName, mapIconOverrideName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryZoneDefinition {\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("    prefabName: ").append(toIndentedString(prefabName)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descriptionKey: ").append(toIndentedString(descriptionKey)).append("\n");
    sb.append("    linkedConflictId: ").append(toIndentedString(linkedConflictId)).append("\n");
    sb.append("    maxAttemptsAllowed: ").append(toIndentedString(maxAttemptsAllowed)).append("\n");
    sb.append("    unlockRequirement: ").append(toIndentedString(unlockRequirement)).append("\n");
    sb.append("    maxUnitCountPerPlayer: ").append(toIndentedString(maxUnitCountPerPlayer)).append("\n");
    sb.append("    grantedAbilities: ").append(toIndentedString(grantedAbilities)).append("\n");
    sb.append("    detailViewIconOverrideName: ").append(toIndentedString(detailViewIconOverrideName)).append("\n");
    sb.append("    mapIconOverrideName: ").append(toIndentedString(mapIconOverrideName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("zoneId");
    openapiFields.add("prefabName");
    openapiFields.add("nameKey");
    openapiFields.add("descriptionKey");
    openapiFields.add("linkedConflictId");
    openapiFields.add("maxAttemptsAllowed");
    openapiFields.add("unlockRequirement");
    openapiFields.add("maxUnitCountPerPlayer");
    openapiFields.add("grantedAbilities");
    openapiFields.add("detailViewIconOverrideName");
    openapiFields.add("mapIconOverrideName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryZoneDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryZoneDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryZoneDefinition is not found in the empty JSON string", TerritoryZoneDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryZoneDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryZoneDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("zoneId") != null && !jsonObj.get("zoneId").isJsonNull()) && !jsonObj.get("zoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneId").toString()));
      }
      if ((jsonObj.get("prefabName") != null && !jsonObj.get("prefabName").isJsonNull()) && !jsonObj.get("prefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefabName").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descriptionKey") != null && !jsonObj.get("descriptionKey").isJsonNull()) && !jsonObj.get("descriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionKey").toString()));
      }
      if ((jsonObj.get("linkedConflictId") != null && !jsonObj.get("linkedConflictId").isJsonNull()) && !jsonObj.get("linkedConflictId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedConflictId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedConflictId").toString()));
      }
      // validate the optional field `unlockRequirement`
      if (jsonObj.get("unlockRequirement") != null && !jsonObj.get("unlockRequirement").isJsonNull()) {
        Requirement.validateJsonElement(jsonObj.get("unlockRequirement"));
      }
      if (jsonObj.get("grantedAbilities") != null && !jsonObj.get("grantedAbilities").isJsonNull()) {
        JsonArray jsonArraygrantedAbilities = jsonObj.getAsJsonArray("grantedAbilities");
        if (jsonArraygrantedAbilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbilities` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbilities").toString()));
          }

          // validate the optional field `grantedAbilities` (array)
          for (int i = 0; i < jsonArraygrantedAbilities.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbilities.get(i));
          };
        }
      }
      if ((jsonObj.get("detailViewIconOverrideName") != null && !jsonObj.get("detailViewIconOverrideName").isJsonNull()) && !jsonObj.get("detailViewIconOverrideName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailViewIconOverrideName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailViewIconOverrideName").toString()));
      }
      if ((jsonObj.get("mapIconOverrideName") != null && !jsonObj.get("mapIconOverrideName").isJsonNull()) && !jsonObj.get("mapIconOverrideName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapIconOverrideName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapIconOverrideName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryZoneDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryZoneDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryZoneDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryZoneDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryZoneDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryZoneDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryZoneDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryZoneDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryZoneDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryZoneDefinition
   */
  public static TerritoryZoneDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryZoneDefinition.class);
  }

  /**
   * Convert an instance of TerritoryZoneDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

