/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.BattleTargetingTactic;
import io.github.doenisf.comlink4j.model.DatacronBattleStat;
import io.github.doenisf.comlink4j.model.SquadCell;
import io.github.doenisf.comlink4j.model.SquadType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * Squad
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Squad {
  public static final String SERIALIZED_NAME_CELL = "cell";
  @SerializedName(SERIALIZED_NAME_CELL)
  private List<SquadCell> cell = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETING_TACTIC = "targetingTactic";
  @SerializedName(SERIALIZED_NAME_TARGETING_TACTIC)
  private BattleTargetingTactic targetingTactic;

  public static final String SERIALIZED_NAME_SQUAD_TYPE = "squadType";
  @SerializedName(SERIALIZED_NAME_SQUAD_TYPE)
  private SquadType squadType;

  public static final String SERIALIZED_NAME_TARGETING_SET_ID = "targetingSetId";
  @SerializedName(SERIALIZED_NAME_TARGETING_SET_ID)
  private String targetingSetId;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private Long expireTime;

  public static final String SERIALIZED_NAME_LAST_SAVE_TIME = "lastSaveTime";
  @SerializedName(SERIALIZED_NAME_LAST_SAVE_TIME)
  private Long lastSaveTime;

  public static final String SERIALIZED_NAME_SUPPORT_INHERIT_FROM_DEFINITION_ID = "supportInheritFromDefinitionId";
  @SerializedName(SERIALIZED_NAME_SUPPORT_INHERIT_FROM_DEFINITION_ID)
  private String supportInheritFromDefinitionId;

  public static final String SERIALIZED_NAME_DATACRON = "datacron";
  @SerializedName(SERIALIZED_NAME_DATACRON)
  private DatacronBattleStat datacron;

  public Squad() {
  }

  public Squad cell(List<SquadCell> cell) {
    this.cell = cell;
    return this;
  }

  public Squad addCellItem(SquadCell cellItem) {
    if (this.cell == null) {
      this.cell = new ArrayList<>();
    }
    this.cell.add(cellItem);
    return this;
  }

  /**
   * Get cell
   * @return cell
   */
  @javax.annotation.Nullable
  public List<SquadCell> getCell() {
    return cell;
  }

  public void setCell(List<SquadCell> cell) {
    this.cell = cell;
  }


  public Squad targetingTactic(BattleTargetingTactic targetingTactic) {
    this.targetingTactic = targetingTactic;
    return this;
  }

  /**
   * Get targetingTactic
   * @return targetingTactic
   */
  @javax.annotation.Nullable
  public BattleTargetingTactic getTargetingTactic() {
    return targetingTactic;
  }

  public void setTargetingTactic(BattleTargetingTactic targetingTactic) {
    this.targetingTactic = targetingTactic;
  }


  public Squad squadType(SquadType squadType) {
    this.squadType = squadType;
    return this;
  }

  /**
   * Get squadType
   * @return squadType
   */
  @javax.annotation.Nullable
  public SquadType getSquadType() {
    return squadType;
  }

  public void setSquadType(SquadType squadType) {
    this.squadType = squadType;
  }


  public Squad targetingSetId(String targetingSetId) {
    this.targetingSetId = targetingSetId;
    return this;
  }

  /**
   * Get targetingSetId
   * @return targetingSetId
   */
  @javax.annotation.Nullable
  public String getTargetingSetId() {
    return targetingSetId;
  }

  public void setTargetingSetId(String targetingSetId) {
    this.targetingSetId = targetingSetId;
  }


  public Squad expireTime(Long expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Get expireTime
   * @return expireTime
   */
  @javax.annotation.Nullable
  public Long getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(Long expireTime) {
    this.expireTime = expireTime;
  }


  public Squad lastSaveTime(Long lastSaveTime) {
    this.lastSaveTime = lastSaveTime;
    return this;
  }

  /**
   * Get lastSaveTime
   * @return lastSaveTime
   */
  @javax.annotation.Nullable
  public Long getLastSaveTime() {
    return lastSaveTime;
  }

  public void setLastSaveTime(Long lastSaveTime) {
    this.lastSaveTime = lastSaveTime;
  }


  public Squad supportInheritFromDefinitionId(String supportInheritFromDefinitionId) {
    this.supportInheritFromDefinitionId = supportInheritFromDefinitionId;
    return this;
  }

  /**
   * Get supportInheritFromDefinitionId
   * @return supportInheritFromDefinitionId
   */
  @javax.annotation.Nullable
  public String getSupportInheritFromDefinitionId() {
    return supportInheritFromDefinitionId;
  }

  public void setSupportInheritFromDefinitionId(String supportInheritFromDefinitionId) {
    this.supportInheritFromDefinitionId = supportInheritFromDefinitionId;
  }


  public Squad datacron(DatacronBattleStat datacron) {
    this.datacron = datacron;
    return this;
  }

  /**
   * Get datacron
   * @return datacron
   */
  @javax.annotation.Nullable
  public DatacronBattleStat getDatacron() {
    return datacron;
  }

  public void setDatacron(DatacronBattleStat datacron) {
    this.datacron = datacron;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Squad squad = (Squad) o;
    return Objects.equals(this.cell, squad.cell) &&
        Objects.equals(this.targetingTactic, squad.targetingTactic) &&
        Objects.equals(this.squadType, squad.squadType) &&
        Objects.equals(this.targetingSetId, squad.targetingSetId) &&
        Objects.equals(this.expireTime, squad.expireTime) &&
        Objects.equals(this.lastSaveTime, squad.lastSaveTime) &&
        Objects.equals(this.supportInheritFromDefinitionId, squad.supportInheritFromDefinitionId) &&
        Objects.equals(this.datacron, squad.datacron);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cell, targetingTactic, squadType, targetingSetId, expireTime, lastSaveTime, supportInheritFromDefinitionId, datacron);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Squad {\n");
    sb.append("    cell: ").append(toIndentedString(cell)).append("\n");
    sb.append("    targetingTactic: ").append(toIndentedString(targetingTactic)).append("\n");
    sb.append("    squadType: ").append(toIndentedString(squadType)).append("\n");
    sb.append("    targetingSetId: ").append(toIndentedString(targetingSetId)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    lastSaveTime: ").append(toIndentedString(lastSaveTime)).append("\n");
    sb.append("    supportInheritFromDefinitionId: ").append(toIndentedString(supportInheritFromDefinitionId)).append("\n");
    sb.append("    datacron: ").append(toIndentedString(datacron)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cell");
    openapiFields.add("targetingTactic");
    openapiFields.add("squadType");
    openapiFields.add("targetingSetId");
    openapiFields.add("expireTime");
    openapiFields.add("lastSaveTime");
    openapiFields.add("supportInheritFromDefinitionId");
    openapiFields.add("datacron");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Squad
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Squad.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Squad is not found in the empty JSON string", Squad.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Squad.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Squad` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cell") != null && !jsonObj.get("cell").isJsonNull()) {
        JsonArray jsonArraycell = jsonObj.getAsJsonArray("cell");
        if (jsonArraycell != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cell").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cell` to be an array in the JSON string but got `%s`", jsonObj.get("cell").toString()));
          }

          // validate the optional field `cell` (array)
          for (int i = 0; i < jsonArraycell.size(); i++) {
            SquadCell.validateJsonElement(jsonArraycell.get(i));
          };
        }
      }
      // validate the optional field `targetingTactic`
      if (jsonObj.get("targetingTactic") != null && !jsonObj.get("targetingTactic").isJsonNull()) {
        BattleTargetingTactic.validateJsonElement(jsonObj.get("targetingTactic"));
      }
      // validate the optional field `squadType`
      if (jsonObj.get("squadType") != null && !jsonObj.get("squadType").isJsonNull()) {
        SquadType.validateJsonElement(jsonObj.get("squadType"));
      }
      if ((jsonObj.get("targetingSetId") != null && !jsonObj.get("targetingSetId").isJsonNull()) && !jsonObj.get("targetingSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetingSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetingSetId").toString()));
      }
      if ((jsonObj.get("supportInheritFromDefinitionId") != null && !jsonObj.get("supportInheritFromDefinitionId").isJsonNull()) && !jsonObj.get("supportInheritFromDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportInheritFromDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportInheritFromDefinitionId").toString()));
      }
      // validate the optional field `datacron`
      if (jsonObj.get("datacron") != null && !jsonObj.get("datacron").isJsonNull()) {
        DatacronBattleStat.validateJsonElement(jsonObj.get("datacron"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Squad.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Squad' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Squad> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Squad.class));

       return (TypeAdapter<T>) new TypeAdapter<Squad>() {
           @Override
           public void write(JsonWriter out, Squad value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Squad read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Squad given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Squad
   * @throws IOException if the JSON string is invalid with respect to Squad
   */
  public static Squad fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Squad.class);
  }

  /**
   * Convert an instance of Squad to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

