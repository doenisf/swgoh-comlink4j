/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.UnitStat;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * Stat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Stat {
  public static final String SERIALIZED_NAME_UNIT_STAT_ID = "unitStatId";
  @SerializedName(SERIALIZED_NAME_UNIT_STAT_ID)
  private UnitStat unitStatId;

  public static final String SERIALIZED_NAME_STAT_VALUE_DECIMAL = "statValueDecimal";
  @SerializedName(SERIALIZED_NAME_STAT_VALUE_DECIMAL)
  private Long statValueDecimal;

  public static final String SERIALIZED_NAME_UNSCALED_DECIMAL_VALUE = "unscaledDecimalValue";
  @SerializedName(SERIALIZED_NAME_UNSCALED_DECIMAL_VALUE)
  private Long unscaledDecimalValue;

  public static final String SERIALIZED_NAME_UI_DISPLAY_OVERRIDE_VALUE = "uiDisplayOverrideValue";
  @SerializedName(SERIALIZED_NAME_UI_DISPLAY_OVERRIDE_VALUE)
  private Long uiDisplayOverrideValue;

  public static final String SERIALIZED_NAME_SCALAR = "scalar";
  @SerializedName(SERIALIZED_NAME_SCALAR)
  private Long scalar;

  public Stat() {
  }

  public Stat unitStatId(UnitStat unitStatId) {
    this.unitStatId = unitStatId;
    return this;
  }

  /**
   * Get unitStatId
   * @return unitStatId
   */
  @javax.annotation.Nullable
  public UnitStat getUnitStatId() {
    return unitStatId;
  }

  public void setUnitStatId(UnitStat unitStatId) {
    this.unitStatId = unitStatId;
  }


  public Stat statValueDecimal(Long statValueDecimal) {
    this.statValueDecimal = statValueDecimal;
    return this;
  }

  /**
   * Get statValueDecimal
   * @return statValueDecimal
   */
  @javax.annotation.Nullable
  public Long getStatValueDecimal() {
    return statValueDecimal;
  }

  public void setStatValueDecimal(Long statValueDecimal) {
    this.statValueDecimal = statValueDecimal;
  }


  public Stat unscaledDecimalValue(Long unscaledDecimalValue) {
    this.unscaledDecimalValue = unscaledDecimalValue;
    return this;
  }

  /**
   * Get unscaledDecimalValue
   * @return unscaledDecimalValue
   */
  @javax.annotation.Nullable
  public Long getUnscaledDecimalValue() {
    return unscaledDecimalValue;
  }

  public void setUnscaledDecimalValue(Long unscaledDecimalValue) {
    this.unscaledDecimalValue = unscaledDecimalValue;
  }


  public Stat uiDisplayOverrideValue(Long uiDisplayOverrideValue) {
    this.uiDisplayOverrideValue = uiDisplayOverrideValue;
    return this;
  }

  /**
   * Get uiDisplayOverrideValue
   * @return uiDisplayOverrideValue
   */
  @javax.annotation.Nullable
  public Long getUiDisplayOverrideValue() {
    return uiDisplayOverrideValue;
  }

  public void setUiDisplayOverrideValue(Long uiDisplayOverrideValue) {
    this.uiDisplayOverrideValue = uiDisplayOverrideValue;
  }


  public Stat scalar(Long scalar) {
    this.scalar = scalar;
    return this;
  }

  /**
   * Get scalar
   * @return scalar
   */
  @javax.annotation.Nullable
  public Long getScalar() {
    return scalar;
  }

  public void setScalar(Long scalar) {
    this.scalar = scalar;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stat stat = (Stat) o;
    return Objects.equals(this.unitStatId, stat.unitStatId) &&
        Objects.equals(this.statValueDecimal, stat.statValueDecimal) &&
        Objects.equals(this.unscaledDecimalValue, stat.unscaledDecimalValue) &&
        Objects.equals(this.uiDisplayOverrideValue, stat.uiDisplayOverrideValue) &&
        Objects.equals(this.scalar, stat.scalar);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitStatId, statValueDecimal, unscaledDecimalValue, uiDisplayOverrideValue, scalar);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stat {\n");
    sb.append("    unitStatId: ").append(toIndentedString(unitStatId)).append("\n");
    sb.append("    statValueDecimal: ").append(toIndentedString(statValueDecimal)).append("\n");
    sb.append("    unscaledDecimalValue: ").append(toIndentedString(unscaledDecimalValue)).append("\n");
    sb.append("    uiDisplayOverrideValue: ").append(toIndentedString(uiDisplayOverrideValue)).append("\n");
    sb.append("    scalar: ").append(toIndentedString(scalar)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unitStatId");
    openapiFields.add("statValueDecimal");
    openapiFields.add("unscaledDecimalValue");
    openapiFields.add("uiDisplayOverrideValue");
    openapiFields.add("scalar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Stat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Stat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stat is not found in the empty JSON string", Stat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Stat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `unitStatId`
      if (jsonObj.get("unitStatId") != null && !jsonObj.get("unitStatId").isJsonNull()) {
        UnitStat.validateJsonElement(jsonObj.get("unitStatId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stat.class));

       return (TypeAdapter<T>) new TypeAdapter<Stat>() {
           @Override
           public void write(JsonWriter out, Stat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Stat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Stat
   * @throws IOException if the JSON string is invalid with respect to Stat
   */
  public static Stat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stat.class);
  }

  /**
   * Convert an instance of Stat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

