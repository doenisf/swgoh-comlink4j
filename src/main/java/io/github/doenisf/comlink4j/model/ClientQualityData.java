/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.*;

/**
 * ClientQualityData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ClientQualityData {
  public static final String SERIALIZED_NAME_PERFORMANCE_LEVEL = "performanceLevel";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_LEVEL)
  private PerformanceLevel performanceLevel;

  public static final String SERIALIZED_NAME_MEMORY_LEVEL = "memoryLevel";
  @SerializedName(SERIALIZED_NAME_MEMORY_LEVEL)
  private MemoryLevel memoryLevel;

  public static final String SERIALIZED_NAME_GC_ACTIVITY_LEVEL = "gcActivityLevel";
  @SerializedName(SERIALIZED_NAME_GC_ACTIVITY_LEVEL)
  private GcActivityLevel gcActivityLevel;

  public static final String SERIALIZED_NAME_VFX_ALLOCATION_LEVEL = "vfxAllocationLevel";
  @SerializedName(SERIALIZED_NAME_VFX_ALLOCATION_LEVEL)
  private VfxAllocationLevel vfxAllocationLevel;

  public static final String SERIALIZED_NAME_FLAG = "flag";
  @SerializedName(SERIALIZED_NAME_FLAG)
  private List<String> flag = new ArrayList<>();

  public ClientQualityData() {
  }

  public ClientQualityData performanceLevel(PerformanceLevel performanceLevel) {
    this.performanceLevel = performanceLevel;
    return this;
  }

  /**
   * Get performanceLevel
   * @return performanceLevel
   */
  @javax.annotation.Nullable
  public PerformanceLevel getPerformanceLevel() {
    return performanceLevel;
  }

  public void setPerformanceLevel(PerformanceLevel performanceLevel) {
    this.performanceLevel = performanceLevel;
  }


  public ClientQualityData memoryLevel(MemoryLevel memoryLevel) {
    this.memoryLevel = memoryLevel;
    return this;
  }

  /**
   * Get memoryLevel
   * @return memoryLevel
   */
  @javax.annotation.Nullable
  public MemoryLevel getMemoryLevel() {
    return memoryLevel;
  }

  public void setMemoryLevel(MemoryLevel memoryLevel) {
    this.memoryLevel = memoryLevel;
  }


  public ClientQualityData gcActivityLevel(GcActivityLevel gcActivityLevel) {
    this.gcActivityLevel = gcActivityLevel;
    return this;
  }

  /**
   * Get gcActivityLevel
   * @return gcActivityLevel
   */
  @javax.annotation.Nullable
  public GcActivityLevel getGcActivityLevel() {
    return gcActivityLevel;
  }

  public void setGcActivityLevel(GcActivityLevel gcActivityLevel) {
    this.gcActivityLevel = gcActivityLevel;
  }


  public ClientQualityData vfxAllocationLevel(VfxAllocationLevel vfxAllocationLevel) {
    this.vfxAllocationLevel = vfxAllocationLevel;
    return this;
  }

  /**
   * Get vfxAllocationLevel
   * @return vfxAllocationLevel
   */
  @javax.annotation.Nullable
  public VfxAllocationLevel getVfxAllocationLevel() {
    return vfxAllocationLevel;
  }

  public void setVfxAllocationLevel(VfxAllocationLevel vfxAllocationLevel) {
    this.vfxAllocationLevel = vfxAllocationLevel;
  }


  public ClientQualityData flag(List<String> flag) {
    this.flag = flag;
    return this;
  }

  public ClientQualityData addFlagItem(String flagItem) {
    if (this.flag == null) {
      this.flag = new ArrayList<>();
    }
    this.flag.add(flagItem);
    return this;
  }

  /**
   * Get flag
   * @return flag
   */
  @javax.annotation.Nullable
  public List<String> getFlag() {
    return flag;
  }

  public void setFlag(List<String> flag) {
    this.flag = flag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientQualityData clientQualityData = (ClientQualityData) o;
    return Objects.equals(this.performanceLevel, clientQualityData.performanceLevel) &&
        Objects.equals(this.memoryLevel, clientQualityData.memoryLevel) &&
        Objects.equals(this.gcActivityLevel, clientQualityData.gcActivityLevel) &&
        Objects.equals(this.vfxAllocationLevel, clientQualityData.vfxAllocationLevel) &&
        Objects.equals(this.flag, clientQualityData.flag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(performanceLevel, memoryLevel, gcActivityLevel, vfxAllocationLevel, flag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientQualityData {\n");
    sb.append("    performanceLevel: ").append(toIndentedString(performanceLevel)).append("\n");
    sb.append("    memoryLevel: ").append(toIndentedString(memoryLevel)).append("\n");
    sb.append("    gcActivityLevel: ").append(toIndentedString(gcActivityLevel)).append("\n");
    sb.append("    vfxAllocationLevel: ").append(toIndentedString(vfxAllocationLevel)).append("\n");
    sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("performanceLevel");
    openapiFields.add("memoryLevel");
    openapiFields.add("gcActivityLevel");
    openapiFields.add("vfxAllocationLevel");
    openapiFields.add("flag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientQualityData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientQualityData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientQualityData is not found in the empty JSON string", ClientQualityData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientQualityData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientQualityData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `performanceLevel`
      if (jsonObj.get("performanceLevel") != null && !jsonObj.get("performanceLevel").isJsonNull()) {
        PerformanceLevel.validateJsonElement(jsonObj.get("performanceLevel"));
      }
      // validate the optional field `memoryLevel`
      if (jsonObj.get("memoryLevel") != null && !jsonObj.get("memoryLevel").isJsonNull()) {
        MemoryLevel.validateJsonElement(jsonObj.get("memoryLevel"));
      }
      // validate the optional field `gcActivityLevel`
      if (jsonObj.get("gcActivityLevel") != null && !jsonObj.get("gcActivityLevel").isJsonNull()) {
        GcActivityLevel.validateJsonElement(jsonObj.get("gcActivityLevel"));
      }
      // validate the optional field `vfxAllocationLevel`
      if (jsonObj.get("vfxAllocationLevel") != null && !jsonObj.get("vfxAllocationLevel").isJsonNull()) {
        VfxAllocationLevel.validateJsonElement(jsonObj.get("vfxAllocationLevel"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flag") != null && !jsonObj.get("flag").isJsonNull() && !jsonObj.get("flag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flag` to be an array in the JSON string but got `%s`", jsonObj.get("flag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientQualityData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientQualityData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientQualityData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientQualityData.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientQualityData>() {
           @Override
           public void write(JsonWriter out, ClientQualityData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientQualityData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientQualityData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientQualityData
   * @throws IOException if the JSON string is invalid with respect to ClientQualityData
   */
  public static ClientQualityData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientQualityData.class);
  }

  /**
   * Convert an instance of ClientQualityData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

