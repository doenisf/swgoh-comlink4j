/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import io.github.doenisf.comlink4j.JSON;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * GameEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GameEvent {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_SUMMARY_KEY = "summaryKey";
  @SerializedName(SERIALIZED_NAME_SUMMARY_KEY)
  private String summaryKey;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private GameEventType type;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private List<GameEventInstance> instance = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GameEventStatus status;

  public static final String SERIALIZED_NAME_CAMPAIGN_ELEMENT_IDENTIFIER = "campaignElementIdentifier";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ELEMENT_IDENTIFIER)
  private CampaignElementIdentifier campaignElementIdentifier;

  public static final String SERIALIZED_NAME_SQUAD_TYPE = "squadType";
  @SerializedName(SERIALIZED_NAME_SQUAD_TYPE)
  private SquadType squadType;

  public static final String SERIALIZED_NAME_PREVIEW_KEY = "previewKey";
  @SerializedName(SERIALIZED_NAME_PREVIEW_KEY)
  private String previewKey;

  public static final String SERIALIZED_NAME_REVIEW_KEY = "reviewKey";
  @SerializedName(SERIALIZED_NAME_REVIEW_KEY)
  private String reviewKey;

  public static final String SERIALIZED_NAME_UI_LOCATION = "uiLocation";
  @SerializedName(SERIALIZED_NAME_UI_LOCATION)
  private GameEventUILocation uiLocation;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_DEFENSIVE_SQUAD_USAGE_COST_ENABLED = "defensiveSquadUsageCostEnabled";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_SQUAD_USAGE_COST_ENABLED)
  private Boolean defensiveSquadUsageCostEnabled;

  public static final String SERIALIZED_NAME_ENCOUNTER_MESSAGE = "encounterMessage";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_MESSAGE)
  private List<ContextualMessageGroup> encounterMessage = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List<Environment> environment = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESC_KEY_UNIT_CRITERIA_MET = "descKeyUnitCriteriaMet";
  @SerializedName(SERIALIZED_NAME_DESC_KEY_UNIT_CRITERIA_MET)
  private String descKeyUnitCriteriaMet;

  public static final String SERIALIZED_NAME_DEFENSIVE_SQUAD_TYPE = "defensiveSquadType";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_SQUAD_TYPE)
  private SquadType defensiveSquadType;

  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public static final String SERIALIZED_NAME_IMAGE_EFFECT = "imageEffect";
  @SerializedName(SERIALIZED_NAME_IMAGE_EFFECT)
  private String imageEffect;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY = "unlockRequirementLocalizationKey";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY)
  private String unlockRequirementLocalizationKey;

  public static final String SERIALIZED_NAME_TERRITORY_MAP_ID = "territoryMapId";
  @SerializedName(SERIALIZED_NAME_TERRITORY_MAP_ID)
  private String territoryMapId;

  public static final String SERIALIZED_NAME_PUSH_NOTIFICATION_TITLE_KEY = "pushNotificationTitleKey";
  @SerializedName(SERIALIZED_NAME_PUSH_NOTIFICATION_TITLE_KEY)
  private String pushNotificationTitleKey;

  public static final String SERIALIZED_NAME_PUSH_NOTIFICATION_DESC_KEY = "pushNotificationDescKey";
  @SerializedName(SERIALIZED_NAME_PUSH_NOTIFICATION_DESC_KEY)
  private String pushNotificationDescKey;

  public static final String SERIALIZED_NAME_SEASON_DEF_ID = "seasonDefId";
  @SerializedName(SERIALIZED_NAME_SEASON_DEF_ID)
  private String seasonDefId;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_ID = "unlockRequirementId";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_ID)
  private String unlockRequirementId;

  public static final String SERIALIZED_NAME_FEAT = "feat";
  @SerializedName(SERIALIZED_NAME_FEAT)
  private List<Feat> feat = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_STORE_ITEM_ID = "linkedStoreItemId";
  @SerializedName(SERIALIZED_NAME_LINKED_STORE_ITEM_ID)
  private List<String> linkedStoreItemId = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACTION_IMAGE = "factionImage";
  @SerializedName(SERIALIZED_NAME_FACTION_IMAGE)
  private String factionImage;

  public static final String SERIALIZED_NAME_DETAILS_TYPE = "detailsType";
  @SerializedName(SERIALIZED_NAME_DETAILS_TYPE)
  private GameEventDetailsType detailsType;

  public static final String SERIALIZED_NAME_CONQUEST_ID = "conquestId";
  @SerializedName(SERIALIZED_NAME_CONQUEST_ID)
  private String conquestId;

  public static final String SERIALIZED_NAME_RANK_REWARD_PREVIEW = "rankRewardPreview";
  @SerializedName(SERIALIZED_NAME_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> rankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICON_JOIN = "iconJoin";
  @SerializedName(SERIALIZED_NAME_ICON_JOIN)
  private String iconJoin;

  public static final String SERIALIZED_NAME_ICON_SET_DEFENSE = "iconSetDefense";
  @SerializedName(SERIALIZED_NAME_ICON_SET_DEFENSE)
  private String iconSetDefense;

  public static final String SERIALIZED_NAME_ICON_ATTACK = "iconAttack";
  @SerializedName(SERIALIZED_NAME_ICON_ATTACK)
  private String iconAttack;

  public GameEvent() {
  }

  public GameEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GameEvent priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public GameEvent nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public GameEvent summaryKey(String summaryKey) {
    this.summaryKey = summaryKey;
    return this;
  }

  /**
   * Get summaryKey
   * @return summaryKey
   */
  @javax.annotation.Nullable
  public String getSummaryKey() {
    return summaryKey;
  }

  public void setSummaryKey(String summaryKey) {
    this.summaryKey = summaryKey;
  }


  public GameEvent descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public GameEvent image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public GameEvent type(GameEventType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public GameEventType getType() {
    return type;
  }

  public void setType(GameEventType type) {
    this.type = type;
  }


  public GameEvent instance(List<GameEventInstance> instance) {
    this.instance = instance;
    return this;
  }

  public GameEvent addInstanceItem(GameEventInstance instanceItem) {
    if (this.instance == null) {
      this.instance = new ArrayList<>();
    }
    this.instance.add(instanceItem);
    return this;
  }

  /**
   * Get instance
   * @return instance
   */
  @javax.annotation.Nullable
  public List<GameEventInstance> getInstance() {
    return instance;
  }

  public void setInstance(List<GameEventInstance> instance) {
    this.instance = instance;
  }


  public GameEvent status(GameEventStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public GameEventStatus getStatus() {
    return status;
  }

  public void setStatus(GameEventStatus status) {
    this.status = status;
  }


  public GameEvent campaignElementIdentifier(CampaignElementIdentifier campaignElementIdentifier) {
    this.campaignElementIdentifier = campaignElementIdentifier;
    return this;
  }

  /**
   * Get campaignElementIdentifier
   * @return campaignElementIdentifier
   */
  @javax.annotation.Nullable
  public CampaignElementIdentifier getCampaignElementIdentifier() {
    return campaignElementIdentifier;
  }

  public void setCampaignElementIdentifier(CampaignElementIdentifier campaignElementIdentifier) {
    this.campaignElementIdentifier = campaignElementIdentifier;
  }


  public GameEvent squadType(SquadType squadType) {
    this.squadType = squadType;
    return this;
  }

  /**
   * Get squadType
   * @return squadType
   */
  @javax.annotation.Nullable
  public SquadType getSquadType() {
    return squadType;
  }

  public void setSquadType(SquadType squadType) {
    this.squadType = squadType;
  }


  public GameEvent previewKey(String previewKey) {
    this.previewKey = previewKey;
    return this;
  }

  /**
   * Get previewKey
   * @return previewKey
   */
  @javax.annotation.Nullable
  public String getPreviewKey() {
    return previewKey;
  }

  public void setPreviewKey(String previewKey) {
    this.previewKey = previewKey;
  }


  public GameEvent reviewKey(String reviewKey) {
    this.reviewKey = reviewKey;
    return this;
  }

  /**
   * Get reviewKey
   * @return reviewKey
   */
  @javax.annotation.Nullable
  public String getReviewKey() {
    return reviewKey;
  }

  public void setReviewKey(String reviewKey) {
    this.reviewKey = reviewKey;
  }


  public GameEvent uiLocation(GameEventUILocation uiLocation) {
    this.uiLocation = uiLocation;
    return this;
  }

  /**
   * Get uiLocation
   * @return uiLocation
   */
  @javax.annotation.Nullable
  public GameEventUILocation getUiLocation() {
    return uiLocation;
  }

  public void setUiLocation(GameEventUILocation uiLocation) {
    this.uiLocation = uiLocation;
  }


  public GameEvent icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public GameEvent defensiveSquadUsageCostEnabled(Boolean defensiveSquadUsageCostEnabled) {
    this.defensiveSquadUsageCostEnabled = defensiveSquadUsageCostEnabled;
    return this;
  }

  /**
   * Get defensiveSquadUsageCostEnabled
   * @return defensiveSquadUsageCostEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDefensiveSquadUsageCostEnabled() {
    return defensiveSquadUsageCostEnabled;
  }

  public void setDefensiveSquadUsageCostEnabled(Boolean defensiveSquadUsageCostEnabled) {
    this.defensiveSquadUsageCostEnabled = defensiveSquadUsageCostEnabled;
  }


  public GameEvent encounterMessage(List<ContextualMessageGroup> encounterMessage) {
    this.encounterMessage = encounterMessage;
    return this;
  }

  public GameEvent addEncounterMessageItem(ContextualMessageGroup encounterMessageItem) {
    if (this.encounterMessage == null) {
      this.encounterMessage = new ArrayList<>();
    }
    this.encounterMessage.add(encounterMessageItem);
    return this;
  }

  /**
   * Get encounterMessage
   * @return encounterMessage
   */
  @javax.annotation.Nullable
  public List<ContextualMessageGroup> getEncounterMessage() {
    return encounterMessage;
  }

  public void setEncounterMessage(List<ContextualMessageGroup> encounterMessage) {
    this.encounterMessage = encounterMessage;
  }


  public GameEvent environment(List<Environment> environment) {
    this.environment = environment;
    return this;
  }

  public GameEvent addEnvironmentItem(Environment environmentItem) {
    if (this.environment == null) {
      this.environment = new ArrayList<>();
    }
    this.environment.add(environmentItem);
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public List<Environment> getEnvironment() {
    return environment;
  }

  public void setEnvironment(List<Environment> environment) {
    this.environment = environment;
  }


  public GameEvent descKeyUnitCriteriaMet(String descKeyUnitCriteriaMet) {
    this.descKeyUnitCriteriaMet = descKeyUnitCriteriaMet;
    return this;
  }

  /**
   * Get descKeyUnitCriteriaMet
   * @return descKeyUnitCriteriaMet
   */
  @javax.annotation.Nullable
  public String getDescKeyUnitCriteriaMet() {
    return descKeyUnitCriteriaMet;
  }

  public void setDescKeyUnitCriteriaMet(String descKeyUnitCriteriaMet) {
    this.descKeyUnitCriteriaMet = descKeyUnitCriteriaMet;
  }


  public GameEvent defensiveSquadType(SquadType defensiveSquadType) {
    this.defensiveSquadType = defensiveSquadType;
    return this;
  }

  /**
   * Get defensiveSquadType
   * @return defensiveSquadType
   */
  @javax.annotation.Nullable
  public SquadType getDefensiveSquadType() {
    return defensiveSquadType;
  }

  public void setDefensiveSquadType(SquadType defensiveSquadType) {
    this.defensiveSquadType = defensiveSquadType;
  }


  public GameEvent combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }


  public GameEvent imageEffect(String imageEffect) {
    this.imageEffect = imageEffect;
    return this;
  }

  /**
   * Get imageEffect
   * @return imageEffect
   */
  @javax.annotation.Nullable
  public String getImageEffect() {
    return imageEffect;
  }

  public void setImageEffect(String imageEffect) {
    this.imageEffect = imageEffect;
  }


  public GameEvent unlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
    return this;
  }

  /**
   * Get unlockRequirementLocalizationKey
   * @return unlockRequirementLocalizationKey
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementLocalizationKey() {
    return unlockRequirementLocalizationKey;
  }

  public void setUnlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
  }


  public GameEvent territoryMapId(String territoryMapId) {
    this.territoryMapId = territoryMapId;
    return this;
  }

  /**
   * Get territoryMapId
   * @return territoryMapId
   */
  @javax.annotation.Nullable
  public String getTerritoryMapId() {
    return territoryMapId;
  }

  public void setTerritoryMapId(String territoryMapId) {
    this.territoryMapId = territoryMapId;
  }


  public GameEvent pushNotificationTitleKey(String pushNotificationTitleKey) {
    this.pushNotificationTitleKey = pushNotificationTitleKey;
    return this;
  }

  /**
   * Get pushNotificationTitleKey
   * @return pushNotificationTitleKey
   */
  @javax.annotation.Nullable
  public String getPushNotificationTitleKey() {
    return pushNotificationTitleKey;
  }

  public void setPushNotificationTitleKey(String pushNotificationTitleKey) {
    this.pushNotificationTitleKey = pushNotificationTitleKey;
  }


  public GameEvent pushNotificationDescKey(String pushNotificationDescKey) {
    this.pushNotificationDescKey = pushNotificationDescKey;
    return this;
  }

  /**
   * Get pushNotificationDescKey
   * @return pushNotificationDescKey
   */
  @javax.annotation.Nullable
  public String getPushNotificationDescKey() {
    return pushNotificationDescKey;
  }

  public void setPushNotificationDescKey(String pushNotificationDescKey) {
    this.pushNotificationDescKey = pushNotificationDescKey;
  }


  public GameEvent seasonDefId(String seasonDefId) {
    this.seasonDefId = seasonDefId;
    return this;
  }

  /**
   * Get seasonDefId
   * @return seasonDefId
   */
  @javax.annotation.Nullable
  public String getSeasonDefId() {
    return seasonDefId;
  }

  public void setSeasonDefId(String seasonDefId) {
    this.seasonDefId = seasonDefId;
  }


  public GameEvent unlockRequirementId(String unlockRequirementId) {
    this.unlockRequirementId = unlockRequirementId;
    return this;
  }

  /**
   * Get unlockRequirementId
   * @return unlockRequirementId
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementId() {
    return unlockRequirementId;
  }

  public void setUnlockRequirementId(String unlockRequirementId) {
    this.unlockRequirementId = unlockRequirementId;
  }


  public GameEvent feat(List<Feat> feat) {
    this.feat = feat;
    return this;
  }

  public GameEvent addFeatItem(Feat featItem) {
    if (this.feat == null) {
      this.feat = new ArrayList<>();
    }
    this.feat.add(featItem);
    return this;
  }

  /**
   * Get feat
   * @return feat
   */
  @javax.annotation.Nullable
  public List<Feat> getFeat() {
    return feat;
  }

  public void setFeat(List<Feat> feat) {
    this.feat = feat;
  }


  public GameEvent linkedStoreItemId(List<String> linkedStoreItemId) {
    this.linkedStoreItemId = linkedStoreItemId;
    return this;
  }

  public GameEvent addLinkedStoreItemIdItem(String linkedStoreItemIdItem) {
    if (this.linkedStoreItemId == null) {
      this.linkedStoreItemId = new ArrayList<>();
    }
    this.linkedStoreItemId.add(linkedStoreItemIdItem);
    return this;
  }

  /**
   * Get linkedStoreItemId
   * @return linkedStoreItemId
   */
  @javax.annotation.Nullable
  public List<String> getLinkedStoreItemId() {
    return linkedStoreItemId;
  }

  public void setLinkedStoreItemId(List<String> linkedStoreItemId) {
    this.linkedStoreItemId = linkedStoreItemId;
  }


  public GameEvent factionImage(String factionImage) {
    this.factionImage = factionImage;
    return this;
  }

  /**
   * Get factionImage
   * @return factionImage
   */
  @javax.annotation.Nullable
  public String getFactionImage() {
    return factionImage;
  }

  public void setFactionImage(String factionImage) {
    this.factionImage = factionImage;
  }


  public GameEvent detailsType(GameEventDetailsType detailsType) {
    this.detailsType = detailsType;
    return this;
  }

  /**
   * Get detailsType
   * @return detailsType
   */
  @javax.annotation.Nullable
  public GameEventDetailsType getDetailsType() {
    return detailsType;
  }

  public void setDetailsType(GameEventDetailsType detailsType) {
    this.detailsType = detailsType;
  }


  public GameEvent conquestId(String conquestId) {
    this.conquestId = conquestId;
    return this;
  }

  /**
   * Get conquestId
   * @return conquestId
   */
  @javax.annotation.Nullable
  public String getConquestId() {
    return conquestId;
  }

  public void setConquestId(String conquestId) {
    this.conquestId = conquestId;
  }


  public GameEvent rankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
    return this;
  }

  public GameEvent addRankRewardPreviewItem(RankRewardPreview rankRewardPreviewItem) {
    if (this.rankRewardPreview == null) {
      this.rankRewardPreview = new ArrayList<>();
    }
    this.rankRewardPreview.add(rankRewardPreviewItem);
    return this;
  }

  /**
   * Get rankRewardPreview
   * @return rankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getRankRewardPreview() {
    return rankRewardPreview;
  }

  public void setRankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
  }


  public GameEvent iconJoin(String iconJoin) {
    this.iconJoin = iconJoin;
    return this;
  }

  /**
   * Get iconJoin
   * @return iconJoin
   */
  @javax.annotation.Nullable
  public String getIconJoin() {
    return iconJoin;
  }

  public void setIconJoin(String iconJoin) {
    this.iconJoin = iconJoin;
  }


  public GameEvent iconSetDefense(String iconSetDefense) {
    this.iconSetDefense = iconSetDefense;
    return this;
  }

  /**
   * Get iconSetDefense
   * @return iconSetDefense
   */
  @javax.annotation.Nullable
  public String getIconSetDefense() {
    return iconSetDefense;
  }

  public void setIconSetDefense(String iconSetDefense) {
    this.iconSetDefense = iconSetDefense;
  }


  public GameEvent iconAttack(String iconAttack) {
    this.iconAttack = iconAttack;
    return this;
  }

  /**
   * Get iconAttack
   * @return iconAttack
   */
  @javax.annotation.Nullable
  public String getIconAttack() {
    return iconAttack;
  }

  public void setIconAttack(String iconAttack) {
    this.iconAttack = iconAttack;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameEvent gameEvent = (GameEvent) o;
    return Objects.equals(this.id, gameEvent.id) &&
        Objects.equals(this.priority, gameEvent.priority) &&
        Objects.equals(this.nameKey, gameEvent.nameKey) &&
        Objects.equals(this.summaryKey, gameEvent.summaryKey) &&
        Objects.equals(this.descKey, gameEvent.descKey) &&
        Objects.equals(this.image, gameEvent.image) &&
        Objects.equals(this.type, gameEvent.type) &&
        Objects.equals(this.instance, gameEvent.instance) &&
        Objects.equals(this.status, gameEvent.status) &&
        Objects.equals(this.campaignElementIdentifier, gameEvent.campaignElementIdentifier) &&
        Objects.equals(this.squadType, gameEvent.squadType) &&
        Objects.equals(this.previewKey, gameEvent.previewKey) &&
        Objects.equals(this.reviewKey, gameEvent.reviewKey) &&
        Objects.equals(this.uiLocation, gameEvent.uiLocation) &&
        Objects.equals(this.icon, gameEvent.icon) &&
        Objects.equals(this.defensiveSquadUsageCostEnabled, gameEvent.defensiveSquadUsageCostEnabled) &&
        Objects.equals(this.encounterMessage, gameEvent.encounterMessage) &&
        Objects.equals(this.environment, gameEvent.environment) &&
        Objects.equals(this.descKeyUnitCriteriaMet, gameEvent.descKeyUnitCriteriaMet) &&
        Objects.equals(this.defensiveSquadType, gameEvent.defensiveSquadType) &&
        Objects.equals(this.combatType, gameEvent.combatType) &&
        Objects.equals(this.imageEffect, gameEvent.imageEffect) &&
        Objects.equals(this.unlockRequirementLocalizationKey, gameEvent.unlockRequirementLocalizationKey) &&
        Objects.equals(this.territoryMapId, gameEvent.territoryMapId) &&
        Objects.equals(this.pushNotificationTitleKey, gameEvent.pushNotificationTitleKey) &&
        Objects.equals(this.pushNotificationDescKey, gameEvent.pushNotificationDescKey) &&
        Objects.equals(this.seasonDefId, gameEvent.seasonDefId) &&
        Objects.equals(this.unlockRequirementId, gameEvent.unlockRequirementId) &&
        Objects.equals(this.feat, gameEvent.feat) &&
        Objects.equals(this.linkedStoreItemId, gameEvent.linkedStoreItemId) &&
        Objects.equals(this.factionImage, gameEvent.factionImage) &&
        Objects.equals(this.detailsType, gameEvent.detailsType) &&
        Objects.equals(this.conquestId, gameEvent.conquestId) &&
        Objects.equals(this.rankRewardPreview, gameEvent.rankRewardPreview) &&
        Objects.equals(this.iconJoin, gameEvent.iconJoin) &&
        Objects.equals(this.iconSetDefense, gameEvent.iconSetDefense) &&
        Objects.equals(this.iconAttack, gameEvent.iconAttack);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, priority, nameKey, summaryKey, descKey, image, type, instance, status, campaignElementIdentifier, squadType, previewKey, reviewKey, uiLocation, icon, defensiveSquadUsageCostEnabled, encounterMessage, environment, descKeyUnitCriteriaMet, defensiveSquadType, combatType, imageEffect, unlockRequirementLocalizationKey, territoryMapId, pushNotificationTitleKey, pushNotificationDescKey, seasonDefId, unlockRequirementId, feat, linkedStoreItemId, factionImage, detailsType, conquestId, rankRewardPreview, iconJoin, iconSetDefense, iconAttack);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    summaryKey: ").append(toIndentedString(summaryKey)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    campaignElementIdentifier: ").append(toIndentedString(campaignElementIdentifier)).append("\n");
    sb.append("    squadType: ").append(toIndentedString(squadType)).append("\n");
    sb.append("    previewKey: ").append(toIndentedString(previewKey)).append("\n");
    sb.append("    reviewKey: ").append(toIndentedString(reviewKey)).append("\n");
    sb.append("    uiLocation: ").append(toIndentedString(uiLocation)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    defensiveSquadUsageCostEnabled: ").append(toIndentedString(defensiveSquadUsageCostEnabled)).append("\n");
    sb.append("    encounterMessage: ").append(toIndentedString(encounterMessage)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    descKeyUnitCriteriaMet: ").append(toIndentedString(descKeyUnitCriteriaMet)).append("\n");
    sb.append("    defensiveSquadType: ").append(toIndentedString(defensiveSquadType)).append("\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("    imageEffect: ").append(toIndentedString(imageEffect)).append("\n");
    sb.append("    unlockRequirementLocalizationKey: ").append(toIndentedString(unlockRequirementLocalizationKey)).append("\n");
    sb.append("    territoryMapId: ").append(toIndentedString(territoryMapId)).append("\n");
    sb.append("    pushNotificationTitleKey: ").append(toIndentedString(pushNotificationTitleKey)).append("\n");
    sb.append("    pushNotificationDescKey: ").append(toIndentedString(pushNotificationDescKey)).append("\n");
    sb.append("    seasonDefId: ").append(toIndentedString(seasonDefId)).append("\n");
    sb.append("    unlockRequirementId: ").append(toIndentedString(unlockRequirementId)).append("\n");
    sb.append("    feat: ").append(toIndentedString(feat)).append("\n");
    sb.append("    linkedStoreItemId: ").append(toIndentedString(linkedStoreItemId)).append("\n");
    sb.append("    factionImage: ").append(toIndentedString(factionImage)).append("\n");
    sb.append("    detailsType: ").append(toIndentedString(detailsType)).append("\n");
    sb.append("    conquestId: ").append(toIndentedString(conquestId)).append("\n");
    sb.append("    rankRewardPreview: ").append(toIndentedString(rankRewardPreview)).append("\n");
    sb.append("    iconJoin: ").append(toIndentedString(iconJoin)).append("\n");
    sb.append("    iconSetDefense: ").append(toIndentedString(iconSetDefense)).append("\n");
    sb.append("    iconAttack: ").append(toIndentedString(iconAttack)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("priority");
    openapiFields.add("nameKey");
    openapiFields.add("summaryKey");
    openapiFields.add("descKey");
    openapiFields.add("image");
    openapiFields.add("type");
    openapiFields.add("instance");
    openapiFields.add("status");
    openapiFields.add("campaignElementIdentifier");
    openapiFields.add("squadType");
    openapiFields.add("previewKey");
    openapiFields.add("reviewKey");
    openapiFields.add("uiLocation");
    openapiFields.add("icon");
    openapiFields.add("defensiveSquadUsageCostEnabled");
    openapiFields.add("encounterMessage");
    openapiFields.add("environment");
    openapiFields.add("descKeyUnitCriteriaMet");
    openapiFields.add("defensiveSquadType");
    openapiFields.add("combatType");
    openapiFields.add("imageEffect");
    openapiFields.add("unlockRequirementLocalizationKey");
    openapiFields.add("territoryMapId");
    openapiFields.add("pushNotificationTitleKey");
    openapiFields.add("pushNotificationDescKey");
    openapiFields.add("seasonDefId");
    openapiFields.add("unlockRequirementId");
    openapiFields.add("feat");
    openapiFields.add("linkedStoreItemId");
    openapiFields.add("factionImage");
    openapiFields.add("detailsType");
    openapiFields.add("conquestId");
    openapiFields.add("rankRewardPreview");
    openapiFields.add("iconJoin");
    openapiFields.add("iconSetDefense");
    openapiFields.add("iconAttack");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GameEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GameEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GameEvent is not found in the empty JSON string", GameEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GameEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GameEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("summaryKey") != null && !jsonObj.get("summaryKey").isJsonNull()) && !jsonObj.get("summaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summaryKey").toString()));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        GameEventType.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) {
        JsonArray jsonArrayinstance = jsonObj.getAsJsonArray("instance");
        if (jsonArrayinstance != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instance").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instance` to be an array in the JSON string but got `%s`", jsonObj.get("instance").toString()));
          }

          // validate the optional field `instance` (array)
          for (int i = 0; i < jsonArrayinstance.size(); i++) {
            GameEventInstance.validateJsonElement(jsonArrayinstance.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        GameEventStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `campaignElementIdentifier`
      if (jsonObj.get("campaignElementIdentifier") != null && !jsonObj.get("campaignElementIdentifier").isJsonNull()) {
        CampaignElementIdentifier.validateJsonElement(jsonObj.get("campaignElementIdentifier"));
      }
      // validate the optional field `squadType`
      if (jsonObj.get("squadType") != null && !jsonObj.get("squadType").isJsonNull()) {
        SquadType.validateJsonElement(jsonObj.get("squadType"));
      }
      if ((jsonObj.get("previewKey") != null && !jsonObj.get("previewKey").isJsonNull()) && !jsonObj.get("previewKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previewKey").toString()));
      }
      if ((jsonObj.get("reviewKey") != null && !jsonObj.get("reviewKey").isJsonNull()) && !jsonObj.get("reviewKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewKey").toString()));
      }
      // validate the optional field `uiLocation`
      if (jsonObj.get("uiLocation") != null && !jsonObj.get("uiLocation").isJsonNull()) {
        GameEventUILocation.validateJsonElement(jsonObj.get("uiLocation"));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (jsonObj.get("encounterMessage") != null && !jsonObj.get("encounterMessage").isJsonNull()) {
        JsonArray jsonArrayencounterMessage = jsonObj.getAsJsonArray("encounterMessage");
        if (jsonArrayencounterMessage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encounterMessage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encounterMessage` to be an array in the JSON string but got `%s`", jsonObj.get("encounterMessage").toString()));
          }

          // validate the optional field `encounterMessage` (array)
          for (int i = 0; i < jsonArrayencounterMessage.size(); i++) {
            ContextualMessageGroup.validateJsonElement(jsonArrayencounterMessage.get(i));
          };
        }
      }
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        JsonArray jsonArrayenvironment = jsonObj.getAsJsonArray("environment");
        if (jsonArrayenvironment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environment` to be an array in the JSON string but got `%s`", jsonObj.get("environment").toString()));
          }

          // validate the optional field `environment` (array)
          for (int i = 0; i < jsonArrayenvironment.size(); i++) {
            Environment.validateJsonElement(jsonArrayenvironment.get(i));
          };
        }
      }
      if ((jsonObj.get("descKeyUnitCriteriaMet") != null && !jsonObj.get("descKeyUnitCriteriaMet").isJsonNull()) && !jsonObj.get("descKeyUnitCriteriaMet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKeyUnitCriteriaMet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKeyUnitCriteriaMet").toString()));
      }
      // validate the optional field `defensiveSquadType`
      if (jsonObj.get("defensiveSquadType") != null && !jsonObj.get("defensiveSquadType").isJsonNull()) {
        SquadType.validateJsonElement(jsonObj.get("defensiveSquadType"));
      }
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
      if ((jsonObj.get("imageEffect") != null && !jsonObj.get("imageEffect").isJsonNull()) && !jsonObj.get("imageEffect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageEffect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageEffect").toString()));
      }
      if ((jsonObj.get("unlockRequirementLocalizationKey") != null && !jsonObj.get("unlockRequirementLocalizationKey").isJsonNull()) && !jsonObj.get("unlockRequirementLocalizationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementLocalizationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementLocalizationKey").toString()));
      }
      if ((jsonObj.get("territoryMapId") != null && !jsonObj.get("territoryMapId").isJsonNull()) && !jsonObj.get("territoryMapId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `territoryMapId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("territoryMapId").toString()));
      }
      if ((jsonObj.get("pushNotificationTitleKey") != null && !jsonObj.get("pushNotificationTitleKey").isJsonNull()) && !jsonObj.get("pushNotificationTitleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pushNotificationTitleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pushNotificationTitleKey").toString()));
      }
      if ((jsonObj.get("pushNotificationDescKey") != null && !jsonObj.get("pushNotificationDescKey").isJsonNull()) && !jsonObj.get("pushNotificationDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pushNotificationDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pushNotificationDescKey").toString()));
      }
      if ((jsonObj.get("seasonDefId") != null && !jsonObj.get("seasonDefId").isJsonNull()) && !jsonObj.get("seasonDefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonDefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonDefId").toString()));
      }
      if ((jsonObj.get("unlockRequirementId") != null && !jsonObj.get("unlockRequirementId").isJsonNull()) && !jsonObj.get("unlockRequirementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementId").toString()));
      }
      if (jsonObj.get("feat") != null && !jsonObj.get("feat").isJsonNull()) {
        JsonArray jsonArrayfeat = jsonObj.getAsJsonArray("feat");
        if (jsonArrayfeat != null) {
          // ensure the json data is an array
          if (!jsonObj.get("feat").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `feat` to be an array in the JSON string but got `%s`", jsonObj.get("feat").toString()));
          }

          // validate the optional field `feat` (array)
          for (int i = 0; i < jsonArrayfeat.size(); i++) {
            Feat.validateJsonElement(jsonArrayfeat.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedStoreItemId") != null && !jsonObj.get("linkedStoreItemId").isJsonNull() && !jsonObj.get("linkedStoreItemId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedStoreItemId` to be an array in the JSON string but got `%s`", jsonObj.get("linkedStoreItemId").toString()));
      }
      if ((jsonObj.get("factionImage") != null && !jsonObj.get("factionImage").isJsonNull()) && !jsonObj.get("factionImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factionImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factionImage").toString()));
      }
      // validate the optional field `detailsType`
      if (jsonObj.get("detailsType") != null && !jsonObj.get("detailsType").isJsonNull()) {
        GameEventDetailsType.validateJsonElement(jsonObj.get("detailsType"));
      }
      if ((jsonObj.get("conquestId") != null && !jsonObj.get("conquestId").isJsonNull()) && !jsonObj.get("conquestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conquestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conquestId").toString()));
      }
      if (jsonObj.get("rankRewardPreview") != null && !jsonObj.get("rankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayrankRewardPreview = jsonObj.getAsJsonArray("rankRewardPreview");
        if (jsonArrayrankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rankRewardPreview").toString()));
          }

          // validate the optional field `rankRewardPreview` (array)
          for (int i = 0; i < jsonArrayrankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayrankRewardPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("iconJoin") != null && !jsonObj.get("iconJoin").isJsonNull()) && !jsonObj.get("iconJoin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconJoin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconJoin").toString()));
      }
      if ((jsonObj.get("iconSetDefense") != null && !jsonObj.get("iconSetDefense").isJsonNull()) && !jsonObj.get("iconSetDefense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconSetDefense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconSetDefense").toString()));
      }
      if ((jsonObj.get("iconAttack") != null && !jsonObj.get("iconAttack").isJsonNull()) && !jsonObj.get("iconAttack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconAttack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconAttack").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GameEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GameEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GameEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GameEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GameEvent>() {
           @Override
           public void write(JsonWriter out, GameEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GameEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GameEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GameEvent
   * @throws IOException if the JSON string is invalid with respect to GameEvent
   */
  public static GameEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GameEvent.class);
  }

  /**
   * Convert an instance of GameEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

