/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.DatacronTemplateTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * DatacronTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class DatacronTemplate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SET_ID = "setId";
  @SerializedName(SERIALIZED_NAME_SET_ID)
  private Integer setId;

  public static final String SERIALIZED_NAME_INITIAL_TIERS = "initialTiers";
  @SerializedName(SERIALIZED_NAME_INITIAL_TIERS)
  private Integer initialTiers;

  public static final String SERIALIZED_NAME_REFERENCE_TEMPLATE_ID = "referenceTemplateId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TEMPLATE_ID)
  private String referenceTemplateId;

  public static final String SERIALIZED_NAME_FIXED_TAG = "fixedTag";
  @SerializedName(SERIALIZED_NAME_FIXED_TAG)
  private List<String> fixedTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private List<DatacronTemplateTier> tier = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_REROLLS = "maxRerolls";
  @SerializedName(SERIALIZED_NAME_MAX_REROLLS)
  private Integer maxRerolls;

  public static final String SERIALIZED_NAME_ALLOW_REROLL = "allowReroll";
  @SerializedName(SERIALIZED_NAME_ALLOW_REROLL)
  private Boolean allowReroll;

  public DatacronTemplate() {
  }

  public DatacronTemplate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DatacronTemplate setId(Integer setId) {
    this.setId = setId;
    return this;
  }

  /**
   * Get setId
   * @return setId
   */
  @javax.annotation.Nullable
  public Integer getSetId() {
    return setId;
  }

  public void setSetId(Integer setId) {
    this.setId = setId;
  }


  public DatacronTemplate initialTiers(Integer initialTiers) {
    this.initialTiers = initialTiers;
    return this;
  }

  /**
   * Get initialTiers
   * @return initialTiers
   */
  @javax.annotation.Nullable
  public Integer getInitialTiers() {
    return initialTiers;
  }

  public void setInitialTiers(Integer initialTiers) {
    this.initialTiers = initialTiers;
  }


  public DatacronTemplate referenceTemplateId(String referenceTemplateId) {
    this.referenceTemplateId = referenceTemplateId;
    return this;
  }

  /**
   * Get referenceTemplateId
   * @return referenceTemplateId
   */
  @javax.annotation.Nullable
  public String getReferenceTemplateId() {
    return referenceTemplateId;
  }

  public void setReferenceTemplateId(String referenceTemplateId) {
    this.referenceTemplateId = referenceTemplateId;
  }


  public DatacronTemplate fixedTag(List<String> fixedTag) {
    this.fixedTag = fixedTag;
    return this;
  }

  public DatacronTemplate addFixedTagItem(String fixedTagItem) {
    if (this.fixedTag == null) {
      this.fixedTag = new ArrayList<>();
    }
    this.fixedTag.add(fixedTagItem);
    return this;
  }

  /**
   * Get fixedTag
   * @return fixedTag
   */
  @javax.annotation.Nullable
  public List<String> getFixedTag() {
    return fixedTag;
  }

  public void setFixedTag(List<String> fixedTag) {
    this.fixedTag = fixedTag;
  }


  public DatacronTemplate tier(List<DatacronTemplateTier> tier) {
    this.tier = tier;
    return this;
  }

  public DatacronTemplate addTierItem(DatacronTemplateTier tierItem) {
    if (this.tier == null) {
      this.tier = new ArrayList<>();
    }
    this.tier.add(tierItem);
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public List<DatacronTemplateTier> getTier() {
    return tier;
  }

  public void setTier(List<DatacronTemplateTier> tier) {
    this.tier = tier;
  }


  public DatacronTemplate maxRerolls(Integer maxRerolls) {
    this.maxRerolls = maxRerolls;
    return this;
  }

  /**
   * Get maxRerolls
   * @return maxRerolls
   */
  @javax.annotation.Nullable
  public Integer getMaxRerolls() {
    return maxRerolls;
  }

  public void setMaxRerolls(Integer maxRerolls) {
    this.maxRerolls = maxRerolls;
  }


  public DatacronTemplate allowReroll(Boolean allowReroll) {
    this.allowReroll = allowReroll;
    return this;
  }

  /**
   * Get allowReroll
   * @return allowReroll
   */
  @javax.annotation.Nullable
  public Boolean getAllowReroll() {
    return allowReroll;
  }

  public void setAllowReroll(Boolean allowReroll) {
    this.allowReroll = allowReroll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatacronTemplate datacronTemplate = (DatacronTemplate) o;
    return Objects.equals(this.id, datacronTemplate.id) &&
        Objects.equals(this.setId, datacronTemplate.setId) &&
        Objects.equals(this.initialTiers, datacronTemplate.initialTiers) &&
        Objects.equals(this.referenceTemplateId, datacronTemplate.referenceTemplateId) &&
        Objects.equals(this.fixedTag, datacronTemplate.fixedTag) &&
        Objects.equals(this.tier, datacronTemplate.tier) &&
        Objects.equals(this.maxRerolls, datacronTemplate.maxRerolls) &&
        Objects.equals(this.allowReroll, datacronTemplate.allowReroll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, setId, initialTiers, referenceTemplateId, fixedTag, tier, maxRerolls, allowReroll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatacronTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    setId: ").append(toIndentedString(setId)).append("\n");
    sb.append("    initialTiers: ").append(toIndentedString(initialTiers)).append("\n");
    sb.append("    referenceTemplateId: ").append(toIndentedString(referenceTemplateId)).append("\n");
    sb.append("    fixedTag: ").append(toIndentedString(fixedTag)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    maxRerolls: ").append(toIndentedString(maxRerolls)).append("\n");
    sb.append("    allowReroll: ").append(toIndentedString(allowReroll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("setId");
    openapiFields.add("initialTiers");
    openapiFields.add("referenceTemplateId");
    openapiFields.add("fixedTag");
    openapiFields.add("tier");
    openapiFields.add("maxRerolls");
    openapiFields.add("allowReroll");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatacronTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatacronTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatacronTemplate is not found in the empty JSON string", DatacronTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatacronTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatacronTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("referenceTemplateId") != null && !jsonObj.get("referenceTemplateId").isJsonNull()) && !jsonObj.get("referenceTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceTemplateId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fixedTag") != null && !jsonObj.get("fixedTag").isJsonNull() && !jsonObj.get("fixedTag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedTag` to be an array in the JSON string but got `%s`", jsonObj.get("fixedTag").toString()));
      }
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        JsonArray jsonArraytier = jsonObj.getAsJsonArray("tier");
        if (jsonArraytier != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tier").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tier` to be an array in the JSON string but got `%s`", jsonObj.get("tier").toString()));
          }

          // validate the optional field `tier` (array)
          for (int i = 0; i < jsonArraytier.size(); i++) {
            DatacronTemplateTier.validateJsonElement(jsonArraytier.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatacronTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatacronTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatacronTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatacronTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<DatacronTemplate>() {
           @Override
           public void write(JsonWriter out, DatacronTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatacronTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatacronTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatacronTemplate
   * @throws IOException if the JSON string is invalid with respect to DatacronTemplate
   */
  public static DatacronTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatacronTemplate.class);
  }

  /**
   * Convert an instance of DatacronTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

