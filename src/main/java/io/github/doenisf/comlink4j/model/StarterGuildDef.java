/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * StarterGuildDef
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class StarterGuildDef {
  public static final String SERIALIZED_NAME_GUILD_TYPE = "guildType";
  @SerializedName(SERIALIZED_NAME_GUILD_TYPE)
  private String guildType;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_ALLOWED_RAID_ID = "allowedRaidId";
  @SerializedName(SERIALIZED_NAME_ALLOWED_RAID_ID)
  private List<String> allowedRaidId = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_KEY = "messageKey";
  @SerializedName(SERIALIZED_NAME_MESSAGE_KEY)
  private String messageKey;

  public static final String SERIALIZED_NAME_ALLOWED_RAID_CAMPAIGN_ID = "allowedRaidCampaignId";
  @SerializedName(SERIALIZED_NAME_ALLOWED_RAID_CAMPAIGN_ID)
  private List<String> allowedRaidCampaignId = new ArrayList<>();

  public static final String SERIALIZED_NAME_BANNER_LOGO_ID = "bannerLogoId";
  @SerializedName(SERIALIZED_NAME_BANNER_LOGO_ID)
  private String bannerLogoId;

  public static final String SERIALIZED_NAME_BANNER_COLOR_ID = "bannerColorId";
  @SerializedName(SERIALIZED_NAME_BANNER_COLOR_ID)
  private String bannerColorId;

  public static final String SERIALIZED_NAME_EXTERNAL_MESSAGE_KEY = "externalMessageKey";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_MESSAGE_KEY)
  private String externalMessageKey;

  public static final String SERIALIZED_NAME_SUB_NAME_KEY = "subNameKey";
  @SerializedName(SERIALIZED_NAME_SUB_NAME_KEY)
  private String subNameKey;

  public StarterGuildDef() {
  }

  public StarterGuildDef guildType(String guildType) {
    this.guildType = guildType;
    return this;
  }

  /**
   * Get guildType
   * @return guildType
   */
  @javax.annotation.Nullable
  public String getGuildType() {
    return guildType;
  }

  public void setGuildType(String guildType) {
    this.guildType = guildType;
  }


  public StarterGuildDef nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public StarterGuildDef allowedRaidId(List<String> allowedRaidId) {
    this.allowedRaidId = allowedRaidId;
    return this;
  }

  public StarterGuildDef addAllowedRaidIdItem(String allowedRaidIdItem) {
    if (this.allowedRaidId == null) {
      this.allowedRaidId = new ArrayList<>();
    }
    this.allowedRaidId.add(allowedRaidIdItem);
    return this;
  }

  /**
   * Get allowedRaidId
   * @return allowedRaidId
   */
  @javax.annotation.Nullable
  public List<String> getAllowedRaidId() {
    return allowedRaidId;
  }

  public void setAllowedRaidId(List<String> allowedRaidId) {
    this.allowedRaidId = allowedRaidId;
  }


  public StarterGuildDef messageKey(String messageKey) {
    this.messageKey = messageKey;
    return this;
  }

  /**
   * Get messageKey
   * @return messageKey
   */
  @javax.annotation.Nullable
  public String getMessageKey() {
    return messageKey;
  }

  public void setMessageKey(String messageKey) {
    this.messageKey = messageKey;
  }


  public StarterGuildDef allowedRaidCampaignId(List<String> allowedRaidCampaignId) {
    this.allowedRaidCampaignId = allowedRaidCampaignId;
    return this;
  }

  public StarterGuildDef addAllowedRaidCampaignIdItem(String allowedRaidCampaignIdItem) {
    if (this.allowedRaidCampaignId == null) {
      this.allowedRaidCampaignId = new ArrayList<>();
    }
    this.allowedRaidCampaignId.add(allowedRaidCampaignIdItem);
    return this;
  }

  /**
   * Get allowedRaidCampaignId
   * @return allowedRaidCampaignId
   */
  @javax.annotation.Nullable
  public List<String> getAllowedRaidCampaignId() {
    return allowedRaidCampaignId;
  }

  public void setAllowedRaidCampaignId(List<String> allowedRaidCampaignId) {
    this.allowedRaidCampaignId = allowedRaidCampaignId;
  }


  public StarterGuildDef bannerLogoId(String bannerLogoId) {
    this.bannerLogoId = bannerLogoId;
    return this;
  }

  /**
   * Get bannerLogoId
   * @return bannerLogoId
   */
  @javax.annotation.Nullable
  public String getBannerLogoId() {
    return bannerLogoId;
  }

  public void setBannerLogoId(String bannerLogoId) {
    this.bannerLogoId = bannerLogoId;
  }


  public StarterGuildDef bannerColorId(String bannerColorId) {
    this.bannerColorId = bannerColorId;
    return this;
  }

  /**
   * Get bannerColorId
   * @return bannerColorId
   */
  @javax.annotation.Nullable
  public String getBannerColorId() {
    return bannerColorId;
  }

  public void setBannerColorId(String bannerColorId) {
    this.bannerColorId = bannerColorId;
  }


  public StarterGuildDef externalMessageKey(String externalMessageKey) {
    this.externalMessageKey = externalMessageKey;
    return this;
  }

  /**
   * Get externalMessageKey
   * @return externalMessageKey
   */
  @javax.annotation.Nullable
  public String getExternalMessageKey() {
    return externalMessageKey;
  }

  public void setExternalMessageKey(String externalMessageKey) {
    this.externalMessageKey = externalMessageKey;
  }


  public StarterGuildDef subNameKey(String subNameKey) {
    this.subNameKey = subNameKey;
    return this;
  }

  /**
   * Get subNameKey
   * @return subNameKey
   */
  @javax.annotation.Nullable
  public String getSubNameKey() {
    return subNameKey;
  }

  public void setSubNameKey(String subNameKey) {
    this.subNameKey = subNameKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StarterGuildDef starterGuildDef = (StarterGuildDef) o;
    return Objects.equals(this.guildType, starterGuildDef.guildType) &&
        Objects.equals(this.nameKey, starterGuildDef.nameKey) &&
        Objects.equals(this.allowedRaidId, starterGuildDef.allowedRaidId) &&
        Objects.equals(this.messageKey, starterGuildDef.messageKey) &&
        Objects.equals(this.allowedRaidCampaignId, starterGuildDef.allowedRaidCampaignId) &&
        Objects.equals(this.bannerLogoId, starterGuildDef.bannerLogoId) &&
        Objects.equals(this.bannerColorId, starterGuildDef.bannerColorId) &&
        Objects.equals(this.externalMessageKey, starterGuildDef.externalMessageKey) &&
        Objects.equals(this.subNameKey, starterGuildDef.subNameKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guildType, nameKey, allowedRaidId, messageKey, allowedRaidCampaignId, bannerLogoId, bannerColorId, externalMessageKey, subNameKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StarterGuildDef {\n");
    sb.append("    guildType: ").append(toIndentedString(guildType)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    allowedRaidId: ").append(toIndentedString(allowedRaidId)).append("\n");
    sb.append("    messageKey: ").append(toIndentedString(messageKey)).append("\n");
    sb.append("    allowedRaidCampaignId: ").append(toIndentedString(allowedRaidCampaignId)).append("\n");
    sb.append("    bannerLogoId: ").append(toIndentedString(bannerLogoId)).append("\n");
    sb.append("    bannerColorId: ").append(toIndentedString(bannerColorId)).append("\n");
    sb.append("    externalMessageKey: ").append(toIndentedString(externalMessageKey)).append("\n");
    sb.append("    subNameKey: ").append(toIndentedString(subNameKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guildType");
    openapiFields.add("nameKey");
    openapiFields.add("allowedRaidId");
    openapiFields.add("messageKey");
    openapiFields.add("allowedRaidCampaignId");
    openapiFields.add("bannerLogoId");
    openapiFields.add("bannerColorId");
    openapiFields.add("externalMessageKey");
    openapiFields.add("subNameKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StarterGuildDef
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StarterGuildDef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StarterGuildDef is not found in the empty JSON string", StarterGuildDef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StarterGuildDef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StarterGuildDef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("guildType") != null && !jsonObj.get("guildType").isJsonNull()) && !jsonObj.get("guildType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guildType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guildType").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedRaidId") != null && !jsonObj.get("allowedRaidId").isJsonNull() && !jsonObj.get("allowedRaidId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedRaidId` to be an array in the JSON string but got `%s`", jsonObj.get("allowedRaidId").toString()));
      }
      if ((jsonObj.get("messageKey") != null && !jsonObj.get("messageKey").isJsonNull()) && !jsonObj.get("messageKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedRaidCampaignId") != null && !jsonObj.get("allowedRaidCampaignId").isJsonNull() && !jsonObj.get("allowedRaidCampaignId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedRaidCampaignId` to be an array in the JSON string but got `%s`", jsonObj.get("allowedRaidCampaignId").toString()));
      }
      if ((jsonObj.get("bannerLogoId") != null && !jsonObj.get("bannerLogoId").isJsonNull()) && !jsonObj.get("bannerLogoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerLogoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerLogoId").toString()));
      }
      if ((jsonObj.get("bannerColorId") != null && !jsonObj.get("bannerColorId").isJsonNull()) && !jsonObj.get("bannerColorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerColorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerColorId").toString()));
      }
      if ((jsonObj.get("externalMessageKey") != null && !jsonObj.get("externalMessageKey").isJsonNull()) && !jsonObj.get("externalMessageKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalMessageKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalMessageKey").toString()));
      }
      if ((jsonObj.get("subNameKey") != null && !jsonObj.get("subNameKey").isJsonNull()) && !jsonObj.get("subNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subNameKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StarterGuildDef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StarterGuildDef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StarterGuildDef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StarterGuildDef.class));

       return (TypeAdapter<T>) new TypeAdapter<StarterGuildDef>() {
           @Override
           public void write(JsonWriter out, StarterGuildDef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StarterGuildDef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StarterGuildDef given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StarterGuildDef
   * @throws IOException if the JSON string is invalid with respect to StarterGuildDef
   */
  public static StarterGuildDef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StarterGuildDef.class);
  }

  /**
   * Convert an instance of StarterGuildDef to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

