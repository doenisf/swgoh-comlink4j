/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.BucketItem;
import io.github.doenisf.comlink4j.CalendarCatchUp;
import io.github.doenisf.comlink4j.CalendarCompletionBehavior;
import io.github.doenisf.comlink4j.CalendarExpiry;
import io.github.doenisf.comlink4j.CalendarMissedConsequence;
import io.github.doenisf.comlink4j.CalendarVisuals;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * DailyLoginRewardDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class DailyLoginRewardDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_DEFAULT_BUCKET_ITEM = "defaultBucketItem";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BUCKET_ITEM)
  private BucketItem defaultBucketItem;

  public static final String SERIALIZED_NAME_REWARD = "reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private List<BucketItem> reward = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONTHLY = "monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private Boolean monthly;

  public static final String SERIALIZED_NAME_MISSED_CONSEQUENCE = "missedConsequence";
  @SerializedName(SERIALIZED_NAME_MISSED_CONSEQUENCE)
  private CalendarMissedConsequence missedConsequence;

  public static final String SERIALIZED_NAME_COMPLETION_BEHAVIOR = "completionBehavior";
  @SerializedName(SERIALIZED_NAME_COMPLETION_BEHAVIOR)
  private CalendarCompletionBehavior completionBehavior;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DELAY_FIRST_REWARD = "delayFirstReward";
  @SerializedName(SERIALIZED_NAME_DELAY_FIRST_REWARD)
  private Boolean delayFirstReward;

  public static final String SERIALIZED_NAME_CATCH_UP = "catchUp";
  @SerializedName(SERIALIZED_NAME_CATCH_UP)
  private CalendarCatchUp catchUp;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private CalendarExpiry expiry;

  public static final String SERIALIZED_NAME_VISUAL_OVERRIDE = "visualOverride";
  @SerializedName(SERIALIZED_NAME_VISUAL_OVERRIDE)
  private CalendarVisuals visualOverride;

  public static final String SERIALIZED_NAME_CATCHUP_COST = "catchupCost";
  @SerializedName(SERIALIZED_NAME_CATCHUP_COST)
  private BucketItem catchupCost;

  public DailyLoginRewardDefinition() {
  }

  public DailyLoginRewardDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DailyLoginRewardDefinition title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DailyLoginRewardDefinition message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DailyLoginRewardDefinition defaultBucketItem(BucketItem defaultBucketItem) {
    this.defaultBucketItem = defaultBucketItem;
    return this;
  }

  /**
   * Get defaultBucketItem
   * @return defaultBucketItem
   */
  @javax.annotation.Nullable
  public BucketItem getDefaultBucketItem() {
    return defaultBucketItem;
  }

  public void setDefaultBucketItem(BucketItem defaultBucketItem) {
    this.defaultBucketItem = defaultBucketItem;
  }


  public DailyLoginRewardDefinition reward(List<BucketItem> reward) {
    this.reward = reward;
    return this;
  }

  public DailyLoginRewardDefinition addRewardItem(BucketItem rewardItem) {
    if (this.reward == null) {
      this.reward = new ArrayList<>();
    }
    this.reward.add(rewardItem);
    return this;
  }

  /**
   * Get reward
   * @return reward
   */
  @javax.annotation.Nullable
  public List<BucketItem> getReward() {
    return reward;
  }

  public void setReward(List<BucketItem> reward) {
    this.reward = reward;
  }


  public DailyLoginRewardDefinition monthly(Boolean monthly) {
    this.monthly = monthly;
    return this;
  }

  /**
   * Get monthly
   * @return monthly
   */
  @javax.annotation.Nullable
  public Boolean getMonthly() {
    return monthly;
  }

  public void setMonthly(Boolean monthly) {
    this.monthly = monthly;
  }


  public DailyLoginRewardDefinition missedConsequence(CalendarMissedConsequence missedConsequence) {
    this.missedConsequence = missedConsequence;
    return this;
  }

  /**
   * Get missedConsequence
   * @return missedConsequence
   */
  @javax.annotation.Nullable
  public CalendarMissedConsequence getMissedConsequence() {
    return missedConsequence;
  }

  public void setMissedConsequence(CalendarMissedConsequence missedConsequence) {
    this.missedConsequence = missedConsequence;
  }


  public DailyLoginRewardDefinition completionBehavior(CalendarCompletionBehavior completionBehavior) {
    this.completionBehavior = completionBehavior;
    return this;
  }

  /**
   * Get completionBehavior
   * @return completionBehavior
   */
  @javax.annotation.Nullable
  public CalendarCompletionBehavior getCompletionBehavior() {
    return completionBehavior;
  }

  public void setCompletionBehavior(CalendarCompletionBehavior completionBehavior) {
    this.completionBehavior = completionBehavior;
  }


  public DailyLoginRewardDefinition icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public DailyLoginRewardDefinition category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public DailyLoginRewardDefinition delayFirstReward(Boolean delayFirstReward) {
    this.delayFirstReward = delayFirstReward;
    return this;
  }

  /**
   * Get delayFirstReward
   * @return delayFirstReward
   */
  @javax.annotation.Nullable
  public Boolean getDelayFirstReward() {
    return delayFirstReward;
  }

  public void setDelayFirstReward(Boolean delayFirstReward) {
    this.delayFirstReward = delayFirstReward;
  }


  public DailyLoginRewardDefinition catchUp(CalendarCatchUp catchUp) {
    this.catchUp = catchUp;
    return this;
  }

  /**
   * Get catchUp
   * @return catchUp
   */
  @javax.annotation.Nullable
  public CalendarCatchUp getCatchUp() {
    return catchUp;
  }

  public void setCatchUp(CalendarCatchUp catchUp) {
    this.catchUp = catchUp;
  }


  public DailyLoginRewardDefinition expiry(CalendarExpiry expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * Get expiry
   * @return expiry
   */
  @javax.annotation.Nullable
  public CalendarExpiry getExpiry() {
    return expiry;
  }

  public void setExpiry(CalendarExpiry expiry) {
    this.expiry = expiry;
  }


  public DailyLoginRewardDefinition visualOverride(CalendarVisuals visualOverride) {
    this.visualOverride = visualOverride;
    return this;
  }

  /**
   * Get visualOverride
   * @return visualOverride
   */
  @javax.annotation.Nullable
  public CalendarVisuals getVisualOverride() {
    return visualOverride;
  }

  public void setVisualOverride(CalendarVisuals visualOverride) {
    this.visualOverride = visualOverride;
  }


  public DailyLoginRewardDefinition catchupCost(BucketItem catchupCost) {
    this.catchupCost = catchupCost;
    return this;
  }

  /**
   * Get catchupCost
   * @return catchupCost
   */
  @javax.annotation.Nullable
  public BucketItem getCatchupCost() {
    return catchupCost;
  }

  public void setCatchupCost(BucketItem catchupCost) {
    this.catchupCost = catchupCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyLoginRewardDefinition dailyLoginRewardDefinition = (DailyLoginRewardDefinition) o;
    return Objects.equals(this.id, dailyLoginRewardDefinition.id) &&
        Objects.equals(this.title, dailyLoginRewardDefinition.title) &&
        Objects.equals(this.message, dailyLoginRewardDefinition.message) &&
        Objects.equals(this.defaultBucketItem, dailyLoginRewardDefinition.defaultBucketItem) &&
        Objects.equals(this.reward, dailyLoginRewardDefinition.reward) &&
        Objects.equals(this.monthly, dailyLoginRewardDefinition.monthly) &&
        Objects.equals(this.missedConsequence, dailyLoginRewardDefinition.missedConsequence) &&
        Objects.equals(this.completionBehavior, dailyLoginRewardDefinition.completionBehavior) &&
        Objects.equals(this.icon, dailyLoginRewardDefinition.icon) &&
        Objects.equals(this.category, dailyLoginRewardDefinition.category) &&
        Objects.equals(this.delayFirstReward, dailyLoginRewardDefinition.delayFirstReward) &&
        Objects.equals(this.catchUp, dailyLoginRewardDefinition.catchUp) &&
        Objects.equals(this.expiry, dailyLoginRewardDefinition.expiry) &&
        Objects.equals(this.visualOverride, dailyLoginRewardDefinition.visualOverride) &&
        Objects.equals(this.catchupCost, dailyLoginRewardDefinition.catchupCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, message, defaultBucketItem, reward, monthly, missedConsequence, completionBehavior, icon, category, delayFirstReward, catchUp, expiry, visualOverride, catchupCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyLoginRewardDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    defaultBucketItem: ").append(toIndentedString(defaultBucketItem)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("    missedConsequence: ").append(toIndentedString(missedConsequence)).append("\n");
    sb.append("    completionBehavior: ").append(toIndentedString(completionBehavior)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    delayFirstReward: ").append(toIndentedString(delayFirstReward)).append("\n");
    sb.append("    catchUp: ").append(toIndentedString(catchUp)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    visualOverride: ").append(toIndentedString(visualOverride)).append("\n");
    sb.append("    catchupCost: ").append(toIndentedString(catchupCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("message");
    openapiFields.add("defaultBucketItem");
    openapiFields.add("reward");
    openapiFields.add("monthly");
    openapiFields.add("missedConsequence");
    openapiFields.add("completionBehavior");
    openapiFields.add("icon");
    openapiFields.add("category");
    openapiFields.add("delayFirstReward");
    openapiFields.add("catchUp");
    openapiFields.add("expiry");
    openapiFields.add("visualOverride");
    openapiFields.add("catchupCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyLoginRewardDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyLoginRewardDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyLoginRewardDefinition is not found in the empty JSON string", DailyLoginRewardDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyLoginRewardDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyLoginRewardDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `defaultBucketItem`
      if (jsonObj.get("defaultBucketItem") != null && !jsonObj.get("defaultBucketItem").isJsonNull()) {
        BucketItem.validateJsonElement(jsonObj.get("defaultBucketItem"));
      }
      if (jsonObj.get("reward") != null && !jsonObj.get("reward").isJsonNull()) {
        JsonArray jsonArrayreward = jsonObj.getAsJsonArray("reward");
        if (jsonArrayreward != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reward").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reward` to be an array in the JSON string but got `%s`", jsonObj.get("reward").toString()));
          }

          // validate the optional field `reward` (array)
          for (int i = 0; i < jsonArrayreward.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayreward.get(i));
          };
        }
      }
      // validate the optional field `missedConsequence`
      if (jsonObj.get("missedConsequence") != null && !jsonObj.get("missedConsequence").isJsonNull()) {
        CalendarMissedConsequence.validateJsonElement(jsonObj.get("missedConsequence"));
      }
      // validate the optional field `completionBehavior`
      if (jsonObj.get("completionBehavior") != null && !jsonObj.get("completionBehavior").isJsonNull()) {
        CalendarCompletionBehavior.validateJsonElement(jsonObj.get("completionBehavior"));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `catchUp`
      if (jsonObj.get("catchUp") != null && !jsonObj.get("catchUp").isJsonNull()) {
        CalendarCatchUp.validateJsonElement(jsonObj.get("catchUp"));
      }
      // validate the optional field `expiry`
      if (jsonObj.get("expiry") != null && !jsonObj.get("expiry").isJsonNull()) {
        CalendarExpiry.validateJsonElement(jsonObj.get("expiry"));
      }
      // validate the optional field `visualOverride`
      if (jsonObj.get("visualOverride") != null && !jsonObj.get("visualOverride").isJsonNull()) {
        CalendarVisuals.validateJsonElement(jsonObj.get("visualOverride"));
      }
      // validate the optional field `catchupCost`
      if (jsonObj.get("catchupCost") != null && !jsonObj.get("catchupCost").isJsonNull()) {
        BucketItem.validateJsonElement(jsonObj.get("catchupCost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyLoginRewardDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyLoginRewardDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyLoginRewardDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyLoginRewardDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyLoginRewardDefinition>() {
           @Override
           public void write(JsonWriter out, DailyLoginRewardDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyLoginRewardDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyLoginRewardDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyLoginRewardDefinition
   * @throws IOException if the JSON string is invalid with respect to DailyLoginRewardDefinition
   */
  public static DailyLoginRewardDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyLoginRewardDefinition.class);
  }

  /**
   * Convert an instance of DailyLoginRewardDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

