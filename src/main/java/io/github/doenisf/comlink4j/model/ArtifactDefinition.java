/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.TargetedStat;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * ArtifactDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ArtifactDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_POWER_LEVEL = "powerLevel";
  @SerializedName(SERIALIZED_NAME_POWER_LEVEL)
  private Integer powerLevel;

  public static final String SERIALIZED_NAME_GRANTED_ABILITY = "grantedAbility";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITY)
  private List<MissionGrantedAbility> grantedAbility = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESCRIPTION_KEY = "descriptionKey";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_KEY)
  private String descriptionKey;

  public static final String SERIALIZED_NAME_TEXTURE = "texture";
  @SerializedName(SERIALIZED_NAME_TEXTURE)
  private String texture;

  public static final String SERIALIZED_NAME_TARGETED_STAT = "targetedStat";
  @SerializedName(SERIALIZED_NAME_TARGETED_STAT)
  private List<TargetedStat> targetedStat = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIER_ID = "tierId";
  @SerializedName(SERIALIZED_NAME_TIER_ID)
  private String tierId;

  public ArtifactDefinition() {
  }

  public ArtifactDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ArtifactDefinition powerLevel(Integer powerLevel) {
    this.powerLevel = powerLevel;
    return this;
  }

  /**
   * Get powerLevel
   * @return powerLevel
   */
  @javax.annotation.Nullable
  public Integer getPowerLevel() {
    return powerLevel;
  }

  public void setPowerLevel(Integer powerLevel) {
    this.powerLevel = powerLevel;
  }


  public ArtifactDefinition grantedAbility(List<MissionGrantedAbility> grantedAbility) {
    this.grantedAbility = grantedAbility;
    return this;
  }

  public ArtifactDefinition addGrantedAbilityItem(MissionGrantedAbility grantedAbilityItem) {
    if (this.grantedAbility == null) {
      this.grantedAbility = new ArrayList<>();
    }
    this.grantedAbility.add(grantedAbilityItem);
    return this;
  }

  /**
   * Get grantedAbility
   * @return grantedAbility
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbility() {
    return grantedAbility;
  }

  public void setGrantedAbility(List<MissionGrantedAbility> grantedAbility) {
    this.grantedAbility = grantedAbility;
  }


  public ArtifactDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public ArtifactDefinition descriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
    return this;
  }

  /**
   * Get descriptionKey
   * @return descriptionKey
   */
  @javax.annotation.Nullable
  public String getDescriptionKey() {
    return descriptionKey;
  }

  public void setDescriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
  }


  public ArtifactDefinition texture(String texture) {
    this.texture = texture;
    return this;
  }

  /**
   * Get texture
   * @return texture
   */
  @javax.annotation.Nullable
  public String getTexture() {
    return texture;
  }

  public void setTexture(String texture) {
    this.texture = texture;
  }


  public ArtifactDefinition targetedStat(List<TargetedStat> targetedStat) {
    this.targetedStat = targetedStat;
    return this;
  }

  public ArtifactDefinition addTargetedStatItem(TargetedStat targetedStatItem) {
    if (this.targetedStat == null) {
      this.targetedStat = new ArrayList<>();
    }
    this.targetedStat.add(targetedStatItem);
    return this;
  }

  /**
   * Get targetedStat
   * @return targetedStat
   */
  @javax.annotation.Nullable
  public List<TargetedStat> getTargetedStat() {
    return targetedStat;
  }

  public void setTargetedStat(List<TargetedStat> targetedStat) {
    this.targetedStat = targetedStat;
  }


  public ArtifactDefinition tierId(String tierId) {
    this.tierId = tierId;
    return this;
  }

  /**
   * Get tierId
   * @return tierId
   */
  @javax.annotation.Nullable
  public String getTierId() {
    return tierId;
  }

  public void setTierId(String tierId) {
    this.tierId = tierId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtifactDefinition artifactDefinition = (ArtifactDefinition) o;
    return Objects.equals(this.id, artifactDefinition.id) &&
        Objects.equals(this.powerLevel, artifactDefinition.powerLevel) &&
        Objects.equals(this.grantedAbility, artifactDefinition.grantedAbility) &&
        Objects.equals(this.nameKey, artifactDefinition.nameKey) &&
        Objects.equals(this.descriptionKey, artifactDefinition.descriptionKey) &&
        Objects.equals(this.texture, artifactDefinition.texture) &&
        Objects.equals(this.targetedStat, artifactDefinition.targetedStat) &&
        Objects.equals(this.tierId, artifactDefinition.tierId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, powerLevel, grantedAbility, nameKey, descriptionKey, texture, targetedStat, tierId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtifactDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    powerLevel: ").append(toIndentedString(powerLevel)).append("\n");
    sb.append("    grantedAbility: ").append(toIndentedString(grantedAbility)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descriptionKey: ").append(toIndentedString(descriptionKey)).append("\n");
    sb.append("    texture: ").append(toIndentedString(texture)).append("\n");
    sb.append("    targetedStat: ").append(toIndentedString(targetedStat)).append("\n");
    sb.append("    tierId: ").append(toIndentedString(tierId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("powerLevel");
    openapiFields.add("grantedAbility");
    openapiFields.add("nameKey");
    openapiFields.add("descriptionKey");
    openapiFields.add("texture");
    openapiFields.add("targetedStat");
    openapiFields.add("tierId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtifactDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtifactDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtifactDefinition is not found in the empty JSON string", ArtifactDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtifactDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtifactDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("grantedAbility") != null && !jsonObj.get("grantedAbility").isJsonNull()) {
        JsonArray jsonArraygrantedAbility = jsonObj.getAsJsonArray("grantedAbility");
        if (jsonArraygrantedAbility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbility` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbility").toString()));
          }

          // validate the optional field `grantedAbility` (array)
          for (int i = 0; i < jsonArraygrantedAbility.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbility.get(i));
          };
        }
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descriptionKey") != null && !jsonObj.get("descriptionKey").isJsonNull()) && !jsonObj.get("descriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionKey").toString()));
      }
      if ((jsonObj.get("texture") != null && !jsonObj.get("texture").isJsonNull()) && !jsonObj.get("texture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `texture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("texture").toString()));
      }
      if (jsonObj.get("targetedStat") != null && !jsonObj.get("targetedStat").isJsonNull()) {
        JsonArray jsonArraytargetedStat = jsonObj.getAsJsonArray("targetedStat");
        if (jsonArraytargetedStat != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetedStat").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetedStat` to be an array in the JSON string but got `%s`", jsonObj.get("targetedStat").toString()));
          }

          // validate the optional field `targetedStat` (array)
          for (int i = 0; i < jsonArraytargetedStat.size(); i++) {
            TargetedStat.validateJsonElement(jsonArraytargetedStat.get(i));
          };
        }
      }
      if ((jsonObj.get("tierId") != null && !jsonObj.get("tierId").isJsonNull()) && !jsonObj.get("tierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tierId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtifactDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtifactDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtifactDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtifactDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtifactDefinition>() {
           @Override
           public void write(JsonWriter out, ArtifactDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtifactDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtifactDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtifactDefinition
   * @throws IOException if the JSON string is invalid with respect to ArtifactDefinition
   */
  public static ArtifactDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtifactDefinition.class);
  }

  /**
   * Convert an instance of ArtifactDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

