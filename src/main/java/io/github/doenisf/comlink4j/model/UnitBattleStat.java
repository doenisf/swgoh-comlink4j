/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.EquipmentSlot;
import io.github.doenisf.comlink4j.RelicTier;
import io.github.doenisf.comlink4j.Skill;
import io.github.doenisf.comlink4j.Stat;
import io.github.doenisf.comlink4j.StatDef;
import io.github.doenisf.comlink4j.StatMod;
import io.github.doenisf.comlink4j.ThreatLevel;
import io.github.doenisf.comlink4j.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * UnitBattleStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class UnitBattleStat {
  public static final String SERIALIZED_NAME_ACTION_COUNT_MIN = "actionCountMin";
  @SerializedName(SERIALIZED_NAME_ACTION_COUNT_MIN)
  private Integer actionCountMin;

  public static final String SERIALIZED_NAME_ACTION_COUNT_MAX = "actionCountMax";
  @SerializedName(SERIALIZED_NAME_ACTION_COUNT_MAX)
  private Integer actionCountMax;

  public static final String SERIALIZED_NAME_BATTLE_STAT = "battleStat";
  @SerializedName(SERIALIZED_NAME_BATTLE_STAT)
  private StatDef battleStat;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private UnitTier tier;

  public static final String SERIALIZED_NAME_EQUIPMENT = "equipment";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT)
  private List<EquipmentSlot> equipment = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKILL = "skill";
  @SerializedName(SERIALIZED_NAME_SKILL)
  private List<Skill> skill = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAT_MOD = "statMod";
  @SerializedName(SERIALIZED_NAME_STAT_MOD)
  private List<StatMod> statMod = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_DEF_ID = "unitDefId";
  @SerializedName(SERIALIZED_NAME_UNIT_DEF_ID)
  private String unitDefId;

  public static final String SERIALIZED_NAME_UNIT_ID = "unitId";
  @SerializedName(SERIALIZED_NAME_UNIT_ID)
  private String unitId;

  public static final String SERIALIZED_NAME_UNIT_RELIC_TIER = "unitRelicTier";
  @SerializedName(SERIALIZED_NAME_UNIT_RELIC_TIER)
  private RelicTier unitRelicTier;

  public static final String SERIALIZED_NAME_PURCHASED_ABILITY_ID = "purchasedAbilityId";
  @SerializedName(SERIALIZED_NAME_PURCHASED_ABILITY_ID)
  private List<String> purchasedAbilityId = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERRIDE_ALL_STATS_MULTIPLIER = "overrideAllStatsMultiplier";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_ALL_STATS_MULTIPLIER)
  private Double overrideAllStatsMultiplier;

  public static final String SERIALIZED_NAME_OVERRIDE_STAT_MULTIPLIER = "overrideStatMultiplier";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_STAT_MULTIPLIER)
  private List<Stat> overrideStatMultiplier = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_STATS_OVERWRITE = "skipStatsOverwrite";
  @SerializedName(SERIALIZED_NAME_SKIP_STATS_OVERWRITE)
  private Boolean skipStatsOverwrite;

  public static final String SERIALIZED_NAME_ENABLE_LEADER_ABILITY = "enableLeaderAbility";
  @SerializedName(SERIALIZED_NAME_ENABLE_LEADER_ABILITY)
  private Boolean enableLeaderAbility;

  public static final String SERIALIZED_NAME_THREAT_LEVEL_OVERRIDE = "threatLevelOverride";
  @SerializedName(SERIALIZED_NAME_THREAT_LEVEL_OVERRIDE)
  private ThreatLevel threatLevelOverride;

  public static final String SERIALIZED_NAME_OVERRIDE_ALL_STATS_TABLE = "overrideAllStatsTable";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_ALL_STATS_TABLE)
  private String overrideAllStatsTable;

  public UnitBattleStat() {
  }

  public UnitBattleStat actionCountMin(Integer actionCountMin) {
    this.actionCountMin = actionCountMin;
    return this;
  }

  /**
   * Get actionCountMin
   * @return actionCountMin
   */
  @javax.annotation.Nullable
  public Integer getActionCountMin() {
    return actionCountMin;
  }

  public void setActionCountMin(Integer actionCountMin) {
    this.actionCountMin = actionCountMin;
  }


  public UnitBattleStat actionCountMax(Integer actionCountMax) {
    this.actionCountMax = actionCountMax;
    return this;
  }

  /**
   * Get actionCountMax
   * @return actionCountMax
   */
  @javax.annotation.Nullable
  public Integer getActionCountMax() {
    return actionCountMax;
  }

  public void setActionCountMax(Integer actionCountMax) {
    this.actionCountMax = actionCountMax;
  }


  public UnitBattleStat battleStat(StatDef battleStat) {
    this.battleStat = battleStat;
    return this;
  }

  /**
   * Get battleStat
   * @return battleStat
   */
  @javax.annotation.Nullable
  public StatDef getBattleStat() {
    return battleStat;
  }

  public void setBattleStat(StatDef battleStat) {
    this.battleStat = battleStat;
  }


  public UnitBattleStat level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public UnitBattleStat tier(UnitTier tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public UnitTier getTier() {
    return tier;
  }

  public void setTier(UnitTier tier) {
    this.tier = tier;
  }


  public UnitBattleStat equipment(List<EquipmentSlot> equipment) {
    this.equipment = equipment;
    return this;
  }

  public UnitBattleStat addEquipmentItem(EquipmentSlot equipmentItem) {
    if (this.equipment == null) {
      this.equipment = new ArrayList<>();
    }
    this.equipment.add(equipmentItem);
    return this;
  }

  /**
   * Get equipment
   * @return equipment
   */
  @javax.annotation.Nullable
  public List<EquipmentSlot> getEquipment() {
    return equipment;
  }

  public void setEquipment(List<EquipmentSlot> equipment) {
    this.equipment = equipment;
  }


  public UnitBattleStat skill(List<Skill> skill) {
    this.skill = skill;
    return this;
  }

  public UnitBattleStat addSkillItem(Skill skillItem) {
    if (this.skill == null) {
      this.skill = new ArrayList<>();
    }
    this.skill.add(skillItem);
    return this;
  }

  /**
   * Get skill
   * @return skill
   */
  @javax.annotation.Nullable
  public List<Skill> getSkill() {
    return skill;
  }

  public void setSkill(List<Skill> skill) {
    this.skill = skill;
  }


  public UnitBattleStat statMod(List<StatMod> statMod) {
    this.statMod = statMod;
    return this;
  }

  public UnitBattleStat addStatModItem(StatMod statModItem) {
    if (this.statMod == null) {
      this.statMod = new ArrayList<>();
    }
    this.statMod.add(statModItem);
    return this;
  }

  /**
   * Get statMod
   * @return statMod
   */
  @javax.annotation.Nullable
  public List<StatMod> getStatMod() {
    return statMod;
  }

  public void setStatMod(List<StatMod> statMod) {
    this.statMod = statMod;
  }


  public UnitBattleStat unitDefId(String unitDefId) {
    this.unitDefId = unitDefId;
    return this;
  }

  /**
   * Get unitDefId
   * @return unitDefId
   */
  @javax.annotation.Nullable
  public String getUnitDefId() {
    return unitDefId;
  }

  public void setUnitDefId(String unitDefId) {
    this.unitDefId = unitDefId;
  }


  public UnitBattleStat unitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  /**
   * Get unitId
   * @return unitId
   */
  @javax.annotation.Nullable
  public String getUnitId() {
    return unitId;
  }

  public void setUnitId(String unitId) {
    this.unitId = unitId;
  }


  public UnitBattleStat unitRelicTier(RelicTier unitRelicTier) {
    this.unitRelicTier = unitRelicTier;
    return this;
  }

  /**
   * Get unitRelicTier
   * @return unitRelicTier
   */
  @javax.annotation.Nullable
  public RelicTier getUnitRelicTier() {
    return unitRelicTier;
  }

  public void setUnitRelicTier(RelicTier unitRelicTier) {
    this.unitRelicTier = unitRelicTier;
  }


  public UnitBattleStat purchasedAbilityId(List<String> purchasedAbilityId) {
    this.purchasedAbilityId = purchasedAbilityId;
    return this;
  }

  public UnitBattleStat addPurchasedAbilityIdItem(String purchasedAbilityIdItem) {
    if (this.purchasedAbilityId == null) {
      this.purchasedAbilityId = new ArrayList<>();
    }
    this.purchasedAbilityId.add(purchasedAbilityIdItem);
    return this;
  }

  /**
   * Get purchasedAbilityId
   * @return purchasedAbilityId
   */
  @javax.annotation.Nullable
  public List<String> getPurchasedAbilityId() {
    return purchasedAbilityId;
  }

  public void setPurchasedAbilityId(List<String> purchasedAbilityId) {
    this.purchasedAbilityId = purchasedAbilityId;
  }


  public UnitBattleStat overrideAllStatsMultiplier(Double overrideAllStatsMultiplier) {
    this.overrideAllStatsMultiplier = overrideAllStatsMultiplier;
    return this;
  }

  /**
   * Get overrideAllStatsMultiplier
   * @return overrideAllStatsMultiplier
   */
  @javax.annotation.Nullable
  public Double getOverrideAllStatsMultiplier() {
    return overrideAllStatsMultiplier;
  }

  public void setOverrideAllStatsMultiplier(Double overrideAllStatsMultiplier) {
    this.overrideAllStatsMultiplier = overrideAllStatsMultiplier;
  }


  public UnitBattleStat overrideStatMultiplier(List<Stat> overrideStatMultiplier) {
    this.overrideStatMultiplier = overrideStatMultiplier;
    return this;
  }

  public UnitBattleStat addOverrideStatMultiplierItem(Stat overrideStatMultiplierItem) {
    if (this.overrideStatMultiplier == null) {
      this.overrideStatMultiplier = new ArrayList<>();
    }
    this.overrideStatMultiplier.add(overrideStatMultiplierItem);
    return this;
  }

  /**
   * Get overrideStatMultiplier
   * @return overrideStatMultiplier
   */
  @javax.annotation.Nullable
  public List<Stat> getOverrideStatMultiplier() {
    return overrideStatMultiplier;
  }

  public void setOverrideStatMultiplier(List<Stat> overrideStatMultiplier) {
    this.overrideStatMultiplier = overrideStatMultiplier;
  }


  public UnitBattleStat skipStatsOverwrite(Boolean skipStatsOverwrite) {
    this.skipStatsOverwrite = skipStatsOverwrite;
    return this;
  }

  /**
   * Get skipStatsOverwrite
   * @return skipStatsOverwrite
   */
  @javax.annotation.Nullable
  public Boolean getSkipStatsOverwrite() {
    return skipStatsOverwrite;
  }

  public void setSkipStatsOverwrite(Boolean skipStatsOverwrite) {
    this.skipStatsOverwrite = skipStatsOverwrite;
  }


  public UnitBattleStat enableLeaderAbility(Boolean enableLeaderAbility) {
    this.enableLeaderAbility = enableLeaderAbility;
    return this;
  }

  /**
   * Get enableLeaderAbility
   * @return enableLeaderAbility
   */
  @javax.annotation.Nullable
  public Boolean getEnableLeaderAbility() {
    return enableLeaderAbility;
  }

  public void setEnableLeaderAbility(Boolean enableLeaderAbility) {
    this.enableLeaderAbility = enableLeaderAbility;
  }


  public UnitBattleStat threatLevelOverride(ThreatLevel threatLevelOverride) {
    this.threatLevelOverride = threatLevelOverride;
    return this;
  }

  /**
   * Get threatLevelOverride
   * @return threatLevelOverride
   */
  @javax.annotation.Nullable
  public ThreatLevel getThreatLevelOverride() {
    return threatLevelOverride;
  }

  public void setThreatLevelOverride(ThreatLevel threatLevelOverride) {
    this.threatLevelOverride = threatLevelOverride;
  }


  public UnitBattleStat overrideAllStatsTable(String overrideAllStatsTable) {
    this.overrideAllStatsTable = overrideAllStatsTable;
    return this;
  }

  /**
   * Get overrideAllStatsTable
   * @return overrideAllStatsTable
   */
  @javax.annotation.Nullable
  public String getOverrideAllStatsTable() {
    return overrideAllStatsTable;
  }

  public void setOverrideAllStatsTable(String overrideAllStatsTable) {
    this.overrideAllStatsTable = overrideAllStatsTable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitBattleStat unitBattleStat = (UnitBattleStat) o;
    return Objects.equals(this.actionCountMin, unitBattleStat.actionCountMin) &&
        Objects.equals(this.actionCountMax, unitBattleStat.actionCountMax) &&
        Objects.equals(this.battleStat, unitBattleStat.battleStat) &&
        Objects.equals(this.level, unitBattleStat.level) &&
        Objects.equals(this.tier, unitBattleStat.tier) &&
        Objects.equals(this.equipment, unitBattleStat.equipment) &&
        Objects.equals(this.skill, unitBattleStat.skill) &&
        Objects.equals(this.statMod, unitBattleStat.statMod) &&
        Objects.equals(this.unitDefId, unitBattleStat.unitDefId) &&
        Objects.equals(this.unitId, unitBattleStat.unitId) &&
        Objects.equals(this.unitRelicTier, unitBattleStat.unitRelicTier) &&
        Objects.equals(this.purchasedAbilityId, unitBattleStat.purchasedAbilityId) &&
        Objects.equals(this.overrideAllStatsMultiplier, unitBattleStat.overrideAllStatsMultiplier) &&
        Objects.equals(this.overrideStatMultiplier, unitBattleStat.overrideStatMultiplier) &&
        Objects.equals(this.skipStatsOverwrite, unitBattleStat.skipStatsOverwrite) &&
        Objects.equals(this.enableLeaderAbility, unitBattleStat.enableLeaderAbility) &&
        Objects.equals(this.threatLevelOverride, unitBattleStat.threatLevelOverride) &&
        Objects.equals(this.overrideAllStatsTable, unitBattleStat.overrideAllStatsTable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionCountMin, actionCountMax, battleStat, level, tier, equipment, skill, statMod, unitDefId, unitId, unitRelicTier, purchasedAbilityId, overrideAllStatsMultiplier, overrideStatMultiplier, skipStatsOverwrite, enableLeaderAbility, threatLevelOverride, overrideAllStatsTable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitBattleStat {\n");
    sb.append("    actionCountMin: ").append(toIndentedString(actionCountMin)).append("\n");
    sb.append("    actionCountMax: ").append(toIndentedString(actionCountMax)).append("\n");
    sb.append("    battleStat: ").append(toIndentedString(battleStat)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    equipment: ").append(toIndentedString(equipment)).append("\n");
    sb.append("    skill: ").append(toIndentedString(skill)).append("\n");
    sb.append("    statMod: ").append(toIndentedString(statMod)).append("\n");
    sb.append("    unitDefId: ").append(toIndentedString(unitDefId)).append("\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("    unitRelicTier: ").append(toIndentedString(unitRelicTier)).append("\n");
    sb.append("    purchasedAbilityId: ").append(toIndentedString(purchasedAbilityId)).append("\n");
    sb.append("    overrideAllStatsMultiplier: ").append(toIndentedString(overrideAllStatsMultiplier)).append("\n");
    sb.append("    overrideStatMultiplier: ").append(toIndentedString(overrideStatMultiplier)).append("\n");
    sb.append("    skipStatsOverwrite: ").append(toIndentedString(skipStatsOverwrite)).append("\n");
    sb.append("    enableLeaderAbility: ").append(toIndentedString(enableLeaderAbility)).append("\n");
    sb.append("    threatLevelOverride: ").append(toIndentedString(threatLevelOverride)).append("\n");
    sb.append("    overrideAllStatsTable: ").append(toIndentedString(overrideAllStatsTable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionCountMin");
    openapiFields.add("actionCountMax");
    openapiFields.add("battleStat");
    openapiFields.add("level");
    openapiFields.add("tier");
    openapiFields.add("equipment");
    openapiFields.add("skill");
    openapiFields.add("statMod");
    openapiFields.add("unitDefId");
    openapiFields.add("unitId");
    openapiFields.add("unitRelicTier");
    openapiFields.add("purchasedAbilityId");
    openapiFields.add("overrideAllStatsMultiplier");
    openapiFields.add("overrideStatMultiplier");
    openapiFields.add("skipStatsOverwrite");
    openapiFields.add("enableLeaderAbility");
    openapiFields.add("threatLevelOverride");
    openapiFields.add("overrideAllStatsTable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnitBattleStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitBattleStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitBattleStat is not found in the empty JSON string", UnitBattleStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnitBattleStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitBattleStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `battleStat`
      if (jsonObj.get("battleStat") != null && !jsonObj.get("battleStat").isJsonNull()) {
        StatDef.validateJsonElement(jsonObj.get("battleStat"));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("tier"));
      }
      if (jsonObj.get("equipment") != null && !jsonObj.get("equipment").isJsonNull()) {
        JsonArray jsonArrayequipment = jsonObj.getAsJsonArray("equipment");
        if (jsonArrayequipment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("equipment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `equipment` to be an array in the JSON string but got `%s`", jsonObj.get("equipment").toString()));
          }

          // validate the optional field `equipment` (array)
          for (int i = 0; i < jsonArrayequipment.size(); i++) {
            EquipmentSlot.validateJsonElement(jsonArrayequipment.get(i));
          };
        }
      }
      if (jsonObj.get("skill") != null && !jsonObj.get("skill").isJsonNull()) {
        JsonArray jsonArrayskill = jsonObj.getAsJsonArray("skill");
        if (jsonArrayskill != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skill").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skill` to be an array in the JSON string but got `%s`", jsonObj.get("skill").toString()));
          }

          // validate the optional field `skill` (array)
          for (int i = 0; i < jsonArrayskill.size(); i++) {
            Skill.validateJsonElement(jsonArrayskill.get(i));
          };
        }
      }
      if (jsonObj.get("statMod") != null && !jsonObj.get("statMod").isJsonNull()) {
        JsonArray jsonArraystatMod = jsonObj.getAsJsonArray("statMod");
        if (jsonArraystatMod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statMod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statMod` to be an array in the JSON string but got `%s`", jsonObj.get("statMod").toString()));
          }

          // validate the optional field `statMod` (array)
          for (int i = 0; i < jsonArraystatMod.size(); i++) {
            StatMod.validateJsonElement(jsonArraystatMod.get(i));
          };
        }
      }
      if ((jsonObj.get("unitDefId") != null && !jsonObj.get("unitDefId").isJsonNull()) && !jsonObj.get("unitDefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitDefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitDefId").toString()));
      }
      if ((jsonObj.get("unitId") != null && !jsonObj.get("unitId").isJsonNull()) && !jsonObj.get("unitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitId").toString()));
      }
      // validate the optional field `unitRelicTier`
      if (jsonObj.get("unitRelicTier") != null && !jsonObj.get("unitRelicTier").isJsonNull()) {
        RelicTier.validateJsonElement(jsonObj.get("unitRelicTier"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("purchasedAbilityId") != null && !jsonObj.get("purchasedAbilityId").isJsonNull() && !jsonObj.get("purchasedAbilityId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasedAbilityId` to be an array in the JSON string but got `%s`", jsonObj.get("purchasedAbilityId").toString()));
      }
      if (jsonObj.get("overrideStatMultiplier") != null && !jsonObj.get("overrideStatMultiplier").isJsonNull()) {
        JsonArray jsonArrayoverrideStatMultiplier = jsonObj.getAsJsonArray("overrideStatMultiplier");
        if (jsonArrayoverrideStatMultiplier != null) {
          // ensure the json data is an array
          if (!jsonObj.get("overrideStatMultiplier").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `overrideStatMultiplier` to be an array in the JSON string but got `%s`", jsonObj.get("overrideStatMultiplier").toString()));
          }

          // validate the optional field `overrideStatMultiplier` (array)
          for (int i = 0; i < jsonArrayoverrideStatMultiplier.size(); i++) {
            Stat.validateJsonElement(jsonArrayoverrideStatMultiplier.get(i));
          };
        }
      }
      // validate the optional field `threatLevelOverride`
      if (jsonObj.get("threatLevelOverride") != null && !jsonObj.get("threatLevelOverride").isJsonNull()) {
        ThreatLevel.validateJsonElement(jsonObj.get("threatLevelOverride"));
      }
      if ((jsonObj.get("overrideAllStatsTable") != null && !jsonObj.get("overrideAllStatsTable").isJsonNull()) && !jsonObj.get("overrideAllStatsTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideAllStatsTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overrideAllStatsTable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitBattleStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitBattleStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitBattleStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitBattleStat.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitBattleStat>() {
           @Override
           public void write(JsonWriter out, UnitBattleStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitBattleStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnitBattleStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnitBattleStat
   * @throws IOException if the JSON string is invalid with respect to UnitBattleStat
   */
  public static UnitBattleStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitBattleStat.class);
  }

  /**
   * Convert an instance of UnitBattleStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

