/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CampaignCinematic;
import io.github.doenisf.comlink4j.model.ColorType;
import io.github.doenisf.comlink4j.model.ContextualMessageGroup;
import io.github.doenisf.comlink4j.model.Environment;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * CampaignNodeEncounter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CampaignNodeEncounter {
  public static final String SERIALIZED_NAME_ENCOUNTER_CINEMATICS = "encounterCinematics";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_CINEMATICS)
  private List<CampaignCinematic> encounterCinematics = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List<Environment> environment = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCOUNTER_MESSAGE = "encounterMessage";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_MESSAGE)
  private List<ContextualMessageGroup> encounterMessage = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUDIO_KEY = "audioKey";
  @SerializedName(SERIALIZED_NAME_AUDIO_KEY)
  private String audioKey;

  public static final String SERIALIZED_NAME_ALLOW_CHANCE_MECHANICS = "allowChanceMechanics";
  @SerializedName(SERIALIZED_NAME_ALLOW_CHANCE_MECHANICS)
  private Boolean allowChanceMechanics;

  public static final String SERIALIZED_NAME_FIRST_TIME_ENCOUNTER_MESSAGE = "firstTimeEncounterMessage";
  @SerializedName(SERIALIZED_NAME_FIRST_TIME_ENCOUNTER_MESSAGE)
  private List<ContextualMessageGroup> firstTimeEncounterMessage = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCOUNTER_ICON = "encounterIcon";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_ICON)
  private String encounterIcon;

  public static final String SERIALIZED_NAME_ENCOUNTER_DESC_KEY = "encounterDescKey";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_DESC_KEY)
  private String encounterDescKey;

  public static final String SERIALIZED_NAME_ENCOUNTER_ICON_POSITION = "encounterIconPosition";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_ICON_POSITION)
  private Integer encounterIconPosition;

  public static final String SERIALIZED_NAME_RAID_PROGRESS_COLOR = "raidProgressColor";
  @SerializedName(SERIALIZED_NAME_RAID_PROGRESS_COLOR)
  private ColorType raidProgressColor;

  public static final String SERIALIZED_NAME_MAX_DEPLOYED_SQUAD_SIZE = "maxDeployedSquadSize";
  @SerializedName(SERIALIZED_NAME_MAX_DEPLOYED_SQUAD_SIZE)
  private Integer maxDeployedSquadSize;

  public static final String SERIALIZED_NAME_ENVIRONMENT_COLLECTION_ID = "environmentCollectionId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_COLLECTION_ID)
  private String environmentCollectionId;

  public static final String SERIALIZED_NAME_ENCOUNTER_ID = "encounterId";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_ID)
  private String encounterId;

  public static final String SERIALIZED_NAME_ENCOUNTER_DURATION_LIMIT = "encounterDurationLimit";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_DURATION_LIMIT)
  private Long encounterDurationLimit;

  public static final String SERIALIZED_NAME_SCORE_TO_COMPLETE = "scoreToComplete";
  @SerializedName(SERIALIZED_NAME_SCORE_TO_COMPLETE)
  private Long scoreToComplete;

  public static final String SERIALIZED_NAME_DETAIL_DESC_KEY = "detailDescKey";
  @SerializedName(SERIALIZED_NAME_DETAIL_DESC_KEY)
  private String detailDescKey;

  public static final String SERIALIZED_NAME_POINTS_TO_COMPLETE = "pointsToComplete";
  @SerializedName(SERIALIZED_NAME_POINTS_TO_COMPLETE)
  private Long pointsToComplete;

  public static final String SERIALIZED_NAME_AUDIO_VICTORY_KEY = "audioVictoryKey";
  @SerializedName(SERIALIZED_NAME_AUDIO_VICTORY_KEY)
  private String audioVictoryKey;

  public static final String SERIALIZED_NAME_DISPLAYABLE_ENEMY_ID = "displayableEnemyId";
  @SerializedName(SERIALIZED_NAME_DISPLAYABLE_ENEMY_ID)
  private List<String> displayableEnemyId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAYABLE_GRANTED_ABILITY = "displayableGrantedAbility";
  @SerializedName(SERIALIZED_NAME_DISPLAYABLE_GRANTED_ABILITY)
  private List<String> displayableGrantedAbility = new ArrayList<>();

  public CampaignNodeEncounter() {
  }

  public CampaignNodeEncounter encounterCinematics(List<CampaignCinematic> encounterCinematics) {
    this.encounterCinematics = encounterCinematics;
    return this;
  }

  public CampaignNodeEncounter addEncounterCinematicsItem(CampaignCinematic encounterCinematicsItem) {
    if (this.encounterCinematics == null) {
      this.encounterCinematics = new ArrayList<>();
    }
    this.encounterCinematics.add(encounterCinematicsItem);
    return this;
  }

  /**
   * Get encounterCinematics
   * @return encounterCinematics
   */
  @javax.annotation.Nullable
  public List<CampaignCinematic> getEncounterCinematics() {
    return encounterCinematics;
  }

  public void setEncounterCinematics(List<CampaignCinematic> encounterCinematics) {
    this.encounterCinematics = encounterCinematics;
  }


  public CampaignNodeEncounter environment(List<Environment> environment) {
    this.environment = environment;
    return this;
  }

  public CampaignNodeEncounter addEnvironmentItem(Environment environmentItem) {
    if (this.environment == null) {
      this.environment = new ArrayList<>();
    }
    this.environment.add(environmentItem);
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public List<Environment> getEnvironment() {
    return environment;
  }

  public void setEnvironment(List<Environment> environment) {
    this.environment = environment;
  }


  public CampaignNodeEncounter encounterMessage(List<ContextualMessageGroup> encounterMessage) {
    this.encounterMessage = encounterMessage;
    return this;
  }

  public CampaignNodeEncounter addEncounterMessageItem(ContextualMessageGroup encounterMessageItem) {
    if (this.encounterMessage == null) {
      this.encounterMessage = new ArrayList<>();
    }
    this.encounterMessage.add(encounterMessageItem);
    return this;
  }

  /**
   * Get encounterMessage
   * @return encounterMessage
   */
  @javax.annotation.Nullable
  public List<ContextualMessageGroup> getEncounterMessage() {
    return encounterMessage;
  }

  public void setEncounterMessage(List<ContextualMessageGroup> encounterMessage) {
    this.encounterMessage = encounterMessage;
  }


  public CampaignNodeEncounter audioKey(String audioKey) {
    this.audioKey = audioKey;
    return this;
  }

  /**
   * Get audioKey
   * @return audioKey
   */
  @javax.annotation.Nullable
  public String getAudioKey() {
    return audioKey;
  }

  public void setAudioKey(String audioKey) {
    this.audioKey = audioKey;
  }


  public CampaignNodeEncounter allowChanceMechanics(Boolean allowChanceMechanics) {
    this.allowChanceMechanics = allowChanceMechanics;
    return this;
  }

  /**
   * Get allowChanceMechanics
   * @return allowChanceMechanics
   */
  @javax.annotation.Nullable
  public Boolean getAllowChanceMechanics() {
    return allowChanceMechanics;
  }

  public void setAllowChanceMechanics(Boolean allowChanceMechanics) {
    this.allowChanceMechanics = allowChanceMechanics;
  }


  public CampaignNodeEncounter firstTimeEncounterMessage(List<ContextualMessageGroup> firstTimeEncounterMessage) {
    this.firstTimeEncounterMessage = firstTimeEncounterMessage;
    return this;
  }

  public CampaignNodeEncounter addFirstTimeEncounterMessageItem(ContextualMessageGroup firstTimeEncounterMessageItem) {
    if (this.firstTimeEncounterMessage == null) {
      this.firstTimeEncounterMessage = new ArrayList<>();
    }
    this.firstTimeEncounterMessage.add(firstTimeEncounterMessageItem);
    return this;
  }

  /**
   * Get firstTimeEncounterMessage
   * @return firstTimeEncounterMessage
   */
  @javax.annotation.Nullable
  public List<ContextualMessageGroup> getFirstTimeEncounterMessage() {
    return firstTimeEncounterMessage;
  }

  public void setFirstTimeEncounterMessage(List<ContextualMessageGroup> firstTimeEncounterMessage) {
    this.firstTimeEncounterMessage = firstTimeEncounterMessage;
  }


  public CampaignNodeEncounter encounterIcon(String encounterIcon) {
    this.encounterIcon = encounterIcon;
    return this;
  }

  /**
   * Get encounterIcon
   * @return encounterIcon
   */
  @javax.annotation.Nullable
  public String getEncounterIcon() {
    return encounterIcon;
  }

  public void setEncounterIcon(String encounterIcon) {
    this.encounterIcon = encounterIcon;
  }


  public CampaignNodeEncounter encounterDescKey(String encounterDescKey) {
    this.encounterDescKey = encounterDescKey;
    return this;
  }

  /**
   * Get encounterDescKey
   * @return encounterDescKey
   */
  @javax.annotation.Nullable
  public String getEncounterDescKey() {
    return encounterDescKey;
  }

  public void setEncounterDescKey(String encounterDescKey) {
    this.encounterDescKey = encounterDescKey;
  }


  public CampaignNodeEncounter encounterIconPosition(Integer encounterIconPosition) {
    this.encounterIconPosition = encounterIconPosition;
    return this;
  }

  /**
   * Get encounterIconPosition
   * @return encounterIconPosition
   */
  @javax.annotation.Nullable
  public Integer getEncounterIconPosition() {
    return encounterIconPosition;
  }

  public void setEncounterIconPosition(Integer encounterIconPosition) {
    this.encounterIconPosition = encounterIconPosition;
  }


  public CampaignNodeEncounter raidProgressColor(ColorType raidProgressColor) {
    this.raidProgressColor = raidProgressColor;
    return this;
  }

  /**
   * Get raidProgressColor
   * @return raidProgressColor
   */
  @javax.annotation.Nullable
  public ColorType getRaidProgressColor() {
    return raidProgressColor;
  }

  public void setRaidProgressColor(ColorType raidProgressColor) {
    this.raidProgressColor = raidProgressColor;
  }


  public CampaignNodeEncounter maxDeployedSquadSize(Integer maxDeployedSquadSize) {
    this.maxDeployedSquadSize = maxDeployedSquadSize;
    return this;
  }

  /**
   * Get maxDeployedSquadSize
   * @return maxDeployedSquadSize
   */
  @javax.annotation.Nullable
  public Integer getMaxDeployedSquadSize() {
    return maxDeployedSquadSize;
  }

  public void setMaxDeployedSquadSize(Integer maxDeployedSquadSize) {
    this.maxDeployedSquadSize = maxDeployedSquadSize;
  }


  public CampaignNodeEncounter environmentCollectionId(String environmentCollectionId) {
    this.environmentCollectionId = environmentCollectionId;
    return this;
  }

  /**
   * Get environmentCollectionId
   * @return environmentCollectionId
   */
  @javax.annotation.Nullable
  public String getEnvironmentCollectionId() {
    return environmentCollectionId;
  }

  public void setEnvironmentCollectionId(String environmentCollectionId) {
    this.environmentCollectionId = environmentCollectionId;
  }


  public CampaignNodeEncounter encounterId(String encounterId) {
    this.encounterId = encounterId;
    return this;
  }

  /**
   * Get encounterId
   * @return encounterId
   */
  @javax.annotation.Nullable
  public String getEncounterId() {
    return encounterId;
  }

  public void setEncounterId(String encounterId) {
    this.encounterId = encounterId;
  }


  public CampaignNodeEncounter encounterDurationLimit(Long encounterDurationLimit) {
    this.encounterDurationLimit = encounterDurationLimit;
    return this;
  }

  /**
   * Get encounterDurationLimit
   * @return encounterDurationLimit
   */
  @javax.annotation.Nullable
  public Long getEncounterDurationLimit() {
    return encounterDurationLimit;
  }

  public void setEncounterDurationLimit(Long encounterDurationLimit) {
    this.encounterDurationLimit = encounterDurationLimit;
  }


  public CampaignNodeEncounter scoreToComplete(Long scoreToComplete) {
    this.scoreToComplete = scoreToComplete;
    return this;
  }

  /**
   * Get scoreToComplete
   * @return scoreToComplete
   */
  @javax.annotation.Nullable
  public Long getScoreToComplete() {
    return scoreToComplete;
  }

  public void setScoreToComplete(Long scoreToComplete) {
    this.scoreToComplete = scoreToComplete;
  }


  public CampaignNodeEncounter detailDescKey(String detailDescKey) {
    this.detailDescKey = detailDescKey;
    return this;
  }

  /**
   * Get detailDescKey
   * @return detailDescKey
   */
  @javax.annotation.Nullable
  public String getDetailDescKey() {
    return detailDescKey;
  }

  public void setDetailDescKey(String detailDescKey) {
    this.detailDescKey = detailDescKey;
  }


  public CampaignNodeEncounter pointsToComplete(Long pointsToComplete) {
    this.pointsToComplete = pointsToComplete;
    return this;
  }

  /**
   * Get pointsToComplete
   * @return pointsToComplete
   */
  @javax.annotation.Nullable
  public Long getPointsToComplete() {
    return pointsToComplete;
  }

  public void setPointsToComplete(Long pointsToComplete) {
    this.pointsToComplete = pointsToComplete;
  }


  public CampaignNodeEncounter audioVictoryKey(String audioVictoryKey) {
    this.audioVictoryKey = audioVictoryKey;
    return this;
  }

  /**
   * Get audioVictoryKey
   * @return audioVictoryKey
   */
  @javax.annotation.Nullable
  public String getAudioVictoryKey() {
    return audioVictoryKey;
  }

  public void setAudioVictoryKey(String audioVictoryKey) {
    this.audioVictoryKey = audioVictoryKey;
  }


  public CampaignNodeEncounter displayableEnemyId(List<String> displayableEnemyId) {
    this.displayableEnemyId = displayableEnemyId;
    return this;
  }

  public CampaignNodeEncounter addDisplayableEnemyIdItem(String displayableEnemyIdItem) {
    if (this.displayableEnemyId == null) {
      this.displayableEnemyId = new ArrayList<>();
    }
    this.displayableEnemyId.add(displayableEnemyIdItem);
    return this;
  }

  /**
   * Get displayableEnemyId
   * @return displayableEnemyId
   */
  @javax.annotation.Nullable
  public List<String> getDisplayableEnemyId() {
    return displayableEnemyId;
  }

  public void setDisplayableEnemyId(List<String> displayableEnemyId) {
    this.displayableEnemyId = displayableEnemyId;
  }


  public CampaignNodeEncounter displayableGrantedAbility(List<String> displayableGrantedAbility) {
    this.displayableGrantedAbility = displayableGrantedAbility;
    return this;
  }

  public CampaignNodeEncounter addDisplayableGrantedAbilityItem(String displayableGrantedAbilityItem) {
    if (this.displayableGrantedAbility == null) {
      this.displayableGrantedAbility = new ArrayList<>();
    }
    this.displayableGrantedAbility.add(displayableGrantedAbilityItem);
    return this;
  }

  /**
   * Get displayableGrantedAbility
   * @return displayableGrantedAbility
   */
  @javax.annotation.Nullable
  public List<String> getDisplayableGrantedAbility() {
    return displayableGrantedAbility;
  }

  public void setDisplayableGrantedAbility(List<String> displayableGrantedAbility) {
    this.displayableGrantedAbility = displayableGrantedAbility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignNodeEncounter campaignNodeEncounter = (CampaignNodeEncounter) o;
    return Objects.equals(this.encounterCinematics, campaignNodeEncounter.encounterCinematics) &&
        Objects.equals(this.environment, campaignNodeEncounter.environment) &&
        Objects.equals(this.encounterMessage, campaignNodeEncounter.encounterMessage) &&
        Objects.equals(this.audioKey, campaignNodeEncounter.audioKey) &&
        Objects.equals(this.allowChanceMechanics, campaignNodeEncounter.allowChanceMechanics) &&
        Objects.equals(this.firstTimeEncounterMessage, campaignNodeEncounter.firstTimeEncounterMessage) &&
        Objects.equals(this.encounterIcon, campaignNodeEncounter.encounterIcon) &&
        Objects.equals(this.encounterDescKey, campaignNodeEncounter.encounterDescKey) &&
        Objects.equals(this.encounterIconPosition, campaignNodeEncounter.encounterIconPosition) &&
        Objects.equals(this.raidProgressColor, campaignNodeEncounter.raidProgressColor) &&
        Objects.equals(this.maxDeployedSquadSize, campaignNodeEncounter.maxDeployedSquadSize) &&
        Objects.equals(this.environmentCollectionId, campaignNodeEncounter.environmentCollectionId) &&
        Objects.equals(this.encounterId, campaignNodeEncounter.encounterId) &&
        Objects.equals(this.encounterDurationLimit, campaignNodeEncounter.encounterDurationLimit) &&
        Objects.equals(this.scoreToComplete, campaignNodeEncounter.scoreToComplete) &&
        Objects.equals(this.detailDescKey, campaignNodeEncounter.detailDescKey) &&
        Objects.equals(this.pointsToComplete, campaignNodeEncounter.pointsToComplete) &&
        Objects.equals(this.audioVictoryKey, campaignNodeEncounter.audioVictoryKey) &&
        Objects.equals(this.displayableEnemyId, campaignNodeEncounter.displayableEnemyId) &&
        Objects.equals(this.displayableGrantedAbility, campaignNodeEncounter.displayableGrantedAbility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encounterCinematics, environment, encounterMessage, audioKey, allowChanceMechanics, firstTimeEncounterMessage, encounterIcon, encounterDescKey, encounterIconPosition, raidProgressColor, maxDeployedSquadSize, environmentCollectionId, encounterId, encounterDurationLimit, scoreToComplete, detailDescKey, pointsToComplete, audioVictoryKey, displayableEnemyId, displayableGrantedAbility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignNodeEncounter {\n");
    sb.append("    encounterCinematics: ").append(toIndentedString(encounterCinematics)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    encounterMessage: ").append(toIndentedString(encounterMessage)).append("\n");
    sb.append("    audioKey: ").append(toIndentedString(audioKey)).append("\n");
    sb.append("    allowChanceMechanics: ").append(toIndentedString(allowChanceMechanics)).append("\n");
    sb.append("    firstTimeEncounterMessage: ").append(toIndentedString(firstTimeEncounterMessage)).append("\n");
    sb.append("    encounterIcon: ").append(toIndentedString(encounterIcon)).append("\n");
    sb.append("    encounterDescKey: ").append(toIndentedString(encounterDescKey)).append("\n");
    sb.append("    encounterIconPosition: ").append(toIndentedString(encounterIconPosition)).append("\n");
    sb.append("    raidProgressColor: ").append(toIndentedString(raidProgressColor)).append("\n");
    sb.append("    maxDeployedSquadSize: ").append(toIndentedString(maxDeployedSquadSize)).append("\n");
    sb.append("    environmentCollectionId: ").append(toIndentedString(environmentCollectionId)).append("\n");
    sb.append("    encounterId: ").append(toIndentedString(encounterId)).append("\n");
    sb.append("    encounterDurationLimit: ").append(toIndentedString(encounterDurationLimit)).append("\n");
    sb.append("    scoreToComplete: ").append(toIndentedString(scoreToComplete)).append("\n");
    sb.append("    detailDescKey: ").append(toIndentedString(detailDescKey)).append("\n");
    sb.append("    pointsToComplete: ").append(toIndentedString(pointsToComplete)).append("\n");
    sb.append("    audioVictoryKey: ").append(toIndentedString(audioVictoryKey)).append("\n");
    sb.append("    displayableEnemyId: ").append(toIndentedString(displayableEnemyId)).append("\n");
    sb.append("    displayableGrantedAbility: ").append(toIndentedString(displayableGrantedAbility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encounterCinematics");
    openapiFields.add("environment");
    openapiFields.add("encounterMessage");
    openapiFields.add("audioKey");
    openapiFields.add("allowChanceMechanics");
    openapiFields.add("firstTimeEncounterMessage");
    openapiFields.add("encounterIcon");
    openapiFields.add("encounterDescKey");
    openapiFields.add("encounterIconPosition");
    openapiFields.add("raidProgressColor");
    openapiFields.add("maxDeployedSquadSize");
    openapiFields.add("environmentCollectionId");
    openapiFields.add("encounterId");
    openapiFields.add("encounterDurationLimit");
    openapiFields.add("scoreToComplete");
    openapiFields.add("detailDescKey");
    openapiFields.add("pointsToComplete");
    openapiFields.add("audioVictoryKey");
    openapiFields.add("displayableEnemyId");
    openapiFields.add("displayableGrantedAbility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignNodeEncounter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignNodeEncounter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignNodeEncounter is not found in the empty JSON string", CampaignNodeEncounter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignNodeEncounter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignNodeEncounter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("encounterCinematics") != null && !jsonObj.get("encounterCinematics").isJsonNull()) {
        JsonArray jsonArrayencounterCinematics = jsonObj.getAsJsonArray("encounterCinematics");
        if (jsonArrayencounterCinematics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encounterCinematics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encounterCinematics` to be an array in the JSON string but got `%s`", jsonObj.get("encounterCinematics").toString()));
          }

          // validate the optional field `encounterCinematics` (array)
          for (int i = 0; i < jsonArrayencounterCinematics.size(); i++) {
            CampaignCinematic.validateJsonElement(jsonArrayencounterCinematics.get(i));
          };
        }
      }
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        JsonArray jsonArrayenvironment = jsonObj.getAsJsonArray("environment");
        if (jsonArrayenvironment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environment` to be an array in the JSON string but got `%s`", jsonObj.get("environment").toString()));
          }

          // validate the optional field `environment` (array)
          for (int i = 0; i < jsonArrayenvironment.size(); i++) {
            Environment.validateJsonElement(jsonArrayenvironment.get(i));
          };
        }
      }
      if (jsonObj.get("encounterMessage") != null && !jsonObj.get("encounterMessage").isJsonNull()) {
        JsonArray jsonArrayencounterMessage = jsonObj.getAsJsonArray("encounterMessage");
        if (jsonArrayencounterMessage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encounterMessage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encounterMessage` to be an array in the JSON string but got `%s`", jsonObj.get("encounterMessage").toString()));
          }

          // validate the optional field `encounterMessage` (array)
          for (int i = 0; i < jsonArrayencounterMessage.size(); i++) {
            ContextualMessageGroup.validateJsonElement(jsonArrayencounterMessage.get(i));
          };
        }
      }
      if ((jsonObj.get("audioKey") != null && !jsonObj.get("audioKey").isJsonNull()) && !jsonObj.get("audioKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioKey").toString()));
      }
      if (jsonObj.get("firstTimeEncounterMessage") != null && !jsonObj.get("firstTimeEncounterMessage").isJsonNull()) {
        JsonArray jsonArrayfirstTimeEncounterMessage = jsonObj.getAsJsonArray("firstTimeEncounterMessage");
        if (jsonArrayfirstTimeEncounterMessage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("firstTimeEncounterMessage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `firstTimeEncounterMessage` to be an array in the JSON string but got `%s`", jsonObj.get("firstTimeEncounterMessage").toString()));
          }

          // validate the optional field `firstTimeEncounterMessage` (array)
          for (int i = 0; i < jsonArrayfirstTimeEncounterMessage.size(); i++) {
            ContextualMessageGroup.validateJsonElement(jsonArrayfirstTimeEncounterMessage.get(i));
          };
        }
      }
      if ((jsonObj.get("encounterIcon") != null && !jsonObj.get("encounterIcon").isJsonNull()) && !jsonObj.get("encounterIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encounterIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encounterIcon").toString()));
      }
      if ((jsonObj.get("encounterDescKey") != null && !jsonObj.get("encounterDescKey").isJsonNull()) && !jsonObj.get("encounterDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encounterDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encounterDescKey").toString()));
      }
      // validate the optional field `raidProgressColor`
      if (jsonObj.get("raidProgressColor") != null && !jsonObj.get("raidProgressColor").isJsonNull()) {
        ColorType.validateJsonElement(jsonObj.get("raidProgressColor"));
      }
      if ((jsonObj.get("environmentCollectionId") != null && !jsonObj.get("environmentCollectionId").isJsonNull()) && !jsonObj.get("environmentCollectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentCollectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentCollectionId").toString()));
      }
      if ((jsonObj.get("encounterId") != null && !jsonObj.get("encounterId").isJsonNull()) && !jsonObj.get("encounterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encounterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encounterId").toString()));
      }
      if ((jsonObj.get("detailDescKey") != null && !jsonObj.get("detailDescKey").isJsonNull()) && !jsonObj.get("detailDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailDescKey").toString()));
      }
      if ((jsonObj.get("audioVictoryKey") != null && !jsonObj.get("audioVictoryKey").isJsonNull()) && !jsonObj.get("audioVictoryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioVictoryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioVictoryKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("displayableEnemyId") != null && !jsonObj.get("displayableEnemyId").isJsonNull() && !jsonObj.get("displayableEnemyId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayableEnemyId` to be an array in the JSON string but got `%s`", jsonObj.get("displayableEnemyId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("displayableGrantedAbility") != null && !jsonObj.get("displayableGrantedAbility").isJsonNull() && !jsonObj.get("displayableGrantedAbility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayableGrantedAbility` to be an array in the JSON string but got `%s`", jsonObj.get("displayableGrantedAbility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignNodeEncounter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignNodeEncounter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignNodeEncounter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignNodeEncounter.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignNodeEncounter>() {
           @Override
           public void write(JsonWriter out, CampaignNodeEncounter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignNodeEncounter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignNodeEncounter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignNodeEncounter
   * @throws IOException if the JSON string is invalid with respect to CampaignNodeEncounter
   */
  public static CampaignNodeEncounter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignNodeEncounter.class);
  }

  /**
   * Convert an instance of CampaignNodeEncounter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

