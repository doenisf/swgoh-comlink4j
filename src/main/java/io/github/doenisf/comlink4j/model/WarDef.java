/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.CampaignNodeDifficulty;
import io.github.doenisf.comlink4j.CombatType;
import io.github.doenisf.comlink4j.WarBracketDef;
import io.github.doenisf.comlink4j.WarNodeDef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * WarDef
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class WarDef {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CombatType type;

  public static final String SERIALIZED_NAME_DIFFICULTY = "difficulty";
  @SerializedName(SERIALIZED_NAME_DIFFICULTY)
  private CampaignNodeDifficulty difficulty;

  public static final String SERIALIZED_NAME_DAILY_RESET_CAP_KEY = "dailyResetCapKey";
  @SerializedName(SERIALIZED_NAME_DAILY_RESET_CAP_KEY)
  private String dailyResetCapKey;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private List<WarNodeDef> node = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRACKET = "bracket";
  @SerializedName(SERIALIZED_NAME_BRACKET)
  private List<WarBracketDef> bracket = new ArrayList<>();

  public WarDef() {
  }

  public WarDef id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WarDef type(CombatType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CombatType getType() {
    return type;
  }

  public void setType(CombatType type) {
    this.type = type;
  }


  public WarDef difficulty(CampaignNodeDifficulty difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  /**
   * Get difficulty
   * @return difficulty
   */
  @javax.annotation.Nullable
  public CampaignNodeDifficulty getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(CampaignNodeDifficulty difficulty) {
    this.difficulty = difficulty;
  }


  public WarDef dailyResetCapKey(String dailyResetCapKey) {
    this.dailyResetCapKey = dailyResetCapKey;
    return this;
  }

  /**
   * Get dailyResetCapKey
   * @return dailyResetCapKey
   */
  @javax.annotation.Nullable
  public String getDailyResetCapKey() {
    return dailyResetCapKey;
  }

  public void setDailyResetCapKey(String dailyResetCapKey) {
    this.dailyResetCapKey = dailyResetCapKey;
  }


  public WarDef node(List<WarNodeDef> node) {
    this.node = node;
    return this;
  }

  public WarDef addNodeItem(WarNodeDef nodeItem) {
    if (this.node == null) {
      this.node = new ArrayList<>();
    }
    this.node.add(nodeItem);
    return this;
  }

  /**
   * Get node
   * @return node
   */
  @javax.annotation.Nullable
  public List<WarNodeDef> getNode() {
    return node;
  }

  public void setNode(List<WarNodeDef> node) {
    this.node = node;
  }


  public WarDef bracket(List<WarBracketDef> bracket) {
    this.bracket = bracket;
    return this;
  }

  public WarDef addBracketItem(WarBracketDef bracketItem) {
    if (this.bracket == null) {
      this.bracket = new ArrayList<>();
    }
    this.bracket.add(bracketItem);
    return this;
  }

  /**
   * Get bracket
   * @return bracket
   */
  @javax.annotation.Nullable
  public List<WarBracketDef> getBracket() {
    return bracket;
  }

  public void setBracket(List<WarBracketDef> bracket) {
    this.bracket = bracket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WarDef warDef = (WarDef) o;
    return Objects.equals(this.id, warDef.id) &&
        Objects.equals(this.type, warDef.type) &&
        Objects.equals(this.difficulty, warDef.difficulty) &&
        Objects.equals(this.dailyResetCapKey, warDef.dailyResetCapKey) &&
        Objects.equals(this.node, warDef.node) &&
        Objects.equals(this.bracket, warDef.bracket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, difficulty, dailyResetCapKey, node, bracket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WarDef {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    dailyResetCapKey: ").append(toIndentedString(dailyResetCapKey)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    bracket: ").append(toIndentedString(bracket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("difficulty");
    openapiFields.add("dailyResetCapKey");
    openapiFields.add("node");
    openapiFields.add("bracket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WarDef
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WarDef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WarDef is not found in the empty JSON string", WarDef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WarDef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WarDef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `difficulty`
      if (jsonObj.get("difficulty") != null && !jsonObj.get("difficulty").isJsonNull()) {
        CampaignNodeDifficulty.validateJsonElement(jsonObj.get("difficulty"));
      }
      if ((jsonObj.get("dailyResetCapKey") != null && !jsonObj.get("dailyResetCapKey").isJsonNull()) && !jsonObj.get("dailyResetCapKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dailyResetCapKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dailyResetCapKey").toString()));
      }
      if (jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) {
        JsonArray jsonArraynode = jsonObj.getAsJsonArray("node");
        if (jsonArraynode != null) {
          // ensure the json data is an array
          if (!jsonObj.get("node").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `node` to be an array in the JSON string but got `%s`", jsonObj.get("node").toString()));
          }

          // validate the optional field `node` (array)
          for (int i = 0; i < jsonArraynode.size(); i++) {
            WarNodeDef.validateJsonElement(jsonArraynode.get(i));
          };
        }
      }
      if (jsonObj.get("bracket") != null && !jsonObj.get("bracket").isJsonNull()) {
        JsonArray jsonArraybracket = jsonObj.getAsJsonArray("bracket");
        if (jsonArraybracket != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bracket").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bracket` to be an array in the JSON string but got `%s`", jsonObj.get("bracket").toString()));
          }

          // validate the optional field `bracket` (array)
          for (int i = 0; i < jsonArraybracket.size(); i++) {
            WarBracketDef.validateJsonElement(jsonArraybracket.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WarDef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WarDef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WarDef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WarDef.class));

       return (TypeAdapter<T>) new TypeAdapter<WarDef>() {
           @Override
           public void write(JsonWriter out, WarDef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WarDef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WarDef given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WarDef
   * @throws IOException if the JSON string is invalid with respect to WarDef
   */
  public static WarDef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WarDef.class);
  }

  /**
   * Convert an instance of WarDef to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

