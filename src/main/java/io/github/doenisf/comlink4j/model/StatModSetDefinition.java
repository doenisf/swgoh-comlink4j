/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.StatModSetBonus;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * StatModSetDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class StatModSetDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_COMPLETE_BONUS = "completeBonus";
  @SerializedName(SERIALIZED_NAME_COMPLETE_BONUS)
  private StatModSetBonus completeBonus;

  public static final String SERIALIZED_NAME_MAX_LEVEL_BONUS = "maxLevelBonus";
  @SerializedName(SERIALIZED_NAME_MAX_LEVEL_BONUS)
  private StatModSetBonus maxLevelBonus;

  public static final String SERIALIZED_NAME_SET_COUNT = "setCount";
  @SerializedName(SERIALIZED_NAME_SET_COUNT)
  private Integer setCount;

  public static final String SERIALIZED_NAME_OVERCLOCK_BONUS = "overclockBonus";
  @SerializedName(SERIALIZED_NAME_OVERCLOCK_BONUS)
  private StatModSetBonus overclockBonus;

  public StatModSetDefinition() {
  }

  public StatModSetDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StatModSetDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StatModSetDefinition icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public StatModSetDefinition completeBonus(StatModSetBonus completeBonus) {
    this.completeBonus = completeBonus;
    return this;
  }

  /**
   * Get completeBonus
   * @return completeBonus
   */
  @javax.annotation.Nullable
  public StatModSetBonus getCompleteBonus() {
    return completeBonus;
  }

  public void setCompleteBonus(StatModSetBonus completeBonus) {
    this.completeBonus = completeBonus;
  }


  public StatModSetDefinition maxLevelBonus(StatModSetBonus maxLevelBonus) {
    this.maxLevelBonus = maxLevelBonus;
    return this;
  }

  /**
   * Get maxLevelBonus
   * @return maxLevelBonus
   */
  @javax.annotation.Nullable
  public StatModSetBonus getMaxLevelBonus() {
    return maxLevelBonus;
  }

  public void setMaxLevelBonus(StatModSetBonus maxLevelBonus) {
    this.maxLevelBonus = maxLevelBonus;
  }


  public StatModSetDefinition setCount(Integer setCount) {
    this.setCount = setCount;
    return this;
  }

  /**
   * Get setCount
   * @return setCount
   */
  @javax.annotation.Nullable
  public Integer getSetCount() {
    return setCount;
  }

  public void setSetCount(Integer setCount) {
    this.setCount = setCount;
  }


  public StatModSetDefinition overclockBonus(StatModSetBonus overclockBonus) {
    this.overclockBonus = overclockBonus;
    return this;
  }

  /**
   * Get overclockBonus
   * @return overclockBonus
   */
  @javax.annotation.Nullable
  public StatModSetBonus getOverclockBonus() {
    return overclockBonus;
  }

  public void setOverclockBonus(StatModSetBonus overclockBonus) {
    this.overclockBonus = overclockBonus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatModSetDefinition statModSetDefinition = (StatModSetDefinition) o;
    return Objects.equals(this.id, statModSetDefinition.id) &&
        Objects.equals(this.name, statModSetDefinition.name) &&
        Objects.equals(this.icon, statModSetDefinition.icon) &&
        Objects.equals(this.completeBonus, statModSetDefinition.completeBonus) &&
        Objects.equals(this.maxLevelBonus, statModSetDefinition.maxLevelBonus) &&
        Objects.equals(this.setCount, statModSetDefinition.setCount) &&
        Objects.equals(this.overclockBonus, statModSetDefinition.overclockBonus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, icon, completeBonus, maxLevelBonus, setCount, overclockBonus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatModSetDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    completeBonus: ").append(toIndentedString(completeBonus)).append("\n");
    sb.append("    maxLevelBonus: ").append(toIndentedString(maxLevelBonus)).append("\n");
    sb.append("    setCount: ").append(toIndentedString(setCount)).append("\n");
    sb.append("    overclockBonus: ").append(toIndentedString(overclockBonus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("icon");
    openapiFields.add("completeBonus");
    openapiFields.add("maxLevelBonus");
    openapiFields.add("setCount");
    openapiFields.add("overclockBonus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatModSetDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatModSetDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatModSetDefinition is not found in the empty JSON string", StatModSetDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatModSetDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatModSetDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      // validate the optional field `completeBonus`
      if (jsonObj.get("completeBonus") != null && !jsonObj.get("completeBonus").isJsonNull()) {
        StatModSetBonus.validateJsonElement(jsonObj.get("completeBonus"));
      }
      // validate the optional field `maxLevelBonus`
      if (jsonObj.get("maxLevelBonus") != null && !jsonObj.get("maxLevelBonus").isJsonNull()) {
        StatModSetBonus.validateJsonElement(jsonObj.get("maxLevelBonus"));
      }
      // validate the optional field `overclockBonus`
      if (jsonObj.get("overclockBonus") != null && !jsonObj.get("overclockBonus").isJsonNull()) {
        StatModSetBonus.validateJsonElement(jsonObj.get("overclockBonus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatModSetDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatModSetDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatModSetDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatModSetDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<StatModSetDefinition>() {
           @Override
           public void write(JsonWriter out, StatModSetDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatModSetDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatModSetDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatModSetDefinition
   * @throws IOException if the JSON string is invalid with respect to StatModSetDefinition
   */
  public static StatModSetDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatModSetDefinition.class);
  }

  /**
   * Convert an instance of StatModSetDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

