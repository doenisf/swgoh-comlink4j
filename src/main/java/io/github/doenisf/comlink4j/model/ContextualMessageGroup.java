/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.ContextualMessage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * ContextualMessageGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ContextualMessageGroup {
  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_START_MESSAGE = "startMessage";
  @SerializedName(SERIALIZED_NAME_START_MESSAGE)
  private String startMessage;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private List<ContextualMessage> message = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_CAN_DISMISS_WHILE_HIDDEN = "canDismissWhileHidden";
  @SerializedName(SERIALIZED_NAME_CAN_DISMISS_WHILE_HIDDEN)
  private Boolean canDismissWhileHidden;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Long startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Long endTime;

  public static final String SERIALIZED_NAME_IS_FTUE = "isFtue";
  @SerializedName(SERIALIZED_NAME_IS_FTUE)
  private Boolean isFtue;

  public ContextualMessageGroup() {
  }

  public ContextualMessageGroup groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public ContextualMessageGroup startMessage(String startMessage) {
    this.startMessage = startMessage;
    return this;
  }

  /**
   * Get startMessage
   * @return startMessage
   */
  @javax.annotation.Nullable
  public String getStartMessage() {
    return startMessage;
  }

  public void setStartMessage(String startMessage) {
    this.startMessage = startMessage;
  }


  public ContextualMessageGroup message(List<ContextualMessage> message) {
    this.message = message;
    return this;
  }

  public ContextualMessageGroup addMessageItem(ContextualMessage messageItem) {
    if (this.message == null) {
      this.message = new ArrayList<>();
    }
    this.message.add(messageItem);
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public List<ContextualMessage> getMessage() {
    return message;
  }

  public void setMessage(List<ContextualMessage> message) {
    this.message = message;
  }


  public ContextualMessageGroup priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public ContextualMessageGroup canDismissWhileHidden(Boolean canDismissWhileHidden) {
    this.canDismissWhileHidden = canDismissWhileHidden;
    return this;
  }

  /**
   * Get canDismissWhileHidden
   * @return canDismissWhileHidden
   */
  @javax.annotation.Nullable
  public Boolean getCanDismissWhileHidden() {
    return canDismissWhileHidden;
  }

  public void setCanDismissWhileHidden(Boolean canDismissWhileHidden) {
    this.canDismissWhileHidden = canDismissWhileHidden;
  }


  public ContextualMessageGroup startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  public ContextualMessageGroup endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public ContextualMessageGroup isFtue(Boolean isFtue) {
    this.isFtue = isFtue;
    return this;
  }

  /**
   * Get isFtue
   * @return isFtue
   */
  @javax.annotation.Nullable
  public Boolean getIsFtue() {
    return isFtue;
  }

  public void setIsFtue(Boolean isFtue) {
    this.isFtue = isFtue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextualMessageGroup contextualMessageGroup = (ContextualMessageGroup) o;
    return Objects.equals(this.groupId, contextualMessageGroup.groupId) &&
        Objects.equals(this.startMessage, contextualMessageGroup.startMessage) &&
        Objects.equals(this.message, contextualMessageGroup.message) &&
        Objects.equals(this.priority, contextualMessageGroup.priority) &&
        Objects.equals(this.canDismissWhileHidden, contextualMessageGroup.canDismissWhileHidden) &&
        Objects.equals(this.startTime, contextualMessageGroup.startTime) &&
        Objects.equals(this.endTime, contextualMessageGroup.endTime) &&
        Objects.equals(this.isFtue, contextualMessageGroup.isFtue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, startMessage, message, priority, canDismissWhileHidden, startTime, endTime, isFtue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextualMessageGroup {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    startMessage: ").append(toIndentedString(startMessage)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    canDismissWhileHidden: ").append(toIndentedString(canDismissWhileHidden)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    isFtue: ").append(toIndentedString(isFtue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupId");
    openapiFields.add("startMessage");
    openapiFields.add("message");
    openapiFields.add("priority");
    openapiFields.add("canDismissWhileHidden");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("isFtue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContextualMessageGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContextualMessageGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContextualMessageGroup is not found in the empty JSON string", ContextualMessageGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContextualMessageGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContextualMessageGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) && !jsonObj.get("groupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupId").toString()));
      }
      if ((jsonObj.get("startMessage") != null && !jsonObj.get("startMessage").isJsonNull()) && !jsonObj.get("startMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startMessage").toString()));
      }
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        JsonArray jsonArraymessage = jsonObj.getAsJsonArray("message");
        if (jsonArraymessage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("message").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `message` to be an array in the JSON string but got `%s`", jsonObj.get("message").toString()));
          }

          // validate the optional field `message` (array)
          for (int i = 0; i < jsonArraymessage.size(); i++) {
            ContextualMessage.validateJsonElement(jsonArraymessage.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContextualMessageGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContextualMessageGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContextualMessageGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContextualMessageGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ContextualMessageGroup>() {
           @Override
           public void write(JsonWriter out, ContextualMessageGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContextualMessageGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContextualMessageGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContextualMessageGroup
   * @throws IOException if the JSON string is invalid with respect to ContextualMessageGroup
   */
  public static ContextualMessageGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContextualMessageGroup.class);
  }

  /**
   * Convert an instance of ContextualMessageGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

