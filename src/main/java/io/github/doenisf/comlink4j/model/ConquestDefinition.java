/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.ConquestDifficulty;
import io.github.doenisf.comlink4j.model.ConquestPurchasePassMiscTextEntry;
import io.github.doenisf.comlink4j.model.ConquestVisibility;
import io.github.doenisf.comlink4j.model.ConsumableDetails;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * ConquestDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ConquestDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESCRIPTION_KEY = "descriptionKey";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_KEY)
  private String descriptionKey;

  public static final String SERIALIZED_NAME_CONQUEST_DIFFICULTY = "conquestDifficulty";
  @SerializedName(SERIALIZED_NAME_CONQUEST_DIFFICULTY)
  private List<ConquestDifficulty> conquestDifficulty = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAMINA_STAT_ALLOWLIST = "staminaStatAllowlist";
  @SerializedName(SERIALIZED_NAME_STAMINA_STAT_ALLOWLIST)
  private String staminaStatAllowlist;

  public static final String SERIALIZED_NAME_CONSUMABLE_DETAIL = "consumableDetail";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE_DETAIL)
  private List<ConsumableDetails> consumableDetail = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private List<ConquestVisibility> visibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISC_ENTRY = "miscEntry";
  @SerializedName(SERIALIZED_NAME_MISC_ENTRY)
  private List<ConquestPurchasePassMiscTextEntry> miscEntry = new ArrayList<>();

  public ConquestDefinition() {
  }

  public ConquestDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConquestDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public ConquestDefinition descriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
    return this;
  }

  /**
   * Get descriptionKey
   * @return descriptionKey
   */
  @javax.annotation.Nullable
  public String getDescriptionKey() {
    return descriptionKey;
  }

  public void setDescriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
  }


  public ConquestDefinition conquestDifficulty(List<ConquestDifficulty> conquestDifficulty) {
    this.conquestDifficulty = conquestDifficulty;
    return this;
  }

  public ConquestDefinition addConquestDifficultyItem(ConquestDifficulty conquestDifficultyItem) {
    if (this.conquestDifficulty == null) {
      this.conquestDifficulty = new ArrayList<>();
    }
    this.conquestDifficulty.add(conquestDifficultyItem);
    return this;
  }

  /**
   * Get conquestDifficulty
   * @return conquestDifficulty
   */
  @javax.annotation.Nullable
  public List<ConquestDifficulty> getConquestDifficulty() {
    return conquestDifficulty;
  }

  public void setConquestDifficulty(List<ConquestDifficulty> conquestDifficulty) {
    this.conquestDifficulty = conquestDifficulty;
  }


  public ConquestDefinition staminaStatAllowlist(String staminaStatAllowlist) {
    this.staminaStatAllowlist = staminaStatAllowlist;
    return this;
  }

  /**
   * Get staminaStatAllowlist
   * @return staminaStatAllowlist
   */
  @javax.annotation.Nullable
  public String getStaminaStatAllowlist() {
    return staminaStatAllowlist;
  }

  public void setStaminaStatAllowlist(String staminaStatAllowlist) {
    this.staminaStatAllowlist = staminaStatAllowlist;
  }


  public ConquestDefinition consumableDetail(List<ConsumableDetails> consumableDetail) {
    this.consumableDetail = consumableDetail;
    return this;
  }

  public ConquestDefinition addConsumableDetailItem(ConsumableDetails consumableDetailItem) {
    if (this.consumableDetail == null) {
      this.consumableDetail = new ArrayList<>();
    }
    this.consumableDetail.add(consumableDetailItem);
    return this;
  }

  /**
   * Get consumableDetail
   * @return consumableDetail
   */
  @javax.annotation.Nullable
  public List<ConsumableDetails> getConsumableDetail() {
    return consumableDetail;
  }

  public void setConsumableDetail(List<ConsumableDetails> consumableDetail) {
    this.consumableDetail = consumableDetail;
  }


  public ConquestDefinition visibility(List<ConquestVisibility> visibility) {
    this.visibility = visibility;
    return this;
  }

  public ConquestDefinition addVisibilityItem(ConquestVisibility visibilityItem) {
    if (this.visibility == null) {
      this.visibility = new ArrayList<>();
    }
    this.visibility.add(visibilityItem);
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public List<ConquestVisibility> getVisibility() {
    return visibility;
  }

  public void setVisibility(List<ConquestVisibility> visibility) {
    this.visibility = visibility;
  }


  public ConquestDefinition miscEntry(List<ConquestPurchasePassMiscTextEntry> miscEntry) {
    this.miscEntry = miscEntry;
    return this;
  }

  public ConquestDefinition addMiscEntryItem(ConquestPurchasePassMiscTextEntry miscEntryItem) {
    if (this.miscEntry == null) {
      this.miscEntry = new ArrayList<>();
    }
    this.miscEntry.add(miscEntryItem);
    return this;
  }

  /**
   * Get miscEntry
   * @return miscEntry
   */
  @javax.annotation.Nullable
  public List<ConquestPurchasePassMiscTextEntry> getMiscEntry() {
    return miscEntry;
  }

  public void setMiscEntry(List<ConquestPurchasePassMiscTextEntry> miscEntry) {
    this.miscEntry = miscEntry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConquestDefinition conquestDefinition = (ConquestDefinition) o;
    return Objects.equals(this.id, conquestDefinition.id) &&
        Objects.equals(this.nameKey, conquestDefinition.nameKey) &&
        Objects.equals(this.descriptionKey, conquestDefinition.descriptionKey) &&
        Objects.equals(this.conquestDifficulty, conquestDefinition.conquestDifficulty) &&
        Objects.equals(this.staminaStatAllowlist, conquestDefinition.staminaStatAllowlist) &&
        Objects.equals(this.consumableDetail, conquestDefinition.consumableDetail) &&
        Objects.equals(this.visibility, conquestDefinition.visibility) &&
        Objects.equals(this.miscEntry, conquestDefinition.miscEntry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, descriptionKey, conquestDifficulty, staminaStatAllowlist, consumableDetail, visibility, miscEntry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConquestDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descriptionKey: ").append(toIndentedString(descriptionKey)).append("\n");
    sb.append("    conquestDifficulty: ").append(toIndentedString(conquestDifficulty)).append("\n");
    sb.append("    staminaStatAllowlist: ").append(toIndentedString(staminaStatAllowlist)).append("\n");
    sb.append("    consumableDetail: ").append(toIndentedString(consumableDetail)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    miscEntry: ").append(toIndentedString(miscEntry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("descriptionKey");
    openapiFields.add("conquestDifficulty");
    openapiFields.add("staminaStatAllowlist");
    openapiFields.add("consumableDetail");
    openapiFields.add("visibility");
    openapiFields.add("miscEntry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConquestDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConquestDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConquestDefinition is not found in the empty JSON string", ConquestDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConquestDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConquestDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descriptionKey") != null && !jsonObj.get("descriptionKey").isJsonNull()) && !jsonObj.get("descriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionKey").toString()));
      }
      if (jsonObj.get("conquestDifficulty") != null && !jsonObj.get("conquestDifficulty").isJsonNull()) {
        JsonArray jsonArrayconquestDifficulty = jsonObj.getAsJsonArray("conquestDifficulty");
        if (jsonArrayconquestDifficulty != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conquestDifficulty").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conquestDifficulty` to be an array in the JSON string but got `%s`", jsonObj.get("conquestDifficulty").toString()));
          }

          // validate the optional field `conquestDifficulty` (array)
          for (int i = 0; i < jsonArrayconquestDifficulty.size(); i++) {
            ConquestDifficulty.validateJsonElement(jsonArrayconquestDifficulty.get(i));
          };
        }
      }
      if ((jsonObj.get("staminaStatAllowlist") != null && !jsonObj.get("staminaStatAllowlist").isJsonNull()) && !jsonObj.get("staminaStatAllowlist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staminaStatAllowlist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staminaStatAllowlist").toString()));
      }
      if (jsonObj.get("consumableDetail") != null && !jsonObj.get("consumableDetail").isJsonNull()) {
        JsonArray jsonArrayconsumableDetail = jsonObj.getAsJsonArray("consumableDetail");
        if (jsonArrayconsumableDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumableDetail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumableDetail` to be an array in the JSON string but got `%s`", jsonObj.get("consumableDetail").toString()));
          }

          // validate the optional field `consumableDetail` (array)
          for (int i = 0; i < jsonArrayconsumableDetail.size(); i++) {
            ConsumableDetails.validateJsonElement(jsonArrayconsumableDetail.get(i));
          };
        }
      }
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        JsonArray jsonArrayvisibility = jsonObj.getAsJsonArray("visibility");
        if (jsonArrayvisibility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("visibility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `visibility` to be an array in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
          }

          // validate the optional field `visibility` (array)
          for (int i = 0; i < jsonArrayvisibility.size(); i++) {
            ConquestVisibility.validateJsonElement(jsonArrayvisibility.get(i));
          };
        }
      }
      if (jsonObj.get("miscEntry") != null && !jsonObj.get("miscEntry").isJsonNull()) {
        JsonArray jsonArraymiscEntry = jsonObj.getAsJsonArray("miscEntry");
        if (jsonArraymiscEntry != null) {
          // ensure the json data is an array
          if (!jsonObj.get("miscEntry").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `miscEntry` to be an array in the JSON string but got `%s`", jsonObj.get("miscEntry").toString()));
          }

          // validate the optional field `miscEntry` (array)
          for (int i = 0; i < jsonArraymiscEntry.size(); i++) {
            ConquestPurchasePassMiscTextEntry.validateJsonElement(jsonArraymiscEntry.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConquestDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConquestDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConquestDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConquestDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ConquestDefinition>() {
           @Override
           public void write(JsonWriter out, ConquestDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConquestDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConquestDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConquestDefinition
   * @throws IOException if the JSON string is invalid with respect to ConquestDefinition
   */
  public static ConquestDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConquestDefinition.class);
  }

  /**
   * Convert an instance of ConquestDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

