/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * SeasonStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class SeasonStatus {
  public static final String SERIALIZED_NAME_SEASON_ID = "seasonId";
  @SerializedName(SERIALIZED_NAME_SEASON_ID)
  private String seasonId;

  public static final String SERIALIZED_NAME_EVENT_INSTANCE_ID = "eventInstanceId";
  @SerializedName(SERIALIZED_NAME_EVENT_INSTANCE_ID)
  private String eventInstanceId;

  public static final String SERIALIZED_NAME_LEAGUE = "league";
  @SerializedName(SERIALIZED_NAME_LEAGUE)
  private String league;

  public static final String SERIALIZED_NAME_WINS = "wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public static final String SERIALIZED_NAME_LOSSES = "losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private Integer losses;

  public static final String SERIALIZED_NAME_SEASON_POINTS = "seasonPoints";
  @SerializedName(SERIALIZED_NAME_SEASON_POINTS)
  private Integer seasonPoints;

  public static final String SERIALIZED_NAME_DIVISION = "division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private Integer division;

  public static final String SERIALIZED_NAME_JOIN_TIME = "joinTime";
  @SerializedName(SERIALIZED_NAME_JOIN_TIME)
  private Long joinTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Long endTime;

  public static final String SERIALIZED_NAME_REMOVE = "remove";
  @SerializedName(SERIALIZED_NAME_REMOVE)
  private Boolean remove;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public SeasonStatus() {
  }

  public SeasonStatus seasonId(String seasonId) {
    this.seasonId = seasonId;
    return this;
  }

  /**
   * Get seasonId
   * @return seasonId
   */
  @javax.annotation.Nullable
  public String getSeasonId() {
    return seasonId;
  }

  public void setSeasonId(String seasonId) {
    this.seasonId = seasonId;
  }


  public SeasonStatus eventInstanceId(String eventInstanceId) {
    this.eventInstanceId = eventInstanceId;
    return this;
  }

  /**
   * Get eventInstanceId
   * @return eventInstanceId
   */
  @javax.annotation.Nullable
  public String getEventInstanceId() {
    return eventInstanceId;
  }

  public void setEventInstanceId(String eventInstanceId) {
    this.eventInstanceId = eventInstanceId;
  }


  public SeasonStatus league(String league) {
    this.league = league;
    return this;
  }

  /**
   * Get league
   * @return league
   */
  @javax.annotation.Nullable
  public String getLeague() {
    return league;
  }

  public void setLeague(String league) {
    this.league = league;
  }


  public SeasonStatus wins(Integer wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }


  public SeasonStatus losses(Integer losses) {
    this.losses = losses;
    return this;
  }

  /**
   * Get losses
   * @return losses
   */
  @javax.annotation.Nullable
  public Integer getLosses() {
    return losses;
  }

  public void setLosses(Integer losses) {
    this.losses = losses;
  }


  public SeasonStatus seasonPoints(Integer seasonPoints) {
    this.seasonPoints = seasonPoints;
    return this;
  }

  /**
   * Get seasonPoints
   * @return seasonPoints
   */
  @javax.annotation.Nullable
  public Integer getSeasonPoints() {
    return seasonPoints;
  }

  public void setSeasonPoints(Integer seasonPoints) {
    this.seasonPoints = seasonPoints;
  }


  public SeasonStatus division(Integer division) {
    this.division = division;
    return this;
  }

  /**
   * Get division
   * @return division
   */
  @javax.annotation.Nullable
  public Integer getDivision() {
    return division;
  }

  public void setDivision(Integer division) {
    this.division = division;
  }


  public SeasonStatus joinTime(Long joinTime) {
    this.joinTime = joinTime;
    return this;
  }

  /**
   * Get joinTime
   * @return joinTime
   */
  @javax.annotation.Nullable
  public Long getJoinTime() {
    return joinTime;
  }

  public void setJoinTime(Long joinTime) {
    this.joinTime = joinTime;
  }


  public SeasonStatus endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public SeasonStatus remove(Boolean remove) {
    this.remove = remove;
    return this;
  }

  /**
   * Get remove
   * @return remove
   */
  @javax.annotation.Nullable
  public Boolean getRemove() {
    return remove;
  }

  public void setRemove(Boolean remove) {
    this.remove = remove;
  }


  public SeasonStatus rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeasonStatus seasonStatus = (SeasonStatus) o;
    return Objects.equals(this.seasonId, seasonStatus.seasonId) &&
        Objects.equals(this.eventInstanceId, seasonStatus.eventInstanceId) &&
        Objects.equals(this.league, seasonStatus.league) &&
        Objects.equals(this.wins, seasonStatus.wins) &&
        Objects.equals(this.losses, seasonStatus.losses) &&
        Objects.equals(this.seasonPoints, seasonStatus.seasonPoints) &&
        Objects.equals(this.division, seasonStatus.division) &&
        Objects.equals(this.joinTime, seasonStatus.joinTime) &&
        Objects.equals(this.endTime, seasonStatus.endTime) &&
        Objects.equals(this.remove, seasonStatus.remove) &&
        Objects.equals(this.rank, seasonStatus.rank);
  }

  @Override
  public int hashCode() {
    return Objects.hash(seasonId, eventInstanceId, league, wins, losses, seasonPoints, division, joinTime, endTime, remove, rank);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeasonStatus {\n");
    sb.append("    seasonId: ").append(toIndentedString(seasonId)).append("\n");
    sb.append("    eventInstanceId: ").append(toIndentedString(eventInstanceId)).append("\n");
    sb.append("    league: ").append(toIndentedString(league)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    seasonPoints: ").append(toIndentedString(seasonPoints)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    joinTime: ").append(toIndentedString(joinTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    remove: ").append(toIndentedString(remove)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("seasonId");
    openapiFields.add("eventInstanceId");
    openapiFields.add("league");
    openapiFields.add("wins");
    openapiFields.add("losses");
    openapiFields.add("seasonPoints");
    openapiFields.add("division");
    openapiFields.add("joinTime");
    openapiFields.add("endTime");
    openapiFields.add("remove");
    openapiFields.add("rank");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeasonStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeasonStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeasonStatus is not found in the empty JSON string", SeasonStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeasonStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeasonStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("seasonId") != null && !jsonObj.get("seasonId").isJsonNull()) && !jsonObj.get("seasonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonId").toString()));
      }
      if ((jsonObj.get("eventInstanceId") != null && !jsonObj.get("eventInstanceId").isJsonNull()) && !jsonObj.get("eventInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventInstanceId").toString()));
      }
      if ((jsonObj.get("league") != null && !jsonObj.get("league").isJsonNull()) && !jsonObj.get("league").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `league` to be a primitive type in the JSON string but got `%s`", jsonObj.get("league").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeasonStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeasonStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeasonStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeasonStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<SeasonStatus>() {
           @Override
           public void write(JsonWriter out, SeasonStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeasonStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeasonStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeasonStatus
   * @throws IOException if the JSON string is invalid with respect to SeasonStatus
   */
  public static SeasonStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeasonStatus.class);
  }

  /**
   * Convert an instance of SeasonStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

