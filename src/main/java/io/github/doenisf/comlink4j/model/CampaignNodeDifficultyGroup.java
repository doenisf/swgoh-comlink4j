/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CampaignElementProgress;
import io.github.doenisf.comlink4j.model.CampaignNode;
import io.github.doenisf.comlink4j.model.CampaignNodeDifficulty;
import io.github.doenisf.comlink4j.model.EntryCategoryAllowed;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * CampaignNodeDifficultyGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CampaignNodeDifficultyGroup {
  public static final String SERIALIZED_NAME_CAMPAIGN_NODE_DIFFICULTY = "campaignNodeDifficulty";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NODE_DIFFICULTY)
  private CampaignNodeDifficulty campaignNodeDifficulty;

  public static final String SERIALIZED_NAME_CAMPAIGN_NODE = "campaignNode";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NODE)
  private List<CampaignNode> campaignNode = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private CampaignElementProgress progress;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY = "unlockRequirementLocalizationKey";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY)
  private String unlockRequirementLocalizationKey;

  public static final String SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY = "dailyBattleCapKey";
  @SerializedName(SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY)
  private String dailyBattleCapKey;

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_GRIND_ENABLED = "grindEnabled";
  @SerializedName(SERIALIZED_NAME_GRIND_ENABLED)
  private Boolean grindEnabled;

  public CampaignNodeDifficultyGroup() {
  }

  public CampaignNodeDifficultyGroup campaignNodeDifficulty(CampaignNodeDifficulty campaignNodeDifficulty) {
    this.campaignNodeDifficulty = campaignNodeDifficulty;
    return this;
  }

  /**
   * Get campaignNodeDifficulty
   * @return campaignNodeDifficulty
   */
  @javax.annotation.Nullable
  public CampaignNodeDifficulty getCampaignNodeDifficulty() {
    return campaignNodeDifficulty;
  }

  public void setCampaignNodeDifficulty(CampaignNodeDifficulty campaignNodeDifficulty) {
    this.campaignNodeDifficulty = campaignNodeDifficulty;
  }


  public CampaignNodeDifficultyGroup campaignNode(List<CampaignNode> campaignNode) {
    this.campaignNode = campaignNode;
    return this;
  }

  public CampaignNodeDifficultyGroup addCampaignNodeItem(CampaignNode campaignNodeItem) {
    if (this.campaignNode == null) {
      this.campaignNode = new ArrayList<>();
    }
    this.campaignNode.add(campaignNodeItem);
    return this;
  }

  /**
   * Get campaignNode
   * @return campaignNode
   */
  @javax.annotation.Nullable
  public List<CampaignNode> getCampaignNode() {
    return campaignNode;
  }

  public void setCampaignNode(List<CampaignNode> campaignNode) {
    this.campaignNode = campaignNode;
  }


  public CampaignNodeDifficultyGroup progress(CampaignElementProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public CampaignElementProgress getProgress() {
    return progress;
  }

  public void setProgress(CampaignElementProgress progress) {
    this.progress = progress;
  }


  public CampaignNodeDifficultyGroup unlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
    return this;
  }

  /**
   * Get unlockRequirementLocalizationKey
   * @return unlockRequirementLocalizationKey
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementLocalizationKey() {
    return unlockRequirementLocalizationKey;
  }

  public void setUnlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
  }


  public CampaignNodeDifficultyGroup dailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
    return this;
  }

  /**
   * Get dailyBattleCapKey
   * @return dailyBattleCapKey
   */
  @javax.annotation.Nullable
  public String getDailyBattleCapKey() {
    return dailyBattleCapKey;
  }

  public void setDailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
  }


  public CampaignNodeDifficultyGroup entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public CampaignNodeDifficultyGroup grindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
    return this;
  }

  /**
   * Get grindEnabled
   * @return grindEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGrindEnabled() {
    return grindEnabled;
  }

  public void setGrindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignNodeDifficultyGroup campaignNodeDifficultyGroup = (CampaignNodeDifficultyGroup) o;
    return Objects.equals(this.campaignNodeDifficulty, campaignNodeDifficultyGroup.campaignNodeDifficulty) &&
        Objects.equals(this.campaignNode, campaignNodeDifficultyGroup.campaignNode) &&
        Objects.equals(this.progress, campaignNodeDifficultyGroup.progress) &&
        Objects.equals(this.unlockRequirementLocalizationKey, campaignNodeDifficultyGroup.unlockRequirementLocalizationKey) &&
        Objects.equals(this.dailyBattleCapKey, campaignNodeDifficultyGroup.dailyBattleCapKey) &&
        Objects.equals(this.entryCategoryAllowed, campaignNodeDifficultyGroup.entryCategoryAllowed) &&
        Objects.equals(this.grindEnabled, campaignNodeDifficultyGroup.grindEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignNodeDifficulty, campaignNode, progress, unlockRequirementLocalizationKey, dailyBattleCapKey, entryCategoryAllowed, grindEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignNodeDifficultyGroup {\n");
    sb.append("    campaignNodeDifficulty: ").append(toIndentedString(campaignNodeDifficulty)).append("\n");
    sb.append("    campaignNode: ").append(toIndentedString(campaignNode)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    unlockRequirementLocalizationKey: ").append(toIndentedString(unlockRequirementLocalizationKey)).append("\n");
    sb.append("    dailyBattleCapKey: ").append(toIndentedString(dailyBattleCapKey)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    grindEnabled: ").append(toIndentedString(grindEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaignNodeDifficulty");
    openapiFields.add("campaignNode");
    openapiFields.add("progress");
    openapiFields.add("unlockRequirementLocalizationKey");
    openapiFields.add("dailyBattleCapKey");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("grindEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignNodeDifficultyGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignNodeDifficultyGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignNodeDifficultyGroup is not found in the empty JSON string", CampaignNodeDifficultyGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignNodeDifficultyGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignNodeDifficultyGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `campaignNodeDifficulty`
      if (jsonObj.get("campaignNodeDifficulty") != null && !jsonObj.get("campaignNodeDifficulty").isJsonNull()) {
        CampaignNodeDifficulty.validateJsonElement(jsonObj.get("campaignNodeDifficulty"));
      }
      if (jsonObj.get("campaignNode") != null && !jsonObj.get("campaignNode").isJsonNull()) {
        JsonArray jsonArraycampaignNode = jsonObj.getAsJsonArray("campaignNode");
        if (jsonArraycampaignNode != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaignNode").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaignNode` to be an array in the JSON string but got `%s`", jsonObj.get("campaignNode").toString()));
          }

          // validate the optional field `campaignNode` (array)
          for (int i = 0; i < jsonArraycampaignNode.size(); i++) {
            CampaignNode.validateJsonElement(jsonArraycampaignNode.get(i));
          };
        }
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        CampaignElementProgress.validateJsonElement(jsonObj.get("progress"));
      }
      if ((jsonObj.get("unlockRequirementLocalizationKey") != null && !jsonObj.get("unlockRequirementLocalizationKey").isJsonNull()) && !jsonObj.get("unlockRequirementLocalizationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementLocalizationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementLocalizationKey").toString()));
      }
      if ((jsonObj.get("dailyBattleCapKey") != null && !jsonObj.get("dailyBattleCapKey").isJsonNull()) && !jsonObj.get("dailyBattleCapKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dailyBattleCapKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dailyBattleCapKey").toString()));
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignNodeDifficultyGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignNodeDifficultyGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignNodeDifficultyGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignNodeDifficultyGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignNodeDifficultyGroup>() {
           @Override
           public void write(JsonWriter out, CampaignNodeDifficultyGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignNodeDifficultyGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignNodeDifficultyGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignNodeDifficultyGroup
   * @throws IOException if the JSON string is invalid with respect to CampaignNodeDifficultyGroup
   */
  public static CampaignNodeDifficultyGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignNodeDifficultyGroup.class);
  }

  /**
   * Convert an instance of CampaignNodeDifficultyGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

