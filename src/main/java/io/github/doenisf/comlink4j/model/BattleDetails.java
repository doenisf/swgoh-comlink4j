/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.CampaignNodeEncounter;
import io.github.doenisf.comlink4j.CombatType;
import io.github.doenisf.comlink4j.EntryCategoryAllowed;
import io.github.doenisf.comlink4j.MissionGrantedAbility;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * BattleDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class BattleDetails {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_BATTLE_ENCOUNTER = "battleEncounter";
  @SerializedName(SERIALIZED_NAME_BATTLE_ENCOUNTER)
  private List<CampaignNodeEncounter> battleEncounter = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATTLE_DURATION_LIMIT = "battleDurationLimit";
  @SerializedName(SERIALIZED_NAME_BATTLE_DURATION_LIMIT)
  private Long battleDurationLimit;

  public static final String SERIALIZED_NAME_GRANTED_ABILITY = "grantedAbility";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITY)
  private List<MissionGrantedAbility> grantedAbility = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_BATTLE_ENABLED = "autoBattleEnabled";
  @SerializedName(SERIALIZED_NAME_AUTO_BATTLE_ENABLED)
  private Boolean autoBattleEnabled;

  public static final String SERIALIZED_NAME_BATTLE_SPEED_ADJUSTABLE = "battleSpeedAdjustable";
  @SerializedName(SERIALIZED_NAME_BATTLE_SPEED_ADJUSTABLE)
  private Boolean battleSpeedAdjustable;

  public static final String SERIALIZED_NAME_RETREAT_ENABLED = "retreatEnabled";
  @SerializedName(SERIALIZED_NAME_RETREAT_ENABLED)
  private Boolean retreatEnabled;

  public static final String SERIALIZED_NAME_AUDIO_KEY = "audioKey";
  @SerializedName(SERIALIZED_NAME_AUDIO_KEY)
  private String audioKey;

  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public BattleDetails() {
  }

  public BattleDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BattleDetails entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public BattleDetails battleEncounter(List<CampaignNodeEncounter> battleEncounter) {
    this.battleEncounter = battleEncounter;
    return this;
  }

  public BattleDetails addBattleEncounterItem(CampaignNodeEncounter battleEncounterItem) {
    if (this.battleEncounter == null) {
      this.battleEncounter = new ArrayList<>();
    }
    this.battleEncounter.add(battleEncounterItem);
    return this;
  }

  /**
   * Get battleEncounter
   * @return battleEncounter
   */
  @javax.annotation.Nullable
  public List<CampaignNodeEncounter> getBattleEncounter() {
    return battleEncounter;
  }

  public void setBattleEncounter(List<CampaignNodeEncounter> battleEncounter) {
    this.battleEncounter = battleEncounter;
  }


  public BattleDetails battleDurationLimit(Long battleDurationLimit) {
    this.battleDurationLimit = battleDurationLimit;
    return this;
  }

  /**
   * Get battleDurationLimit
   * @return battleDurationLimit
   */
  @javax.annotation.Nullable
  public Long getBattleDurationLimit() {
    return battleDurationLimit;
  }

  public void setBattleDurationLimit(Long battleDurationLimit) {
    this.battleDurationLimit = battleDurationLimit;
  }


  public BattleDetails grantedAbility(List<MissionGrantedAbility> grantedAbility) {
    this.grantedAbility = grantedAbility;
    return this;
  }

  public BattleDetails addGrantedAbilityItem(MissionGrantedAbility grantedAbilityItem) {
    if (this.grantedAbility == null) {
      this.grantedAbility = new ArrayList<>();
    }
    this.grantedAbility.add(grantedAbilityItem);
    return this;
  }

  /**
   * Get grantedAbility
   * @return grantedAbility
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbility() {
    return grantedAbility;
  }

  public void setGrantedAbility(List<MissionGrantedAbility> grantedAbility) {
    this.grantedAbility = grantedAbility;
  }


  public BattleDetails autoBattleEnabled(Boolean autoBattleEnabled) {
    this.autoBattleEnabled = autoBattleEnabled;
    return this;
  }

  /**
   * Get autoBattleEnabled
   * @return autoBattleEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoBattleEnabled() {
    return autoBattleEnabled;
  }

  public void setAutoBattleEnabled(Boolean autoBattleEnabled) {
    this.autoBattleEnabled = autoBattleEnabled;
  }


  public BattleDetails battleSpeedAdjustable(Boolean battleSpeedAdjustable) {
    this.battleSpeedAdjustable = battleSpeedAdjustable;
    return this;
  }

  /**
   * Get battleSpeedAdjustable
   * @return battleSpeedAdjustable
   */
  @javax.annotation.Nullable
  public Boolean getBattleSpeedAdjustable() {
    return battleSpeedAdjustable;
  }

  public void setBattleSpeedAdjustable(Boolean battleSpeedAdjustable) {
    this.battleSpeedAdjustable = battleSpeedAdjustable;
  }


  public BattleDetails retreatEnabled(Boolean retreatEnabled) {
    this.retreatEnabled = retreatEnabled;
    return this;
  }

  /**
   * Get retreatEnabled
   * @return retreatEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRetreatEnabled() {
    return retreatEnabled;
  }

  public void setRetreatEnabled(Boolean retreatEnabled) {
    this.retreatEnabled = retreatEnabled;
  }


  public BattleDetails audioKey(String audioKey) {
    this.audioKey = audioKey;
    return this;
  }

  /**
   * Get audioKey
   * @return audioKey
   */
  @javax.annotation.Nullable
  public String getAudioKey() {
    return audioKey;
  }

  public void setAudioKey(String audioKey) {
    this.audioKey = audioKey;
  }


  public BattleDetails combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BattleDetails battleDetails = (BattleDetails) o;
    return Objects.equals(this.id, battleDetails.id) &&
        Objects.equals(this.entryCategoryAllowed, battleDetails.entryCategoryAllowed) &&
        Objects.equals(this.battleEncounter, battleDetails.battleEncounter) &&
        Objects.equals(this.battleDurationLimit, battleDetails.battleDurationLimit) &&
        Objects.equals(this.grantedAbility, battleDetails.grantedAbility) &&
        Objects.equals(this.autoBattleEnabled, battleDetails.autoBattleEnabled) &&
        Objects.equals(this.battleSpeedAdjustable, battleDetails.battleSpeedAdjustable) &&
        Objects.equals(this.retreatEnabled, battleDetails.retreatEnabled) &&
        Objects.equals(this.audioKey, battleDetails.audioKey) &&
        Objects.equals(this.combatType, battleDetails.combatType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, entryCategoryAllowed, battleEncounter, battleDurationLimit, grantedAbility, autoBattleEnabled, battleSpeedAdjustable, retreatEnabled, audioKey, combatType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BattleDetails {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    battleEncounter: ").append(toIndentedString(battleEncounter)).append("\n");
    sb.append("    battleDurationLimit: ").append(toIndentedString(battleDurationLimit)).append("\n");
    sb.append("    grantedAbility: ").append(toIndentedString(grantedAbility)).append("\n");
    sb.append("    autoBattleEnabled: ").append(toIndentedString(autoBattleEnabled)).append("\n");
    sb.append("    battleSpeedAdjustable: ").append(toIndentedString(battleSpeedAdjustable)).append("\n");
    sb.append("    retreatEnabled: ").append(toIndentedString(retreatEnabled)).append("\n");
    sb.append("    audioKey: ").append(toIndentedString(audioKey)).append("\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("battleEncounter");
    openapiFields.add("battleDurationLimit");
    openapiFields.add("grantedAbility");
    openapiFields.add("autoBattleEnabled");
    openapiFields.add("battleSpeedAdjustable");
    openapiFields.add("retreatEnabled");
    openapiFields.add("audioKey");
    openapiFields.add("combatType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BattleDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BattleDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BattleDetails is not found in the empty JSON string", BattleDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BattleDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BattleDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
      if (jsonObj.get("battleEncounter") != null && !jsonObj.get("battleEncounter").isJsonNull()) {
        JsonArray jsonArraybattleEncounter = jsonObj.getAsJsonArray("battleEncounter");
        if (jsonArraybattleEncounter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battleEncounter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battleEncounter` to be an array in the JSON string but got `%s`", jsonObj.get("battleEncounter").toString()));
          }

          // validate the optional field `battleEncounter` (array)
          for (int i = 0; i < jsonArraybattleEncounter.size(); i++) {
            CampaignNodeEncounter.validateJsonElement(jsonArraybattleEncounter.get(i));
          };
        }
      }
      if (jsonObj.get("grantedAbility") != null && !jsonObj.get("grantedAbility").isJsonNull()) {
        JsonArray jsonArraygrantedAbility = jsonObj.getAsJsonArray("grantedAbility");
        if (jsonArraygrantedAbility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbility` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbility").toString()));
          }

          // validate the optional field `grantedAbility` (array)
          for (int i = 0; i < jsonArraygrantedAbility.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbility.get(i));
          };
        }
      }
      if ((jsonObj.get("audioKey") != null && !jsonObj.get("audioKey").isJsonNull()) && !jsonObj.get("audioKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioKey").toString()));
      }
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BattleDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BattleDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BattleDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BattleDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BattleDetails>() {
           @Override
           public void write(JsonWriter out, BattleDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BattleDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BattleDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BattleDetails
   * @throws IOException if the JSON string is invalid with respect to BattleDetails
   */
  public static BattleDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BattleDetails.class);
  }

  /**
   * Convert an instance of BattleDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

