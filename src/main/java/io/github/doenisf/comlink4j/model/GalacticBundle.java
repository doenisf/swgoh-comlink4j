/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.BucketItem;
import io.github.doenisf.comlink4j.model.GalacticBundleTab;
import io.github.doenisf.comlink4j.model.UnitUpgrade;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * GalacticBundle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GalacticBundle {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TARGET_PLAYER_LEVEL = "targetPlayerLevel";
  @SerializedName(SERIALIZED_NAME_TARGET_PLAYER_LEVEL)
  private Integer targetPlayerLevel;

  public static final String SERIALIZED_NAME_UNIT_UPGRADE = "unitUpgrade";
  @SerializedName(SERIALIZED_NAME_UNIT_UPGRADE)
  private List<UnitUpgrade> unitUpgrade = new ArrayList<>();

  public static final String SERIALIZED_NAME_TABS = "tabs";
  @SerializedName(SERIALIZED_NAME_TABS)
  private List<GalacticBundleTab> tabs = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_ITEM = "inventoryItem";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ITEM)
  private List<BucketItem> inventoryItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private String info;

  public static final String SERIALIZED_NAME_PRIMARY_GALACTIC_BUNDLE = "primaryGalacticBundle";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GALACTIC_BUNDLE)
  private Boolean primaryGalacticBundle;

  public GalacticBundle() {
  }

  public GalacticBundle id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GalacticBundle targetPlayerLevel(Integer targetPlayerLevel) {
    this.targetPlayerLevel = targetPlayerLevel;
    return this;
  }

  /**
   * Get targetPlayerLevel
   * @return targetPlayerLevel
   */
  @javax.annotation.Nullable
  public Integer getTargetPlayerLevel() {
    return targetPlayerLevel;
  }

  public void setTargetPlayerLevel(Integer targetPlayerLevel) {
    this.targetPlayerLevel = targetPlayerLevel;
  }


  public GalacticBundle unitUpgrade(List<UnitUpgrade> unitUpgrade) {
    this.unitUpgrade = unitUpgrade;
    return this;
  }

  public GalacticBundle addUnitUpgradeItem(UnitUpgrade unitUpgradeItem) {
    if (this.unitUpgrade == null) {
      this.unitUpgrade = new ArrayList<>();
    }
    this.unitUpgrade.add(unitUpgradeItem);
    return this;
  }

  /**
   * Get unitUpgrade
   * @return unitUpgrade
   */
  @javax.annotation.Nullable
  public List<UnitUpgrade> getUnitUpgrade() {
    return unitUpgrade;
  }

  public void setUnitUpgrade(List<UnitUpgrade> unitUpgrade) {
    this.unitUpgrade = unitUpgrade;
  }


  public GalacticBundle tabs(List<GalacticBundleTab> tabs) {
    this.tabs = tabs;
    return this;
  }

  public GalacticBundle addTabsItem(GalacticBundleTab tabsItem) {
    if (this.tabs == null) {
      this.tabs = new ArrayList<>();
    }
    this.tabs.add(tabsItem);
    return this;
  }

  /**
   * Get tabs
   * @return tabs
   */
  @javax.annotation.Nullable
  public List<GalacticBundleTab> getTabs() {
    return tabs;
  }

  public void setTabs(List<GalacticBundleTab> tabs) {
    this.tabs = tabs;
  }


  public GalacticBundle inventoryItem(List<BucketItem> inventoryItem) {
    this.inventoryItem = inventoryItem;
    return this;
  }

  public GalacticBundle addInventoryItemItem(BucketItem inventoryItemItem) {
    if (this.inventoryItem == null) {
      this.inventoryItem = new ArrayList<>();
    }
    this.inventoryItem.add(inventoryItemItem);
    return this;
  }

  /**
   * Get inventoryItem
   * @return inventoryItem
   */
  @javax.annotation.Nullable
  public List<BucketItem> getInventoryItem() {
    return inventoryItem;
  }

  public void setInventoryItem(List<BucketItem> inventoryItem) {
    this.inventoryItem = inventoryItem;
  }


  public GalacticBundle info(String info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }


  public GalacticBundle primaryGalacticBundle(Boolean primaryGalacticBundle) {
    this.primaryGalacticBundle = primaryGalacticBundle;
    return this;
  }

  /**
   * Get primaryGalacticBundle
   * @return primaryGalacticBundle
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryGalacticBundle() {
    return primaryGalacticBundle;
  }

  public void setPrimaryGalacticBundle(Boolean primaryGalacticBundle) {
    this.primaryGalacticBundle = primaryGalacticBundle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalacticBundle galacticBundle = (GalacticBundle) o;
    return Objects.equals(this.id, galacticBundle.id) &&
        Objects.equals(this.targetPlayerLevel, galacticBundle.targetPlayerLevel) &&
        Objects.equals(this.unitUpgrade, galacticBundle.unitUpgrade) &&
        Objects.equals(this.tabs, galacticBundle.tabs) &&
        Objects.equals(this.inventoryItem, galacticBundle.inventoryItem) &&
        Objects.equals(this.info, galacticBundle.info) &&
        Objects.equals(this.primaryGalacticBundle, galacticBundle.primaryGalacticBundle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, targetPlayerLevel, unitUpgrade, tabs, inventoryItem, info, primaryGalacticBundle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalacticBundle {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    targetPlayerLevel: ").append(toIndentedString(targetPlayerLevel)).append("\n");
    sb.append("    unitUpgrade: ").append(toIndentedString(unitUpgrade)).append("\n");
    sb.append("    tabs: ").append(toIndentedString(tabs)).append("\n");
    sb.append("    inventoryItem: ").append(toIndentedString(inventoryItem)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    primaryGalacticBundle: ").append(toIndentedString(primaryGalacticBundle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("targetPlayerLevel");
    openapiFields.add("unitUpgrade");
    openapiFields.add("tabs");
    openapiFields.add("inventoryItem");
    openapiFields.add("info");
    openapiFields.add("primaryGalacticBundle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GalacticBundle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GalacticBundle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GalacticBundle is not found in the empty JSON string", GalacticBundle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GalacticBundle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GalacticBundle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("unitUpgrade") != null && !jsonObj.get("unitUpgrade").isJsonNull()) {
        JsonArray jsonArrayunitUpgrade = jsonObj.getAsJsonArray("unitUpgrade");
        if (jsonArrayunitUpgrade != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unitUpgrade").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unitUpgrade` to be an array in the JSON string but got `%s`", jsonObj.get("unitUpgrade").toString()));
          }

          // validate the optional field `unitUpgrade` (array)
          for (int i = 0; i < jsonArrayunitUpgrade.size(); i++) {
            UnitUpgrade.validateJsonElement(jsonArrayunitUpgrade.get(i));
          };
        }
      }
      if (jsonObj.get("tabs") != null && !jsonObj.get("tabs").isJsonNull()) {
        JsonArray jsonArraytabs = jsonObj.getAsJsonArray("tabs");
        if (jsonArraytabs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tabs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tabs` to be an array in the JSON string but got `%s`", jsonObj.get("tabs").toString()));
          }

          // validate the optional field `tabs` (array)
          for (int i = 0; i < jsonArraytabs.size(); i++) {
            GalacticBundleTab.validateJsonElement(jsonArraytabs.get(i));
          };
        }
      }
      if (jsonObj.get("inventoryItem") != null && !jsonObj.get("inventoryItem").isJsonNull()) {
        JsonArray jsonArrayinventoryItem = jsonObj.getAsJsonArray("inventoryItem");
        if (jsonArrayinventoryItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventoryItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventoryItem` to be an array in the JSON string but got `%s`", jsonObj.get("inventoryItem").toString()));
          }

          // validate the optional field `inventoryItem` (array)
          for (int i = 0; i < jsonArrayinventoryItem.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayinventoryItem.get(i));
          };
        }
      }
      if ((jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) && !jsonObj.get("info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GalacticBundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GalacticBundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GalacticBundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GalacticBundle.class));

       return (TypeAdapter<T>) new TypeAdapter<GalacticBundle>() {
           @Override
           public void write(JsonWriter out, GalacticBundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GalacticBundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GalacticBundle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GalacticBundle
   * @throws IOException if the JSON string is invalid with respect to GalacticBundle
   */
  public static GalacticBundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GalacticBundle.class);
  }

  /**
   * Convert an instance of GalacticBundle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

