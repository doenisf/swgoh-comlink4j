/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TerritoryTournamentLeagueDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryTournamentLeagueDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_SPRITE = "sprite";
  @SerializedName(SERIALIZED_NAME_SPRITE)
  private String sprite;

  public static final String SERIALIZED_NAME_PORTRAIT_FRAME = "portraitFrame";
  @SerializedName(SERIALIZED_NAME_PORTRAIT_FRAME)
  private String portraitFrame;

  public static final String SERIALIZED_NAME_BLANK_ICON = "blankIcon";
  @SerializedName(SERIALIZED_NAME_BLANK_ICON)
  private String blankIcon;

  public TerritoryTournamentLeagueDefinition() {
  }

  public TerritoryTournamentLeagueDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TerritoryTournamentLeagueDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public TerritoryTournamentLeagueDefinition icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public TerritoryTournamentLeagueDefinition rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public TerritoryTournamentLeagueDefinition sprite(String sprite) {
    this.sprite = sprite;
    return this;
  }

  /**
   * Get sprite
   * @return sprite
   */
  @javax.annotation.Nullable
  public String getSprite() {
    return sprite;
  }

  public void setSprite(String sprite) {
    this.sprite = sprite;
  }


  public TerritoryTournamentLeagueDefinition portraitFrame(String portraitFrame) {
    this.portraitFrame = portraitFrame;
    return this;
  }

  /**
   * Get portraitFrame
   * @return portraitFrame
   */
  @javax.annotation.Nullable
  public String getPortraitFrame() {
    return portraitFrame;
  }

  public void setPortraitFrame(String portraitFrame) {
    this.portraitFrame = portraitFrame;
  }


  public TerritoryTournamentLeagueDefinition blankIcon(String blankIcon) {
    this.blankIcon = blankIcon;
    return this;
  }

  /**
   * Get blankIcon
   * @return blankIcon
   */
  @javax.annotation.Nullable
  public String getBlankIcon() {
    return blankIcon;
  }

  public void setBlankIcon(String blankIcon) {
    this.blankIcon = blankIcon;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryTournamentLeagueDefinition territoryTournamentLeagueDefinition = (TerritoryTournamentLeagueDefinition) o;
    return Objects.equals(this.id, territoryTournamentLeagueDefinition.id) &&
        Objects.equals(this.nameKey, territoryTournamentLeagueDefinition.nameKey) &&
        Objects.equals(this.icon, territoryTournamentLeagueDefinition.icon) &&
        Objects.equals(this.rank, territoryTournamentLeagueDefinition.rank) &&
        Objects.equals(this.sprite, territoryTournamentLeagueDefinition.sprite) &&
        Objects.equals(this.portraitFrame, territoryTournamentLeagueDefinition.portraitFrame) &&
        Objects.equals(this.blankIcon, territoryTournamentLeagueDefinition.blankIcon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, icon, rank, sprite, portraitFrame, blankIcon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryTournamentLeagueDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    sprite: ").append(toIndentedString(sprite)).append("\n");
    sb.append("    portraitFrame: ").append(toIndentedString(portraitFrame)).append("\n");
    sb.append("    blankIcon: ").append(toIndentedString(blankIcon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("icon");
    openapiFields.add("rank");
    openapiFields.add("sprite");
    openapiFields.add("portraitFrame");
    openapiFields.add("blankIcon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryTournamentLeagueDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryTournamentLeagueDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryTournamentLeagueDefinition is not found in the empty JSON string", TerritoryTournamentLeagueDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryTournamentLeagueDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryTournamentLeagueDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("sprite") != null && !jsonObj.get("sprite").isJsonNull()) && !jsonObj.get("sprite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sprite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sprite").toString()));
      }
      if ((jsonObj.get("portraitFrame") != null && !jsonObj.get("portraitFrame").isJsonNull()) && !jsonObj.get("portraitFrame").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portraitFrame` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portraitFrame").toString()));
      }
      if ((jsonObj.get("blankIcon") != null && !jsonObj.get("blankIcon").isJsonNull()) && !jsonObj.get("blankIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blankIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blankIcon").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryTournamentLeagueDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryTournamentLeagueDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryTournamentLeagueDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryTournamentLeagueDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryTournamentLeagueDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryTournamentLeagueDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryTournamentLeagueDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryTournamentLeagueDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryTournamentLeagueDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryTournamentLeagueDefinition
   */
  public static TerritoryTournamentLeagueDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryTournamentLeagueDefinition.class);
  }

  /**
   * Convert an instance of TerritoryTournamentLeagueDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

