/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.RaidAbilityOverride;
import io.github.doenisf.comlink4j.model.RelicTier;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * RaidModifier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class RaidModifier {
  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_GRANTED_ABILITY = "grantedAbility";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITY)
  private List<MissionGrantedAbility> grantedAbility = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORE_MULTIPLIER_UNSCALED = "scoreMultiplierUnscaled";
  @SerializedName(SERIALIZED_NAME_SCORE_MULTIPLIER_UNSCALED)
  private Long scoreMultiplierUnscaled;

  public static final String SERIALIZED_NAME_REQUIRED_UNIT_TIER = "requiredUnitTier";
  @SerializedName(SERIALIZED_NAME_REQUIRED_UNIT_TIER)
  private UnitTier requiredUnitTier;

  public static final String SERIALIZED_NAME_REQUIRED_RELIC_TIER = "requiredRelicTier";
  @SerializedName(SERIALIZED_NAME_REQUIRED_RELIC_TIER)
  private RelicTier requiredRelicTier;

  public static final String SERIALIZED_NAME_ABILITY_OVERRIDE = "abilityOverride";
  @SerializedName(SERIALIZED_NAME_ABILITY_OVERRIDE)
  private List<RaidAbilityOverride> abilityOverride = new ArrayList<>();

  public RaidModifier() {
  }

  public RaidModifier descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public RaidModifier grantedAbility(List<MissionGrantedAbility> grantedAbility) {
    this.grantedAbility = grantedAbility;
    return this;
  }

  public RaidModifier addGrantedAbilityItem(MissionGrantedAbility grantedAbilityItem) {
    if (this.grantedAbility == null) {
      this.grantedAbility = new ArrayList<>();
    }
    this.grantedAbility.add(grantedAbilityItem);
    return this;
  }

  /**
   * Get grantedAbility
   * @return grantedAbility
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbility() {
    return grantedAbility;
  }

  public void setGrantedAbility(List<MissionGrantedAbility> grantedAbility) {
    this.grantedAbility = grantedAbility;
  }


  public RaidModifier scoreMultiplierUnscaled(Long scoreMultiplierUnscaled) {
    this.scoreMultiplierUnscaled = scoreMultiplierUnscaled;
    return this;
  }

  /**
   * Get scoreMultiplierUnscaled
   * @return scoreMultiplierUnscaled
   */
  @javax.annotation.Nullable
  public Long getScoreMultiplierUnscaled() {
    return scoreMultiplierUnscaled;
  }

  public void setScoreMultiplierUnscaled(Long scoreMultiplierUnscaled) {
    this.scoreMultiplierUnscaled = scoreMultiplierUnscaled;
  }


  public RaidModifier requiredUnitTier(UnitTier requiredUnitTier) {
    this.requiredUnitTier = requiredUnitTier;
    return this;
  }

  /**
   * Get requiredUnitTier
   * @return requiredUnitTier
   */
  @javax.annotation.Nullable
  public UnitTier getRequiredUnitTier() {
    return requiredUnitTier;
  }

  public void setRequiredUnitTier(UnitTier requiredUnitTier) {
    this.requiredUnitTier = requiredUnitTier;
  }


  public RaidModifier requiredRelicTier(RelicTier requiredRelicTier) {
    this.requiredRelicTier = requiredRelicTier;
    return this;
  }

  /**
   * Get requiredRelicTier
   * @return requiredRelicTier
   */
  @javax.annotation.Nullable
  public RelicTier getRequiredRelicTier() {
    return requiredRelicTier;
  }

  public void setRequiredRelicTier(RelicTier requiredRelicTier) {
    this.requiredRelicTier = requiredRelicTier;
  }


  public RaidModifier abilityOverride(List<RaidAbilityOverride> abilityOverride) {
    this.abilityOverride = abilityOverride;
    return this;
  }

  public RaidModifier addAbilityOverrideItem(RaidAbilityOverride abilityOverrideItem) {
    if (this.abilityOverride == null) {
      this.abilityOverride = new ArrayList<>();
    }
    this.abilityOverride.add(abilityOverrideItem);
    return this;
  }

  /**
   * Get abilityOverride
   * @return abilityOverride
   */
  @javax.annotation.Nullable
  public List<RaidAbilityOverride> getAbilityOverride() {
    return abilityOverride;
  }

  public void setAbilityOverride(List<RaidAbilityOverride> abilityOverride) {
    this.abilityOverride = abilityOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RaidModifier raidModifier = (RaidModifier) o;
    return Objects.equals(this.descKey, raidModifier.descKey) &&
        Objects.equals(this.grantedAbility, raidModifier.grantedAbility) &&
        Objects.equals(this.scoreMultiplierUnscaled, raidModifier.scoreMultiplierUnscaled) &&
        Objects.equals(this.requiredUnitTier, raidModifier.requiredUnitTier) &&
        Objects.equals(this.requiredRelicTier, raidModifier.requiredRelicTier) &&
        Objects.equals(this.abilityOverride, raidModifier.abilityOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descKey, grantedAbility, scoreMultiplierUnscaled, requiredUnitTier, requiredRelicTier, abilityOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RaidModifier {\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    grantedAbility: ").append(toIndentedString(grantedAbility)).append("\n");
    sb.append("    scoreMultiplierUnscaled: ").append(toIndentedString(scoreMultiplierUnscaled)).append("\n");
    sb.append("    requiredUnitTier: ").append(toIndentedString(requiredUnitTier)).append("\n");
    sb.append("    requiredRelicTier: ").append(toIndentedString(requiredRelicTier)).append("\n");
    sb.append("    abilityOverride: ").append(toIndentedString(abilityOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("descKey");
    openapiFields.add("grantedAbility");
    openapiFields.add("scoreMultiplierUnscaled");
    openapiFields.add("requiredUnitTier");
    openapiFields.add("requiredRelicTier");
    openapiFields.add("abilityOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RaidModifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RaidModifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RaidModifier is not found in the empty JSON string", RaidModifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RaidModifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RaidModifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      if (jsonObj.get("grantedAbility") != null && !jsonObj.get("grantedAbility").isJsonNull()) {
        JsonArray jsonArraygrantedAbility = jsonObj.getAsJsonArray("grantedAbility");
        if (jsonArraygrantedAbility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbility` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbility").toString()));
          }

          // validate the optional field `grantedAbility` (array)
          for (int i = 0; i < jsonArraygrantedAbility.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbility.get(i));
          };
        }
      }
      // validate the optional field `requiredUnitTier`
      if (jsonObj.get("requiredUnitTier") != null && !jsonObj.get("requiredUnitTier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("requiredUnitTier"));
      }
      // validate the optional field `requiredRelicTier`
      if (jsonObj.get("requiredRelicTier") != null && !jsonObj.get("requiredRelicTier").isJsonNull()) {
        RelicTier.validateJsonElement(jsonObj.get("requiredRelicTier"));
      }
      if (jsonObj.get("abilityOverride") != null && !jsonObj.get("abilityOverride").isJsonNull()) {
        JsonArray jsonArrayabilityOverride = jsonObj.getAsJsonArray("abilityOverride");
        if (jsonArrayabilityOverride != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abilityOverride").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abilityOverride` to be an array in the JSON string but got `%s`", jsonObj.get("abilityOverride").toString()));
          }

          // validate the optional field `abilityOverride` (array)
          for (int i = 0; i < jsonArrayabilityOverride.size(); i++) {
            RaidAbilityOverride.validateJsonElement(jsonArrayabilityOverride.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RaidModifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RaidModifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RaidModifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RaidModifier.class));

       return (TypeAdapter<T>) new TypeAdapter<RaidModifier>() {
           @Override
           public void write(JsonWriter out, RaidModifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RaidModifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RaidModifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RaidModifier
   * @throws IOException if the JSON string is invalid with respect to RaidModifier
   */
  public static RaidModifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RaidModifier.class);
  }

  /**
   * Convert an instance of RaidModifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

