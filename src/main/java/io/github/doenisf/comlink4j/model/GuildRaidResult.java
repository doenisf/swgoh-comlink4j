/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CachedRaidRewards;
import io.github.doenisf.comlink4j.model.CampaignElementIdentifier;
import io.github.doenisf.comlink4j.model.RaidMember;
import io.github.doenisf.comlink4j.model.RaidOutcome;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * GuildRaidResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GuildRaidResult {
  public static final String SERIALIZED_NAME_RAID_ID = "raidId";
  @SerializedName(SERIALIZED_NAME_RAID_ID)
  private String raidId;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private CampaignElementIdentifier identifier;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Long duration;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Float progress;

  public static final String SERIALIZED_NAME_RAID_MEMBER = "raidMember";
  @SerializedName(SERIALIZED_NAME_RAID_MEMBER)
  private List<RaidMember> raidMember = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Long endTime;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  private RaidOutcome outcome;

  public static final String SERIALIZED_NAME_ENCOUNTER_PROGRESS = "encounterProgress";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_PROGRESS)
  private List<Long> encounterProgress = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_REWARD_SCORE = "guildRewardScore";
  @SerializedName(SERIALIZED_NAME_GUILD_REWARD_SCORE)
  private Long guildRewardScore;

  public static final String SERIALIZED_NAME_CACHED_REWARDS = "cachedRewards";
  @SerializedName(SERIALIZED_NAME_CACHED_REWARDS)
  private CachedRaidRewards cachedRewards;

  public GuildRaidResult() {
  }

  public GuildRaidResult raidId(String raidId) {
    this.raidId = raidId;
    return this;
  }

  /**
   * Get raidId
   * @return raidId
   */
  @javax.annotation.Nullable
  public String getRaidId() {
    return raidId;
  }

  public void setRaidId(String raidId) {
    this.raidId = raidId;
  }


  public GuildRaidResult identifier(CampaignElementIdentifier identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public CampaignElementIdentifier getIdentifier() {
    return identifier;
  }

  public void setIdentifier(CampaignElementIdentifier identifier) {
    this.identifier = identifier;
  }


  public GuildRaidResult duration(Long duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }

  public void setDuration(Long duration) {
    this.duration = duration;
  }


  public GuildRaidResult progress(Float progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Float getProgress() {
    return progress;
  }

  public void setProgress(Float progress) {
    this.progress = progress;
  }


  public GuildRaidResult raidMember(List<RaidMember> raidMember) {
    this.raidMember = raidMember;
    return this;
  }

  public GuildRaidResult addRaidMemberItem(RaidMember raidMemberItem) {
    if (this.raidMember == null) {
      this.raidMember = new ArrayList<>();
    }
    this.raidMember.add(raidMemberItem);
    return this;
  }

  /**
   * Get raidMember
   * @return raidMember
   */
  @javax.annotation.Nullable
  public List<RaidMember> getRaidMember() {
    return raidMember;
  }

  public void setRaidMember(List<RaidMember> raidMember) {
    this.raidMember = raidMember;
  }


  public GuildRaidResult endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public GuildRaidResult outcome(RaidOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Get outcome
   * @return outcome
   */
  @javax.annotation.Nullable
  public RaidOutcome getOutcome() {
    return outcome;
  }

  public void setOutcome(RaidOutcome outcome) {
    this.outcome = outcome;
  }


  public GuildRaidResult encounterProgress(List<Long> encounterProgress) {
    this.encounterProgress = encounterProgress;
    return this;
  }

  public GuildRaidResult addEncounterProgressItem(Long encounterProgressItem) {
    if (this.encounterProgress == null) {
      this.encounterProgress = new ArrayList<>();
    }
    this.encounterProgress.add(encounterProgressItem);
    return this;
  }

  /**
   * Get encounterProgress
   * @return encounterProgress
   */
  @javax.annotation.Nullable
  public List<Long> getEncounterProgress() {
    return encounterProgress;
  }

  public void setEncounterProgress(List<Long> encounterProgress) {
    this.encounterProgress = encounterProgress;
  }


  public GuildRaidResult guildRewardScore(Long guildRewardScore) {
    this.guildRewardScore = guildRewardScore;
    return this;
  }

  /**
   * Get guildRewardScore
   * @return guildRewardScore
   */
  @javax.annotation.Nullable
  public Long getGuildRewardScore() {
    return guildRewardScore;
  }

  public void setGuildRewardScore(Long guildRewardScore) {
    this.guildRewardScore = guildRewardScore;
  }


  public GuildRaidResult cachedRewards(CachedRaidRewards cachedRewards) {
    this.cachedRewards = cachedRewards;
    return this;
  }

  /**
   * Get cachedRewards
   * @return cachedRewards
   */
  @javax.annotation.Nullable
  public CachedRaidRewards getCachedRewards() {
    return cachedRewards;
  }

  public void setCachedRewards(CachedRaidRewards cachedRewards) {
    this.cachedRewards = cachedRewards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuildRaidResult guildRaidResult = (GuildRaidResult) o;
    return Objects.equals(this.raidId, guildRaidResult.raidId) &&
        Objects.equals(this.identifier, guildRaidResult.identifier) &&
        Objects.equals(this.duration, guildRaidResult.duration) &&
        Objects.equals(this.progress, guildRaidResult.progress) &&
        Objects.equals(this.raidMember, guildRaidResult.raidMember) &&
        Objects.equals(this.endTime, guildRaidResult.endTime) &&
        Objects.equals(this.outcome, guildRaidResult.outcome) &&
        Objects.equals(this.encounterProgress, guildRaidResult.encounterProgress) &&
        Objects.equals(this.guildRewardScore, guildRaidResult.guildRewardScore) &&
        Objects.equals(this.cachedRewards, guildRaidResult.cachedRewards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(raidId, identifier, duration, progress, raidMember, endTime, outcome, encounterProgress, guildRewardScore, cachedRewards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuildRaidResult {\n");
    sb.append("    raidId: ").append(toIndentedString(raidId)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    raidMember: ").append(toIndentedString(raidMember)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    encounterProgress: ").append(toIndentedString(encounterProgress)).append("\n");
    sb.append("    guildRewardScore: ").append(toIndentedString(guildRewardScore)).append("\n");
    sb.append("    cachedRewards: ").append(toIndentedString(cachedRewards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("raidId");
    openapiFields.add("identifier");
    openapiFields.add("duration");
    openapiFields.add("progress");
    openapiFields.add("raidMember");
    openapiFields.add("endTime");
    openapiFields.add("outcome");
    openapiFields.add("encounterProgress");
    openapiFields.add("guildRewardScore");
    openapiFields.add("cachedRewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuildRaidResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuildRaidResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuildRaidResult is not found in the empty JSON string", GuildRaidResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuildRaidResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuildRaidResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("raidId") != null && !jsonObj.get("raidId").isJsonNull()) && !jsonObj.get("raidId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raidId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raidId").toString()));
      }
      // validate the optional field `identifier`
      if (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) {
        CampaignElementIdentifier.validateJsonElement(jsonObj.get("identifier"));
      }
      if (jsonObj.get("raidMember") != null && !jsonObj.get("raidMember").isJsonNull()) {
        JsonArray jsonArrayraidMember = jsonObj.getAsJsonArray("raidMember");
        if (jsonArrayraidMember != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidMember").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidMember` to be an array in the JSON string but got `%s`", jsonObj.get("raidMember").toString()));
          }

          // validate the optional field `raidMember` (array)
          for (int i = 0; i < jsonArrayraidMember.size(); i++) {
            RaidMember.validateJsonElement(jsonArrayraidMember.get(i));
          };
        }
      }
      // validate the optional field `outcome`
      if (jsonObj.get("outcome") != null && !jsonObj.get("outcome").isJsonNull()) {
        RaidOutcome.validateJsonElement(jsonObj.get("outcome"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("encounterProgress") != null && !jsonObj.get("encounterProgress").isJsonNull() && !jsonObj.get("encounterProgress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `encounterProgress` to be an array in the JSON string but got `%s`", jsonObj.get("encounterProgress").toString()));
      }
      // validate the optional field `cachedRewards`
      if (jsonObj.get("cachedRewards") != null && !jsonObj.get("cachedRewards").isJsonNull()) {
        CachedRaidRewards.validateJsonElement(jsonObj.get("cachedRewards"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuildRaidResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuildRaidResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuildRaidResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuildRaidResult.class));

       return (TypeAdapter<T>) new TypeAdapter<GuildRaidResult>() {
           @Override
           public void write(JsonWriter out, GuildRaidResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuildRaidResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuildRaidResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuildRaidResult
   * @throws IOException if the JSON string is invalid with respect to GuildRaidResult
   */
  public static GuildRaidResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuildRaidResult.class);
  }

  /**
   * Convert an instance of GuildRaidResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

