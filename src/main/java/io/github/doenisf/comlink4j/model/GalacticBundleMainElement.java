/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.GalacticBundleMainElementInventoryType;
import io.github.doenisf.comlink4j.GalacticBundleMainElementPage;
import io.github.doenisf.comlink4j.GalacticBundleMainElementType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * GalacticBundleMainElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GalacticBundleMainElement {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private List<GalacticBundleMainElementPage> page = new ArrayList<>();

  public static final String SERIALIZED_NAME_ELEMENT_TYPE = "elementType";
  @SerializedName(SERIALIZED_NAME_ELEMENT_TYPE)
  private GalacticBundleMainElementType elementType;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventoryType";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private GalacticBundleMainElementInventoryType inventoryType;

  public GalacticBundleMainElement() {
  }

  public GalacticBundleMainElement page(List<GalacticBundleMainElementPage> page) {
    this.page = page;
    return this;
  }

  public GalacticBundleMainElement addPageItem(GalacticBundleMainElementPage pageItem) {
    if (this.page == null) {
      this.page = new ArrayList<>();
    }
    this.page.add(pageItem);
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public List<GalacticBundleMainElementPage> getPage() {
    return page;
  }

  public void setPage(List<GalacticBundleMainElementPage> page) {
    this.page = page;
  }


  public GalacticBundleMainElement elementType(GalacticBundleMainElementType elementType) {
    this.elementType = elementType;
    return this;
  }

  /**
   * Get elementType
   * @return elementType
   */
  @javax.annotation.Nullable
  public GalacticBundleMainElementType getElementType() {
    return elementType;
  }

  public void setElementType(GalacticBundleMainElementType elementType) {
    this.elementType = elementType;
  }


  public GalacticBundleMainElement image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public GalacticBundleMainElement title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GalacticBundleMainElement description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GalacticBundleMainElement inventoryType(GalacticBundleMainElementInventoryType inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  /**
   * Get inventoryType
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public GalacticBundleMainElementInventoryType getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(GalacticBundleMainElementInventoryType inventoryType) {
    this.inventoryType = inventoryType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalacticBundleMainElement galacticBundleMainElement = (GalacticBundleMainElement) o;
    return Objects.equals(this.page, galacticBundleMainElement.page) &&
        Objects.equals(this.elementType, galacticBundleMainElement.elementType) &&
        Objects.equals(this.image, galacticBundleMainElement.image) &&
        Objects.equals(this.title, galacticBundleMainElement.title) &&
        Objects.equals(this.description, galacticBundleMainElement.description) &&
        Objects.equals(this.inventoryType, galacticBundleMainElement.inventoryType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, elementType, image, title, description, inventoryType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalacticBundleMainElement {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("page");
    openapiFields.add("elementType");
    openapiFields.add("image");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("inventoryType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GalacticBundleMainElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GalacticBundleMainElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GalacticBundleMainElement is not found in the empty JSON string", GalacticBundleMainElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GalacticBundleMainElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GalacticBundleMainElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) {
        JsonArray jsonArraypage = jsonObj.getAsJsonArray("page");
        if (jsonArraypage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("page").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `page` to be an array in the JSON string but got `%s`", jsonObj.get("page").toString()));
          }

          // validate the optional field `page` (array)
          for (int i = 0; i < jsonArraypage.size(); i++) {
            GalacticBundleMainElementPage.validateJsonElement(jsonArraypage.get(i));
          };
        }
      }
      // validate the optional field `elementType`
      if (jsonObj.get("elementType") != null && !jsonObj.get("elementType").isJsonNull()) {
        GalacticBundleMainElementType.validateJsonElement(jsonObj.get("elementType"));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `inventoryType`
      if (jsonObj.get("inventoryType") != null && !jsonObj.get("inventoryType").isJsonNull()) {
        GalacticBundleMainElementInventoryType.validateJsonElement(jsonObj.get("inventoryType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GalacticBundleMainElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GalacticBundleMainElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GalacticBundleMainElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GalacticBundleMainElement.class));

       return (TypeAdapter<T>) new TypeAdapter<GalacticBundleMainElement>() {
           @Override
           public void write(JsonWriter out, GalacticBundleMainElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GalacticBundleMainElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GalacticBundleMainElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GalacticBundleMainElement
   * @throws IOException if the JSON string is invalid with respect to GalacticBundleMainElement
   */
  public static GalacticBundleMainElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GalacticBundleMainElement.class);
  }

  /**
   * Convert an instance of GalacticBundleMainElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

