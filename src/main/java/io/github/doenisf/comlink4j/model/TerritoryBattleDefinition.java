/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryBattleDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryBattleDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESCRIPTION_KEY = "descriptionKey";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_KEY)
  private String descriptionKey;

  public static final String SERIALIZED_NAME_PREFAB_NAME = "prefabName";
  @SerializedName(SERIALIZED_NAME_PREFAB_NAME)
  private String prefabName;

  public static final String SERIALIZED_NAME_ROUND_DURATION = "roundDuration";
  @SerializedName(SERIALIZED_NAME_ROUND_DURATION)
  private Long roundDuration;

  public static final String SERIALIZED_NAME_ROUND_COUNT = "roundCount";
  @SerializedName(SERIALIZED_NAME_ROUND_COUNT)
  private Integer roundCount;

  public static final String SERIALIZED_NAME_CONFLICT_ZONE_DEFINITION = "conflictZoneDefinition";
  @SerializedName(SERIALIZED_NAME_CONFLICT_ZONE_DEFINITION)
  private List<TerritoryBattleConflictZoneDefinition> conflictZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRIKE_ZONE_DEFINITION = "strikeZoneDefinition";
  @SerializedName(SERIALIZED_NAME_STRIKE_ZONE_DEFINITION)
  private List<TerritoryStrikeZoneDefinition> strikeZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECON_ZONE_DEFINITION = "reconZoneDefinition";
  @SerializedName(SERIALIZED_NAME_RECON_ZONE_DEFINITION)
  private List<TerritoryReconZoneDefinition> reconZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICON_PREFAB = "iconPrefab";
  @SerializedName(SERIALIZED_NAME_ICON_PREFAB)
  private String iconPrefab;

  public static final String SERIALIZED_NAME_RANK_REWARD_PREVIEW = "rankRewardPreview";
  @SerializedName(SERIALIZED_NAME_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> rankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL_IMAGE = "detailImage";
  @SerializedName(SERIALIZED_NAME_DETAIL_IMAGE)
  private String detailImage;

  public static final String SERIALIZED_NAME_DYNAMIC_DESCRIPTION = "dynamicDescription";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DESCRIPTION)
  private List<DynamicDescription> dynamicDescription = new ArrayList<>();

  public static final String SERIALIZED_NAME_COVERT_ZONE_DEFINITION = "covertZoneDefinition";
  @SerializedName(SERIALIZED_NAME_COVERT_ZONE_DEFINITION)
  private List<TerritoryCovertZoneDefinition> covertZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAT_CATEGORY = "statCategory";
  @SerializedName(SERIALIZED_NAME_STAT_CATEGORY)
  private List<TerritoryMapStatCategory> statCategory = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRITORY_CATEGORY = "territoryCategory";
  @SerializedName(SERIALIZED_NAME_TERRITORY_CATEGORY)
  private String territoryCategory;

  public static final String SERIALIZED_NAME_ROUND_TALLY_DURATION = "roundTallyDuration";
  @SerializedName(SERIALIZED_NAME_ROUND_TALLY_DURATION)
  private Integer roundTallyDuration;

  public static final String SERIALIZED_NAME_GRANTED_ABILITIES = "grantedAbilities";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITIES)
  private List<MissionGrantedAbility> grantedAbilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCAL_NOTIFICATIONS = "localNotifications";
  @SerializedName(SERIALIZED_NAME_LOCAL_NOTIFICATIONS)
  private List<TerritoryLocalNote> localNotifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_MEMBER_LEVEL_FOR_COMMANDING_GUILD = "minMemberLevelForCommandingGuild";
  @SerializedName(SERIALIZED_NAME_MIN_MEMBER_LEVEL_FOR_COMMANDING_GUILD)
  private GuildMemberLevel minMemberLevelForCommandingGuild;

  public static final String SERIALIZED_NAME_COMMAND_NOTIFICATION_COOLDOWN_DURATION = "commandNotificationCooldownDuration";
  @SerializedName(SERIALIZED_NAME_COMMAND_NOTIFICATION_COOLDOWN_DURATION)
  private Integer commandNotificationCooldownDuration;

  public static final String SERIALIZED_NAME_MINIMAP_PREFAB = "minimapPrefab";
  @SerializedName(SERIALIZED_NAME_MINIMAP_PREFAB)
  private String minimapPrefab;

  public static final String SERIALIZED_NAME_SEARCH_IMAGE = "searchImage";
  @SerializedName(SERIALIZED_NAME_SEARCH_IMAGE)
  private String searchImage;

  public static final String SERIALIZED_NAME_INFO_IMAGE = "infoImage";
  @SerializedName(SERIALIZED_NAME_INFO_IMAGE)
  private String infoImage;

  public static final String SERIALIZED_NAME_FORCE_ALIGNMENT = "forceAlignment";
  @SerializedName(SERIALIZED_NAME_FORCE_ALIGNMENT)
  private ForceAlignment forceAlignment;

  public static final String SERIALIZED_NAME_ENVIRONMENT_NAME_KEY = "environmentNameKey";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_NAME_KEY)
  private String environmentNameKey;

  public static final String SERIALIZED_NAME_ENVIRONMENT_PREFAB = "environmentPrefab";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_PREFAB)
  private String environmentPrefab;

  public static final String SERIALIZED_NAME_TERRITORY_BATTLE_VERSION3 = "territoryBattleVersion_3";
  @SerializedName(SERIALIZED_NAME_TERRITORY_BATTLE_VERSION3)
  private Boolean territoryBattleVersion3;

  public static final String SERIALIZED_NAME_BONUS_ZONE_DEFINITION = "bonusZoneDefinition";
  @SerializedName(SERIALIZED_NAME_BONUS_ZONE_DEFINITION)
  private List<TerritoryBonusZoneDefinition> bonusZoneDefinition = new ArrayList<>();

  public TerritoryBattleDefinition() {
  }

  public TerritoryBattleDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TerritoryBattleDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public TerritoryBattleDefinition descriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
    return this;
  }

  /**
   * Get descriptionKey
   * @return descriptionKey
   */
  @javax.annotation.Nullable
  public String getDescriptionKey() {
    return descriptionKey;
  }

  public void setDescriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
  }


  public TerritoryBattleDefinition prefabName(String prefabName) {
    this.prefabName = prefabName;
    return this;
  }

  /**
   * Get prefabName
   * @return prefabName
   */
  @javax.annotation.Nullable
  public String getPrefabName() {
    return prefabName;
  }

  public void setPrefabName(String prefabName) {
    this.prefabName = prefabName;
  }


  public TerritoryBattleDefinition roundDuration(Long roundDuration) {
    this.roundDuration = roundDuration;
    return this;
  }

  /**
   * Get roundDuration
   * @return roundDuration
   */
  @javax.annotation.Nullable
  public Long getRoundDuration() {
    return roundDuration;
  }

  public void setRoundDuration(Long roundDuration) {
    this.roundDuration = roundDuration;
  }


  public TerritoryBattleDefinition roundCount(Integer roundCount) {
    this.roundCount = roundCount;
    return this;
  }

  /**
   * Get roundCount
   * @return roundCount
   */
  @javax.annotation.Nullable
  public Integer getRoundCount() {
    return roundCount;
  }

  public void setRoundCount(Integer roundCount) {
    this.roundCount = roundCount;
  }


  public TerritoryBattleDefinition conflictZoneDefinition(List<TerritoryBattleConflictZoneDefinition> conflictZoneDefinition) {
    this.conflictZoneDefinition = conflictZoneDefinition;
    return this;
  }

  public TerritoryBattleDefinition addConflictZoneDefinitionItem(TerritoryBattleConflictZoneDefinition conflictZoneDefinitionItem) {
    if (this.conflictZoneDefinition == null) {
      this.conflictZoneDefinition = new ArrayList<>();
    }
    this.conflictZoneDefinition.add(conflictZoneDefinitionItem);
    return this;
  }

  /**
   * Get conflictZoneDefinition
   * @return conflictZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryBattleConflictZoneDefinition> getConflictZoneDefinition() {
    return conflictZoneDefinition;
  }

  public void setConflictZoneDefinition(List<TerritoryBattleConflictZoneDefinition> conflictZoneDefinition) {
    this.conflictZoneDefinition = conflictZoneDefinition;
  }


  public TerritoryBattleDefinition strikeZoneDefinition(List<TerritoryStrikeZoneDefinition> strikeZoneDefinition) {
    this.strikeZoneDefinition = strikeZoneDefinition;
    return this;
  }

  public TerritoryBattleDefinition addStrikeZoneDefinitionItem(TerritoryStrikeZoneDefinition strikeZoneDefinitionItem) {
    if (this.strikeZoneDefinition == null) {
      this.strikeZoneDefinition = new ArrayList<>();
    }
    this.strikeZoneDefinition.add(strikeZoneDefinitionItem);
    return this;
  }

  /**
   * Get strikeZoneDefinition
   * @return strikeZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryStrikeZoneDefinition> getStrikeZoneDefinition() {
    return strikeZoneDefinition;
  }

  public void setStrikeZoneDefinition(List<TerritoryStrikeZoneDefinition> strikeZoneDefinition) {
    this.strikeZoneDefinition = strikeZoneDefinition;
  }


  public TerritoryBattleDefinition reconZoneDefinition(List<TerritoryReconZoneDefinition> reconZoneDefinition) {
    this.reconZoneDefinition = reconZoneDefinition;
    return this;
  }

  public TerritoryBattleDefinition addReconZoneDefinitionItem(TerritoryReconZoneDefinition reconZoneDefinitionItem) {
    if (this.reconZoneDefinition == null) {
      this.reconZoneDefinition = new ArrayList<>();
    }
    this.reconZoneDefinition.add(reconZoneDefinitionItem);
    return this;
  }

  /**
   * Get reconZoneDefinition
   * @return reconZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryReconZoneDefinition> getReconZoneDefinition() {
    return reconZoneDefinition;
  }

  public void setReconZoneDefinition(List<TerritoryReconZoneDefinition> reconZoneDefinition) {
    this.reconZoneDefinition = reconZoneDefinition;
  }


  public TerritoryBattleDefinition iconPrefab(String iconPrefab) {
    this.iconPrefab = iconPrefab;
    return this;
  }

  /**
   * Get iconPrefab
   * @return iconPrefab
   */
  @javax.annotation.Nullable
  public String getIconPrefab() {
    return iconPrefab;
  }

  public void setIconPrefab(String iconPrefab) {
    this.iconPrefab = iconPrefab;
  }


  public TerritoryBattleDefinition rankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
    return this;
  }

  public TerritoryBattleDefinition addRankRewardPreviewItem(RankRewardPreview rankRewardPreviewItem) {
    if (this.rankRewardPreview == null) {
      this.rankRewardPreview = new ArrayList<>();
    }
    this.rankRewardPreview.add(rankRewardPreviewItem);
    return this;
  }

  /**
   * Get rankRewardPreview
   * @return rankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getRankRewardPreview() {
    return rankRewardPreview;
  }

  public void setRankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
  }


  public TerritoryBattleDefinition detailImage(String detailImage) {
    this.detailImage = detailImage;
    return this;
  }

  /**
   * Get detailImage
   * @return detailImage
   */
  @javax.annotation.Nullable
  public String getDetailImage() {
    return detailImage;
  }

  public void setDetailImage(String detailImage) {
    this.detailImage = detailImage;
  }


  public TerritoryBattleDefinition dynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
    return this;
  }

  public TerritoryBattleDefinition addDynamicDescriptionItem(DynamicDescription dynamicDescriptionItem) {
    if (this.dynamicDescription == null) {
      this.dynamicDescription = new ArrayList<>();
    }
    this.dynamicDescription.add(dynamicDescriptionItem);
    return this;
  }

  /**
   * Get dynamicDescription
   * @return dynamicDescription
   */
  @javax.annotation.Nullable
  public List<DynamicDescription> getDynamicDescription() {
    return dynamicDescription;
  }

  public void setDynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
  }


  public TerritoryBattleDefinition covertZoneDefinition(List<TerritoryCovertZoneDefinition> covertZoneDefinition) {
    this.covertZoneDefinition = covertZoneDefinition;
    return this;
  }

  public TerritoryBattleDefinition addCovertZoneDefinitionItem(TerritoryCovertZoneDefinition covertZoneDefinitionItem) {
    if (this.covertZoneDefinition == null) {
      this.covertZoneDefinition = new ArrayList<>();
    }
    this.covertZoneDefinition.add(covertZoneDefinitionItem);
    return this;
  }

  /**
   * Get covertZoneDefinition
   * @return covertZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryCovertZoneDefinition> getCovertZoneDefinition() {
    return covertZoneDefinition;
  }

  public void setCovertZoneDefinition(List<TerritoryCovertZoneDefinition> covertZoneDefinition) {
    this.covertZoneDefinition = covertZoneDefinition;
  }


  public TerritoryBattleDefinition statCategory(List<TerritoryMapStatCategory> statCategory) {
    this.statCategory = statCategory;
    return this;
  }

  public TerritoryBattleDefinition addStatCategoryItem(TerritoryMapStatCategory statCategoryItem) {
    if (this.statCategory == null) {
      this.statCategory = new ArrayList<>();
    }
    this.statCategory.add(statCategoryItem);
    return this;
  }

  /**
   * Get statCategory
   * @return statCategory
   */
  @javax.annotation.Nullable
  public List<TerritoryMapStatCategory> getStatCategory() {
    return statCategory;
  }

  public void setStatCategory(List<TerritoryMapStatCategory> statCategory) {
    this.statCategory = statCategory;
  }


  public TerritoryBattleDefinition territoryCategory(String territoryCategory) {
    this.territoryCategory = territoryCategory;
    return this;
  }

  /**
   * Get territoryCategory
   * @return territoryCategory
   */
  @javax.annotation.Nullable
  public String getTerritoryCategory() {
    return territoryCategory;
  }

  public void setTerritoryCategory(String territoryCategory) {
    this.territoryCategory = territoryCategory;
  }


  public TerritoryBattleDefinition roundTallyDuration(Integer roundTallyDuration) {
    this.roundTallyDuration = roundTallyDuration;
    return this;
  }

  /**
   * Get roundTallyDuration
   * @return roundTallyDuration
   */
  @javax.annotation.Nullable
  public Integer getRoundTallyDuration() {
    return roundTallyDuration;
  }

  public void setRoundTallyDuration(Integer roundTallyDuration) {
    this.roundTallyDuration = roundTallyDuration;
  }


  public TerritoryBattleDefinition grantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
    return this;
  }

  public TerritoryBattleDefinition addGrantedAbilitiesItem(MissionGrantedAbility grantedAbilitiesItem) {
    if (this.grantedAbilities == null) {
      this.grantedAbilities = new ArrayList<>();
    }
    this.grantedAbilities.add(grantedAbilitiesItem);
    return this;
  }

  /**
   * Get grantedAbilities
   * @return grantedAbilities
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbilities() {
    return grantedAbilities;
  }

  public void setGrantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
  }


  public TerritoryBattleDefinition localNotifications(List<TerritoryLocalNote> localNotifications) {
    this.localNotifications = localNotifications;
    return this;
  }

  public TerritoryBattleDefinition addLocalNotificationsItem(TerritoryLocalNote localNotificationsItem) {
    if (this.localNotifications == null) {
      this.localNotifications = new ArrayList<>();
    }
    this.localNotifications.add(localNotificationsItem);
    return this;
  }

  /**
   * Get localNotifications
   * @return localNotifications
   */
  @javax.annotation.Nullable
  public List<TerritoryLocalNote> getLocalNotifications() {
    return localNotifications;
  }

  public void setLocalNotifications(List<TerritoryLocalNote> localNotifications) {
    this.localNotifications = localNotifications;
  }


  public TerritoryBattleDefinition minMemberLevelForCommandingGuild(GuildMemberLevel minMemberLevelForCommandingGuild) {
    this.minMemberLevelForCommandingGuild = minMemberLevelForCommandingGuild;
    return this;
  }

  /**
   * Get minMemberLevelForCommandingGuild
   * @return minMemberLevelForCommandingGuild
   */
  @javax.annotation.Nullable
  public GuildMemberLevel getMinMemberLevelForCommandingGuild() {
    return minMemberLevelForCommandingGuild;
  }

  public void setMinMemberLevelForCommandingGuild(GuildMemberLevel minMemberLevelForCommandingGuild) {
    this.minMemberLevelForCommandingGuild = minMemberLevelForCommandingGuild;
  }


  public TerritoryBattleDefinition commandNotificationCooldownDuration(Integer commandNotificationCooldownDuration) {
    this.commandNotificationCooldownDuration = commandNotificationCooldownDuration;
    return this;
  }

  /**
   * Get commandNotificationCooldownDuration
   * @return commandNotificationCooldownDuration
   */
  @javax.annotation.Nullable
  public Integer getCommandNotificationCooldownDuration() {
    return commandNotificationCooldownDuration;
  }

  public void setCommandNotificationCooldownDuration(Integer commandNotificationCooldownDuration) {
    this.commandNotificationCooldownDuration = commandNotificationCooldownDuration;
  }


  public TerritoryBattleDefinition minimapPrefab(String minimapPrefab) {
    this.minimapPrefab = minimapPrefab;
    return this;
  }

  /**
   * Get minimapPrefab
   * @return minimapPrefab
   */
  @javax.annotation.Nullable
  public String getMinimapPrefab() {
    return minimapPrefab;
  }

  public void setMinimapPrefab(String minimapPrefab) {
    this.minimapPrefab = minimapPrefab;
  }


  public TerritoryBattleDefinition searchImage(String searchImage) {
    this.searchImage = searchImage;
    return this;
  }

  /**
   * Get searchImage
   * @return searchImage
   */
  @javax.annotation.Nullable
  public String getSearchImage() {
    return searchImage;
  }

  public void setSearchImage(String searchImage) {
    this.searchImage = searchImage;
  }


  public TerritoryBattleDefinition infoImage(String infoImage) {
    this.infoImage = infoImage;
    return this;
  }

  /**
   * Get infoImage
   * @return infoImage
   */
  @javax.annotation.Nullable
  public String getInfoImage() {
    return infoImage;
  }

  public void setInfoImage(String infoImage) {
    this.infoImage = infoImage;
  }


  public TerritoryBattleDefinition forceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
    return this;
  }

  /**
   * Get forceAlignment
   * @return forceAlignment
   */
  @javax.annotation.Nullable
  public ForceAlignment getForceAlignment() {
    return forceAlignment;
  }

  public void setForceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
  }


  public TerritoryBattleDefinition environmentNameKey(String environmentNameKey) {
    this.environmentNameKey = environmentNameKey;
    return this;
  }

  /**
   * Get environmentNameKey
   * @return environmentNameKey
   */
  @javax.annotation.Nullable
  public String getEnvironmentNameKey() {
    return environmentNameKey;
  }

  public void setEnvironmentNameKey(String environmentNameKey) {
    this.environmentNameKey = environmentNameKey;
  }


  public TerritoryBattleDefinition environmentPrefab(String environmentPrefab) {
    this.environmentPrefab = environmentPrefab;
    return this;
  }

  /**
   * Get environmentPrefab
   * @return environmentPrefab
   */
  @javax.annotation.Nullable
  public String getEnvironmentPrefab() {
    return environmentPrefab;
  }

  public void setEnvironmentPrefab(String environmentPrefab) {
    this.environmentPrefab = environmentPrefab;
  }


  public TerritoryBattleDefinition territoryBattleVersion3(Boolean territoryBattleVersion3) {
    this.territoryBattleVersion3 = territoryBattleVersion3;
    return this;
  }

  /**
   * Get territoryBattleVersion3
   * @return territoryBattleVersion3
   */
  @javax.annotation.Nullable
  public Boolean getTerritoryBattleVersion3() {
    return territoryBattleVersion3;
  }

  public void setTerritoryBattleVersion3(Boolean territoryBattleVersion3) {
    this.territoryBattleVersion3 = territoryBattleVersion3;
  }


  public TerritoryBattleDefinition bonusZoneDefinition(List<TerritoryBonusZoneDefinition> bonusZoneDefinition) {
    this.bonusZoneDefinition = bonusZoneDefinition;
    return this;
  }

  public TerritoryBattleDefinition addBonusZoneDefinitionItem(TerritoryBonusZoneDefinition bonusZoneDefinitionItem) {
    if (this.bonusZoneDefinition == null) {
      this.bonusZoneDefinition = new ArrayList<>();
    }
    this.bonusZoneDefinition.add(bonusZoneDefinitionItem);
    return this;
  }

  /**
   * Get bonusZoneDefinition
   * @return bonusZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryBonusZoneDefinition> getBonusZoneDefinition() {
    return bonusZoneDefinition;
  }

  public void setBonusZoneDefinition(List<TerritoryBonusZoneDefinition> bonusZoneDefinition) {
    this.bonusZoneDefinition = bonusZoneDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryBattleDefinition territoryBattleDefinition = (TerritoryBattleDefinition) o;
    return Objects.equals(this.id, territoryBattleDefinition.id) &&
        Objects.equals(this.nameKey, territoryBattleDefinition.nameKey) &&
        Objects.equals(this.descriptionKey, territoryBattleDefinition.descriptionKey) &&
        Objects.equals(this.prefabName, territoryBattleDefinition.prefabName) &&
        Objects.equals(this.roundDuration, territoryBattleDefinition.roundDuration) &&
        Objects.equals(this.roundCount, territoryBattleDefinition.roundCount) &&
        Objects.equals(this.conflictZoneDefinition, territoryBattleDefinition.conflictZoneDefinition) &&
        Objects.equals(this.strikeZoneDefinition, territoryBattleDefinition.strikeZoneDefinition) &&
        Objects.equals(this.reconZoneDefinition, territoryBattleDefinition.reconZoneDefinition) &&
        Objects.equals(this.iconPrefab, territoryBattleDefinition.iconPrefab) &&
        Objects.equals(this.rankRewardPreview, territoryBattleDefinition.rankRewardPreview) &&
        Objects.equals(this.detailImage, territoryBattleDefinition.detailImage) &&
        Objects.equals(this.dynamicDescription, territoryBattleDefinition.dynamicDescription) &&
        Objects.equals(this.covertZoneDefinition, territoryBattleDefinition.covertZoneDefinition) &&
        Objects.equals(this.statCategory, territoryBattleDefinition.statCategory) &&
        Objects.equals(this.territoryCategory, territoryBattleDefinition.territoryCategory) &&
        Objects.equals(this.roundTallyDuration, territoryBattleDefinition.roundTallyDuration) &&
        Objects.equals(this.grantedAbilities, territoryBattleDefinition.grantedAbilities) &&
        Objects.equals(this.localNotifications, territoryBattleDefinition.localNotifications) &&
        Objects.equals(this.minMemberLevelForCommandingGuild, territoryBattleDefinition.minMemberLevelForCommandingGuild) &&
        Objects.equals(this.commandNotificationCooldownDuration, territoryBattleDefinition.commandNotificationCooldownDuration) &&
        Objects.equals(this.minimapPrefab, territoryBattleDefinition.minimapPrefab) &&
        Objects.equals(this.searchImage, territoryBattleDefinition.searchImage) &&
        Objects.equals(this.infoImage, territoryBattleDefinition.infoImage) &&
        Objects.equals(this.forceAlignment, territoryBattleDefinition.forceAlignment) &&
        Objects.equals(this.environmentNameKey, territoryBattleDefinition.environmentNameKey) &&
        Objects.equals(this.environmentPrefab, territoryBattleDefinition.environmentPrefab) &&
        Objects.equals(this.territoryBattleVersion3, territoryBattleDefinition.territoryBattleVersion3) &&
        Objects.equals(this.bonusZoneDefinition, territoryBattleDefinition.bonusZoneDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, descriptionKey, prefabName, roundDuration, roundCount, conflictZoneDefinition, strikeZoneDefinition, reconZoneDefinition, iconPrefab, rankRewardPreview, detailImage, dynamicDescription, covertZoneDefinition, statCategory, territoryCategory, roundTallyDuration, grantedAbilities, localNotifications, minMemberLevelForCommandingGuild, commandNotificationCooldownDuration, minimapPrefab, searchImage, infoImage, forceAlignment, environmentNameKey, environmentPrefab, territoryBattleVersion3, bonusZoneDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryBattleDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descriptionKey: ").append(toIndentedString(descriptionKey)).append("\n");
    sb.append("    prefabName: ").append(toIndentedString(prefabName)).append("\n");
    sb.append("    roundDuration: ").append(toIndentedString(roundDuration)).append("\n");
    sb.append("    roundCount: ").append(toIndentedString(roundCount)).append("\n");
    sb.append("    conflictZoneDefinition: ").append(toIndentedString(conflictZoneDefinition)).append("\n");
    sb.append("    strikeZoneDefinition: ").append(toIndentedString(strikeZoneDefinition)).append("\n");
    sb.append("    reconZoneDefinition: ").append(toIndentedString(reconZoneDefinition)).append("\n");
    sb.append("    iconPrefab: ").append(toIndentedString(iconPrefab)).append("\n");
    sb.append("    rankRewardPreview: ").append(toIndentedString(rankRewardPreview)).append("\n");
    sb.append("    detailImage: ").append(toIndentedString(detailImage)).append("\n");
    sb.append("    dynamicDescription: ").append(toIndentedString(dynamicDescription)).append("\n");
    sb.append("    covertZoneDefinition: ").append(toIndentedString(covertZoneDefinition)).append("\n");
    sb.append("    statCategory: ").append(toIndentedString(statCategory)).append("\n");
    sb.append("    territoryCategory: ").append(toIndentedString(territoryCategory)).append("\n");
    sb.append("    roundTallyDuration: ").append(toIndentedString(roundTallyDuration)).append("\n");
    sb.append("    grantedAbilities: ").append(toIndentedString(grantedAbilities)).append("\n");
    sb.append("    localNotifications: ").append(toIndentedString(localNotifications)).append("\n");
    sb.append("    minMemberLevelForCommandingGuild: ").append(toIndentedString(minMemberLevelForCommandingGuild)).append("\n");
    sb.append("    commandNotificationCooldownDuration: ").append(toIndentedString(commandNotificationCooldownDuration)).append("\n");
    sb.append("    minimapPrefab: ").append(toIndentedString(minimapPrefab)).append("\n");
    sb.append("    searchImage: ").append(toIndentedString(searchImage)).append("\n");
    sb.append("    infoImage: ").append(toIndentedString(infoImage)).append("\n");
    sb.append("    forceAlignment: ").append(toIndentedString(forceAlignment)).append("\n");
    sb.append("    environmentNameKey: ").append(toIndentedString(environmentNameKey)).append("\n");
    sb.append("    environmentPrefab: ").append(toIndentedString(environmentPrefab)).append("\n");
    sb.append("    territoryBattleVersion3: ").append(toIndentedString(territoryBattleVersion3)).append("\n");
    sb.append("    bonusZoneDefinition: ").append(toIndentedString(bonusZoneDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("descriptionKey");
    openapiFields.add("prefabName");
    openapiFields.add("roundDuration");
    openapiFields.add("roundCount");
    openapiFields.add("conflictZoneDefinition");
    openapiFields.add("strikeZoneDefinition");
    openapiFields.add("reconZoneDefinition");
    openapiFields.add("iconPrefab");
    openapiFields.add("rankRewardPreview");
    openapiFields.add("detailImage");
    openapiFields.add("dynamicDescription");
    openapiFields.add("covertZoneDefinition");
    openapiFields.add("statCategory");
    openapiFields.add("territoryCategory");
    openapiFields.add("roundTallyDuration");
    openapiFields.add("grantedAbilities");
    openapiFields.add("localNotifications");
    openapiFields.add("minMemberLevelForCommandingGuild");
    openapiFields.add("commandNotificationCooldownDuration");
    openapiFields.add("minimapPrefab");
    openapiFields.add("searchImage");
    openapiFields.add("infoImage");
    openapiFields.add("forceAlignment");
    openapiFields.add("environmentNameKey");
    openapiFields.add("environmentPrefab");
    openapiFields.add("territoryBattleVersion_3");
    openapiFields.add("bonusZoneDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryBattleDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryBattleDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryBattleDefinition is not found in the empty JSON string", TerritoryBattleDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryBattleDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryBattleDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descriptionKey") != null && !jsonObj.get("descriptionKey").isJsonNull()) && !jsonObj.get("descriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionKey").toString()));
      }
      if ((jsonObj.get("prefabName") != null && !jsonObj.get("prefabName").isJsonNull()) && !jsonObj.get("prefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefabName").toString()));
      }
      if (jsonObj.get("conflictZoneDefinition") != null && !jsonObj.get("conflictZoneDefinition").isJsonNull()) {
        JsonArray jsonArrayconflictZoneDefinition = jsonObj.getAsJsonArray("conflictZoneDefinition");
        if (jsonArrayconflictZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conflictZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conflictZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("conflictZoneDefinition").toString()));
          }

          // validate the optional field `conflictZoneDefinition` (array)
          for (int i = 0; i < jsonArrayconflictZoneDefinition.size(); i++) {
            TerritoryBattleConflictZoneDefinition.validateJsonElement(jsonArrayconflictZoneDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("strikeZoneDefinition") != null && !jsonObj.get("strikeZoneDefinition").isJsonNull()) {
        JsonArray jsonArraystrikeZoneDefinition = jsonObj.getAsJsonArray("strikeZoneDefinition");
        if (jsonArraystrikeZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("strikeZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `strikeZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("strikeZoneDefinition").toString()));
          }

          // validate the optional field `strikeZoneDefinition` (array)
          for (int i = 0; i < jsonArraystrikeZoneDefinition.size(); i++) {
            TerritoryStrikeZoneDefinition.validateJsonElement(jsonArraystrikeZoneDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("reconZoneDefinition") != null && !jsonObj.get("reconZoneDefinition").isJsonNull()) {
        JsonArray jsonArrayreconZoneDefinition = jsonObj.getAsJsonArray("reconZoneDefinition");
        if (jsonArrayreconZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reconZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reconZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("reconZoneDefinition").toString()));
          }

          // validate the optional field `reconZoneDefinition` (array)
          for (int i = 0; i < jsonArrayreconZoneDefinition.size(); i++) {
            TerritoryReconZoneDefinition.validateJsonElement(jsonArrayreconZoneDefinition.get(i));
          };
        }
      }
      if ((jsonObj.get("iconPrefab") != null && !jsonObj.get("iconPrefab").isJsonNull()) && !jsonObj.get("iconPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconPrefab").toString()));
      }
      if (jsonObj.get("rankRewardPreview") != null && !jsonObj.get("rankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayrankRewardPreview = jsonObj.getAsJsonArray("rankRewardPreview");
        if (jsonArrayrankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rankRewardPreview").toString()));
          }

          // validate the optional field `rankRewardPreview` (array)
          for (int i = 0; i < jsonArrayrankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayrankRewardPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("detailImage") != null && !jsonObj.get("detailImage").isJsonNull()) && !jsonObj.get("detailImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailImage").toString()));
      }
      if (jsonObj.get("dynamicDescription") != null && !jsonObj.get("dynamicDescription").isJsonNull()) {
        JsonArray jsonArraydynamicDescription = jsonObj.getAsJsonArray("dynamicDescription");
        if (jsonArraydynamicDescription != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicDescription").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicDescription` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicDescription").toString()));
          }

          // validate the optional field `dynamicDescription` (array)
          for (int i = 0; i < jsonArraydynamicDescription.size(); i++) {
            DynamicDescription.validateJsonElement(jsonArraydynamicDescription.get(i));
          };
        }
      }
      if (jsonObj.get("covertZoneDefinition") != null && !jsonObj.get("covertZoneDefinition").isJsonNull()) {
        JsonArray jsonArraycovertZoneDefinition = jsonObj.getAsJsonArray("covertZoneDefinition");
        if (jsonArraycovertZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("covertZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `covertZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("covertZoneDefinition").toString()));
          }

          // validate the optional field `covertZoneDefinition` (array)
          for (int i = 0; i < jsonArraycovertZoneDefinition.size(); i++) {
            TerritoryCovertZoneDefinition.validateJsonElement(jsonArraycovertZoneDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("statCategory") != null && !jsonObj.get("statCategory").isJsonNull()) {
        JsonArray jsonArraystatCategory = jsonObj.getAsJsonArray("statCategory");
        if (jsonArraystatCategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statCategory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statCategory` to be an array in the JSON string but got `%s`", jsonObj.get("statCategory").toString()));
          }

          // validate the optional field `statCategory` (array)
          for (int i = 0; i < jsonArraystatCategory.size(); i++) {
            TerritoryMapStatCategory.validateJsonElement(jsonArraystatCategory.get(i));
          };
        }
      }
      if ((jsonObj.get("territoryCategory") != null && !jsonObj.get("territoryCategory").isJsonNull()) && !jsonObj.get("territoryCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `territoryCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("territoryCategory").toString()));
      }
      if (jsonObj.get("grantedAbilities") != null && !jsonObj.get("grantedAbilities").isJsonNull()) {
        JsonArray jsonArraygrantedAbilities = jsonObj.getAsJsonArray("grantedAbilities");
        if (jsonArraygrantedAbilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbilities` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbilities").toString()));
          }

          // validate the optional field `grantedAbilities` (array)
          for (int i = 0; i < jsonArraygrantedAbilities.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbilities.get(i));
          };
        }
      }
      if (jsonObj.get("localNotifications") != null && !jsonObj.get("localNotifications").isJsonNull()) {
        JsonArray jsonArraylocalNotifications = jsonObj.getAsJsonArray("localNotifications");
        if (jsonArraylocalNotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localNotifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localNotifications` to be an array in the JSON string but got `%s`", jsonObj.get("localNotifications").toString()));
          }

          // validate the optional field `localNotifications` (array)
          for (int i = 0; i < jsonArraylocalNotifications.size(); i++) {
            TerritoryLocalNote.validateJsonElement(jsonArraylocalNotifications.get(i));
          };
        }
      }
      // validate the optional field `minMemberLevelForCommandingGuild`
      if (jsonObj.get("minMemberLevelForCommandingGuild") != null && !jsonObj.get("minMemberLevelForCommandingGuild").isJsonNull()) {
        GuildMemberLevel.validateJsonElement(jsonObj.get("minMemberLevelForCommandingGuild"));
      }
      if ((jsonObj.get("minimapPrefab") != null && !jsonObj.get("minimapPrefab").isJsonNull()) && !jsonObj.get("minimapPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimapPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimapPrefab").toString()));
      }
      if ((jsonObj.get("searchImage") != null && !jsonObj.get("searchImage").isJsonNull()) && !jsonObj.get("searchImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchImage").toString()));
      }
      if ((jsonObj.get("infoImage") != null && !jsonObj.get("infoImage").isJsonNull()) && !jsonObj.get("infoImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoImage").toString()));
      }
      // validate the optional field `forceAlignment`
      if (jsonObj.get("forceAlignment") != null && !jsonObj.get("forceAlignment").isJsonNull()) {
        ForceAlignment.validateJsonElement(jsonObj.get("forceAlignment"));
      }
      if ((jsonObj.get("environmentNameKey") != null && !jsonObj.get("environmentNameKey").isJsonNull()) && !jsonObj.get("environmentNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentNameKey").toString()));
      }
      if ((jsonObj.get("environmentPrefab") != null && !jsonObj.get("environmentPrefab").isJsonNull()) && !jsonObj.get("environmentPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentPrefab").toString()));
      }
      if (jsonObj.get("bonusZoneDefinition") != null && !jsonObj.get("bonusZoneDefinition").isJsonNull()) {
        JsonArray jsonArraybonusZoneDefinition = jsonObj.getAsJsonArray("bonusZoneDefinition");
        if (jsonArraybonusZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bonusZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bonusZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("bonusZoneDefinition").toString()));
          }

          // validate the optional field `bonusZoneDefinition` (array)
          for (int i = 0; i < jsonArraybonusZoneDefinition.size(); i++) {
            TerritoryBonusZoneDefinition.validateJsonElement(jsonArraybonusZoneDefinition.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryBattleDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryBattleDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryBattleDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryBattleDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryBattleDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryBattleDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryBattleDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryBattleDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryBattleDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryBattleDefinition
   */
  public static TerritoryBattleDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryBattleDefinition.class);
  }

  /**
   * Convert an instance of TerritoryBattleDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

