/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.Ability;
import io.github.doenisf.comlink4j.model.AbilityReference;
import io.github.doenisf.comlink4j.model.CombatType;
import io.github.doenisf.comlink4j.model.CrewMember;
import io.github.doenisf.comlink4j.model.ForceAlignment;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.RecommendedSquad;
import io.github.doenisf.comlink4j.model.RelicDefinition;
import io.github.doenisf.comlink4j.model.SkillDefinitionReference;
import io.github.doenisf.comlink4j.model.StatDef;
import io.github.doenisf.comlink4j.model.SummonStatTable;
import io.github.doenisf.comlink4j.model.ThreatLevel;
import io.github.doenisf.comlink4j.model.UnitClass;
import io.github.doenisf.comlink4j.model.UnitModRecommendation;
import io.github.doenisf.comlink4j.model.UnitStat;
import io.github.doenisf.comlink4j.model.UnitTierDef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * UnitDef
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class UnitDef {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_UNIT_PREFAB = "unitPrefab";
  @SerializedName(SERIALIZED_NAME_UNIT_PREFAB)
  private String unitPrefab;

  public static final String SERIALIZED_NAME_THUMBNAIL_NAME = "thumbnailName";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_NAME)
  private String thumbnailName;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private Rarity rarity;

  public static final String SERIALIZED_NAME_MAX_RARITY = "maxRarity";
  @SerializedName(SERIALIZED_NAME_MAX_RARITY)
  private Rarity maxRarity;

  public static final String SERIALIZED_NAME_FORCE_ALIGNMENT = "forceAlignment";
  @SerializedName(SERIALIZED_NAME_FORCE_ALIGNMENT)
  private ForceAlignment forceAlignment;

  public static final String SERIALIZED_NAME_XP_TABLE_ID = "xpTableId";
  @SerializedName(SERIALIZED_NAME_XP_TABLE_ID)
  private String xpTableId;

  public static final String SERIALIZED_NAME_ACTION_COUNT_MIN = "actionCountMin";
  @SerializedName(SERIALIZED_NAME_ACTION_COUNT_MIN)
  private Integer actionCountMin;

  public static final String SERIALIZED_NAME_ACTION_COUNT_MAX = "actionCountMax";
  @SerializedName(SERIALIZED_NAME_ACTION_COUNT_MAX)
  private Integer actionCountMax;

  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_THREAT_LEVEL = "threatLevel";
  @SerializedName(SERIALIZED_NAME_THREAT_LEVEL)
  private ThreatLevel threatLevel;

  public static final String SERIALIZED_NAME_OBTAINABLE = "obtainable";
  @SerializedName(SERIALIZED_NAME_OBTAINABLE)
  private Boolean obtainable;

  public static final String SERIALIZED_NAME_BASE_ID = "baseId";
  @SerializedName(SERIALIZED_NAME_BASE_ID)
  private String baseId;

  public static final String SERIALIZED_NAME_PROMOTION_RECIPE_REFERENCE = "promotionRecipeReference";
  @SerializedName(SERIALIZED_NAME_PROMOTION_RECIPE_REFERENCE)
  private String promotionRecipeReference;

  public static final String SERIALIZED_NAME_STAT_PROGRESSION_ID = "statProgressionId";
  @SerializedName(SERIALIZED_NAME_STAT_PROGRESSION_ID)
  private String statProgressionId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private List<String> categoryId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAINING_XP_WORTH_BASE_VALUE_OVERRIDE = "trainingXpWorthBaseValueOverride";
  @SerializedName(SERIALIZED_NAME_TRAINING_XP_WORTH_BASE_VALUE_OVERRIDE)
  private Integer trainingXpWorthBaseValueOverride;

  public static final String SERIALIZED_NAME_MAX_LEVEL_OVERRIDE = "maxLevelOverride";
  @SerializedName(SERIALIZED_NAME_MAX_LEVEL_OVERRIDE)
  private Integer maxLevelOverride;

  public static final String SERIALIZED_NAME_TRAINING_COST_MULTIPLIER_OVERRIDE = "trainingCostMultiplierOverride";
  @SerializedName(SERIALIZED_NAME_TRAINING_COST_MULTIPLIER_OVERRIDE)
  private Integer trainingCostMultiplierOverride;

  public static final String SERIALIZED_NAME_CREATION_RECIPE_REFERENCE = "creationRecipeReference";
  @SerializedName(SERIALIZED_NAME_CREATION_RECIPE_REFERENCE)
  private String creationRecipeReference;

  public static final String SERIALIZED_NAME_SKILL_REFERENCE = "skillReference";
  @SerializedName(SERIALIZED_NAME_SKILL_REFERENCE)
  private List<SkillDefinitionReference> skillReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_POWER = "basePower";
  @SerializedName(SERIALIZED_NAME_BASE_POWER)
  private Integer basePower;

  public static final String SERIALIZED_NAME_BASE_STAT = "baseStat";
  @SerializedName(SERIALIZED_NAME_BASE_STAT)
  private StatDef baseStat;

  public static final String SERIALIZED_NAME_PRIMARY_STAT = "primaryStat";
  @SerializedName(SERIALIZED_NAME_PRIMARY_STAT)
  private String primaryStat;

  public static final String SERIALIZED_NAME_UNIT_TIER = "unitTier";
  @SerializedName(SERIALIZED_NAME_UNIT_TIER)
  private List<UnitTierDef> unitTier = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASIC_ATTACK = "basicAttack";
  @SerializedName(SERIALIZED_NAME_BASIC_ATTACK)
  private Ability basicAttack;

  public static final String SERIALIZED_NAME_LEADER_ABILITY = "leaderAbility";
  @SerializedName(SERIALIZED_NAME_LEADER_ABILITY)
  private Ability leaderAbility;

  public static final String SERIALIZED_NAME_LIMIT_BREAK = "limitBreak";
  @SerializedName(SERIALIZED_NAME_LIMIT_BREAK)
  private List<Ability> limitBreak = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIQUE_ABILITY = "uniqueAbility";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ABILITY)
  private List<Ability> uniqueAbility = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASIC_ATTACK_REF = "basicAttackRef";
  @SerializedName(SERIALIZED_NAME_BASIC_ATTACK_REF)
  private AbilityReference basicAttackRef;

  public static final String SERIALIZED_NAME_LEADER_ABILITY_REF = "leaderAbilityRef";
  @SerializedName(SERIALIZED_NAME_LEADER_ABILITY_REF)
  private AbilityReference leaderAbilityRef;

  public static final String SERIALIZED_NAME_LIMIT_BREAK_REF = "limitBreakRef";
  @SerializedName(SERIALIZED_NAME_LIMIT_BREAK_REF)
  private List<AbilityReference> limitBreakRef = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIQUE_ABILITY_REF = "uniqueAbilityRef";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ABILITY_REF)
  private List<AbilityReference> uniqueAbilityRef = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_UNIT_STAT = "primaryUnitStat";
  @SerializedName(SERIALIZED_NAME_PRIMARY_UNIT_STAT)
  private UnitStat primaryUnitStat;

  public static final String SERIALIZED_NAME_OBTAINABLE_TIME = "obtainableTime";
  @SerializedName(SERIALIZED_NAME_OBTAINABLE_TIME)
  private Long obtainableTime;

  public static final String SERIALIZED_NAME_CREW = "crew";
  @SerializedName(SERIALIZED_NAME_CREW)
  private List<CrewMember> crew = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMAND_COST = "commandCost";
  @SerializedName(SERIALIZED_NAME_COMMAND_COST)
  private Integer commandCost;

  public static final String SERIALIZED_NAME_CREW_CONTRIBUTION_TABLE_ID = "crewContributionTableId";
  @SerializedName(SERIALIZED_NAME_CREW_CONTRIBUTION_TABLE_ID)
  private String crewContributionTableId;

  public static final String SERIALIZED_NAME_UNIT_CLASS = "unitClass";
  @SerializedName(SERIALIZED_NAME_UNIT_CLASS)
  private UnitClass unitClass;

  public static final String SERIALIZED_NAME_BATTLE_PORTRAIT_PREFAB = "battlePortraitPrefab";
  @SerializedName(SERIALIZED_NAME_BATTLE_PORTRAIT_PREFAB)
  private String battlePortraitPrefab;

  public static final String SERIALIZED_NAME_BATTLE_PORTRAIT_NAME_KEY = "battlePortraitNameKey";
  @SerializedName(SERIALIZED_NAME_BATTLE_PORTRAIT_NAME_KEY)
  private String battlePortraitNameKey;

  public static final String SERIALIZED_NAME_MOD_RECOMMENDATION = "modRecommendation";
  @SerializedName(SERIALIZED_NAME_MOD_RECOMMENDATION)
  private List<UnitModRecommendation> modRecommendation = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECT_ICON_PRIORITY_OVERRIDE = "effectIconPriorityOverride";
  @SerializedName(SERIALIZED_NAME_EFFECT_ICON_PRIORITY_OVERRIDE)
  private List<String> effectIconPriorityOverride = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMON_STAT_TABLE = "summonStatTable";
  @SerializedName(SERIALIZED_NAME_SUMMON_STAT_TABLE)
  private List<SummonStatTable> summonStatTable = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELIC_DEFINITION = "relicDefinition";
  @SerializedName(SERIALIZED_NAME_RELIC_DEFINITION)
  private RelicDefinition relicDefinition;

  public static final String SERIALIZED_NAME_CAPITAL_UNLOCK_KEY = "capitalUnlockKey";
  @SerializedName(SERIALIZED_NAME_CAPITAL_UNLOCK_KEY)
  private String capitalUnlockKey;

  public static final String SERIALIZED_NAME_LEGEND = "legend";
  @SerializedName(SERIALIZED_NAME_LEGEND)
  private Boolean legend;

  public static final String SERIALIZED_NAME_SQUAD_POSITION_PRIORITY = "squadPositionPriority";
  @SerializedName(SERIALIZED_NAME_SQUAD_POSITION_PRIORITY)
  private Integer squadPositionPriority;

  public static final String SERIALIZED_NAME_EXAMPLE_SQUAD = "exampleSquad";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_SQUAD)
  private List<RecommendedSquad> exampleSquad = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIG = "big";
  @SerializedName(SERIALIZED_NAME_BIG)
  private Boolean big;

  public static final String SERIALIZED_NAME_HIDE_IN_TURN_ORDER = "hideInTurnOrder";
  @SerializedName(SERIALIZED_NAME_HIDE_IN_TURN_ORDER)
  private Boolean hideInTurnOrder;

  public static final String SERIALIZED_NAME_THUMB_IMAGE_TURN_ORDER = "thumbImageTurnOrder";
  @SerializedName(SERIALIZED_NAME_THUMB_IMAGE_TURN_ORDER)
  private String thumbImageTurnOrder;

  public static final String SERIALIZED_NAME_REQUIRE_ULTIMATE_UNLOCK = "requireUltimateUnlock";
  @SerializedName(SERIALIZED_NAME_REQUIRE_ULTIMATE_UNLOCK)
  private Boolean requireUltimateUnlock;

  public UnitDef() {
  }

  public UnitDef id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UnitDef unitPrefab(String unitPrefab) {
    this.unitPrefab = unitPrefab;
    return this;
  }

  /**
   * Get unitPrefab
   * @return unitPrefab
   */
  @javax.annotation.Nullable
  public String getUnitPrefab() {
    return unitPrefab;
  }

  public void setUnitPrefab(String unitPrefab) {
    this.unitPrefab = unitPrefab;
  }


  public UnitDef thumbnailName(String thumbnailName) {
    this.thumbnailName = thumbnailName;
    return this;
  }

  /**
   * Get thumbnailName
   * @return thumbnailName
   */
  @javax.annotation.Nullable
  public String getThumbnailName() {
    return thumbnailName;
  }

  public void setThumbnailName(String thumbnailName) {
    this.thumbnailName = thumbnailName;
  }


  public UnitDef nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public UnitDef rarity(Rarity rarity) {
    this.rarity = rarity;
    return this;
  }

  /**
   * Get rarity
   * @return rarity
   */
  @javax.annotation.Nullable
  public Rarity getRarity() {
    return rarity;
  }

  public void setRarity(Rarity rarity) {
    this.rarity = rarity;
  }


  public UnitDef maxRarity(Rarity maxRarity) {
    this.maxRarity = maxRarity;
    return this;
  }

  /**
   * Get maxRarity
   * @return maxRarity
   */
  @javax.annotation.Nullable
  public Rarity getMaxRarity() {
    return maxRarity;
  }

  public void setMaxRarity(Rarity maxRarity) {
    this.maxRarity = maxRarity;
  }


  public UnitDef forceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
    return this;
  }

  /**
   * Get forceAlignment
   * @return forceAlignment
   */
  @javax.annotation.Nullable
  public ForceAlignment getForceAlignment() {
    return forceAlignment;
  }

  public void setForceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
  }


  public UnitDef xpTableId(String xpTableId) {
    this.xpTableId = xpTableId;
    return this;
  }

  /**
   * Get xpTableId
   * @return xpTableId
   */
  @javax.annotation.Nullable
  public String getXpTableId() {
    return xpTableId;
  }

  public void setXpTableId(String xpTableId) {
    this.xpTableId = xpTableId;
  }


  public UnitDef actionCountMin(Integer actionCountMin) {
    this.actionCountMin = actionCountMin;
    return this;
  }

  /**
   * Get actionCountMin
   * @return actionCountMin
   */
  @javax.annotation.Nullable
  public Integer getActionCountMin() {
    return actionCountMin;
  }

  public void setActionCountMin(Integer actionCountMin) {
    this.actionCountMin = actionCountMin;
  }


  public UnitDef actionCountMax(Integer actionCountMax) {
    this.actionCountMax = actionCountMax;
    return this;
  }

  /**
   * Get actionCountMax
   * @return actionCountMax
   */
  @javax.annotation.Nullable
  public Integer getActionCountMax() {
    return actionCountMax;
  }

  public void setActionCountMax(Integer actionCountMax) {
    this.actionCountMax = actionCountMax;
  }


  public UnitDef combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }


  public UnitDef descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public UnitDef threatLevel(ThreatLevel threatLevel) {
    this.threatLevel = threatLevel;
    return this;
  }

  /**
   * Get threatLevel
   * @return threatLevel
   */
  @javax.annotation.Nullable
  public ThreatLevel getThreatLevel() {
    return threatLevel;
  }

  public void setThreatLevel(ThreatLevel threatLevel) {
    this.threatLevel = threatLevel;
  }


  public UnitDef obtainable(Boolean obtainable) {
    this.obtainable = obtainable;
    return this;
  }

  /**
   * Get obtainable
   * @return obtainable
   */
  @javax.annotation.Nullable
  public Boolean getObtainable() {
    return obtainable;
  }

  public void setObtainable(Boolean obtainable) {
    this.obtainable = obtainable;
  }


  public UnitDef baseId(String baseId) {
    this.baseId = baseId;
    return this;
  }

  /**
   * Get baseId
   * @return baseId
   */
  @javax.annotation.Nullable
  public String getBaseId() {
    return baseId;
  }

  public void setBaseId(String baseId) {
    this.baseId = baseId;
  }


  public UnitDef promotionRecipeReference(String promotionRecipeReference) {
    this.promotionRecipeReference = promotionRecipeReference;
    return this;
  }

  /**
   * Get promotionRecipeReference
   * @return promotionRecipeReference
   */
  @javax.annotation.Nullable
  public String getPromotionRecipeReference() {
    return promotionRecipeReference;
  }

  public void setPromotionRecipeReference(String promotionRecipeReference) {
    this.promotionRecipeReference = promotionRecipeReference;
  }


  public UnitDef statProgressionId(String statProgressionId) {
    this.statProgressionId = statProgressionId;
    return this;
  }

  /**
   * Get statProgressionId
   * @return statProgressionId
   */
  @javax.annotation.Nullable
  public String getStatProgressionId() {
    return statProgressionId;
  }

  public void setStatProgressionId(String statProgressionId) {
    this.statProgressionId = statProgressionId;
  }


  public UnitDef categoryId(List<String> categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  public UnitDef addCategoryIdItem(String categoryIdItem) {
    if (this.categoryId == null) {
      this.categoryId = new ArrayList<>();
    }
    this.categoryId.add(categoryIdItem);
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public List<String> getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(List<String> categoryId) {
    this.categoryId = categoryId;
  }


  public UnitDef trainingXpWorthBaseValueOverride(Integer trainingXpWorthBaseValueOverride) {
    this.trainingXpWorthBaseValueOverride = trainingXpWorthBaseValueOverride;
    return this;
  }

  /**
   * Get trainingXpWorthBaseValueOverride
   * @return trainingXpWorthBaseValueOverride
   */
  @javax.annotation.Nullable
  public Integer getTrainingXpWorthBaseValueOverride() {
    return trainingXpWorthBaseValueOverride;
  }

  public void setTrainingXpWorthBaseValueOverride(Integer trainingXpWorthBaseValueOverride) {
    this.trainingXpWorthBaseValueOverride = trainingXpWorthBaseValueOverride;
  }


  public UnitDef maxLevelOverride(Integer maxLevelOverride) {
    this.maxLevelOverride = maxLevelOverride;
    return this;
  }

  /**
   * Get maxLevelOverride
   * @return maxLevelOverride
   */
  @javax.annotation.Nullable
  public Integer getMaxLevelOverride() {
    return maxLevelOverride;
  }

  public void setMaxLevelOverride(Integer maxLevelOverride) {
    this.maxLevelOverride = maxLevelOverride;
  }


  public UnitDef trainingCostMultiplierOverride(Integer trainingCostMultiplierOverride) {
    this.trainingCostMultiplierOverride = trainingCostMultiplierOverride;
    return this;
  }

  /**
   * Get trainingCostMultiplierOverride
   * @return trainingCostMultiplierOverride
   */
  @javax.annotation.Nullable
  public Integer getTrainingCostMultiplierOverride() {
    return trainingCostMultiplierOverride;
  }

  public void setTrainingCostMultiplierOverride(Integer trainingCostMultiplierOverride) {
    this.trainingCostMultiplierOverride = trainingCostMultiplierOverride;
  }


  public UnitDef creationRecipeReference(String creationRecipeReference) {
    this.creationRecipeReference = creationRecipeReference;
    return this;
  }

  /**
   * Get creationRecipeReference
   * @return creationRecipeReference
   */
  @javax.annotation.Nullable
  public String getCreationRecipeReference() {
    return creationRecipeReference;
  }

  public void setCreationRecipeReference(String creationRecipeReference) {
    this.creationRecipeReference = creationRecipeReference;
  }


  public UnitDef skillReference(List<SkillDefinitionReference> skillReference) {
    this.skillReference = skillReference;
    return this;
  }

  public UnitDef addSkillReferenceItem(SkillDefinitionReference skillReferenceItem) {
    if (this.skillReference == null) {
      this.skillReference = new ArrayList<>();
    }
    this.skillReference.add(skillReferenceItem);
    return this;
  }

  /**
   * Get skillReference
   * @return skillReference
   */
  @javax.annotation.Nullable
  public List<SkillDefinitionReference> getSkillReference() {
    return skillReference;
  }

  public void setSkillReference(List<SkillDefinitionReference> skillReference) {
    this.skillReference = skillReference;
  }


  public UnitDef basePower(Integer basePower) {
    this.basePower = basePower;
    return this;
  }

  /**
   * Get basePower
   * @return basePower
   */
  @javax.annotation.Nullable
  public Integer getBasePower() {
    return basePower;
  }

  public void setBasePower(Integer basePower) {
    this.basePower = basePower;
  }


  public UnitDef baseStat(StatDef baseStat) {
    this.baseStat = baseStat;
    return this;
  }

  /**
   * Get baseStat
   * @return baseStat
   */
  @javax.annotation.Nullable
  public StatDef getBaseStat() {
    return baseStat;
  }

  public void setBaseStat(StatDef baseStat) {
    this.baseStat = baseStat;
  }


  public UnitDef primaryStat(String primaryStat) {
    this.primaryStat = primaryStat;
    return this;
  }

  /**
   * Get primaryStat
   * @return primaryStat
   */
  @javax.annotation.Nullable
  public String getPrimaryStat() {
    return primaryStat;
  }

  public void setPrimaryStat(String primaryStat) {
    this.primaryStat = primaryStat;
  }


  public UnitDef unitTier(List<UnitTierDef> unitTier) {
    this.unitTier = unitTier;
    return this;
  }

  public UnitDef addUnitTierItem(UnitTierDef unitTierItem) {
    if (this.unitTier == null) {
      this.unitTier = new ArrayList<>();
    }
    this.unitTier.add(unitTierItem);
    return this;
  }

  /**
   * Get unitTier
   * @return unitTier
   */
  @javax.annotation.Nullable
  public List<UnitTierDef> getUnitTier() {
    return unitTier;
  }

  public void setUnitTier(List<UnitTierDef> unitTier) {
    this.unitTier = unitTier;
  }


  public UnitDef basicAttack(Ability basicAttack) {
    this.basicAttack = basicAttack;
    return this;
  }

  /**
   * Get basicAttack
   * @return basicAttack
   */
  @javax.annotation.Nullable
  public Ability getBasicAttack() {
    return basicAttack;
  }

  public void setBasicAttack(Ability basicAttack) {
    this.basicAttack = basicAttack;
  }


  public UnitDef leaderAbility(Ability leaderAbility) {
    this.leaderAbility = leaderAbility;
    return this;
  }

  /**
   * Get leaderAbility
   * @return leaderAbility
   */
  @javax.annotation.Nullable
  public Ability getLeaderAbility() {
    return leaderAbility;
  }

  public void setLeaderAbility(Ability leaderAbility) {
    this.leaderAbility = leaderAbility;
  }


  public UnitDef limitBreak(List<Ability> limitBreak) {
    this.limitBreak = limitBreak;
    return this;
  }

  public UnitDef addLimitBreakItem(Ability limitBreakItem) {
    if (this.limitBreak == null) {
      this.limitBreak = new ArrayList<>();
    }
    this.limitBreak.add(limitBreakItem);
    return this;
  }

  /**
   * Get limitBreak
   * @return limitBreak
   */
  @javax.annotation.Nullable
  public List<Ability> getLimitBreak() {
    return limitBreak;
  }

  public void setLimitBreak(List<Ability> limitBreak) {
    this.limitBreak = limitBreak;
  }


  public UnitDef uniqueAbility(List<Ability> uniqueAbility) {
    this.uniqueAbility = uniqueAbility;
    return this;
  }

  public UnitDef addUniqueAbilityItem(Ability uniqueAbilityItem) {
    if (this.uniqueAbility == null) {
      this.uniqueAbility = new ArrayList<>();
    }
    this.uniqueAbility.add(uniqueAbilityItem);
    return this;
  }

  /**
   * Get uniqueAbility
   * @return uniqueAbility
   */
  @javax.annotation.Nullable
  public List<Ability> getUniqueAbility() {
    return uniqueAbility;
  }

  public void setUniqueAbility(List<Ability> uniqueAbility) {
    this.uniqueAbility = uniqueAbility;
  }


  public UnitDef basicAttackRef(AbilityReference basicAttackRef) {
    this.basicAttackRef = basicAttackRef;
    return this;
  }

  /**
   * Get basicAttackRef
   * @return basicAttackRef
   */
  @javax.annotation.Nullable
  public AbilityReference getBasicAttackRef() {
    return basicAttackRef;
  }

  public void setBasicAttackRef(AbilityReference basicAttackRef) {
    this.basicAttackRef = basicAttackRef;
  }


  public UnitDef leaderAbilityRef(AbilityReference leaderAbilityRef) {
    this.leaderAbilityRef = leaderAbilityRef;
    return this;
  }

  /**
   * Get leaderAbilityRef
   * @return leaderAbilityRef
   */
  @javax.annotation.Nullable
  public AbilityReference getLeaderAbilityRef() {
    return leaderAbilityRef;
  }

  public void setLeaderAbilityRef(AbilityReference leaderAbilityRef) {
    this.leaderAbilityRef = leaderAbilityRef;
  }


  public UnitDef limitBreakRef(List<AbilityReference> limitBreakRef) {
    this.limitBreakRef = limitBreakRef;
    return this;
  }

  public UnitDef addLimitBreakRefItem(AbilityReference limitBreakRefItem) {
    if (this.limitBreakRef == null) {
      this.limitBreakRef = new ArrayList<>();
    }
    this.limitBreakRef.add(limitBreakRefItem);
    return this;
  }

  /**
   * Get limitBreakRef
   * @return limitBreakRef
   */
  @javax.annotation.Nullable
  public List<AbilityReference> getLimitBreakRef() {
    return limitBreakRef;
  }

  public void setLimitBreakRef(List<AbilityReference> limitBreakRef) {
    this.limitBreakRef = limitBreakRef;
  }


  public UnitDef uniqueAbilityRef(List<AbilityReference> uniqueAbilityRef) {
    this.uniqueAbilityRef = uniqueAbilityRef;
    return this;
  }

  public UnitDef addUniqueAbilityRefItem(AbilityReference uniqueAbilityRefItem) {
    if (this.uniqueAbilityRef == null) {
      this.uniqueAbilityRef = new ArrayList<>();
    }
    this.uniqueAbilityRef.add(uniqueAbilityRefItem);
    return this;
  }

  /**
   * Get uniqueAbilityRef
   * @return uniqueAbilityRef
   */
  @javax.annotation.Nullable
  public List<AbilityReference> getUniqueAbilityRef() {
    return uniqueAbilityRef;
  }

  public void setUniqueAbilityRef(List<AbilityReference> uniqueAbilityRef) {
    this.uniqueAbilityRef = uniqueAbilityRef;
  }


  public UnitDef primaryUnitStat(UnitStat primaryUnitStat) {
    this.primaryUnitStat = primaryUnitStat;
    return this;
  }

  /**
   * Get primaryUnitStat
   * @return primaryUnitStat
   */
  @javax.annotation.Nullable
  public UnitStat getPrimaryUnitStat() {
    return primaryUnitStat;
  }

  public void setPrimaryUnitStat(UnitStat primaryUnitStat) {
    this.primaryUnitStat = primaryUnitStat;
  }


  public UnitDef obtainableTime(Long obtainableTime) {
    this.obtainableTime = obtainableTime;
    return this;
  }

  /**
   * Get obtainableTime
   * @return obtainableTime
   */
  @javax.annotation.Nullable
  public Long getObtainableTime() {
    return obtainableTime;
  }

  public void setObtainableTime(Long obtainableTime) {
    this.obtainableTime = obtainableTime;
  }


  public UnitDef crew(List<CrewMember> crew) {
    this.crew = crew;
    return this;
  }

  public UnitDef addCrewItem(CrewMember crewItem) {
    if (this.crew == null) {
      this.crew = new ArrayList<>();
    }
    this.crew.add(crewItem);
    return this;
  }

  /**
   * Get crew
   * @return crew
   */
  @javax.annotation.Nullable
  public List<CrewMember> getCrew() {
    return crew;
  }

  public void setCrew(List<CrewMember> crew) {
    this.crew = crew;
  }


  public UnitDef commandCost(Integer commandCost) {
    this.commandCost = commandCost;
    return this;
  }

  /**
   * Get commandCost
   * @return commandCost
   */
  @javax.annotation.Nullable
  public Integer getCommandCost() {
    return commandCost;
  }

  public void setCommandCost(Integer commandCost) {
    this.commandCost = commandCost;
  }


  public UnitDef crewContributionTableId(String crewContributionTableId) {
    this.crewContributionTableId = crewContributionTableId;
    return this;
  }

  /**
   * Get crewContributionTableId
   * @return crewContributionTableId
   */
  @javax.annotation.Nullable
  public String getCrewContributionTableId() {
    return crewContributionTableId;
  }

  public void setCrewContributionTableId(String crewContributionTableId) {
    this.crewContributionTableId = crewContributionTableId;
  }


  public UnitDef unitClass(UnitClass unitClass) {
    this.unitClass = unitClass;
    return this;
  }

  /**
   * Get unitClass
   * @return unitClass
   */
  @javax.annotation.Nullable
  public UnitClass getUnitClass() {
    return unitClass;
  }

  public void setUnitClass(UnitClass unitClass) {
    this.unitClass = unitClass;
  }


  public UnitDef battlePortraitPrefab(String battlePortraitPrefab) {
    this.battlePortraitPrefab = battlePortraitPrefab;
    return this;
  }

  /**
   * Get battlePortraitPrefab
   * @return battlePortraitPrefab
   */
  @javax.annotation.Nullable
  public String getBattlePortraitPrefab() {
    return battlePortraitPrefab;
  }

  public void setBattlePortraitPrefab(String battlePortraitPrefab) {
    this.battlePortraitPrefab = battlePortraitPrefab;
  }


  public UnitDef battlePortraitNameKey(String battlePortraitNameKey) {
    this.battlePortraitNameKey = battlePortraitNameKey;
    return this;
  }

  /**
   * Get battlePortraitNameKey
   * @return battlePortraitNameKey
   */
  @javax.annotation.Nullable
  public String getBattlePortraitNameKey() {
    return battlePortraitNameKey;
  }

  public void setBattlePortraitNameKey(String battlePortraitNameKey) {
    this.battlePortraitNameKey = battlePortraitNameKey;
  }


  public UnitDef modRecommendation(List<UnitModRecommendation> modRecommendation) {
    this.modRecommendation = modRecommendation;
    return this;
  }

  public UnitDef addModRecommendationItem(UnitModRecommendation modRecommendationItem) {
    if (this.modRecommendation == null) {
      this.modRecommendation = new ArrayList<>();
    }
    this.modRecommendation.add(modRecommendationItem);
    return this;
  }

  /**
   * Get modRecommendation
   * @return modRecommendation
   */
  @javax.annotation.Nullable
  public List<UnitModRecommendation> getModRecommendation() {
    return modRecommendation;
  }

  public void setModRecommendation(List<UnitModRecommendation> modRecommendation) {
    this.modRecommendation = modRecommendation;
  }


  public UnitDef effectIconPriorityOverride(List<String> effectIconPriorityOverride) {
    this.effectIconPriorityOverride = effectIconPriorityOverride;
    return this;
  }

  public UnitDef addEffectIconPriorityOverrideItem(String effectIconPriorityOverrideItem) {
    if (this.effectIconPriorityOverride == null) {
      this.effectIconPriorityOverride = new ArrayList<>();
    }
    this.effectIconPriorityOverride.add(effectIconPriorityOverrideItem);
    return this;
  }

  /**
   * Get effectIconPriorityOverride
   * @return effectIconPriorityOverride
   */
  @javax.annotation.Nullable
  public List<String> getEffectIconPriorityOverride() {
    return effectIconPriorityOverride;
  }

  public void setEffectIconPriorityOverride(List<String> effectIconPriorityOverride) {
    this.effectIconPriorityOverride = effectIconPriorityOverride;
  }


  public UnitDef summonStatTable(List<SummonStatTable> summonStatTable) {
    this.summonStatTable = summonStatTable;
    return this;
  }

  public UnitDef addSummonStatTableItem(SummonStatTable summonStatTableItem) {
    if (this.summonStatTable == null) {
      this.summonStatTable = new ArrayList<>();
    }
    this.summonStatTable.add(summonStatTableItem);
    return this;
  }

  /**
   * Get summonStatTable
   * @return summonStatTable
   */
  @javax.annotation.Nullable
  public List<SummonStatTable> getSummonStatTable() {
    return summonStatTable;
  }

  public void setSummonStatTable(List<SummonStatTable> summonStatTable) {
    this.summonStatTable = summonStatTable;
  }


  public UnitDef relicDefinition(RelicDefinition relicDefinition) {
    this.relicDefinition = relicDefinition;
    return this;
  }

  /**
   * Get relicDefinition
   * @return relicDefinition
   */
  @javax.annotation.Nullable
  public RelicDefinition getRelicDefinition() {
    return relicDefinition;
  }

  public void setRelicDefinition(RelicDefinition relicDefinition) {
    this.relicDefinition = relicDefinition;
  }


  public UnitDef capitalUnlockKey(String capitalUnlockKey) {
    this.capitalUnlockKey = capitalUnlockKey;
    return this;
  }

  /**
   * Get capitalUnlockKey
   * @return capitalUnlockKey
   */
  @javax.annotation.Nullable
  public String getCapitalUnlockKey() {
    return capitalUnlockKey;
  }

  public void setCapitalUnlockKey(String capitalUnlockKey) {
    this.capitalUnlockKey = capitalUnlockKey;
  }


  public UnitDef legend(Boolean legend) {
    this.legend = legend;
    return this;
  }

  /**
   * Get legend
   * @return legend
   */
  @javax.annotation.Nullable
  public Boolean getLegend() {
    return legend;
  }

  public void setLegend(Boolean legend) {
    this.legend = legend;
  }


  public UnitDef squadPositionPriority(Integer squadPositionPriority) {
    this.squadPositionPriority = squadPositionPriority;
    return this;
  }

  /**
   * Get squadPositionPriority
   * @return squadPositionPriority
   */
  @javax.annotation.Nullable
  public Integer getSquadPositionPriority() {
    return squadPositionPriority;
  }

  public void setSquadPositionPriority(Integer squadPositionPriority) {
    this.squadPositionPriority = squadPositionPriority;
  }


  public UnitDef exampleSquad(List<RecommendedSquad> exampleSquad) {
    this.exampleSquad = exampleSquad;
    return this;
  }

  public UnitDef addExampleSquadItem(RecommendedSquad exampleSquadItem) {
    if (this.exampleSquad == null) {
      this.exampleSquad = new ArrayList<>();
    }
    this.exampleSquad.add(exampleSquadItem);
    return this;
  }

  /**
   * Get exampleSquad
   * @return exampleSquad
   */
  @javax.annotation.Nullable
  public List<RecommendedSquad> getExampleSquad() {
    return exampleSquad;
  }

  public void setExampleSquad(List<RecommendedSquad> exampleSquad) {
    this.exampleSquad = exampleSquad;
  }


  public UnitDef big(Boolean big) {
    this.big = big;
    return this;
  }

  /**
   * Get big
   * @return big
   */
  @javax.annotation.Nullable
  public Boolean getBig() {
    return big;
  }

  public void setBig(Boolean big) {
    this.big = big;
  }


  public UnitDef hideInTurnOrder(Boolean hideInTurnOrder) {
    this.hideInTurnOrder = hideInTurnOrder;
    return this;
  }

  /**
   * Get hideInTurnOrder
   * @return hideInTurnOrder
   */
  @javax.annotation.Nullable
  public Boolean getHideInTurnOrder() {
    return hideInTurnOrder;
  }

  public void setHideInTurnOrder(Boolean hideInTurnOrder) {
    this.hideInTurnOrder = hideInTurnOrder;
  }


  public UnitDef thumbImageTurnOrder(String thumbImageTurnOrder) {
    this.thumbImageTurnOrder = thumbImageTurnOrder;
    return this;
  }

  /**
   * Get thumbImageTurnOrder
   * @return thumbImageTurnOrder
   */
  @javax.annotation.Nullable
  public String getThumbImageTurnOrder() {
    return thumbImageTurnOrder;
  }

  public void setThumbImageTurnOrder(String thumbImageTurnOrder) {
    this.thumbImageTurnOrder = thumbImageTurnOrder;
  }


  public UnitDef requireUltimateUnlock(Boolean requireUltimateUnlock) {
    this.requireUltimateUnlock = requireUltimateUnlock;
    return this;
  }

  /**
   * Get requireUltimateUnlock
   * @return requireUltimateUnlock
   */
  @javax.annotation.Nullable
  public Boolean getRequireUltimateUnlock() {
    return requireUltimateUnlock;
  }

  public void setRequireUltimateUnlock(Boolean requireUltimateUnlock) {
    this.requireUltimateUnlock = requireUltimateUnlock;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitDef unitDef = (UnitDef) o;
    return Objects.equals(this.id, unitDef.id) &&
        Objects.equals(this.unitPrefab, unitDef.unitPrefab) &&
        Objects.equals(this.thumbnailName, unitDef.thumbnailName) &&
        Objects.equals(this.nameKey, unitDef.nameKey) &&
        Objects.equals(this.rarity, unitDef.rarity) &&
        Objects.equals(this.maxRarity, unitDef.maxRarity) &&
        Objects.equals(this.forceAlignment, unitDef.forceAlignment) &&
        Objects.equals(this.xpTableId, unitDef.xpTableId) &&
        Objects.equals(this.actionCountMin, unitDef.actionCountMin) &&
        Objects.equals(this.actionCountMax, unitDef.actionCountMax) &&
        Objects.equals(this.combatType, unitDef.combatType) &&
        Objects.equals(this.descKey, unitDef.descKey) &&
        Objects.equals(this.threatLevel, unitDef.threatLevel) &&
        Objects.equals(this.obtainable, unitDef.obtainable) &&
        Objects.equals(this.baseId, unitDef.baseId) &&
        Objects.equals(this.promotionRecipeReference, unitDef.promotionRecipeReference) &&
        Objects.equals(this.statProgressionId, unitDef.statProgressionId) &&
        Objects.equals(this.categoryId, unitDef.categoryId) &&
        Objects.equals(this.trainingXpWorthBaseValueOverride, unitDef.trainingXpWorthBaseValueOverride) &&
        Objects.equals(this.maxLevelOverride, unitDef.maxLevelOverride) &&
        Objects.equals(this.trainingCostMultiplierOverride, unitDef.trainingCostMultiplierOverride) &&
        Objects.equals(this.creationRecipeReference, unitDef.creationRecipeReference) &&
        Objects.equals(this.skillReference, unitDef.skillReference) &&
        Objects.equals(this.basePower, unitDef.basePower) &&
        Objects.equals(this.baseStat, unitDef.baseStat) &&
        Objects.equals(this.primaryStat, unitDef.primaryStat) &&
        Objects.equals(this.unitTier, unitDef.unitTier) &&
        Objects.equals(this.basicAttack, unitDef.basicAttack) &&
        Objects.equals(this.leaderAbility, unitDef.leaderAbility) &&
        Objects.equals(this.limitBreak, unitDef.limitBreak) &&
        Objects.equals(this.uniqueAbility, unitDef.uniqueAbility) &&
        Objects.equals(this.basicAttackRef, unitDef.basicAttackRef) &&
        Objects.equals(this.leaderAbilityRef, unitDef.leaderAbilityRef) &&
        Objects.equals(this.limitBreakRef, unitDef.limitBreakRef) &&
        Objects.equals(this.uniqueAbilityRef, unitDef.uniqueAbilityRef) &&
        Objects.equals(this.primaryUnitStat, unitDef.primaryUnitStat) &&
        Objects.equals(this.obtainableTime, unitDef.obtainableTime) &&
        Objects.equals(this.crew, unitDef.crew) &&
        Objects.equals(this.commandCost, unitDef.commandCost) &&
        Objects.equals(this.crewContributionTableId, unitDef.crewContributionTableId) &&
        Objects.equals(this.unitClass, unitDef.unitClass) &&
        Objects.equals(this.battlePortraitPrefab, unitDef.battlePortraitPrefab) &&
        Objects.equals(this.battlePortraitNameKey, unitDef.battlePortraitNameKey) &&
        Objects.equals(this.modRecommendation, unitDef.modRecommendation) &&
        Objects.equals(this.effectIconPriorityOverride, unitDef.effectIconPriorityOverride) &&
        Objects.equals(this.summonStatTable, unitDef.summonStatTable) &&
        Objects.equals(this.relicDefinition, unitDef.relicDefinition) &&
        Objects.equals(this.capitalUnlockKey, unitDef.capitalUnlockKey) &&
        Objects.equals(this.legend, unitDef.legend) &&
        Objects.equals(this.squadPositionPriority, unitDef.squadPositionPriority) &&
        Objects.equals(this.exampleSquad, unitDef.exampleSquad) &&
        Objects.equals(this.big, unitDef.big) &&
        Objects.equals(this.hideInTurnOrder, unitDef.hideInTurnOrder) &&
        Objects.equals(this.thumbImageTurnOrder, unitDef.thumbImageTurnOrder) &&
        Objects.equals(this.requireUltimateUnlock, unitDef.requireUltimateUnlock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, unitPrefab, thumbnailName, nameKey, rarity, maxRarity, forceAlignment, xpTableId, actionCountMin, actionCountMax, combatType, descKey, threatLevel, obtainable, baseId, promotionRecipeReference, statProgressionId, categoryId, trainingXpWorthBaseValueOverride, maxLevelOverride, trainingCostMultiplierOverride, creationRecipeReference, skillReference, basePower, baseStat, primaryStat, unitTier, basicAttack, leaderAbility, limitBreak, uniqueAbility, basicAttackRef, leaderAbilityRef, limitBreakRef, uniqueAbilityRef, primaryUnitStat, obtainableTime, crew, commandCost, crewContributionTableId, unitClass, battlePortraitPrefab, battlePortraitNameKey, modRecommendation, effectIconPriorityOverride, summonStatTable, relicDefinition, capitalUnlockKey, legend, squadPositionPriority, exampleSquad, big, hideInTurnOrder, thumbImageTurnOrder, requireUltimateUnlock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitDef {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    unitPrefab: ").append(toIndentedString(unitPrefab)).append("\n");
    sb.append("    thumbnailName: ").append(toIndentedString(thumbnailName)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    maxRarity: ").append(toIndentedString(maxRarity)).append("\n");
    sb.append("    forceAlignment: ").append(toIndentedString(forceAlignment)).append("\n");
    sb.append("    xpTableId: ").append(toIndentedString(xpTableId)).append("\n");
    sb.append("    actionCountMin: ").append(toIndentedString(actionCountMin)).append("\n");
    sb.append("    actionCountMax: ").append(toIndentedString(actionCountMax)).append("\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    threatLevel: ").append(toIndentedString(threatLevel)).append("\n");
    sb.append("    obtainable: ").append(toIndentedString(obtainable)).append("\n");
    sb.append("    baseId: ").append(toIndentedString(baseId)).append("\n");
    sb.append("    promotionRecipeReference: ").append(toIndentedString(promotionRecipeReference)).append("\n");
    sb.append("    statProgressionId: ").append(toIndentedString(statProgressionId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    trainingXpWorthBaseValueOverride: ").append(toIndentedString(trainingXpWorthBaseValueOverride)).append("\n");
    sb.append("    maxLevelOverride: ").append(toIndentedString(maxLevelOverride)).append("\n");
    sb.append("    trainingCostMultiplierOverride: ").append(toIndentedString(trainingCostMultiplierOverride)).append("\n");
    sb.append("    creationRecipeReference: ").append(toIndentedString(creationRecipeReference)).append("\n");
    sb.append("    skillReference: ").append(toIndentedString(skillReference)).append("\n");
    sb.append("    basePower: ").append(toIndentedString(basePower)).append("\n");
    sb.append("    baseStat: ").append(toIndentedString(baseStat)).append("\n");
    sb.append("    primaryStat: ").append(toIndentedString(primaryStat)).append("\n");
    sb.append("    unitTier: ").append(toIndentedString(unitTier)).append("\n");
    sb.append("    basicAttack: ").append(toIndentedString(basicAttack)).append("\n");
    sb.append("    leaderAbility: ").append(toIndentedString(leaderAbility)).append("\n");
    sb.append("    limitBreak: ").append(toIndentedString(limitBreak)).append("\n");
    sb.append("    uniqueAbility: ").append(toIndentedString(uniqueAbility)).append("\n");
    sb.append("    basicAttackRef: ").append(toIndentedString(basicAttackRef)).append("\n");
    sb.append("    leaderAbilityRef: ").append(toIndentedString(leaderAbilityRef)).append("\n");
    sb.append("    limitBreakRef: ").append(toIndentedString(limitBreakRef)).append("\n");
    sb.append("    uniqueAbilityRef: ").append(toIndentedString(uniqueAbilityRef)).append("\n");
    sb.append("    primaryUnitStat: ").append(toIndentedString(primaryUnitStat)).append("\n");
    sb.append("    obtainableTime: ").append(toIndentedString(obtainableTime)).append("\n");
    sb.append("    crew: ").append(toIndentedString(crew)).append("\n");
    sb.append("    commandCost: ").append(toIndentedString(commandCost)).append("\n");
    sb.append("    crewContributionTableId: ").append(toIndentedString(crewContributionTableId)).append("\n");
    sb.append("    unitClass: ").append(toIndentedString(unitClass)).append("\n");
    sb.append("    battlePortraitPrefab: ").append(toIndentedString(battlePortraitPrefab)).append("\n");
    sb.append("    battlePortraitNameKey: ").append(toIndentedString(battlePortraitNameKey)).append("\n");
    sb.append("    modRecommendation: ").append(toIndentedString(modRecommendation)).append("\n");
    sb.append("    effectIconPriorityOverride: ").append(toIndentedString(effectIconPriorityOverride)).append("\n");
    sb.append("    summonStatTable: ").append(toIndentedString(summonStatTable)).append("\n");
    sb.append("    relicDefinition: ").append(toIndentedString(relicDefinition)).append("\n");
    sb.append("    capitalUnlockKey: ").append(toIndentedString(capitalUnlockKey)).append("\n");
    sb.append("    legend: ").append(toIndentedString(legend)).append("\n");
    sb.append("    squadPositionPriority: ").append(toIndentedString(squadPositionPriority)).append("\n");
    sb.append("    exampleSquad: ").append(toIndentedString(exampleSquad)).append("\n");
    sb.append("    big: ").append(toIndentedString(big)).append("\n");
    sb.append("    hideInTurnOrder: ").append(toIndentedString(hideInTurnOrder)).append("\n");
    sb.append("    thumbImageTurnOrder: ").append(toIndentedString(thumbImageTurnOrder)).append("\n");
    sb.append("    requireUltimateUnlock: ").append(toIndentedString(requireUltimateUnlock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("unitPrefab");
    openapiFields.add("thumbnailName");
    openapiFields.add("nameKey");
    openapiFields.add("rarity");
    openapiFields.add("maxRarity");
    openapiFields.add("forceAlignment");
    openapiFields.add("xpTableId");
    openapiFields.add("actionCountMin");
    openapiFields.add("actionCountMax");
    openapiFields.add("combatType");
    openapiFields.add("descKey");
    openapiFields.add("threatLevel");
    openapiFields.add("obtainable");
    openapiFields.add("baseId");
    openapiFields.add("promotionRecipeReference");
    openapiFields.add("statProgressionId");
    openapiFields.add("categoryId");
    openapiFields.add("trainingXpWorthBaseValueOverride");
    openapiFields.add("maxLevelOverride");
    openapiFields.add("trainingCostMultiplierOverride");
    openapiFields.add("creationRecipeReference");
    openapiFields.add("skillReference");
    openapiFields.add("basePower");
    openapiFields.add("baseStat");
    openapiFields.add("primaryStat");
    openapiFields.add("unitTier");
    openapiFields.add("basicAttack");
    openapiFields.add("leaderAbility");
    openapiFields.add("limitBreak");
    openapiFields.add("uniqueAbility");
    openapiFields.add("basicAttackRef");
    openapiFields.add("leaderAbilityRef");
    openapiFields.add("limitBreakRef");
    openapiFields.add("uniqueAbilityRef");
    openapiFields.add("primaryUnitStat");
    openapiFields.add("obtainableTime");
    openapiFields.add("crew");
    openapiFields.add("commandCost");
    openapiFields.add("crewContributionTableId");
    openapiFields.add("unitClass");
    openapiFields.add("battlePortraitPrefab");
    openapiFields.add("battlePortraitNameKey");
    openapiFields.add("modRecommendation");
    openapiFields.add("effectIconPriorityOverride");
    openapiFields.add("summonStatTable");
    openapiFields.add("relicDefinition");
    openapiFields.add("capitalUnlockKey");
    openapiFields.add("legend");
    openapiFields.add("squadPositionPriority");
    openapiFields.add("exampleSquad");
    openapiFields.add("big");
    openapiFields.add("hideInTurnOrder");
    openapiFields.add("thumbImageTurnOrder");
    openapiFields.add("requireUltimateUnlock");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnitDef
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitDef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitDef is not found in the empty JSON string", UnitDef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnitDef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitDef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("unitPrefab") != null && !jsonObj.get("unitPrefab").isJsonNull()) && !jsonObj.get("unitPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitPrefab").toString()));
      }
      if ((jsonObj.get("thumbnailName") != null && !jsonObj.get("thumbnailName").isJsonNull()) && !jsonObj.get("thumbnailName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailName").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      // validate the optional field `rarity`
      if (jsonObj.get("rarity") != null && !jsonObj.get("rarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("rarity"));
      }
      // validate the optional field `maxRarity`
      if (jsonObj.get("maxRarity") != null && !jsonObj.get("maxRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("maxRarity"));
      }
      // validate the optional field `forceAlignment`
      if (jsonObj.get("forceAlignment") != null && !jsonObj.get("forceAlignment").isJsonNull()) {
        ForceAlignment.validateJsonElement(jsonObj.get("forceAlignment"));
      }
      if ((jsonObj.get("xpTableId") != null && !jsonObj.get("xpTableId").isJsonNull()) && !jsonObj.get("xpTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xpTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xpTableId").toString()));
      }
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      // validate the optional field `threatLevel`
      if (jsonObj.get("threatLevel") != null && !jsonObj.get("threatLevel").isJsonNull()) {
        ThreatLevel.validateJsonElement(jsonObj.get("threatLevel"));
      }
      if ((jsonObj.get("baseId") != null && !jsonObj.get("baseId").isJsonNull()) && !jsonObj.get("baseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseId").toString()));
      }
      if ((jsonObj.get("promotionRecipeReference") != null && !jsonObj.get("promotionRecipeReference").isJsonNull()) && !jsonObj.get("promotionRecipeReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionRecipeReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionRecipeReference").toString()));
      }
      if ((jsonObj.get("statProgressionId") != null && !jsonObj.get("statProgressionId").isJsonNull()) && !jsonObj.get("statProgressionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statProgressionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statProgressionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull() && !jsonObj.get("categoryId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be an array in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("creationRecipeReference") != null && !jsonObj.get("creationRecipeReference").isJsonNull()) && !jsonObj.get("creationRecipeReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationRecipeReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationRecipeReference").toString()));
      }
      if (jsonObj.get("skillReference") != null && !jsonObj.get("skillReference").isJsonNull()) {
        JsonArray jsonArrayskillReference = jsonObj.getAsJsonArray("skillReference");
        if (jsonArrayskillReference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skillReference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skillReference` to be an array in the JSON string but got `%s`", jsonObj.get("skillReference").toString()));
          }

          // validate the optional field `skillReference` (array)
          for (int i = 0; i < jsonArrayskillReference.size(); i++) {
            SkillDefinitionReference.validateJsonElement(jsonArrayskillReference.get(i));
          };
        }
      }
      // validate the optional field `baseStat`
      if (jsonObj.get("baseStat") != null && !jsonObj.get("baseStat").isJsonNull()) {
        StatDef.validateJsonElement(jsonObj.get("baseStat"));
      }
      if ((jsonObj.get("primaryStat") != null && !jsonObj.get("primaryStat").isJsonNull()) && !jsonObj.get("primaryStat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryStat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryStat").toString()));
      }
      if (jsonObj.get("unitTier") != null && !jsonObj.get("unitTier").isJsonNull()) {
        JsonArray jsonArrayunitTier = jsonObj.getAsJsonArray("unitTier");
        if (jsonArrayunitTier != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unitTier").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unitTier` to be an array in the JSON string but got `%s`", jsonObj.get("unitTier").toString()));
          }

          // validate the optional field `unitTier` (array)
          for (int i = 0; i < jsonArrayunitTier.size(); i++) {
            UnitTierDef.validateJsonElement(jsonArrayunitTier.get(i));
          };
        }
      }
      // validate the optional field `basicAttack`
      if (jsonObj.get("basicAttack") != null && !jsonObj.get("basicAttack").isJsonNull()) {
        Ability.validateJsonElement(jsonObj.get("basicAttack"));
      }
      // validate the optional field `leaderAbility`
      if (jsonObj.get("leaderAbility") != null && !jsonObj.get("leaderAbility").isJsonNull()) {
        Ability.validateJsonElement(jsonObj.get("leaderAbility"));
      }
      if (jsonObj.get("limitBreak") != null && !jsonObj.get("limitBreak").isJsonNull()) {
        JsonArray jsonArraylimitBreak = jsonObj.getAsJsonArray("limitBreak");
        if (jsonArraylimitBreak != null) {
          // ensure the json data is an array
          if (!jsonObj.get("limitBreak").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `limitBreak` to be an array in the JSON string but got `%s`", jsonObj.get("limitBreak").toString()));
          }

          // validate the optional field `limitBreak` (array)
          for (int i = 0; i < jsonArraylimitBreak.size(); i++) {
            Ability.validateJsonElement(jsonArraylimitBreak.get(i));
          };
        }
      }
      if (jsonObj.get("uniqueAbility") != null && !jsonObj.get("uniqueAbility").isJsonNull()) {
        JsonArray jsonArrayuniqueAbility = jsonObj.getAsJsonArray("uniqueAbility");
        if (jsonArrayuniqueAbility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uniqueAbility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uniqueAbility` to be an array in the JSON string but got `%s`", jsonObj.get("uniqueAbility").toString()));
          }

          // validate the optional field `uniqueAbility` (array)
          for (int i = 0; i < jsonArrayuniqueAbility.size(); i++) {
            Ability.validateJsonElement(jsonArrayuniqueAbility.get(i));
          };
        }
      }
      // validate the optional field `basicAttackRef`
      if (jsonObj.get("basicAttackRef") != null && !jsonObj.get("basicAttackRef").isJsonNull()) {
        AbilityReference.validateJsonElement(jsonObj.get("basicAttackRef"));
      }
      // validate the optional field `leaderAbilityRef`
      if (jsonObj.get("leaderAbilityRef") != null && !jsonObj.get("leaderAbilityRef").isJsonNull()) {
        AbilityReference.validateJsonElement(jsonObj.get("leaderAbilityRef"));
      }
      if (jsonObj.get("limitBreakRef") != null && !jsonObj.get("limitBreakRef").isJsonNull()) {
        JsonArray jsonArraylimitBreakRef = jsonObj.getAsJsonArray("limitBreakRef");
        if (jsonArraylimitBreakRef != null) {
          // ensure the json data is an array
          if (!jsonObj.get("limitBreakRef").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `limitBreakRef` to be an array in the JSON string but got `%s`", jsonObj.get("limitBreakRef").toString()));
          }

          // validate the optional field `limitBreakRef` (array)
          for (int i = 0; i < jsonArraylimitBreakRef.size(); i++) {
            AbilityReference.validateJsonElement(jsonArraylimitBreakRef.get(i));
          };
        }
      }
      if (jsonObj.get("uniqueAbilityRef") != null && !jsonObj.get("uniqueAbilityRef").isJsonNull()) {
        JsonArray jsonArrayuniqueAbilityRef = jsonObj.getAsJsonArray("uniqueAbilityRef");
        if (jsonArrayuniqueAbilityRef != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uniqueAbilityRef").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uniqueAbilityRef` to be an array in the JSON string but got `%s`", jsonObj.get("uniqueAbilityRef").toString()));
          }

          // validate the optional field `uniqueAbilityRef` (array)
          for (int i = 0; i < jsonArrayuniqueAbilityRef.size(); i++) {
            AbilityReference.validateJsonElement(jsonArrayuniqueAbilityRef.get(i));
          };
        }
      }
      // validate the optional field `primaryUnitStat`
      if (jsonObj.get("primaryUnitStat") != null && !jsonObj.get("primaryUnitStat").isJsonNull()) {
        UnitStat.validateJsonElement(jsonObj.get("primaryUnitStat"));
      }
      if (jsonObj.get("crew") != null && !jsonObj.get("crew").isJsonNull()) {
        JsonArray jsonArraycrew = jsonObj.getAsJsonArray("crew");
        if (jsonArraycrew != null) {
          // ensure the json data is an array
          if (!jsonObj.get("crew").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `crew` to be an array in the JSON string but got `%s`", jsonObj.get("crew").toString()));
          }

          // validate the optional field `crew` (array)
          for (int i = 0; i < jsonArraycrew.size(); i++) {
            CrewMember.validateJsonElement(jsonArraycrew.get(i));
          };
        }
      }
      if ((jsonObj.get("crewContributionTableId") != null && !jsonObj.get("crewContributionTableId").isJsonNull()) && !jsonObj.get("crewContributionTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crewContributionTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crewContributionTableId").toString()));
      }
      // validate the optional field `unitClass`
      if (jsonObj.get("unitClass") != null && !jsonObj.get("unitClass").isJsonNull()) {
        UnitClass.validateJsonElement(jsonObj.get("unitClass"));
      }
      if ((jsonObj.get("battlePortraitPrefab") != null && !jsonObj.get("battlePortraitPrefab").isJsonNull()) && !jsonObj.get("battlePortraitPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `battlePortraitPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("battlePortraitPrefab").toString()));
      }
      if ((jsonObj.get("battlePortraitNameKey") != null && !jsonObj.get("battlePortraitNameKey").isJsonNull()) && !jsonObj.get("battlePortraitNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `battlePortraitNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("battlePortraitNameKey").toString()));
      }
      if (jsonObj.get("modRecommendation") != null && !jsonObj.get("modRecommendation").isJsonNull()) {
        JsonArray jsonArraymodRecommendation = jsonObj.getAsJsonArray("modRecommendation");
        if (jsonArraymodRecommendation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modRecommendation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modRecommendation` to be an array in the JSON string but got `%s`", jsonObj.get("modRecommendation").toString()));
          }

          // validate the optional field `modRecommendation` (array)
          for (int i = 0; i < jsonArraymodRecommendation.size(); i++) {
            UnitModRecommendation.validateJsonElement(jsonArraymodRecommendation.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("effectIconPriorityOverride") != null && !jsonObj.get("effectIconPriorityOverride").isJsonNull() && !jsonObj.get("effectIconPriorityOverride").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectIconPriorityOverride` to be an array in the JSON string but got `%s`", jsonObj.get("effectIconPriorityOverride").toString()));
      }
      if (jsonObj.get("summonStatTable") != null && !jsonObj.get("summonStatTable").isJsonNull()) {
        JsonArray jsonArraysummonStatTable = jsonObj.getAsJsonArray("summonStatTable");
        if (jsonArraysummonStatTable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("summonStatTable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `summonStatTable` to be an array in the JSON string but got `%s`", jsonObj.get("summonStatTable").toString()));
          }

          // validate the optional field `summonStatTable` (array)
          for (int i = 0; i < jsonArraysummonStatTable.size(); i++) {
            SummonStatTable.validateJsonElement(jsonArraysummonStatTable.get(i));
          };
        }
      }
      // validate the optional field `relicDefinition`
      if (jsonObj.get("relicDefinition") != null && !jsonObj.get("relicDefinition").isJsonNull()) {
        RelicDefinition.validateJsonElement(jsonObj.get("relicDefinition"));
      }
      if ((jsonObj.get("capitalUnlockKey") != null && !jsonObj.get("capitalUnlockKey").isJsonNull()) && !jsonObj.get("capitalUnlockKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capitalUnlockKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capitalUnlockKey").toString()));
      }
      if (jsonObj.get("exampleSquad") != null && !jsonObj.get("exampleSquad").isJsonNull()) {
        JsonArray jsonArrayexampleSquad = jsonObj.getAsJsonArray("exampleSquad");
        if (jsonArrayexampleSquad != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exampleSquad").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exampleSquad` to be an array in the JSON string but got `%s`", jsonObj.get("exampleSquad").toString()));
          }

          // validate the optional field `exampleSquad` (array)
          for (int i = 0; i < jsonArrayexampleSquad.size(); i++) {
            RecommendedSquad.validateJsonElement(jsonArrayexampleSquad.get(i));
          };
        }
      }
      if ((jsonObj.get("thumbImageTurnOrder") != null && !jsonObj.get("thumbImageTurnOrder").isJsonNull()) && !jsonObj.get("thumbImageTurnOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbImageTurnOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbImageTurnOrder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitDef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitDef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitDef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitDef.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitDef>() {
           @Override
           public void write(JsonWriter out, UnitDef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitDef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnitDef given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnitDef
   * @throws IOException if the JSON string is invalid with respect to UnitDef
   */
  public static UnitDef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitDef.class);
  }

  /**
   * Convert an instance of UnitDef to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

