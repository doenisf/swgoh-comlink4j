/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.TerritoryReconSquadDefinition;
import io.github.doenisf.comlink4j.model.TerritoryReward;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryReconPlatoonDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryReconPlatoonDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_SQUAD = "squad";
  @SerializedName(SERIALIZED_NAME_SQUAD)
  private List<TerritoryReconSquadDefinition> squad = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD = "reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private TerritoryReward reward;

  public TerritoryReconPlatoonDefinition() {
  }

  public TerritoryReconPlatoonDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TerritoryReconPlatoonDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public TerritoryReconPlatoonDefinition squad(List<TerritoryReconSquadDefinition> squad) {
    this.squad = squad;
    return this;
  }

  public TerritoryReconPlatoonDefinition addSquadItem(TerritoryReconSquadDefinition squadItem) {
    if (this.squad == null) {
      this.squad = new ArrayList<>();
    }
    this.squad.add(squadItem);
    return this;
  }

  /**
   * Get squad
   * @return squad
   */
  @javax.annotation.Nullable
  public List<TerritoryReconSquadDefinition> getSquad() {
    return squad;
  }

  public void setSquad(List<TerritoryReconSquadDefinition> squad) {
    this.squad = squad;
  }


  public TerritoryReconPlatoonDefinition reward(TerritoryReward reward) {
    this.reward = reward;
    return this;
  }

  /**
   * Get reward
   * @return reward
   */
  @javax.annotation.Nullable
  public TerritoryReward getReward() {
    return reward;
  }

  public void setReward(TerritoryReward reward) {
    this.reward = reward;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryReconPlatoonDefinition territoryReconPlatoonDefinition = (TerritoryReconPlatoonDefinition) o;
    return Objects.equals(this.id, territoryReconPlatoonDefinition.id) &&
        Objects.equals(this.nameKey, territoryReconPlatoonDefinition.nameKey) &&
        Objects.equals(this.squad, territoryReconPlatoonDefinition.squad) &&
        Objects.equals(this.reward, territoryReconPlatoonDefinition.reward);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, squad, reward);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryReconPlatoonDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    squad: ").append(toIndentedString(squad)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("squad");
    openapiFields.add("reward");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryReconPlatoonDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryReconPlatoonDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryReconPlatoonDefinition is not found in the empty JSON string", TerritoryReconPlatoonDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryReconPlatoonDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryReconPlatoonDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if (jsonObj.get("squad") != null && !jsonObj.get("squad").isJsonNull()) {
        JsonArray jsonArraysquad = jsonObj.getAsJsonArray("squad");
        if (jsonArraysquad != null) {
          // ensure the json data is an array
          if (!jsonObj.get("squad").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `squad` to be an array in the JSON string but got `%s`", jsonObj.get("squad").toString()));
          }

          // validate the optional field `squad` (array)
          for (int i = 0; i < jsonArraysquad.size(); i++) {
            TerritoryReconSquadDefinition.validateJsonElement(jsonArraysquad.get(i));
          };
        }
      }
      // validate the optional field `reward`
      if (jsonObj.get("reward") != null && !jsonObj.get("reward").isJsonNull()) {
        TerritoryReward.validateJsonElement(jsonObj.get("reward"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryReconPlatoonDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryReconPlatoonDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryReconPlatoonDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryReconPlatoonDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryReconPlatoonDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryReconPlatoonDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryReconPlatoonDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryReconPlatoonDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryReconPlatoonDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryReconPlatoonDefinition
   */
  public static TerritoryReconPlatoonDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryReconPlatoonDefinition.class);
  }

  /**
   * Convert an instance of TerritoryReconPlatoonDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

