/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.EnergyRewardInstance;
import io.github.doenisf.comlink4j.model.EnergyType;
import io.github.doenisf.comlink4j.model.Requirement;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * EnergyRewardDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class EnergyRewardDefinition {
  public static final String SERIALIZED_NAME_ENERGY_TYPE = "energyType";
  @SerializedName(SERIALIZED_NAME_ENERGY_TYPE)
  private EnergyType energyType;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private List<EnergyRewardInstance> instance = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLAIMABLE_TITLE_KEY = "claimableTitleKey";
  @SerializedName(SERIALIZED_NAME_CLAIMABLE_TITLE_KEY)
  private String claimableTitleKey;

  public static final String SERIALIZED_NAME_CLAIMABLE_DESC_KEY = "claimableDescKey";
  @SerializedName(SERIALIZED_NAME_CLAIMABLE_DESC_KEY)
  private String claimableDescKey;

  public static final String SERIALIZED_NAME_UPCOMING_TITLE_KEY = "upcomingTitleKey";
  @SerializedName(SERIALIZED_NAME_UPCOMING_TITLE_KEY)
  private String upcomingTitleKey;

  public static final String SERIALIZED_NAME_UPCOMING_DESC_KEY = "upcomingDescKey";
  @SerializedName(SERIALIZED_NAME_UPCOMING_DESC_KEY)
  private String upcomingDescKey;

  public static final String SERIALIZED_NAME_SHOW_REQUIREMENT = "showRequirement";
  @SerializedName(SERIALIZED_NAME_SHOW_REQUIREMENT)
  private Requirement showRequirement;

  public EnergyRewardDefinition() {
  }

  public EnergyRewardDefinition energyType(EnergyType energyType) {
    this.energyType = energyType;
    return this;
  }

  /**
   * Get energyType
   * @return energyType
   */
  @javax.annotation.Nullable
  public EnergyType getEnergyType() {
    return energyType;
  }

  public void setEnergyType(EnergyType energyType) {
    this.energyType = energyType;
  }


  public EnergyRewardDefinition instance(List<EnergyRewardInstance> instance) {
    this.instance = instance;
    return this;
  }

  public EnergyRewardDefinition addInstanceItem(EnergyRewardInstance instanceItem) {
    if (this.instance == null) {
      this.instance = new ArrayList<>();
    }
    this.instance.add(instanceItem);
    return this;
  }

  /**
   * Get instance
   * @return instance
   */
  @javax.annotation.Nullable
  public List<EnergyRewardInstance> getInstance() {
    return instance;
  }

  public void setInstance(List<EnergyRewardInstance> instance) {
    this.instance = instance;
  }


  public EnergyRewardDefinition claimableTitleKey(String claimableTitleKey) {
    this.claimableTitleKey = claimableTitleKey;
    return this;
  }

  /**
   * Get claimableTitleKey
   * @return claimableTitleKey
   */
  @javax.annotation.Nullable
  public String getClaimableTitleKey() {
    return claimableTitleKey;
  }

  public void setClaimableTitleKey(String claimableTitleKey) {
    this.claimableTitleKey = claimableTitleKey;
  }


  public EnergyRewardDefinition claimableDescKey(String claimableDescKey) {
    this.claimableDescKey = claimableDescKey;
    return this;
  }

  /**
   * Get claimableDescKey
   * @return claimableDescKey
   */
  @javax.annotation.Nullable
  public String getClaimableDescKey() {
    return claimableDescKey;
  }

  public void setClaimableDescKey(String claimableDescKey) {
    this.claimableDescKey = claimableDescKey;
  }


  public EnergyRewardDefinition upcomingTitleKey(String upcomingTitleKey) {
    this.upcomingTitleKey = upcomingTitleKey;
    return this;
  }

  /**
   * Get upcomingTitleKey
   * @return upcomingTitleKey
   */
  @javax.annotation.Nullable
  public String getUpcomingTitleKey() {
    return upcomingTitleKey;
  }

  public void setUpcomingTitleKey(String upcomingTitleKey) {
    this.upcomingTitleKey = upcomingTitleKey;
  }


  public EnergyRewardDefinition upcomingDescKey(String upcomingDescKey) {
    this.upcomingDescKey = upcomingDescKey;
    return this;
  }

  /**
   * Get upcomingDescKey
   * @return upcomingDescKey
   */
  @javax.annotation.Nullable
  public String getUpcomingDescKey() {
    return upcomingDescKey;
  }

  public void setUpcomingDescKey(String upcomingDescKey) {
    this.upcomingDescKey = upcomingDescKey;
  }


  public EnergyRewardDefinition showRequirement(Requirement showRequirement) {
    this.showRequirement = showRequirement;
    return this;
  }

  /**
   * Get showRequirement
   * @return showRequirement
   */
  @javax.annotation.Nullable
  public Requirement getShowRequirement() {
    return showRequirement;
  }

  public void setShowRequirement(Requirement showRequirement) {
    this.showRequirement = showRequirement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnergyRewardDefinition energyRewardDefinition = (EnergyRewardDefinition) o;
    return Objects.equals(this.energyType, energyRewardDefinition.energyType) &&
        Objects.equals(this.instance, energyRewardDefinition.instance) &&
        Objects.equals(this.claimableTitleKey, energyRewardDefinition.claimableTitleKey) &&
        Objects.equals(this.claimableDescKey, energyRewardDefinition.claimableDescKey) &&
        Objects.equals(this.upcomingTitleKey, energyRewardDefinition.upcomingTitleKey) &&
        Objects.equals(this.upcomingDescKey, energyRewardDefinition.upcomingDescKey) &&
        Objects.equals(this.showRequirement, energyRewardDefinition.showRequirement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(energyType, instance, claimableTitleKey, claimableDescKey, upcomingTitleKey, upcomingDescKey, showRequirement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnergyRewardDefinition {\n");
    sb.append("    energyType: ").append(toIndentedString(energyType)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    claimableTitleKey: ").append(toIndentedString(claimableTitleKey)).append("\n");
    sb.append("    claimableDescKey: ").append(toIndentedString(claimableDescKey)).append("\n");
    sb.append("    upcomingTitleKey: ").append(toIndentedString(upcomingTitleKey)).append("\n");
    sb.append("    upcomingDescKey: ").append(toIndentedString(upcomingDescKey)).append("\n");
    sb.append("    showRequirement: ").append(toIndentedString(showRequirement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("energyType");
    openapiFields.add("instance");
    openapiFields.add("claimableTitleKey");
    openapiFields.add("claimableDescKey");
    openapiFields.add("upcomingTitleKey");
    openapiFields.add("upcomingDescKey");
    openapiFields.add("showRequirement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnergyRewardDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnergyRewardDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnergyRewardDefinition is not found in the empty JSON string", EnergyRewardDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnergyRewardDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnergyRewardDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `energyType`
      if (jsonObj.get("energyType") != null && !jsonObj.get("energyType").isJsonNull()) {
        EnergyType.validateJsonElement(jsonObj.get("energyType"));
      }
      if (jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) {
        JsonArray jsonArrayinstance = jsonObj.getAsJsonArray("instance");
        if (jsonArrayinstance != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instance").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instance` to be an array in the JSON string but got `%s`", jsonObj.get("instance").toString()));
          }

          // validate the optional field `instance` (array)
          for (int i = 0; i < jsonArrayinstance.size(); i++) {
            EnergyRewardInstance.validateJsonElement(jsonArrayinstance.get(i));
          };
        }
      }
      if ((jsonObj.get("claimableTitleKey") != null && !jsonObj.get("claimableTitleKey").isJsonNull()) && !jsonObj.get("claimableTitleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimableTitleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimableTitleKey").toString()));
      }
      if ((jsonObj.get("claimableDescKey") != null && !jsonObj.get("claimableDescKey").isJsonNull()) && !jsonObj.get("claimableDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimableDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimableDescKey").toString()));
      }
      if ((jsonObj.get("upcomingTitleKey") != null && !jsonObj.get("upcomingTitleKey").isJsonNull()) && !jsonObj.get("upcomingTitleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upcomingTitleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upcomingTitleKey").toString()));
      }
      if ((jsonObj.get("upcomingDescKey") != null && !jsonObj.get("upcomingDescKey").isJsonNull()) && !jsonObj.get("upcomingDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upcomingDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upcomingDescKey").toString()));
      }
      // validate the optional field `showRequirement`
      if (jsonObj.get("showRequirement") != null && !jsonObj.get("showRequirement").isJsonNull()) {
        Requirement.validateJsonElement(jsonObj.get("showRequirement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnergyRewardDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnergyRewardDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnergyRewardDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnergyRewardDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<EnergyRewardDefinition>() {
           @Override
           public void write(JsonWriter out, EnergyRewardDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnergyRewardDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnergyRewardDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnergyRewardDefinition
   * @throws IOException if the JSON string is invalid with respect to EnergyRewardDefinition
   */
  public static EnergyRewardDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnergyRewardDefinition.class);
  }

  /**
   * Convert an instance of EnergyRewardDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

