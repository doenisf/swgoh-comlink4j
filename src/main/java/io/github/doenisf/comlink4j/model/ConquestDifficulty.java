/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.CampaignNodeDifficulty;
import io.github.doenisf.comlink4j.ConquestSector;
import io.github.doenisf.comlink4j.RankRewardPreview;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * ConquestDifficulty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ConquestDifficulty {
  public static final String SERIALIZED_NAME_MIN_GP = "minGp";
  @SerializedName(SERIALIZED_NAME_MIN_GP)
  private Integer minGp;

  public static final String SERIALIZED_NAME_SECTOR = "sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  private List<ConquestSector> sector = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private CampaignNodeDifficulty id;

  public static final String SERIALIZED_NAME_RANK_REWARD_PREVIEW = "rankRewardPreview";
  @SerializedName(SERIALIZED_NAME_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> rankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMMEDIATE_RANK_REWARD_PREVIEW = "immediateRankRewardPreview";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> immediateRankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOMMENDED_MIN_GP = "recommendedMinGp";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_MIN_GP)
  private Integer recommendedMinGp;

  public static final String SERIALIZED_NAME_PREMIUM_IMMEDIATE_RANK_REWARD_PREVIEW = "premiumImmediateRankRewardPreview";
  @SerializedName(SERIALIZED_NAME_PREMIUM_IMMEDIATE_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> premiumImmediateRankRewardPreview = new ArrayList<>();

  public ConquestDifficulty() {
  }

  public ConquestDifficulty minGp(Integer minGp) {
    this.minGp = minGp;
    return this;
  }

  /**
   * Get minGp
   * @return minGp
   */
  @javax.annotation.Nullable
  public Integer getMinGp() {
    return minGp;
  }

  public void setMinGp(Integer minGp) {
    this.minGp = minGp;
  }


  public ConquestDifficulty sector(List<ConquestSector> sector) {
    this.sector = sector;
    return this;
  }

  public ConquestDifficulty addSectorItem(ConquestSector sectorItem) {
    if (this.sector == null) {
      this.sector = new ArrayList<>();
    }
    this.sector.add(sectorItem);
    return this;
  }

  /**
   * Get sector
   * @return sector
   */
  @javax.annotation.Nullable
  public List<ConquestSector> getSector() {
    return sector;
  }

  public void setSector(List<ConquestSector> sector) {
    this.sector = sector;
  }


  public ConquestDifficulty nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public ConquestDifficulty id(CampaignNodeDifficulty id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public CampaignNodeDifficulty getId() {
    return id;
  }

  public void setId(CampaignNodeDifficulty id) {
    this.id = id;
  }


  public ConquestDifficulty rankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
    return this;
  }

  public ConquestDifficulty addRankRewardPreviewItem(RankRewardPreview rankRewardPreviewItem) {
    if (this.rankRewardPreview == null) {
      this.rankRewardPreview = new ArrayList<>();
    }
    this.rankRewardPreview.add(rankRewardPreviewItem);
    return this;
  }

  /**
   * Get rankRewardPreview
   * @return rankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getRankRewardPreview() {
    return rankRewardPreview;
  }

  public void setRankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
  }


  public ConquestDifficulty immediateRankRewardPreview(List<RankRewardPreview> immediateRankRewardPreview) {
    this.immediateRankRewardPreview = immediateRankRewardPreview;
    return this;
  }

  public ConquestDifficulty addImmediateRankRewardPreviewItem(RankRewardPreview immediateRankRewardPreviewItem) {
    if (this.immediateRankRewardPreview == null) {
      this.immediateRankRewardPreview = new ArrayList<>();
    }
    this.immediateRankRewardPreview.add(immediateRankRewardPreviewItem);
    return this;
  }

  /**
   * Get immediateRankRewardPreview
   * @return immediateRankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getImmediateRankRewardPreview() {
    return immediateRankRewardPreview;
  }

  public void setImmediateRankRewardPreview(List<RankRewardPreview> immediateRankRewardPreview) {
    this.immediateRankRewardPreview = immediateRankRewardPreview;
  }


  public ConquestDifficulty recommendedMinGp(Integer recommendedMinGp) {
    this.recommendedMinGp = recommendedMinGp;
    return this;
  }

  /**
   * Get recommendedMinGp
   * @return recommendedMinGp
   */
  @javax.annotation.Nullable
  public Integer getRecommendedMinGp() {
    return recommendedMinGp;
  }

  public void setRecommendedMinGp(Integer recommendedMinGp) {
    this.recommendedMinGp = recommendedMinGp;
  }


  public ConquestDifficulty premiumImmediateRankRewardPreview(List<RankRewardPreview> premiumImmediateRankRewardPreview) {
    this.premiumImmediateRankRewardPreview = premiumImmediateRankRewardPreview;
    return this;
  }

  public ConquestDifficulty addPremiumImmediateRankRewardPreviewItem(RankRewardPreview premiumImmediateRankRewardPreviewItem) {
    if (this.premiumImmediateRankRewardPreview == null) {
      this.premiumImmediateRankRewardPreview = new ArrayList<>();
    }
    this.premiumImmediateRankRewardPreview.add(premiumImmediateRankRewardPreviewItem);
    return this;
  }

  /**
   * Get premiumImmediateRankRewardPreview
   * @return premiumImmediateRankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getPremiumImmediateRankRewardPreview() {
    return premiumImmediateRankRewardPreview;
  }

  public void setPremiumImmediateRankRewardPreview(List<RankRewardPreview> premiumImmediateRankRewardPreview) {
    this.premiumImmediateRankRewardPreview = premiumImmediateRankRewardPreview;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConquestDifficulty conquestDifficulty = (ConquestDifficulty) o;
    return Objects.equals(this.minGp, conquestDifficulty.minGp) &&
        Objects.equals(this.sector, conquestDifficulty.sector) &&
        Objects.equals(this.nameKey, conquestDifficulty.nameKey) &&
        Objects.equals(this.id, conquestDifficulty.id) &&
        Objects.equals(this.rankRewardPreview, conquestDifficulty.rankRewardPreview) &&
        Objects.equals(this.immediateRankRewardPreview, conquestDifficulty.immediateRankRewardPreview) &&
        Objects.equals(this.recommendedMinGp, conquestDifficulty.recommendedMinGp) &&
        Objects.equals(this.premiumImmediateRankRewardPreview, conquestDifficulty.premiumImmediateRankRewardPreview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minGp, sector, nameKey, id, rankRewardPreview, immediateRankRewardPreview, recommendedMinGp, premiumImmediateRankRewardPreview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConquestDifficulty {\n");
    sb.append("    minGp: ").append(toIndentedString(minGp)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rankRewardPreview: ").append(toIndentedString(rankRewardPreview)).append("\n");
    sb.append("    immediateRankRewardPreview: ").append(toIndentedString(immediateRankRewardPreview)).append("\n");
    sb.append("    recommendedMinGp: ").append(toIndentedString(recommendedMinGp)).append("\n");
    sb.append("    premiumImmediateRankRewardPreview: ").append(toIndentedString(premiumImmediateRankRewardPreview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minGp");
    openapiFields.add("sector");
    openapiFields.add("nameKey");
    openapiFields.add("id");
    openapiFields.add("rankRewardPreview");
    openapiFields.add("immediateRankRewardPreview");
    openapiFields.add("recommendedMinGp");
    openapiFields.add("premiumImmediateRankRewardPreview");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConquestDifficulty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConquestDifficulty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConquestDifficulty is not found in the empty JSON string", ConquestDifficulty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConquestDifficulty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConquestDifficulty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("sector") != null && !jsonObj.get("sector").isJsonNull()) {
        JsonArray jsonArraysector = jsonObj.getAsJsonArray("sector");
        if (jsonArraysector != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sector").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sector` to be an array in the JSON string but got `%s`", jsonObj.get("sector").toString()));
          }

          // validate the optional field `sector` (array)
          for (int i = 0; i < jsonArraysector.size(); i++) {
            ConquestSector.validateJsonElement(jsonArraysector.get(i));
          };
        }
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        CampaignNodeDifficulty.validateJsonElement(jsonObj.get("id"));
      }
      if (jsonObj.get("rankRewardPreview") != null && !jsonObj.get("rankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayrankRewardPreview = jsonObj.getAsJsonArray("rankRewardPreview");
        if (jsonArrayrankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rankRewardPreview").toString()));
          }

          // validate the optional field `rankRewardPreview` (array)
          for (int i = 0; i < jsonArrayrankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayrankRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("immediateRankRewardPreview") != null && !jsonObj.get("immediateRankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayimmediateRankRewardPreview = jsonObj.getAsJsonArray("immediateRankRewardPreview");
        if (jsonArrayimmediateRankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("immediateRankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `immediateRankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("immediateRankRewardPreview").toString()));
          }

          // validate the optional field `immediateRankRewardPreview` (array)
          for (int i = 0; i < jsonArrayimmediateRankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayimmediateRankRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("premiumImmediateRankRewardPreview") != null && !jsonObj.get("premiumImmediateRankRewardPreview").isJsonNull()) {
        JsonArray jsonArraypremiumImmediateRankRewardPreview = jsonObj.getAsJsonArray("premiumImmediateRankRewardPreview");
        if (jsonArraypremiumImmediateRankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("premiumImmediateRankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `premiumImmediateRankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("premiumImmediateRankRewardPreview").toString()));
          }

          // validate the optional field `premiumImmediateRankRewardPreview` (array)
          for (int i = 0; i < jsonArraypremiumImmediateRankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArraypremiumImmediateRankRewardPreview.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConquestDifficulty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConquestDifficulty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConquestDifficulty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConquestDifficulty.class));

       return (TypeAdapter<T>) new TypeAdapter<ConquestDifficulty>() {
           @Override
           public void write(JsonWriter out, ConquestDifficulty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConquestDifficulty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConquestDifficulty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConquestDifficulty
   * @throws IOException if the JSON string is invalid with respect to ConquestDifficulty
   */
  public static ConquestDifficulty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConquestDifficulty.class);
  }

  /**
   * Convert an instance of ConquestDifficulty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

