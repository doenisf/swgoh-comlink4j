/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.RelicTier;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * SkillTierDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class SkillTierDefinition {
  public static final String SERIALIZED_NAME_RECIPE_ID = "recipeId";
  @SerializedName(SERIALIZED_NAME_RECIPE_ID)
  private String recipeId;

  public static final String SERIALIZED_NAME_REQUIRED_UNIT_LEVEL = "requiredUnitLevel";
  @SerializedName(SERIALIZED_NAME_REQUIRED_UNIT_LEVEL)
  private Integer requiredUnitLevel;

  public static final String SERIALIZED_NAME_REQUIRED_UNIT_RARITY = "requiredUnitRarity";
  @SerializedName(SERIALIZED_NAME_REQUIRED_UNIT_RARITY)
  private Rarity requiredUnitRarity;

  public static final String SERIALIZED_NAME_REQUIRED_UNIT_TIER = "requiredUnitTier";
  @SerializedName(SERIALIZED_NAME_REQUIRED_UNIT_TIER)
  private UnitTier requiredUnitTier;

  public static final String SERIALIZED_NAME_POWER_OVERRIDE_TAG = "powerOverrideTag";
  @SerializedName(SERIALIZED_NAME_POWER_OVERRIDE_TAG)
  private String powerOverrideTag;

  public static final String SERIALIZED_NAME_REQUIRED_UNIT_RELIC_TIER = "requiredUnitRelicTier";
  @SerializedName(SERIALIZED_NAME_REQUIRED_UNIT_RELIC_TIER)
  private RelicTier requiredUnitRelicTier;

  public static final String SERIALIZED_NAME_IS_ZETA_TIER = "isZetaTier";
  @SerializedName(SERIALIZED_NAME_IS_ZETA_TIER)
  private Boolean isZetaTier;

  public static final String SERIALIZED_NAME_IS_OMICRON_TIER = "isOmicronTier";
  @SerializedName(SERIALIZED_NAME_IS_OMICRON_TIER)
  private Boolean isOmicronTier;

  public SkillTierDefinition() {
  }

  public SkillTierDefinition recipeId(String recipeId) {
    this.recipeId = recipeId;
    return this;
  }

  /**
   * Get recipeId
   * @return recipeId
   */
  @javax.annotation.Nullable
  public String getRecipeId() {
    return recipeId;
  }

  public void setRecipeId(String recipeId) {
    this.recipeId = recipeId;
  }


  public SkillTierDefinition requiredUnitLevel(Integer requiredUnitLevel) {
    this.requiredUnitLevel = requiredUnitLevel;
    return this;
  }

  /**
   * Get requiredUnitLevel
   * @return requiredUnitLevel
   */
  @javax.annotation.Nullable
  public Integer getRequiredUnitLevel() {
    return requiredUnitLevel;
  }

  public void setRequiredUnitLevel(Integer requiredUnitLevel) {
    this.requiredUnitLevel = requiredUnitLevel;
  }


  public SkillTierDefinition requiredUnitRarity(Rarity requiredUnitRarity) {
    this.requiredUnitRarity = requiredUnitRarity;
    return this;
  }

  /**
   * Get requiredUnitRarity
   * @return requiredUnitRarity
   */
  @javax.annotation.Nullable
  public Rarity getRequiredUnitRarity() {
    return requiredUnitRarity;
  }

  public void setRequiredUnitRarity(Rarity requiredUnitRarity) {
    this.requiredUnitRarity = requiredUnitRarity;
  }


  public SkillTierDefinition requiredUnitTier(UnitTier requiredUnitTier) {
    this.requiredUnitTier = requiredUnitTier;
    return this;
  }

  /**
   * Get requiredUnitTier
   * @return requiredUnitTier
   */
  @javax.annotation.Nullable
  public UnitTier getRequiredUnitTier() {
    return requiredUnitTier;
  }

  public void setRequiredUnitTier(UnitTier requiredUnitTier) {
    this.requiredUnitTier = requiredUnitTier;
  }


  public SkillTierDefinition powerOverrideTag(String powerOverrideTag) {
    this.powerOverrideTag = powerOverrideTag;
    return this;
  }

  /**
   * Get powerOverrideTag
   * @return powerOverrideTag
   */
  @javax.annotation.Nullable
  public String getPowerOverrideTag() {
    return powerOverrideTag;
  }

  public void setPowerOverrideTag(String powerOverrideTag) {
    this.powerOverrideTag = powerOverrideTag;
  }


  public SkillTierDefinition requiredUnitRelicTier(RelicTier requiredUnitRelicTier) {
    this.requiredUnitRelicTier = requiredUnitRelicTier;
    return this;
  }

  /**
   * Get requiredUnitRelicTier
   * @return requiredUnitRelicTier
   */
  @javax.annotation.Nullable
  public RelicTier getRequiredUnitRelicTier() {
    return requiredUnitRelicTier;
  }

  public void setRequiredUnitRelicTier(RelicTier requiredUnitRelicTier) {
    this.requiredUnitRelicTier = requiredUnitRelicTier;
  }


  public SkillTierDefinition isZetaTier(Boolean isZetaTier) {
    this.isZetaTier = isZetaTier;
    return this;
  }

  /**
   * Get isZetaTier
   * @return isZetaTier
   */
  @javax.annotation.Nullable
  public Boolean getIsZetaTier() {
    return isZetaTier;
  }

  public void setIsZetaTier(Boolean isZetaTier) {
    this.isZetaTier = isZetaTier;
  }


  public SkillTierDefinition isOmicronTier(Boolean isOmicronTier) {
    this.isOmicronTier = isOmicronTier;
    return this;
  }

  /**
   * Get isOmicronTier
   * @return isOmicronTier
   */
  @javax.annotation.Nullable
  public Boolean getIsOmicronTier() {
    return isOmicronTier;
  }

  public void setIsOmicronTier(Boolean isOmicronTier) {
    this.isOmicronTier = isOmicronTier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkillTierDefinition skillTierDefinition = (SkillTierDefinition) o;
    return Objects.equals(this.recipeId, skillTierDefinition.recipeId) &&
        Objects.equals(this.requiredUnitLevel, skillTierDefinition.requiredUnitLevel) &&
        Objects.equals(this.requiredUnitRarity, skillTierDefinition.requiredUnitRarity) &&
        Objects.equals(this.requiredUnitTier, skillTierDefinition.requiredUnitTier) &&
        Objects.equals(this.powerOverrideTag, skillTierDefinition.powerOverrideTag) &&
        Objects.equals(this.requiredUnitRelicTier, skillTierDefinition.requiredUnitRelicTier) &&
        Objects.equals(this.isZetaTier, skillTierDefinition.isZetaTier) &&
        Objects.equals(this.isOmicronTier, skillTierDefinition.isOmicronTier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipeId, requiredUnitLevel, requiredUnitRarity, requiredUnitTier, powerOverrideTag, requiredUnitRelicTier, isZetaTier, isOmicronTier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkillTierDefinition {\n");
    sb.append("    recipeId: ").append(toIndentedString(recipeId)).append("\n");
    sb.append("    requiredUnitLevel: ").append(toIndentedString(requiredUnitLevel)).append("\n");
    sb.append("    requiredUnitRarity: ").append(toIndentedString(requiredUnitRarity)).append("\n");
    sb.append("    requiredUnitTier: ").append(toIndentedString(requiredUnitTier)).append("\n");
    sb.append("    powerOverrideTag: ").append(toIndentedString(powerOverrideTag)).append("\n");
    sb.append("    requiredUnitRelicTier: ").append(toIndentedString(requiredUnitRelicTier)).append("\n");
    sb.append("    isZetaTier: ").append(toIndentedString(isZetaTier)).append("\n");
    sb.append("    isOmicronTier: ").append(toIndentedString(isOmicronTier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recipeId");
    openapiFields.add("requiredUnitLevel");
    openapiFields.add("requiredUnitRarity");
    openapiFields.add("requiredUnitTier");
    openapiFields.add("powerOverrideTag");
    openapiFields.add("requiredUnitRelicTier");
    openapiFields.add("isZetaTier");
    openapiFields.add("isOmicronTier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkillTierDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkillTierDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkillTierDefinition is not found in the empty JSON string", SkillTierDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkillTierDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkillTierDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recipeId") != null && !jsonObj.get("recipeId").isJsonNull()) && !jsonObj.get("recipeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipeId").toString()));
      }
      // validate the optional field `requiredUnitRarity`
      if (jsonObj.get("requiredUnitRarity") != null && !jsonObj.get("requiredUnitRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("requiredUnitRarity"));
      }
      // validate the optional field `requiredUnitTier`
      if (jsonObj.get("requiredUnitTier") != null && !jsonObj.get("requiredUnitTier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("requiredUnitTier"));
      }
      if ((jsonObj.get("powerOverrideTag") != null && !jsonObj.get("powerOverrideTag").isJsonNull()) && !jsonObj.get("powerOverrideTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `powerOverrideTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("powerOverrideTag").toString()));
      }
      // validate the optional field `requiredUnitRelicTier`
      if (jsonObj.get("requiredUnitRelicTier") != null && !jsonObj.get("requiredUnitRelicTier").isJsonNull()) {
        RelicTier.validateJsonElement(jsonObj.get("requiredUnitRelicTier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkillTierDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkillTierDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkillTierDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkillTierDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<SkillTierDefinition>() {
           @Override
           public void write(JsonWriter out, SkillTierDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkillTierDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkillTierDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkillTierDefinition
   * @throws IOException if the JSON string is invalid with respect to SkillTierDefinition
   */
  public static SkillTierDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkillTierDefinition.class);
  }

  /**
   * Convert an instance of SkillTierDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

