/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.AbilityReference;
import io.github.doenisf.comlink4j.model.BucketItem;
import io.github.doenisf.comlink4j.model.CampaignElementProgress;
import io.github.doenisf.comlink4j.model.CampaignMissionEnemyPreview;
import io.github.doenisf.comlink4j.model.CampaignNodeEncounter;
import io.github.doenisf.comlink4j.model.CombatType;
import io.github.doenisf.comlink4j.model.ConditionalBucket;
import io.github.doenisf.comlink4j.model.DynamicDescription;
import io.github.doenisf.comlink4j.model.EntryCategoryAllowed;
import io.github.doenisf.comlink4j.model.ForcedPlayerSquad;
import io.github.doenisf.comlink4j.model.ItemType;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.Position;
import io.github.doenisf.comlink4j.model.RaidPointsStructure;
import io.github.doenisf.comlink4j.model.RankRewardPreview;
import io.github.doenisf.comlink4j.model.UnitReplacement;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * CampaignNodeMission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CampaignNodeMission {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public static final String SERIALIZED_NAME_ENEMY_PREVIEW = "enemyPreview";
  @SerializedName(SERIALIZED_NAME_ENEMY_PREVIEW)
  private List<BucketItem> enemyPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD_PREVIEW = "rewardPreview";
  @SerializedName(SERIALIZED_NAME_REWARD_PREVIEW)
  private List<BucketItem> rewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGN_NODE_ENCOUNTER = "campaignNodeEncounter";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NODE_ENCOUNTER)
  private List<CampaignNodeEncounter> campaignNodeEncounter = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUDIO_KEY = "audioKey";
  @SerializedName(SERIALIZED_NAME_AUDIO_KEY)
  private String audioKey;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private CampaignElementProgress progress;

  public static final String SERIALIZED_NAME_ENTRY_COST_REQUIREMENT = "entryCostRequirement";
  @SerializedName(SERIALIZED_NAME_ENTRY_COST_REQUIREMENT)
  private List<BucketItem> entryCostRequirement = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_SHORT_NAME_KEY = "shortNameKey";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME_KEY)
  private String shortNameKey;

  public static final String SERIALIZED_NAME_GROUP_NAME_KEY = "groupNameKey";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME_KEY)
  private String groupNameKey;

  public static final String SERIALIZED_NAME_GROUP_IMAGE = "groupImage";
  @SerializedName(SERIALIZED_NAME_GROUP_IMAGE)
  private String groupImage;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY = "unlockRequirementLocalizationKey";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY)
  private String unlockRequirementLocalizationKey;

  public static final String SERIALIZED_NAME_COOLDOWN_KEY = "cooldownKey";
  @SerializedName(SERIALIZED_NAME_COOLDOWN_KEY)
  private String cooldownKey;

  public static final String SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY = "dailyBattleCapKey";
  @SerializedName(SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY)
  private String dailyBattleCapKey;

  public static final String SERIALIZED_NAME_FIRST_COMPLETE_REWARD_PREVIEW = "firstCompleteRewardPreview";
  @SerializedName(SERIALIZED_NAME_FIRST_COMPLETE_REWARD_PREVIEW)
  private List<BucketItem> firstCompleteRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENEMY_UNIT_PREVIEW = "enemyUnitPreview";
  @SerializedName(SERIALIZED_NAME_ENEMY_UNIT_PREVIEW)
  private List<CampaignMissionEnemyPreview> enemyUnitPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFAB = "prefab";
  @SerializedName(SERIALIZED_NAME_PREFAB)
  private String prefab;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Position position;

  public static final String SERIALIZED_NAME_PLAYER_ABILITY_REF = "playerAbilityRef";
  @SerializedName(SERIALIZED_NAME_PLAYER_ABILITY_REF)
  private List<AbilityReference> playerAbilityRef = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVATE_COST = "activateCost";
  @SerializedName(SERIALIZED_NAME_ACTIVATE_COST)
  private List<BucketItem> activateCost = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK_REWARD_PREVIEW = "rankRewardPreview";
  @SerializedName(SERIALIZED_NAME_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> rankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL_IMAGE = "detailImage";
  @SerializedName(SERIALIZED_NAME_DETAIL_IMAGE)
  private String detailImage;

  public static final String SERIALIZED_NAME_DETAIL_DESC_KEY = "detailDescKey";
  @SerializedName(SERIALIZED_NAME_DETAIL_DESC_KEY)
  private String detailDescKey;

  public static final String SERIALIZED_NAME_RAID_CONFIG_ID = "raidConfigId";
  @SerializedName(SERIALIZED_NAME_RAID_CONFIG_ID)
  private String raidConfigId;

  public static final String SERIALIZED_NAME_DYNAMIC_DESCRIPTION = "dynamicDescription";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DESCRIPTION)
  private List<DynamicDescription> dynamicDescription = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODE_DISPLAY_ITEM = "nodeDisplayItem";
  @SerializedName(SERIALIZED_NAME_NODE_DISPLAY_ITEM)
  private ItemType nodeDisplayItem;

  public static final String SERIALIZED_NAME_GRIND_ENABLED = "grindEnabled";
  @SerializedName(SERIALIZED_NAME_GRIND_ENABLED)
  private Boolean grindEnabled;

  public static final String SERIALIZED_NAME_HAS_FORCED_ALLY = "hasForcedAlly";
  @SerializedName(SERIALIZED_NAME_HAS_FORCED_ALLY)
  private Boolean hasForcedAlly;

  public static final String SERIALIZED_NAME_BATTLE_SUPPORT_ALLOWED = "battleSupportAllowed";
  @SerializedName(SERIALIZED_NAME_BATTLE_SUPPORT_ALLOWED)
  private Boolean battleSupportAllowed;

  public static final String SERIALIZED_NAME_AUTO_BATTLE_ENABLED = "autoBattleEnabled";
  @SerializedName(SERIALIZED_NAME_AUTO_BATTLE_ENABLED)
  private Boolean autoBattleEnabled;

  public static final String SERIALIZED_NAME_RETREAT_ENABLED = "retreatEnabled";
  @SerializedName(SERIALIZED_NAME_RETREAT_ENABLED)
  private Boolean retreatEnabled;

  public static final String SERIALIZED_NAME_FORCED_PLAYER_SQUAD = "forcedPlayerSquad";
  @SerializedName(SERIALIZED_NAME_FORCED_PLAYER_SQUAD)
  private ForcedPlayerSquad forcedPlayerSquad;

  public static final String SERIALIZED_NAME_GRANTED_ABILITIES = "grantedAbilities";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITIES)
  private List<MissionGrantedAbility> grantedAbilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_COOLDOWN_CONDITIONAL_OVERRIDE_KEY = "cooldownConditionalOverrideKey";
  @SerializedName(SERIALIZED_NAME_COOLDOWN_CONDITIONAL_OVERRIDE_KEY)
  private String cooldownConditionalOverrideKey;

  public static final String SERIALIZED_NAME_HOLONODE_PLANET_PREFAB_NAME = "holonodePlanetPrefabName";
  @SerializedName(SERIALIZED_NAME_HOLONODE_PLANET_PREFAB_NAME)
  private String holonodePlanetPrefabName;

  public static final String SERIALIZED_NAME_BATTLE_SPEED_ADJUSTABLE = "battleSpeedAdjustable";
  @SerializedName(SERIALIZED_NAME_BATTLE_SPEED_ADJUSTABLE)
  private Boolean battleSpeedAdjustable;

  public static final String SERIALIZED_NAME_REQUIREMENT_OVERRIDE_KEY = "requirementOverrideKey";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT_OVERRIDE_KEY)
  private String requirementOverrideKey;

  public static final String SERIALIZED_NAME_SIMMABLE_OVERRIDE_ENABLED = "simmableOverrideEnabled";
  @SerializedName(SERIALIZED_NAME_SIMMABLE_OVERRIDE_ENABLED)
  private Boolean simmableOverrideEnabled;

  public static final String SERIALIZED_NAME_CONDITIONAL_REWARDS_PREVIEW = "conditionalRewardsPreview";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_REWARDS_PREVIEW)
  private List<ConditionalBucket> conditionalRewardsPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONAL_ENTRY_COST_OVERRIDE = "conditionalEntryCostOverride";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_ENTRY_COST_OVERRIDE)
  private ConditionalBucket conditionalEntryCostOverride;

  public static final String SERIALIZED_NAME_RECOMMENDATION_KEY = "recommendationKey";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_KEY)
  private String recommendationKey;

  public static final String SERIALIZED_NAME_INSTANCE_FIRST_COMPLETE_REWARD_PREVIEW = "instanceFirstCompleteRewardPreview";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FIRST_COMPLETE_REWARD_PREVIEW)
  private List<BucketItem> instanceFirstCompleteRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERVIEW_LOC_KEY = "overviewLocKey";
  @SerializedName(SERIALIZED_NAME_OVERVIEW_LOC_KEY)
  private String overviewLocKey;

  public static final String SERIALIZED_NAME_RECOMMENDED_GP = "recommendedGp";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_GP)
  private Integer recommendedGp;

  public static final String SERIALIZED_NAME_BATTLE_DURATION_LIMIT = "battleDurationLimit";
  @SerializedName(SERIALIZED_NAME_BATTLE_DURATION_LIMIT)
  private Long battleDurationLimit;

  public static final String SERIALIZED_NAME_RECOMMENDED_UNIT_GP = "recommendedUnitGp";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_UNIT_GP)
  private Integer recommendedUnitGp;

  public static final String SERIALIZED_NAME_VOLATILE_ACCESS = "volatileAccess";
  @SerializedName(SERIALIZED_NAME_VOLATILE_ACCESS)
  private Boolean volatileAccess;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_ID = "unlockRequirementId";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_ID)
  private String unlockRequirementId;

  public static final String SERIALIZED_NAME_VISIBILITY_REQUIREMENT_ID = "visibilityRequirementId";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_REQUIREMENT_ID)
  private String visibilityRequirementId;

  public static final String SERIALIZED_NAME_RAID_POINTS_STRUCTURE = "raidPointsStructure";
  @SerializedName(SERIALIZED_NAME_RAID_POINTS_STRUCTURE)
  private RaidPointsStructure raidPointsStructure;

  public static final String SERIALIZED_NAME_FEATURED = "featured";
  @SerializedName(SERIALIZED_NAME_FEATURED)
  private Boolean featured;

  public static final String SERIALIZED_NAME_IMMEDIATE_REGULAR_RANK_REWARD_PREVIEW = "immediateRegularRankRewardPreview";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_REGULAR_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> immediateRegularRankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_POINTS_PER_ATTEMPT = "maxPointsPerAttempt";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS_PER_ATTEMPT)
  private Integer maxPointsPerAttempt;

  public static final String SERIALIZED_NAME_UNIT_REPLACEMENT = "unitReplacement";
  @SerializedName(SERIALIZED_NAME_UNIT_REPLACEMENT)
  private List<UnitReplacement> unitReplacement = new ArrayList<>();

  public CampaignNodeMission() {
  }

  public CampaignNodeMission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CampaignNodeMission nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public CampaignNodeMission descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public CampaignNodeMission combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }


  public CampaignNodeMission enemyPreview(List<BucketItem> enemyPreview) {
    this.enemyPreview = enemyPreview;
    return this;
  }

  public CampaignNodeMission addEnemyPreviewItem(BucketItem enemyPreviewItem) {
    if (this.enemyPreview == null) {
      this.enemyPreview = new ArrayList<>();
    }
    this.enemyPreview.add(enemyPreviewItem);
    return this;
  }

  /**
   * Get enemyPreview
   * @return enemyPreview
   */
  @javax.annotation.Nullable
  public List<BucketItem> getEnemyPreview() {
    return enemyPreview;
  }

  public void setEnemyPreview(List<BucketItem> enemyPreview) {
    this.enemyPreview = enemyPreview;
  }


  public CampaignNodeMission rewardPreview(List<BucketItem> rewardPreview) {
    this.rewardPreview = rewardPreview;
    return this;
  }

  public CampaignNodeMission addRewardPreviewItem(BucketItem rewardPreviewItem) {
    if (this.rewardPreview == null) {
      this.rewardPreview = new ArrayList<>();
    }
    this.rewardPreview.add(rewardPreviewItem);
    return this;
  }

  /**
   * Get rewardPreview
   * @return rewardPreview
   */
  @javax.annotation.Nullable
  public List<BucketItem> getRewardPreview() {
    return rewardPreview;
  }

  public void setRewardPreview(List<BucketItem> rewardPreview) {
    this.rewardPreview = rewardPreview;
  }


  public CampaignNodeMission campaignNodeEncounter(List<CampaignNodeEncounter> campaignNodeEncounter) {
    this.campaignNodeEncounter = campaignNodeEncounter;
    return this;
  }

  public CampaignNodeMission addCampaignNodeEncounterItem(CampaignNodeEncounter campaignNodeEncounterItem) {
    if (this.campaignNodeEncounter == null) {
      this.campaignNodeEncounter = new ArrayList<>();
    }
    this.campaignNodeEncounter.add(campaignNodeEncounterItem);
    return this;
  }

  /**
   * Get campaignNodeEncounter
   * @return campaignNodeEncounter
   */
  @javax.annotation.Nullable
  public List<CampaignNodeEncounter> getCampaignNodeEncounter() {
    return campaignNodeEncounter;
  }

  public void setCampaignNodeEncounter(List<CampaignNodeEncounter> campaignNodeEncounter) {
    this.campaignNodeEncounter = campaignNodeEncounter;
  }


  public CampaignNodeMission audioKey(String audioKey) {
    this.audioKey = audioKey;
    return this;
  }

  /**
   * Get audioKey
   * @return audioKey
   */
  @javax.annotation.Nullable
  public String getAudioKey() {
    return audioKey;
  }

  public void setAudioKey(String audioKey) {
    this.audioKey = audioKey;
  }


  public CampaignNodeMission progress(CampaignElementProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public CampaignElementProgress getProgress() {
    return progress;
  }

  public void setProgress(CampaignElementProgress progress) {
    this.progress = progress;
  }


  public CampaignNodeMission entryCostRequirement(List<BucketItem> entryCostRequirement) {
    this.entryCostRequirement = entryCostRequirement;
    return this;
  }

  public CampaignNodeMission addEntryCostRequirementItem(BucketItem entryCostRequirementItem) {
    if (this.entryCostRequirement == null) {
      this.entryCostRequirement = new ArrayList<>();
    }
    this.entryCostRequirement.add(entryCostRequirementItem);
    return this;
  }

  /**
   * Get entryCostRequirement
   * @return entryCostRequirement
   */
  @javax.annotation.Nullable
  public List<BucketItem> getEntryCostRequirement() {
    return entryCostRequirement;
  }

  public void setEntryCostRequirement(List<BucketItem> entryCostRequirement) {
    this.entryCostRequirement = entryCostRequirement;
  }


  public CampaignNodeMission entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public CampaignNodeMission shortNameKey(String shortNameKey) {
    this.shortNameKey = shortNameKey;
    return this;
  }

  /**
   * Get shortNameKey
   * @return shortNameKey
   */
  @javax.annotation.Nullable
  public String getShortNameKey() {
    return shortNameKey;
  }

  public void setShortNameKey(String shortNameKey) {
    this.shortNameKey = shortNameKey;
  }


  public CampaignNodeMission groupNameKey(String groupNameKey) {
    this.groupNameKey = groupNameKey;
    return this;
  }

  /**
   * Get groupNameKey
   * @return groupNameKey
   */
  @javax.annotation.Nullable
  public String getGroupNameKey() {
    return groupNameKey;
  }

  public void setGroupNameKey(String groupNameKey) {
    this.groupNameKey = groupNameKey;
  }


  public CampaignNodeMission groupImage(String groupImage) {
    this.groupImage = groupImage;
    return this;
  }

  /**
   * Get groupImage
   * @return groupImage
   */
  @javax.annotation.Nullable
  public String getGroupImage() {
    return groupImage;
  }

  public void setGroupImage(String groupImage) {
    this.groupImage = groupImage;
  }


  public CampaignNodeMission unlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
    return this;
  }

  /**
   * Get unlockRequirementLocalizationKey
   * @return unlockRequirementLocalizationKey
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementLocalizationKey() {
    return unlockRequirementLocalizationKey;
  }

  public void setUnlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
  }


  public CampaignNodeMission cooldownKey(String cooldownKey) {
    this.cooldownKey = cooldownKey;
    return this;
  }

  /**
   * Get cooldownKey
   * @return cooldownKey
   */
  @javax.annotation.Nullable
  public String getCooldownKey() {
    return cooldownKey;
  }

  public void setCooldownKey(String cooldownKey) {
    this.cooldownKey = cooldownKey;
  }


  public CampaignNodeMission dailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
    return this;
  }

  /**
   * Get dailyBattleCapKey
   * @return dailyBattleCapKey
   */
  @javax.annotation.Nullable
  public String getDailyBattleCapKey() {
    return dailyBattleCapKey;
  }

  public void setDailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
  }


  public CampaignNodeMission firstCompleteRewardPreview(List<BucketItem> firstCompleteRewardPreview) {
    this.firstCompleteRewardPreview = firstCompleteRewardPreview;
    return this;
  }

  public CampaignNodeMission addFirstCompleteRewardPreviewItem(BucketItem firstCompleteRewardPreviewItem) {
    if (this.firstCompleteRewardPreview == null) {
      this.firstCompleteRewardPreview = new ArrayList<>();
    }
    this.firstCompleteRewardPreview.add(firstCompleteRewardPreviewItem);
    return this;
  }

  /**
   * Get firstCompleteRewardPreview
   * @return firstCompleteRewardPreview
   */
  @javax.annotation.Nullable
  public List<BucketItem> getFirstCompleteRewardPreview() {
    return firstCompleteRewardPreview;
  }

  public void setFirstCompleteRewardPreview(List<BucketItem> firstCompleteRewardPreview) {
    this.firstCompleteRewardPreview = firstCompleteRewardPreview;
  }


  public CampaignNodeMission enemyUnitPreview(List<CampaignMissionEnemyPreview> enemyUnitPreview) {
    this.enemyUnitPreview = enemyUnitPreview;
    return this;
  }

  public CampaignNodeMission addEnemyUnitPreviewItem(CampaignMissionEnemyPreview enemyUnitPreviewItem) {
    if (this.enemyUnitPreview == null) {
      this.enemyUnitPreview = new ArrayList<>();
    }
    this.enemyUnitPreview.add(enemyUnitPreviewItem);
    return this;
  }

  /**
   * Get enemyUnitPreview
   * @return enemyUnitPreview
   */
  @javax.annotation.Nullable
  public List<CampaignMissionEnemyPreview> getEnemyUnitPreview() {
    return enemyUnitPreview;
  }

  public void setEnemyUnitPreview(List<CampaignMissionEnemyPreview> enemyUnitPreview) {
    this.enemyUnitPreview = enemyUnitPreview;
  }


  public CampaignNodeMission prefab(String prefab) {
    this.prefab = prefab;
    return this;
  }

  /**
   * Get prefab
   * @return prefab
   */
  @javax.annotation.Nullable
  public String getPrefab() {
    return prefab;
  }

  public void setPrefab(String prefab) {
    this.prefab = prefab;
  }


  public CampaignNodeMission position(Position position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public Position getPosition() {
    return position;
  }

  public void setPosition(Position position) {
    this.position = position;
  }


  public CampaignNodeMission playerAbilityRef(List<AbilityReference> playerAbilityRef) {
    this.playerAbilityRef = playerAbilityRef;
    return this;
  }

  public CampaignNodeMission addPlayerAbilityRefItem(AbilityReference playerAbilityRefItem) {
    if (this.playerAbilityRef == null) {
      this.playerAbilityRef = new ArrayList<>();
    }
    this.playerAbilityRef.add(playerAbilityRefItem);
    return this;
  }

  /**
   * Get playerAbilityRef
   * @return playerAbilityRef
   */
  @javax.annotation.Nullable
  public List<AbilityReference> getPlayerAbilityRef() {
    return playerAbilityRef;
  }

  public void setPlayerAbilityRef(List<AbilityReference> playerAbilityRef) {
    this.playerAbilityRef = playerAbilityRef;
  }


  public CampaignNodeMission activateCost(List<BucketItem> activateCost) {
    this.activateCost = activateCost;
    return this;
  }

  public CampaignNodeMission addActivateCostItem(BucketItem activateCostItem) {
    if (this.activateCost == null) {
      this.activateCost = new ArrayList<>();
    }
    this.activateCost.add(activateCostItem);
    return this;
  }

  /**
   * Get activateCost
   * @return activateCost
   */
  @javax.annotation.Nullable
  public List<BucketItem> getActivateCost() {
    return activateCost;
  }

  public void setActivateCost(List<BucketItem> activateCost) {
    this.activateCost = activateCost;
  }


  public CampaignNodeMission rankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
    return this;
  }

  public CampaignNodeMission addRankRewardPreviewItem(RankRewardPreview rankRewardPreviewItem) {
    if (this.rankRewardPreview == null) {
      this.rankRewardPreview = new ArrayList<>();
    }
    this.rankRewardPreview.add(rankRewardPreviewItem);
    return this;
  }

  /**
   * Get rankRewardPreview
   * @return rankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getRankRewardPreview() {
    return rankRewardPreview;
  }

  public void setRankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
  }


  public CampaignNodeMission detailImage(String detailImage) {
    this.detailImage = detailImage;
    return this;
  }

  /**
   * Get detailImage
   * @return detailImage
   */
  @javax.annotation.Nullable
  public String getDetailImage() {
    return detailImage;
  }

  public void setDetailImage(String detailImage) {
    this.detailImage = detailImage;
  }


  public CampaignNodeMission detailDescKey(String detailDescKey) {
    this.detailDescKey = detailDescKey;
    return this;
  }

  /**
   * Get detailDescKey
   * @return detailDescKey
   */
  @javax.annotation.Nullable
  public String getDetailDescKey() {
    return detailDescKey;
  }

  public void setDetailDescKey(String detailDescKey) {
    this.detailDescKey = detailDescKey;
  }


  public CampaignNodeMission raidConfigId(String raidConfigId) {
    this.raidConfigId = raidConfigId;
    return this;
  }

  /**
   * Get raidConfigId
   * @return raidConfigId
   */
  @javax.annotation.Nullable
  public String getRaidConfigId() {
    return raidConfigId;
  }

  public void setRaidConfigId(String raidConfigId) {
    this.raidConfigId = raidConfigId;
  }


  public CampaignNodeMission dynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
    return this;
  }

  public CampaignNodeMission addDynamicDescriptionItem(DynamicDescription dynamicDescriptionItem) {
    if (this.dynamicDescription == null) {
      this.dynamicDescription = new ArrayList<>();
    }
    this.dynamicDescription.add(dynamicDescriptionItem);
    return this;
  }

  /**
   * Get dynamicDescription
   * @return dynamicDescription
   */
  @javax.annotation.Nullable
  public List<DynamicDescription> getDynamicDescription() {
    return dynamicDescription;
  }

  public void setDynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
  }


  public CampaignNodeMission nodeDisplayItem(ItemType nodeDisplayItem) {
    this.nodeDisplayItem = nodeDisplayItem;
    return this;
  }

  /**
   * Get nodeDisplayItem
   * @return nodeDisplayItem
   */
  @javax.annotation.Nullable
  public ItemType getNodeDisplayItem() {
    return nodeDisplayItem;
  }

  public void setNodeDisplayItem(ItemType nodeDisplayItem) {
    this.nodeDisplayItem = nodeDisplayItem;
  }


  public CampaignNodeMission grindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
    return this;
  }

  /**
   * Get grindEnabled
   * @return grindEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGrindEnabled() {
    return grindEnabled;
  }

  public void setGrindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
  }


  public CampaignNodeMission hasForcedAlly(Boolean hasForcedAlly) {
    this.hasForcedAlly = hasForcedAlly;
    return this;
  }

  /**
   * Get hasForcedAlly
   * @return hasForcedAlly
   */
  @javax.annotation.Nullable
  public Boolean getHasForcedAlly() {
    return hasForcedAlly;
  }

  public void setHasForcedAlly(Boolean hasForcedAlly) {
    this.hasForcedAlly = hasForcedAlly;
  }


  public CampaignNodeMission battleSupportAllowed(Boolean battleSupportAllowed) {
    this.battleSupportAllowed = battleSupportAllowed;
    return this;
  }

  /**
   * Get battleSupportAllowed
   * @return battleSupportAllowed
   */
  @javax.annotation.Nullable
  public Boolean getBattleSupportAllowed() {
    return battleSupportAllowed;
  }

  public void setBattleSupportAllowed(Boolean battleSupportAllowed) {
    this.battleSupportAllowed = battleSupportAllowed;
  }


  public CampaignNodeMission autoBattleEnabled(Boolean autoBattleEnabled) {
    this.autoBattleEnabled = autoBattleEnabled;
    return this;
  }

  /**
   * Get autoBattleEnabled
   * @return autoBattleEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoBattleEnabled() {
    return autoBattleEnabled;
  }

  public void setAutoBattleEnabled(Boolean autoBattleEnabled) {
    this.autoBattleEnabled = autoBattleEnabled;
  }


  public CampaignNodeMission retreatEnabled(Boolean retreatEnabled) {
    this.retreatEnabled = retreatEnabled;
    return this;
  }

  /**
   * Get retreatEnabled
   * @return retreatEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRetreatEnabled() {
    return retreatEnabled;
  }

  public void setRetreatEnabled(Boolean retreatEnabled) {
    this.retreatEnabled = retreatEnabled;
  }


  public CampaignNodeMission forcedPlayerSquad(ForcedPlayerSquad forcedPlayerSquad) {
    this.forcedPlayerSquad = forcedPlayerSquad;
    return this;
  }

  /**
   * Get forcedPlayerSquad
   * @return forcedPlayerSquad
   */
  @javax.annotation.Nullable
  public ForcedPlayerSquad getForcedPlayerSquad() {
    return forcedPlayerSquad;
  }

  public void setForcedPlayerSquad(ForcedPlayerSquad forcedPlayerSquad) {
    this.forcedPlayerSquad = forcedPlayerSquad;
  }


  public CampaignNodeMission grantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
    return this;
  }

  public CampaignNodeMission addGrantedAbilitiesItem(MissionGrantedAbility grantedAbilitiesItem) {
    if (this.grantedAbilities == null) {
      this.grantedAbilities = new ArrayList<>();
    }
    this.grantedAbilities.add(grantedAbilitiesItem);
    return this;
  }

  /**
   * Get grantedAbilities
   * @return grantedAbilities
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbilities() {
    return grantedAbilities;
  }

  public void setGrantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
  }


  public CampaignNodeMission cooldownConditionalOverrideKey(String cooldownConditionalOverrideKey) {
    this.cooldownConditionalOverrideKey = cooldownConditionalOverrideKey;
    return this;
  }

  /**
   * Get cooldownConditionalOverrideKey
   * @return cooldownConditionalOverrideKey
   */
  @javax.annotation.Nullable
  public String getCooldownConditionalOverrideKey() {
    return cooldownConditionalOverrideKey;
  }

  public void setCooldownConditionalOverrideKey(String cooldownConditionalOverrideKey) {
    this.cooldownConditionalOverrideKey = cooldownConditionalOverrideKey;
  }


  public CampaignNodeMission holonodePlanetPrefabName(String holonodePlanetPrefabName) {
    this.holonodePlanetPrefabName = holonodePlanetPrefabName;
    return this;
  }

  /**
   * Get holonodePlanetPrefabName
   * @return holonodePlanetPrefabName
   */
  @javax.annotation.Nullable
  public String getHolonodePlanetPrefabName() {
    return holonodePlanetPrefabName;
  }

  public void setHolonodePlanetPrefabName(String holonodePlanetPrefabName) {
    this.holonodePlanetPrefabName = holonodePlanetPrefabName;
  }


  public CampaignNodeMission battleSpeedAdjustable(Boolean battleSpeedAdjustable) {
    this.battleSpeedAdjustable = battleSpeedAdjustable;
    return this;
  }

  /**
   * Get battleSpeedAdjustable
   * @return battleSpeedAdjustable
   */
  @javax.annotation.Nullable
  public Boolean getBattleSpeedAdjustable() {
    return battleSpeedAdjustable;
  }

  public void setBattleSpeedAdjustable(Boolean battleSpeedAdjustable) {
    this.battleSpeedAdjustable = battleSpeedAdjustable;
  }


  public CampaignNodeMission requirementOverrideKey(String requirementOverrideKey) {
    this.requirementOverrideKey = requirementOverrideKey;
    return this;
  }

  /**
   * Get requirementOverrideKey
   * @return requirementOverrideKey
   */
  @javax.annotation.Nullable
  public String getRequirementOverrideKey() {
    return requirementOverrideKey;
  }

  public void setRequirementOverrideKey(String requirementOverrideKey) {
    this.requirementOverrideKey = requirementOverrideKey;
  }


  public CampaignNodeMission simmableOverrideEnabled(Boolean simmableOverrideEnabled) {
    this.simmableOverrideEnabled = simmableOverrideEnabled;
    return this;
  }

  /**
   * Get simmableOverrideEnabled
   * @return simmableOverrideEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSimmableOverrideEnabled() {
    return simmableOverrideEnabled;
  }

  public void setSimmableOverrideEnabled(Boolean simmableOverrideEnabled) {
    this.simmableOverrideEnabled = simmableOverrideEnabled;
  }


  public CampaignNodeMission conditionalRewardsPreview(List<ConditionalBucket> conditionalRewardsPreview) {
    this.conditionalRewardsPreview = conditionalRewardsPreview;
    return this;
  }

  public CampaignNodeMission addConditionalRewardsPreviewItem(ConditionalBucket conditionalRewardsPreviewItem) {
    if (this.conditionalRewardsPreview == null) {
      this.conditionalRewardsPreview = new ArrayList<>();
    }
    this.conditionalRewardsPreview.add(conditionalRewardsPreviewItem);
    return this;
  }

  /**
   * Get conditionalRewardsPreview
   * @return conditionalRewardsPreview
   */
  @javax.annotation.Nullable
  public List<ConditionalBucket> getConditionalRewardsPreview() {
    return conditionalRewardsPreview;
  }

  public void setConditionalRewardsPreview(List<ConditionalBucket> conditionalRewardsPreview) {
    this.conditionalRewardsPreview = conditionalRewardsPreview;
  }


  public CampaignNodeMission conditionalEntryCostOverride(ConditionalBucket conditionalEntryCostOverride) {
    this.conditionalEntryCostOverride = conditionalEntryCostOverride;
    return this;
  }

  /**
   * Get conditionalEntryCostOverride
   * @return conditionalEntryCostOverride
   */
  @javax.annotation.Nullable
  public ConditionalBucket getConditionalEntryCostOverride() {
    return conditionalEntryCostOverride;
  }

  public void setConditionalEntryCostOverride(ConditionalBucket conditionalEntryCostOverride) {
    this.conditionalEntryCostOverride = conditionalEntryCostOverride;
  }


  public CampaignNodeMission recommendationKey(String recommendationKey) {
    this.recommendationKey = recommendationKey;
    return this;
  }

  /**
   * Get recommendationKey
   * @return recommendationKey
   */
  @javax.annotation.Nullable
  public String getRecommendationKey() {
    return recommendationKey;
  }

  public void setRecommendationKey(String recommendationKey) {
    this.recommendationKey = recommendationKey;
  }


  public CampaignNodeMission instanceFirstCompleteRewardPreview(List<BucketItem> instanceFirstCompleteRewardPreview) {
    this.instanceFirstCompleteRewardPreview = instanceFirstCompleteRewardPreview;
    return this;
  }

  public CampaignNodeMission addInstanceFirstCompleteRewardPreviewItem(BucketItem instanceFirstCompleteRewardPreviewItem) {
    if (this.instanceFirstCompleteRewardPreview == null) {
      this.instanceFirstCompleteRewardPreview = new ArrayList<>();
    }
    this.instanceFirstCompleteRewardPreview.add(instanceFirstCompleteRewardPreviewItem);
    return this;
  }

  /**
   * Get instanceFirstCompleteRewardPreview
   * @return instanceFirstCompleteRewardPreview
   */
  @javax.annotation.Nullable
  public List<BucketItem> getInstanceFirstCompleteRewardPreview() {
    return instanceFirstCompleteRewardPreview;
  }

  public void setInstanceFirstCompleteRewardPreview(List<BucketItem> instanceFirstCompleteRewardPreview) {
    this.instanceFirstCompleteRewardPreview = instanceFirstCompleteRewardPreview;
  }


  public CampaignNodeMission overviewLocKey(String overviewLocKey) {
    this.overviewLocKey = overviewLocKey;
    return this;
  }

  /**
   * Get overviewLocKey
   * @return overviewLocKey
   */
  @javax.annotation.Nullable
  public String getOverviewLocKey() {
    return overviewLocKey;
  }

  public void setOverviewLocKey(String overviewLocKey) {
    this.overviewLocKey = overviewLocKey;
  }


  public CampaignNodeMission recommendedGp(Integer recommendedGp) {
    this.recommendedGp = recommendedGp;
    return this;
  }

  /**
   * Get recommendedGp
   * @return recommendedGp
   */
  @javax.annotation.Nullable
  public Integer getRecommendedGp() {
    return recommendedGp;
  }

  public void setRecommendedGp(Integer recommendedGp) {
    this.recommendedGp = recommendedGp;
  }


  public CampaignNodeMission battleDurationLimit(Long battleDurationLimit) {
    this.battleDurationLimit = battleDurationLimit;
    return this;
  }

  /**
   * Get battleDurationLimit
   * @return battleDurationLimit
   */
  @javax.annotation.Nullable
  public Long getBattleDurationLimit() {
    return battleDurationLimit;
  }

  public void setBattleDurationLimit(Long battleDurationLimit) {
    this.battleDurationLimit = battleDurationLimit;
  }


  public CampaignNodeMission recommendedUnitGp(Integer recommendedUnitGp) {
    this.recommendedUnitGp = recommendedUnitGp;
    return this;
  }

  /**
   * Get recommendedUnitGp
   * @return recommendedUnitGp
   */
  @javax.annotation.Nullable
  public Integer getRecommendedUnitGp() {
    return recommendedUnitGp;
  }

  public void setRecommendedUnitGp(Integer recommendedUnitGp) {
    this.recommendedUnitGp = recommendedUnitGp;
  }


  public CampaignNodeMission volatileAccess(Boolean volatileAccess) {
    this.volatileAccess = volatileAccess;
    return this;
  }

  /**
   * Get volatileAccess
   * @return volatileAccess
   */
  @javax.annotation.Nullable
  public Boolean getVolatileAccess() {
    return volatileAccess;
  }

  public void setVolatileAccess(Boolean volatileAccess) {
    this.volatileAccess = volatileAccess;
  }


  public CampaignNodeMission unlockRequirementId(String unlockRequirementId) {
    this.unlockRequirementId = unlockRequirementId;
    return this;
  }

  /**
   * Get unlockRequirementId
   * @return unlockRequirementId
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementId() {
    return unlockRequirementId;
  }

  public void setUnlockRequirementId(String unlockRequirementId) {
    this.unlockRequirementId = unlockRequirementId;
  }


  public CampaignNodeMission visibilityRequirementId(String visibilityRequirementId) {
    this.visibilityRequirementId = visibilityRequirementId;
    return this;
  }

  /**
   * Get visibilityRequirementId
   * @return visibilityRequirementId
   */
  @javax.annotation.Nullable
  public String getVisibilityRequirementId() {
    return visibilityRequirementId;
  }

  public void setVisibilityRequirementId(String visibilityRequirementId) {
    this.visibilityRequirementId = visibilityRequirementId;
  }


  public CampaignNodeMission raidPointsStructure(RaidPointsStructure raidPointsStructure) {
    this.raidPointsStructure = raidPointsStructure;
    return this;
  }

  /**
   * Get raidPointsStructure
   * @return raidPointsStructure
   */
  @javax.annotation.Nullable
  public RaidPointsStructure getRaidPointsStructure() {
    return raidPointsStructure;
  }

  public void setRaidPointsStructure(RaidPointsStructure raidPointsStructure) {
    this.raidPointsStructure = raidPointsStructure;
  }


  public CampaignNodeMission featured(Boolean featured) {
    this.featured = featured;
    return this;
  }

  /**
   * Get featured
   * @return featured
   */
  @javax.annotation.Nullable
  public Boolean getFeatured() {
    return featured;
  }

  public void setFeatured(Boolean featured) {
    this.featured = featured;
  }


  public CampaignNodeMission immediateRegularRankRewardPreview(List<RankRewardPreview> immediateRegularRankRewardPreview) {
    this.immediateRegularRankRewardPreview = immediateRegularRankRewardPreview;
    return this;
  }

  public CampaignNodeMission addImmediateRegularRankRewardPreviewItem(RankRewardPreview immediateRegularRankRewardPreviewItem) {
    if (this.immediateRegularRankRewardPreview == null) {
      this.immediateRegularRankRewardPreview = new ArrayList<>();
    }
    this.immediateRegularRankRewardPreview.add(immediateRegularRankRewardPreviewItem);
    return this;
  }

  /**
   * Get immediateRegularRankRewardPreview
   * @return immediateRegularRankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getImmediateRegularRankRewardPreview() {
    return immediateRegularRankRewardPreview;
  }

  public void setImmediateRegularRankRewardPreview(List<RankRewardPreview> immediateRegularRankRewardPreview) {
    this.immediateRegularRankRewardPreview = immediateRegularRankRewardPreview;
  }


  public CampaignNodeMission maxPointsPerAttempt(Integer maxPointsPerAttempt) {
    this.maxPointsPerAttempt = maxPointsPerAttempt;
    return this;
  }

  /**
   * Get maxPointsPerAttempt
   * @return maxPointsPerAttempt
   */
  @javax.annotation.Nullable
  public Integer getMaxPointsPerAttempt() {
    return maxPointsPerAttempt;
  }

  public void setMaxPointsPerAttempt(Integer maxPointsPerAttempt) {
    this.maxPointsPerAttempt = maxPointsPerAttempt;
  }


  public CampaignNodeMission unitReplacement(List<UnitReplacement> unitReplacement) {
    this.unitReplacement = unitReplacement;
    return this;
  }

  public CampaignNodeMission addUnitReplacementItem(UnitReplacement unitReplacementItem) {
    if (this.unitReplacement == null) {
      this.unitReplacement = new ArrayList<>();
    }
    this.unitReplacement.add(unitReplacementItem);
    return this;
  }

  /**
   * Get unitReplacement
   * @return unitReplacement
   */
  @javax.annotation.Nullable
  public List<UnitReplacement> getUnitReplacement() {
    return unitReplacement;
  }

  public void setUnitReplacement(List<UnitReplacement> unitReplacement) {
    this.unitReplacement = unitReplacement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignNodeMission campaignNodeMission = (CampaignNodeMission) o;
    return Objects.equals(this.id, campaignNodeMission.id) &&
        Objects.equals(this.nameKey, campaignNodeMission.nameKey) &&
        Objects.equals(this.descKey, campaignNodeMission.descKey) &&
        Objects.equals(this.combatType, campaignNodeMission.combatType) &&
        Objects.equals(this.enemyPreview, campaignNodeMission.enemyPreview) &&
        Objects.equals(this.rewardPreview, campaignNodeMission.rewardPreview) &&
        Objects.equals(this.campaignNodeEncounter, campaignNodeMission.campaignNodeEncounter) &&
        Objects.equals(this.audioKey, campaignNodeMission.audioKey) &&
        Objects.equals(this.progress, campaignNodeMission.progress) &&
        Objects.equals(this.entryCostRequirement, campaignNodeMission.entryCostRequirement) &&
        Objects.equals(this.entryCategoryAllowed, campaignNodeMission.entryCategoryAllowed) &&
        Objects.equals(this.shortNameKey, campaignNodeMission.shortNameKey) &&
        Objects.equals(this.groupNameKey, campaignNodeMission.groupNameKey) &&
        Objects.equals(this.groupImage, campaignNodeMission.groupImage) &&
        Objects.equals(this.unlockRequirementLocalizationKey, campaignNodeMission.unlockRequirementLocalizationKey) &&
        Objects.equals(this.cooldownKey, campaignNodeMission.cooldownKey) &&
        Objects.equals(this.dailyBattleCapKey, campaignNodeMission.dailyBattleCapKey) &&
        Objects.equals(this.firstCompleteRewardPreview, campaignNodeMission.firstCompleteRewardPreview) &&
        Objects.equals(this.enemyUnitPreview, campaignNodeMission.enemyUnitPreview) &&
        Objects.equals(this.prefab, campaignNodeMission.prefab) &&
        Objects.equals(this.position, campaignNodeMission.position) &&
        Objects.equals(this.playerAbilityRef, campaignNodeMission.playerAbilityRef) &&
        Objects.equals(this.activateCost, campaignNodeMission.activateCost) &&
        Objects.equals(this.rankRewardPreview, campaignNodeMission.rankRewardPreview) &&
        Objects.equals(this.detailImage, campaignNodeMission.detailImage) &&
        Objects.equals(this.detailDescKey, campaignNodeMission.detailDescKey) &&
        Objects.equals(this.raidConfigId, campaignNodeMission.raidConfigId) &&
        Objects.equals(this.dynamicDescription, campaignNodeMission.dynamicDescription) &&
        Objects.equals(this.nodeDisplayItem, campaignNodeMission.nodeDisplayItem) &&
        Objects.equals(this.grindEnabled, campaignNodeMission.grindEnabled) &&
        Objects.equals(this.hasForcedAlly, campaignNodeMission.hasForcedAlly) &&
        Objects.equals(this.battleSupportAllowed, campaignNodeMission.battleSupportAllowed) &&
        Objects.equals(this.autoBattleEnabled, campaignNodeMission.autoBattleEnabled) &&
        Objects.equals(this.retreatEnabled, campaignNodeMission.retreatEnabled) &&
        Objects.equals(this.forcedPlayerSquad, campaignNodeMission.forcedPlayerSquad) &&
        Objects.equals(this.grantedAbilities, campaignNodeMission.grantedAbilities) &&
        Objects.equals(this.cooldownConditionalOverrideKey, campaignNodeMission.cooldownConditionalOverrideKey) &&
        Objects.equals(this.holonodePlanetPrefabName, campaignNodeMission.holonodePlanetPrefabName) &&
        Objects.equals(this.battleSpeedAdjustable, campaignNodeMission.battleSpeedAdjustable) &&
        Objects.equals(this.requirementOverrideKey, campaignNodeMission.requirementOverrideKey) &&
        Objects.equals(this.simmableOverrideEnabled, campaignNodeMission.simmableOverrideEnabled) &&
        Objects.equals(this.conditionalRewardsPreview, campaignNodeMission.conditionalRewardsPreview) &&
        Objects.equals(this.conditionalEntryCostOverride, campaignNodeMission.conditionalEntryCostOverride) &&
        Objects.equals(this.recommendationKey, campaignNodeMission.recommendationKey) &&
        Objects.equals(this.instanceFirstCompleteRewardPreview, campaignNodeMission.instanceFirstCompleteRewardPreview) &&
        Objects.equals(this.overviewLocKey, campaignNodeMission.overviewLocKey) &&
        Objects.equals(this.recommendedGp, campaignNodeMission.recommendedGp) &&
        Objects.equals(this.battleDurationLimit, campaignNodeMission.battleDurationLimit) &&
        Objects.equals(this.recommendedUnitGp, campaignNodeMission.recommendedUnitGp) &&
        Objects.equals(this.volatileAccess, campaignNodeMission.volatileAccess) &&
        Objects.equals(this.unlockRequirementId, campaignNodeMission.unlockRequirementId) &&
        Objects.equals(this.visibilityRequirementId, campaignNodeMission.visibilityRequirementId) &&
        Objects.equals(this.raidPointsStructure, campaignNodeMission.raidPointsStructure) &&
        Objects.equals(this.featured, campaignNodeMission.featured) &&
        Objects.equals(this.immediateRegularRankRewardPreview, campaignNodeMission.immediateRegularRankRewardPreview) &&
        Objects.equals(this.maxPointsPerAttempt, campaignNodeMission.maxPointsPerAttempt) &&
        Objects.equals(this.unitReplacement, campaignNodeMission.unitReplacement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, descKey, combatType, enemyPreview, rewardPreview, campaignNodeEncounter, audioKey, progress, entryCostRequirement, entryCategoryAllowed, shortNameKey, groupNameKey, groupImage, unlockRequirementLocalizationKey, cooldownKey, dailyBattleCapKey, firstCompleteRewardPreview, enemyUnitPreview, prefab, position, playerAbilityRef, activateCost, rankRewardPreview, detailImage, detailDescKey, raidConfigId, dynamicDescription, nodeDisplayItem, grindEnabled, hasForcedAlly, battleSupportAllowed, autoBattleEnabled, retreatEnabled, forcedPlayerSquad, grantedAbilities, cooldownConditionalOverrideKey, holonodePlanetPrefabName, battleSpeedAdjustable, requirementOverrideKey, simmableOverrideEnabled, conditionalRewardsPreview, conditionalEntryCostOverride, recommendationKey, instanceFirstCompleteRewardPreview, overviewLocKey, recommendedGp, battleDurationLimit, recommendedUnitGp, volatileAccess, unlockRequirementId, visibilityRequirementId, raidPointsStructure, featured, immediateRegularRankRewardPreview, maxPointsPerAttempt, unitReplacement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignNodeMission {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("    enemyPreview: ").append(toIndentedString(enemyPreview)).append("\n");
    sb.append("    rewardPreview: ").append(toIndentedString(rewardPreview)).append("\n");
    sb.append("    campaignNodeEncounter: ").append(toIndentedString(campaignNodeEncounter)).append("\n");
    sb.append("    audioKey: ").append(toIndentedString(audioKey)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    entryCostRequirement: ").append(toIndentedString(entryCostRequirement)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    shortNameKey: ").append(toIndentedString(shortNameKey)).append("\n");
    sb.append("    groupNameKey: ").append(toIndentedString(groupNameKey)).append("\n");
    sb.append("    groupImage: ").append(toIndentedString(groupImage)).append("\n");
    sb.append("    unlockRequirementLocalizationKey: ").append(toIndentedString(unlockRequirementLocalizationKey)).append("\n");
    sb.append("    cooldownKey: ").append(toIndentedString(cooldownKey)).append("\n");
    sb.append("    dailyBattleCapKey: ").append(toIndentedString(dailyBattleCapKey)).append("\n");
    sb.append("    firstCompleteRewardPreview: ").append(toIndentedString(firstCompleteRewardPreview)).append("\n");
    sb.append("    enemyUnitPreview: ").append(toIndentedString(enemyUnitPreview)).append("\n");
    sb.append("    prefab: ").append(toIndentedString(prefab)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    playerAbilityRef: ").append(toIndentedString(playerAbilityRef)).append("\n");
    sb.append("    activateCost: ").append(toIndentedString(activateCost)).append("\n");
    sb.append("    rankRewardPreview: ").append(toIndentedString(rankRewardPreview)).append("\n");
    sb.append("    detailImage: ").append(toIndentedString(detailImage)).append("\n");
    sb.append("    detailDescKey: ").append(toIndentedString(detailDescKey)).append("\n");
    sb.append("    raidConfigId: ").append(toIndentedString(raidConfigId)).append("\n");
    sb.append("    dynamicDescription: ").append(toIndentedString(dynamicDescription)).append("\n");
    sb.append("    nodeDisplayItem: ").append(toIndentedString(nodeDisplayItem)).append("\n");
    sb.append("    grindEnabled: ").append(toIndentedString(grindEnabled)).append("\n");
    sb.append("    hasForcedAlly: ").append(toIndentedString(hasForcedAlly)).append("\n");
    sb.append("    battleSupportAllowed: ").append(toIndentedString(battleSupportAllowed)).append("\n");
    sb.append("    autoBattleEnabled: ").append(toIndentedString(autoBattleEnabled)).append("\n");
    sb.append("    retreatEnabled: ").append(toIndentedString(retreatEnabled)).append("\n");
    sb.append("    forcedPlayerSquad: ").append(toIndentedString(forcedPlayerSquad)).append("\n");
    sb.append("    grantedAbilities: ").append(toIndentedString(grantedAbilities)).append("\n");
    sb.append("    cooldownConditionalOverrideKey: ").append(toIndentedString(cooldownConditionalOverrideKey)).append("\n");
    sb.append("    holonodePlanetPrefabName: ").append(toIndentedString(holonodePlanetPrefabName)).append("\n");
    sb.append("    battleSpeedAdjustable: ").append(toIndentedString(battleSpeedAdjustable)).append("\n");
    sb.append("    requirementOverrideKey: ").append(toIndentedString(requirementOverrideKey)).append("\n");
    sb.append("    simmableOverrideEnabled: ").append(toIndentedString(simmableOverrideEnabled)).append("\n");
    sb.append("    conditionalRewardsPreview: ").append(toIndentedString(conditionalRewardsPreview)).append("\n");
    sb.append("    conditionalEntryCostOverride: ").append(toIndentedString(conditionalEntryCostOverride)).append("\n");
    sb.append("    recommendationKey: ").append(toIndentedString(recommendationKey)).append("\n");
    sb.append("    instanceFirstCompleteRewardPreview: ").append(toIndentedString(instanceFirstCompleteRewardPreview)).append("\n");
    sb.append("    overviewLocKey: ").append(toIndentedString(overviewLocKey)).append("\n");
    sb.append("    recommendedGp: ").append(toIndentedString(recommendedGp)).append("\n");
    sb.append("    battleDurationLimit: ").append(toIndentedString(battleDurationLimit)).append("\n");
    sb.append("    recommendedUnitGp: ").append(toIndentedString(recommendedUnitGp)).append("\n");
    sb.append("    volatileAccess: ").append(toIndentedString(volatileAccess)).append("\n");
    sb.append("    unlockRequirementId: ").append(toIndentedString(unlockRequirementId)).append("\n");
    sb.append("    visibilityRequirementId: ").append(toIndentedString(visibilityRequirementId)).append("\n");
    sb.append("    raidPointsStructure: ").append(toIndentedString(raidPointsStructure)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    immediateRegularRankRewardPreview: ").append(toIndentedString(immediateRegularRankRewardPreview)).append("\n");
    sb.append("    maxPointsPerAttempt: ").append(toIndentedString(maxPointsPerAttempt)).append("\n");
    sb.append("    unitReplacement: ").append(toIndentedString(unitReplacement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("descKey");
    openapiFields.add("combatType");
    openapiFields.add("enemyPreview");
    openapiFields.add("rewardPreview");
    openapiFields.add("campaignNodeEncounter");
    openapiFields.add("audioKey");
    openapiFields.add("progress");
    openapiFields.add("entryCostRequirement");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("shortNameKey");
    openapiFields.add("groupNameKey");
    openapiFields.add("groupImage");
    openapiFields.add("unlockRequirementLocalizationKey");
    openapiFields.add("cooldownKey");
    openapiFields.add("dailyBattleCapKey");
    openapiFields.add("firstCompleteRewardPreview");
    openapiFields.add("enemyUnitPreview");
    openapiFields.add("prefab");
    openapiFields.add("position");
    openapiFields.add("playerAbilityRef");
    openapiFields.add("activateCost");
    openapiFields.add("rankRewardPreview");
    openapiFields.add("detailImage");
    openapiFields.add("detailDescKey");
    openapiFields.add("raidConfigId");
    openapiFields.add("dynamicDescription");
    openapiFields.add("nodeDisplayItem");
    openapiFields.add("grindEnabled");
    openapiFields.add("hasForcedAlly");
    openapiFields.add("battleSupportAllowed");
    openapiFields.add("autoBattleEnabled");
    openapiFields.add("retreatEnabled");
    openapiFields.add("forcedPlayerSquad");
    openapiFields.add("grantedAbilities");
    openapiFields.add("cooldownConditionalOverrideKey");
    openapiFields.add("holonodePlanetPrefabName");
    openapiFields.add("battleSpeedAdjustable");
    openapiFields.add("requirementOverrideKey");
    openapiFields.add("simmableOverrideEnabled");
    openapiFields.add("conditionalRewardsPreview");
    openapiFields.add("conditionalEntryCostOverride");
    openapiFields.add("recommendationKey");
    openapiFields.add("instanceFirstCompleteRewardPreview");
    openapiFields.add("overviewLocKey");
    openapiFields.add("recommendedGp");
    openapiFields.add("battleDurationLimit");
    openapiFields.add("recommendedUnitGp");
    openapiFields.add("volatileAccess");
    openapiFields.add("unlockRequirementId");
    openapiFields.add("visibilityRequirementId");
    openapiFields.add("raidPointsStructure");
    openapiFields.add("featured");
    openapiFields.add("immediateRegularRankRewardPreview");
    openapiFields.add("maxPointsPerAttempt");
    openapiFields.add("unitReplacement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignNodeMission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignNodeMission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignNodeMission is not found in the empty JSON string", CampaignNodeMission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignNodeMission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignNodeMission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
      if (jsonObj.get("enemyPreview") != null && !jsonObj.get("enemyPreview").isJsonNull()) {
        JsonArray jsonArrayenemyPreview = jsonObj.getAsJsonArray("enemyPreview");
        if (jsonArrayenemyPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enemyPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enemyPreview` to be an array in the JSON string but got `%s`", jsonObj.get("enemyPreview").toString()));
          }

          // validate the optional field `enemyPreview` (array)
          for (int i = 0; i < jsonArrayenemyPreview.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayenemyPreview.get(i));
          };
        }
      }
      if (jsonObj.get("rewardPreview") != null && !jsonObj.get("rewardPreview").isJsonNull()) {
        JsonArray jsonArrayrewardPreview = jsonObj.getAsJsonArray("rewardPreview");
        if (jsonArrayrewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rewardPreview").toString()));
          }

          // validate the optional field `rewardPreview` (array)
          for (int i = 0; i < jsonArrayrewardPreview.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayrewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("campaignNodeEncounter") != null && !jsonObj.get("campaignNodeEncounter").isJsonNull()) {
        JsonArray jsonArraycampaignNodeEncounter = jsonObj.getAsJsonArray("campaignNodeEncounter");
        if (jsonArraycampaignNodeEncounter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaignNodeEncounter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaignNodeEncounter` to be an array in the JSON string but got `%s`", jsonObj.get("campaignNodeEncounter").toString()));
          }

          // validate the optional field `campaignNodeEncounter` (array)
          for (int i = 0; i < jsonArraycampaignNodeEncounter.size(); i++) {
            CampaignNodeEncounter.validateJsonElement(jsonArraycampaignNodeEncounter.get(i));
          };
        }
      }
      if ((jsonObj.get("audioKey") != null && !jsonObj.get("audioKey").isJsonNull()) && !jsonObj.get("audioKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioKey").toString()));
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        CampaignElementProgress.validateJsonElement(jsonObj.get("progress"));
      }
      if (jsonObj.get("entryCostRequirement") != null && !jsonObj.get("entryCostRequirement").isJsonNull()) {
        JsonArray jsonArrayentryCostRequirement = jsonObj.getAsJsonArray("entryCostRequirement");
        if (jsonArrayentryCostRequirement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entryCostRequirement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entryCostRequirement` to be an array in the JSON string but got `%s`", jsonObj.get("entryCostRequirement").toString()));
          }

          // validate the optional field `entryCostRequirement` (array)
          for (int i = 0; i < jsonArrayentryCostRequirement.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayentryCostRequirement.get(i));
          };
        }
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
      if ((jsonObj.get("shortNameKey") != null && !jsonObj.get("shortNameKey").isJsonNull()) && !jsonObj.get("shortNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortNameKey").toString()));
      }
      if ((jsonObj.get("groupNameKey") != null && !jsonObj.get("groupNameKey").isJsonNull()) && !jsonObj.get("groupNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupNameKey").toString()));
      }
      if ((jsonObj.get("groupImage") != null && !jsonObj.get("groupImage").isJsonNull()) && !jsonObj.get("groupImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupImage").toString()));
      }
      if ((jsonObj.get("unlockRequirementLocalizationKey") != null && !jsonObj.get("unlockRequirementLocalizationKey").isJsonNull()) && !jsonObj.get("unlockRequirementLocalizationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementLocalizationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementLocalizationKey").toString()));
      }
      if ((jsonObj.get("cooldownKey") != null && !jsonObj.get("cooldownKey").isJsonNull()) && !jsonObj.get("cooldownKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cooldownKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cooldownKey").toString()));
      }
      if ((jsonObj.get("dailyBattleCapKey") != null && !jsonObj.get("dailyBattleCapKey").isJsonNull()) && !jsonObj.get("dailyBattleCapKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dailyBattleCapKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dailyBattleCapKey").toString()));
      }
      if (jsonObj.get("firstCompleteRewardPreview") != null && !jsonObj.get("firstCompleteRewardPreview").isJsonNull()) {
        JsonArray jsonArrayfirstCompleteRewardPreview = jsonObj.getAsJsonArray("firstCompleteRewardPreview");
        if (jsonArrayfirstCompleteRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("firstCompleteRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `firstCompleteRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("firstCompleteRewardPreview").toString()));
          }

          // validate the optional field `firstCompleteRewardPreview` (array)
          for (int i = 0; i < jsonArrayfirstCompleteRewardPreview.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayfirstCompleteRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("enemyUnitPreview") != null && !jsonObj.get("enemyUnitPreview").isJsonNull()) {
        JsonArray jsonArrayenemyUnitPreview = jsonObj.getAsJsonArray("enemyUnitPreview");
        if (jsonArrayenemyUnitPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enemyUnitPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enemyUnitPreview` to be an array in the JSON string but got `%s`", jsonObj.get("enemyUnitPreview").toString()));
          }

          // validate the optional field `enemyUnitPreview` (array)
          for (int i = 0; i < jsonArrayenemyUnitPreview.size(); i++) {
            CampaignMissionEnemyPreview.validateJsonElement(jsonArrayenemyUnitPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("prefab") != null && !jsonObj.get("prefab").isJsonNull()) && !jsonObj.get("prefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefab").toString()));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        Position.validateJsonElement(jsonObj.get("position"));
      }
      if (jsonObj.get("playerAbilityRef") != null && !jsonObj.get("playerAbilityRef").isJsonNull()) {
        JsonArray jsonArrayplayerAbilityRef = jsonObj.getAsJsonArray("playerAbilityRef");
        if (jsonArrayplayerAbilityRef != null) {
          // ensure the json data is an array
          if (!jsonObj.get("playerAbilityRef").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `playerAbilityRef` to be an array in the JSON string but got `%s`", jsonObj.get("playerAbilityRef").toString()));
          }

          // validate the optional field `playerAbilityRef` (array)
          for (int i = 0; i < jsonArrayplayerAbilityRef.size(); i++) {
            AbilityReference.validateJsonElement(jsonArrayplayerAbilityRef.get(i));
          };
        }
      }
      if (jsonObj.get("activateCost") != null && !jsonObj.get("activateCost").isJsonNull()) {
        JsonArray jsonArrayactivateCost = jsonObj.getAsJsonArray("activateCost");
        if (jsonArrayactivateCost != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activateCost").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activateCost` to be an array in the JSON string but got `%s`", jsonObj.get("activateCost").toString()));
          }

          // validate the optional field `activateCost` (array)
          for (int i = 0; i < jsonArrayactivateCost.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayactivateCost.get(i));
          };
        }
      }
      if (jsonObj.get("rankRewardPreview") != null && !jsonObj.get("rankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayrankRewardPreview = jsonObj.getAsJsonArray("rankRewardPreview");
        if (jsonArrayrankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rankRewardPreview").toString()));
          }

          // validate the optional field `rankRewardPreview` (array)
          for (int i = 0; i < jsonArrayrankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayrankRewardPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("detailImage") != null && !jsonObj.get("detailImage").isJsonNull()) && !jsonObj.get("detailImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailImage").toString()));
      }
      if ((jsonObj.get("detailDescKey") != null && !jsonObj.get("detailDescKey").isJsonNull()) && !jsonObj.get("detailDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailDescKey").toString()));
      }
      if ((jsonObj.get("raidConfigId") != null && !jsonObj.get("raidConfigId").isJsonNull()) && !jsonObj.get("raidConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raidConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raidConfigId").toString()));
      }
      if (jsonObj.get("dynamicDescription") != null && !jsonObj.get("dynamicDescription").isJsonNull()) {
        JsonArray jsonArraydynamicDescription = jsonObj.getAsJsonArray("dynamicDescription");
        if (jsonArraydynamicDescription != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicDescription").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicDescription` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicDescription").toString()));
          }

          // validate the optional field `dynamicDescription` (array)
          for (int i = 0; i < jsonArraydynamicDescription.size(); i++) {
            DynamicDescription.validateJsonElement(jsonArraydynamicDescription.get(i));
          };
        }
      }
      // validate the optional field `nodeDisplayItem`
      if (jsonObj.get("nodeDisplayItem") != null && !jsonObj.get("nodeDisplayItem").isJsonNull()) {
        ItemType.validateJsonElement(jsonObj.get("nodeDisplayItem"));
      }
      // validate the optional field `forcedPlayerSquad`
      if (jsonObj.get("forcedPlayerSquad") != null && !jsonObj.get("forcedPlayerSquad").isJsonNull()) {
        ForcedPlayerSquad.validateJsonElement(jsonObj.get("forcedPlayerSquad"));
      }
      if (jsonObj.get("grantedAbilities") != null && !jsonObj.get("grantedAbilities").isJsonNull()) {
        JsonArray jsonArraygrantedAbilities = jsonObj.getAsJsonArray("grantedAbilities");
        if (jsonArraygrantedAbilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbilities` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbilities").toString()));
          }

          // validate the optional field `grantedAbilities` (array)
          for (int i = 0; i < jsonArraygrantedAbilities.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbilities.get(i));
          };
        }
      }
      if ((jsonObj.get("cooldownConditionalOverrideKey") != null && !jsonObj.get("cooldownConditionalOverrideKey").isJsonNull()) && !jsonObj.get("cooldownConditionalOverrideKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cooldownConditionalOverrideKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cooldownConditionalOverrideKey").toString()));
      }
      if ((jsonObj.get("holonodePlanetPrefabName") != null && !jsonObj.get("holonodePlanetPrefabName").isJsonNull()) && !jsonObj.get("holonodePlanetPrefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holonodePlanetPrefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holonodePlanetPrefabName").toString()));
      }
      if ((jsonObj.get("requirementOverrideKey") != null && !jsonObj.get("requirementOverrideKey").isJsonNull()) && !jsonObj.get("requirementOverrideKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requirementOverrideKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requirementOverrideKey").toString()));
      }
      if (jsonObj.get("conditionalRewardsPreview") != null && !jsonObj.get("conditionalRewardsPreview").isJsonNull()) {
        JsonArray jsonArrayconditionalRewardsPreview = jsonObj.getAsJsonArray("conditionalRewardsPreview");
        if (jsonArrayconditionalRewardsPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditionalRewardsPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditionalRewardsPreview` to be an array in the JSON string but got `%s`", jsonObj.get("conditionalRewardsPreview").toString()));
          }

          // validate the optional field `conditionalRewardsPreview` (array)
          for (int i = 0; i < jsonArrayconditionalRewardsPreview.size(); i++) {
            ConditionalBucket.validateJsonElement(jsonArrayconditionalRewardsPreview.get(i));
          };
        }
      }
      // validate the optional field `conditionalEntryCostOverride`
      if (jsonObj.get("conditionalEntryCostOverride") != null && !jsonObj.get("conditionalEntryCostOverride").isJsonNull()) {
        ConditionalBucket.validateJsonElement(jsonObj.get("conditionalEntryCostOverride"));
      }
      if ((jsonObj.get("recommendationKey") != null && !jsonObj.get("recommendationKey").isJsonNull()) && !jsonObj.get("recommendationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationKey").toString()));
      }
      if (jsonObj.get("instanceFirstCompleteRewardPreview") != null && !jsonObj.get("instanceFirstCompleteRewardPreview").isJsonNull()) {
        JsonArray jsonArrayinstanceFirstCompleteRewardPreview = jsonObj.getAsJsonArray("instanceFirstCompleteRewardPreview");
        if (jsonArrayinstanceFirstCompleteRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instanceFirstCompleteRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instanceFirstCompleteRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("instanceFirstCompleteRewardPreview").toString()));
          }

          // validate the optional field `instanceFirstCompleteRewardPreview` (array)
          for (int i = 0; i < jsonArrayinstanceFirstCompleteRewardPreview.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayinstanceFirstCompleteRewardPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("overviewLocKey") != null && !jsonObj.get("overviewLocKey").isJsonNull()) && !jsonObj.get("overviewLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overviewLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overviewLocKey").toString()));
      }
      if ((jsonObj.get("unlockRequirementId") != null && !jsonObj.get("unlockRequirementId").isJsonNull()) && !jsonObj.get("unlockRequirementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementId").toString()));
      }
      if ((jsonObj.get("visibilityRequirementId") != null && !jsonObj.get("visibilityRequirementId").isJsonNull()) && !jsonObj.get("visibilityRequirementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibilityRequirementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibilityRequirementId").toString()));
      }
      // validate the optional field `raidPointsStructure`
      if (jsonObj.get("raidPointsStructure") != null && !jsonObj.get("raidPointsStructure").isJsonNull()) {
        RaidPointsStructure.validateJsonElement(jsonObj.get("raidPointsStructure"));
      }
      if (jsonObj.get("immediateRegularRankRewardPreview") != null && !jsonObj.get("immediateRegularRankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayimmediateRegularRankRewardPreview = jsonObj.getAsJsonArray("immediateRegularRankRewardPreview");
        if (jsonArrayimmediateRegularRankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("immediateRegularRankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `immediateRegularRankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("immediateRegularRankRewardPreview").toString()));
          }

          // validate the optional field `immediateRegularRankRewardPreview` (array)
          for (int i = 0; i < jsonArrayimmediateRegularRankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayimmediateRegularRankRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("unitReplacement") != null && !jsonObj.get("unitReplacement").isJsonNull()) {
        JsonArray jsonArrayunitReplacement = jsonObj.getAsJsonArray("unitReplacement");
        if (jsonArrayunitReplacement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unitReplacement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unitReplacement` to be an array in the JSON string but got `%s`", jsonObj.get("unitReplacement").toString()));
          }

          // validate the optional field `unitReplacement` (array)
          for (int i = 0; i < jsonArrayunitReplacement.size(); i++) {
            UnitReplacement.validateJsonElement(jsonArrayunitReplacement.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignNodeMission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignNodeMission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignNodeMission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignNodeMission.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignNodeMission>() {
           @Override
           public void write(JsonWriter out, CampaignNodeMission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignNodeMission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignNodeMission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignNodeMission
   * @throws IOException if the JSON string is invalid with respect to CampaignNodeMission
   */
  public static CampaignNodeMission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignNodeMission.class);
  }

  /**
   * Convert an instance of CampaignNodeMission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

