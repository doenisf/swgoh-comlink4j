/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.BucketItem;
import io.github.doenisf.comlink4j.CampaignElementIdentifier;
import io.github.doenisf.comlink4j.EntryCategoryAllowed;
import io.github.doenisf.comlink4j.RankRewardPreview;
import io.github.doenisf.comlink4j.SystemModifier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * GameEventInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GameEventInstance {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Long startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Long endTime;

  public static final String SERIALIZED_NAME_DISPLAY_START_TIME = "displayStartTime";
  @SerializedName(SERIALIZED_NAME_DISPLAY_START_TIME)
  private Long displayStartTime;

  public static final String SERIALIZED_NAME_DISPLAY_END_TIME = "displayEndTime";
  @SerializedName(SERIALIZED_NAME_DISPLAY_END_TIME)
  private Long displayEndTime;

  public static final String SERIALIZED_NAME_TIME_LIMITED = "timeLimited";
  @SerializedName(SERIALIZED_NAME_TIME_LIMITED)
  private Boolean timeLimited;

  public static final String SERIALIZED_NAME_CAMPAIGN_ELEMENT_IDENTIFIER = "campaignElementIdentifier";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ELEMENT_IDENTIFIER)
  private CampaignElementIdentifier campaignElementIdentifier;

  public static final String SERIALIZED_NAME_REWARD_PREVIEW = "rewardPreview";
  @SerializedName(SERIALIZED_NAME_REWARD_PREVIEW)
  private List<BucketItem> rewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK_REWARD_PREVIEW = "rankRewardPreview";
  @SerializedName(SERIALIZED_NAME_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> rankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_DEFENSIVE_SQUAD_SIZE = "defensiveSquadSize";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_SQUAD_SIZE)
  private Integer defensiveSquadSize;

  public static final String SERIALIZED_NAME_UNIT_DAILY_USAGE_CAP_KEY = "unitDailyUsageCapKey";
  @SerializedName(SERIALIZED_NAME_UNIT_DAILY_USAGE_CAP_KEY)
  private String unitDailyUsageCapKey;

  public static final String SERIALIZED_NAME_ROSTER_REFRESH_TIME = "rosterRefreshTime";
  @SerializedName(SERIALIZED_NAME_ROSTER_REFRESH_TIME)
  private Long rosterRefreshTime;

  public static final String SERIALIZED_NAME_JOINED = "joined";
  @SerializedName(SERIALIZED_NAME_JOINED)
  private Boolean joined;

  public static final String SERIALIZED_NAME_SUMMARY_KEY = "summaryKey";
  @SerializedName(SERIALIZED_NAME_SUMMARY_KEY)
  private String summaryKey;

  public static final String SERIALIZED_NAME_REWARD_TIME = "rewardTime";
  @SerializedName(SERIALIZED_NAME_REWARD_TIME)
  private Long rewardTime;

  public static final String SERIALIZED_NAME_DEFENSIVE_SQUAD_SAVE_TIME_LIMIT = "defensiveSquadSaveTimeLimit";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_SQUAD_SAVE_TIME_LIMIT)
  private Long defensiveSquadSaveTimeLimit;

  public static final String SERIALIZED_NAME_SYSTEM_MODIFIER = "systemModifier";
  @SerializedName(SERIALIZED_NAME_SYSTEM_MODIFIER)
  private SystemModifier systemModifier;

  public static final String SERIALIZED_NAME_SUPPORTS_PUSH_NOTIFICATIONS = "supportsPushNotifications";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_PUSH_NOTIFICATIONS)
  private Boolean supportsPushNotifications;

  public static final String SERIALIZED_NAME_LINKED_EVENT_ID = "linkedEventId";
  @SerializedName(SERIALIZED_NAME_LINKED_EVENT_ID)
  private List<String> linkedEventId = new ArrayList<>();

  public GameEventInstance() {
  }

  public GameEventInstance id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GameEventInstance startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  public GameEventInstance endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public GameEventInstance displayStartTime(Long displayStartTime) {
    this.displayStartTime = displayStartTime;
    return this;
  }

  /**
   * Get displayStartTime
   * @return displayStartTime
   */
  @javax.annotation.Nullable
  public Long getDisplayStartTime() {
    return displayStartTime;
  }

  public void setDisplayStartTime(Long displayStartTime) {
    this.displayStartTime = displayStartTime;
  }


  public GameEventInstance displayEndTime(Long displayEndTime) {
    this.displayEndTime = displayEndTime;
    return this;
  }

  /**
   * Get displayEndTime
   * @return displayEndTime
   */
  @javax.annotation.Nullable
  public Long getDisplayEndTime() {
    return displayEndTime;
  }

  public void setDisplayEndTime(Long displayEndTime) {
    this.displayEndTime = displayEndTime;
  }


  public GameEventInstance timeLimited(Boolean timeLimited) {
    this.timeLimited = timeLimited;
    return this;
  }

  /**
   * Get timeLimited
   * @return timeLimited
   */
  @javax.annotation.Nullable
  public Boolean getTimeLimited() {
    return timeLimited;
  }

  public void setTimeLimited(Boolean timeLimited) {
    this.timeLimited = timeLimited;
  }


  public GameEventInstance campaignElementIdentifier(CampaignElementIdentifier campaignElementIdentifier) {
    this.campaignElementIdentifier = campaignElementIdentifier;
    return this;
  }

  /**
   * Get campaignElementIdentifier
   * @return campaignElementIdentifier
   */
  @javax.annotation.Nullable
  public CampaignElementIdentifier getCampaignElementIdentifier() {
    return campaignElementIdentifier;
  }

  public void setCampaignElementIdentifier(CampaignElementIdentifier campaignElementIdentifier) {
    this.campaignElementIdentifier = campaignElementIdentifier;
  }


  public GameEventInstance rewardPreview(List<BucketItem> rewardPreview) {
    this.rewardPreview = rewardPreview;
    return this;
  }

  public GameEventInstance addRewardPreviewItem(BucketItem rewardPreviewItem) {
    if (this.rewardPreview == null) {
      this.rewardPreview = new ArrayList<>();
    }
    this.rewardPreview.add(rewardPreviewItem);
    return this;
  }

  /**
   * Get rewardPreview
   * @return rewardPreview
   */
  @javax.annotation.Nullable
  public List<BucketItem> getRewardPreview() {
    return rewardPreview;
  }

  public void setRewardPreview(List<BucketItem> rewardPreview) {
    this.rewardPreview = rewardPreview;
  }


  public GameEventInstance rankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
    return this;
  }

  public GameEventInstance addRankRewardPreviewItem(RankRewardPreview rankRewardPreviewItem) {
    if (this.rankRewardPreview == null) {
      this.rankRewardPreview = new ArrayList<>();
    }
    this.rankRewardPreview.add(rankRewardPreviewItem);
    return this;
  }

  /**
   * Get rankRewardPreview
   * @return rankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getRankRewardPreview() {
    return rankRewardPreview;
  }

  public void setRankRewardPreview(List<RankRewardPreview> rankRewardPreview) {
    this.rankRewardPreview = rankRewardPreview;
  }


  public GameEventInstance entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public GameEventInstance defensiveSquadSize(Integer defensiveSquadSize) {
    this.defensiveSquadSize = defensiveSquadSize;
    return this;
  }

  /**
   * Get defensiveSquadSize
   * @return defensiveSquadSize
   */
  @javax.annotation.Nullable
  public Integer getDefensiveSquadSize() {
    return defensiveSquadSize;
  }

  public void setDefensiveSquadSize(Integer defensiveSquadSize) {
    this.defensiveSquadSize = defensiveSquadSize;
  }


  public GameEventInstance unitDailyUsageCapKey(String unitDailyUsageCapKey) {
    this.unitDailyUsageCapKey = unitDailyUsageCapKey;
    return this;
  }

  /**
   * Get unitDailyUsageCapKey
   * @return unitDailyUsageCapKey
   */
  @javax.annotation.Nullable
  public String getUnitDailyUsageCapKey() {
    return unitDailyUsageCapKey;
  }

  public void setUnitDailyUsageCapKey(String unitDailyUsageCapKey) {
    this.unitDailyUsageCapKey = unitDailyUsageCapKey;
  }


  public GameEventInstance rosterRefreshTime(Long rosterRefreshTime) {
    this.rosterRefreshTime = rosterRefreshTime;
    return this;
  }

  /**
   * Get rosterRefreshTime
   * @return rosterRefreshTime
   */
  @javax.annotation.Nullable
  public Long getRosterRefreshTime() {
    return rosterRefreshTime;
  }

  public void setRosterRefreshTime(Long rosterRefreshTime) {
    this.rosterRefreshTime = rosterRefreshTime;
  }


  public GameEventInstance joined(Boolean joined) {
    this.joined = joined;
    return this;
  }

  /**
   * Get joined
   * @return joined
   */
  @javax.annotation.Nullable
  public Boolean getJoined() {
    return joined;
  }

  public void setJoined(Boolean joined) {
    this.joined = joined;
  }


  public GameEventInstance summaryKey(String summaryKey) {
    this.summaryKey = summaryKey;
    return this;
  }

  /**
   * Get summaryKey
   * @return summaryKey
   */
  @javax.annotation.Nullable
  public String getSummaryKey() {
    return summaryKey;
  }

  public void setSummaryKey(String summaryKey) {
    this.summaryKey = summaryKey;
  }


  public GameEventInstance rewardTime(Long rewardTime) {
    this.rewardTime = rewardTime;
    return this;
  }

  /**
   * Get rewardTime
   * @return rewardTime
   */
  @javax.annotation.Nullable
  public Long getRewardTime() {
    return rewardTime;
  }

  public void setRewardTime(Long rewardTime) {
    this.rewardTime = rewardTime;
  }


  public GameEventInstance defensiveSquadSaveTimeLimit(Long defensiveSquadSaveTimeLimit) {
    this.defensiveSquadSaveTimeLimit = defensiveSquadSaveTimeLimit;
    return this;
  }

  /**
   * Get defensiveSquadSaveTimeLimit
   * @return defensiveSquadSaveTimeLimit
   */
  @javax.annotation.Nullable
  public Long getDefensiveSquadSaveTimeLimit() {
    return defensiveSquadSaveTimeLimit;
  }

  public void setDefensiveSquadSaveTimeLimit(Long defensiveSquadSaveTimeLimit) {
    this.defensiveSquadSaveTimeLimit = defensiveSquadSaveTimeLimit;
  }


  public GameEventInstance systemModifier(SystemModifier systemModifier) {
    this.systemModifier = systemModifier;
    return this;
  }

  /**
   * Get systemModifier
   * @return systemModifier
   */
  @javax.annotation.Nullable
  public SystemModifier getSystemModifier() {
    return systemModifier;
  }

  public void setSystemModifier(SystemModifier systemModifier) {
    this.systemModifier = systemModifier;
  }


  public GameEventInstance supportsPushNotifications(Boolean supportsPushNotifications) {
    this.supportsPushNotifications = supportsPushNotifications;
    return this;
  }

  /**
   * Get supportsPushNotifications
   * @return supportsPushNotifications
   */
  @javax.annotation.Nullable
  public Boolean getSupportsPushNotifications() {
    return supportsPushNotifications;
  }

  public void setSupportsPushNotifications(Boolean supportsPushNotifications) {
    this.supportsPushNotifications = supportsPushNotifications;
  }


  public GameEventInstance linkedEventId(List<String> linkedEventId) {
    this.linkedEventId = linkedEventId;
    return this;
  }

  public GameEventInstance addLinkedEventIdItem(String linkedEventIdItem) {
    if (this.linkedEventId == null) {
      this.linkedEventId = new ArrayList<>();
    }
    this.linkedEventId.add(linkedEventIdItem);
    return this;
  }

  /**
   * Get linkedEventId
   * @return linkedEventId
   */
  @javax.annotation.Nullable
  public List<String> getLinkedEventId() {
    return linkedEventId;
  }

  public void setLinkedEventId(List<String> linkedEventId) {
    this.linkedEventId = linkedEventId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameEventInstance gameEventInstance = (GameEventInstance) o;
    return Objects.equals(this.id, gameEventInstance.id) &&
        Objects.equals(this.startTime, gameEventInstance.startTime) &&
        Objects.equals(this.endTime, gameEventInstance.endTime) &&
        Objects.equals(this.displayStartTime, gameEventInstance.displayStartTime) &&
        Objects.equals(this.displayEndTime, gameEventInstance.displayEndTime) &&
        Objects.equals(this.timeLimited, gameEventInstance.timeLimited) &&
        Objects.equals(this.campaignElementIdentifier, gameEventInstance.campaignElementIdentifier) &&
        Objects.equals(this.rewardPreview, gameEventInstance.rewardPreview) &&
        Objects.equals(this.rankRewardPreview, gameEventInstance.rankRewardPreview) &&
        Objects.equals(this.entryCategoryAllowed, gameEventInstance.entryCategoryAllowed) &&
        Objects.equals(this.defensiveSquadSize, gameEventInstance.defensiveSquadSize) &&
        Objects.equals(this.unitDailyUsageCapKey, gameEventInstance.unitDailyUsageCapKey) &&
        Objects.equals(this.rosterRefreshTime, gameEventInstance.rosterRefreshTime) &&
        Objects.equals(this.joined, gameEventInstance.joined) &&
        Objects.equals(this.summaryKey, gameEventInstance.summaryKey) &&
        Objects.equals(this.rewardTime, gameEventInstance.rewardTime) &&
        Objects.equals(this.defensiveSquadSaveTimeLimit, gameEventInstance.defensiveSquadSaveTimeLimit) &&
        Objects.equals(this.systemModifier, gameEventInstance.systemModifier) &&
        Objects.equals(this.supportsPushNotifications, gameEventInstance.supportsPushNotifications) &&
        Objects.equals(this.linkedEventId, gameEventInstance.linkedEventId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, startTime, endTime, displayStartTime, displayEndTime, timeLimited, campaignElementIdentifier, rewardPreview, rankRewardPreview, entryCategoryAllowed, defensiveSquadSize, unitDailyUsageCapKey, rosterRefreshTime, joined, summaryKey, rewardTime, defensiveSquadSaveTimeLimit, systemModifier, supportsPushNotifications, linkedEventId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameEventInstance {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    displayStartTime: ").append(toIndentedString(displayStartTime)).append("\n");
    sb.append("    displayEndTime: ").append(toIndentedString(displayEndTime)).append("\n");
    sb.append("    timeLimited: ").append(toIndentedString(timeLimited)).append("\n");
    sb.append("    campaignElementIdentifier: ").append(toIndentedString(campaignElementIdentifier)).append("\n");
    sb.append("    rewardPreview: ").append(toIndentedString(rewardPreview)).append("\n");
    sb.append("    rankRewardPreview: ").append(toIndentedString(rankRewardPreview)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    defensiveSquadSize: ").append(toIndentedString(defensiveSquadSize)).append("\n");
    sb.append("    unitDailyUsageCapKey: ").append(toIndentedString(unitDailyUsageCapKey)).append("\n");
    sb.append("    rosterRefreshTime: ").append(toIndentedString(rosterRefreshTime)).append("\n");
    sb.append("    joined: ").append(toIndentedString(joined)).append("\n");
    sb.append("    summaryKey: ").append(toIndentedString(summaryKey)).append("\n");
    sb.append("    rewardTime: ").append(toIndentedString(rewardTime)).append("\n");
    sb.append("    defensiveSquadSaveTimeLimit: ").append(toIndentedString(defensiveSquadSaveTimeLimit)).append("\n");
    sb.append("    systemModifier: ").append(toIndentedString(systemModifier)).append("\n");
    sb.append("    supportsPushNotifications: ").append(toIndentedString(supportsPushNotifications)).append("\n");
    sb.append("    linkedEventId: ").append(toIndentedString(linkedEventId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("displayStartTime");
    openapiFields.add("displayEndTime");
    openapiFields.add("timeLimited");
    openapiFields.add("campaignElementIdentifier");
    openapiFields.add("rewardPreview");
    openapiFields.add("rankRewardPreview");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("defensiveSquadSize");
    openapiFields.add("unitDailyUsageCapKey");
    openapiFields.add("rosterRefreshTime");
    openapiFields.add("joined");
    openapiFields.add("summaryKey");
    openapiFields.add("rewardTime");
    openapiFields.add("defensiveSquadSaveTimeLimit");
    openapiFields.add("systemModifier");
    openapiFields.add("supportsPushNotifications");
    openapiFields.add("linkedEventId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GameEventInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GameEventInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GameEventInstance is not found in the empty JSON string", GameEventInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GameEventInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GameEventInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `campaignElementIdentifier`
      if (jsonObj.get("campaignElementIdentifier") != null && !jsonObj.get("campaignElementIdentifier").isJsonNull()) {
        CampaignElementIdentifier.validateJsonElement(jsonObj.get("campaignElementIdentifier"));
      }
      if (jsonObj.get("rewardPreview") != null && !jsonObj.get("rewardPreview").isJsonNull()) {
        JsonArray jsonArrayrewardPreview = jsonObj.getAsJsonArray("rewardPreview");
        if (jsonArrayrewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rewardPreview").toString()));
          }

          // validate the optional field `rewardPreview` (array)
          for (int i = 0; i < jsonArrayrewardPreview.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayrewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("rankRewardPreview") != null && !jsonObj.get("rankRewardPreview").isJsonNull()) {
        JsonArray jsonArrayrankRewardPreview = jsonObj.getAsJsonArray("rankRewardPreview");
        if (jsonArrayrankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("rankRewardPreview").toString()));
          }

          // validate the optional field `rankRewardPreview` (array)
          for (int i = 0; i < jsonArrayrankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayrankRewardPreview.get(i));
          };
        }
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
      if ((jsonObj.get("unitDailyUsageCapKey") != null && !jsonObj.get("unitDailyUsageCapKey").isJsonNull()) && !jsonObj.get("unitDailyUsageCapKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitDailyUsageCapKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitDailyUsageCapKey").toString()));
      }
      if ((jsonObj.get("summaryKey") != null && !jsonObj.get("summaryKey").isJsonNull()) && !jsonObj.get("summaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summaryKey").toString()));
      }
      // validate the optional field `systemModifier`
      if (jsonObj.get("systemModifier") != null && !jsonObj.get("systemModifier").isJsonNull()) {
        SystemModifier.validateJsonElement(jsonObj.get("systemModifier"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedEventId") != null && !jsonObj.get("linkedEventId").isJsonNull() && !jsonObj.get("linkedEventId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedEventId` to be an array in the JSON string but got `%s`", jsonObj.get("linkedEventId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GameEventInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GameEventInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GameEventInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GameEventInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<GameEventInstance>() {
           @Override
           public void write(JsonWriter out, GameEventInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GameEventInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GameEventInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GameEventInstance
   * @throws IOException if the JSON string is invalid with respect to GameEventInstance
   */
  public static GameEventInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GameEventInstance.class);
  }

  /**
   * Convert an instance of GameEventInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

