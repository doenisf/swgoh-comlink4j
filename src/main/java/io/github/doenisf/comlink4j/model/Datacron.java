/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.DatacronAffix;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * Datacron
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Datacron {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SET_ID = "setId";
  @SerializedName(SERIALIZED_NAME_SET_ID)
  private Integer setId;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<String> tag = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFIX = "affix";
  @SerializedName(SERIALIZED_NAME_AFFIX)
  private List<DatacronAffix> affix = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_REROLL_INDEX = "rerollIndex";
  @SerializedName(SERIALIZED_NAME_REROLL_INDEX)
  private Integer rerollIndex;

  public static final String SERIALIZED_NAME_REROLL_OPTION = "rerollOption";
  @SerializedName(SERIALIZED_NAME_REROLL_OPTION)
  private List<DatacronAffix> rerollOption = new ArrayList<>();

  public static final String SERIALIZED_NAME_REROLL_COUNT = "rerollCount";
  @SerializedName(SERIALIZED_NAME_REROLL_COUNT)
  private Integer rerollCount;

  public Datacron() {
  }

  public Datacron id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Datacron setId(Integer setId) {
    this.setId = setId;
    return this;
  }

  /**
   * Get setId
   * @return setId
   */
  @javax.annotation.Nullable
  public Integer getSetId() {
    return setId;
  }

  public void setSetId(Integer setId) {
    this.setId = setId;
  }


  public Datacron templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public Datacron tag(List<String> tag) {
    this.tag = tag;
    return this;
  }

  public Datacron addTagItem(String tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public List<String> getTag() {
    return tag;
  }

  public void setTag(List<String> tag) {
    this.tag = tag;
  }


  public Datacron affix(List<DatacronAffix> affix) {
    this.affix = affix;
    return this;
  }

  public Datacron addAffixItem(DatacronAffix affixItem) {
    if (this.affix == null) {
      this.affix = new ArrayList<>();
    }
    this.affix.add(affixItem);
    return this;
  }

  /**
   * Get affix
   * @return affix
   */
  @javax.annotation.Nullable
  public List<DatacronAffix> getAffix() {
    return affix;
  }

  public void setAffix(List<DatacronAffix> affix) {
    this.affix = affix;
  }


  public Datacron locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public Datacron rerollIndex(Integer rerollIndex) {
    this.rerollIndex = rerollIndex;
    return this;
  }

  /**
   * Get rerollIndex
   * @return rerollIndex
   */
  @javax.annotation.Nullable
  public Integer getRerollIndex() {
    return rerollIndex;
  }

  public void setRerollIndex(Integer rerollIndex) {
    this.rerollIndex = rerollIndex;
  }


  public Datacron rerollOption(List<DatacronAffix> rerollOption) {
    this.rerollOption = rerollOption;
    return this;
  }

  public Datacron addRerollOptionItem(DatacronAffix rerollOptionItem) {
    if (this.rerollOption == null) {
      this.rerollOption = new ArrayList<>();
    }
    this.rerollOption.add(rerollOptionItem);
    return this;
  }

  /**
   * Get rerollOption
   * @return rerollOption
   */
  @javax.annotation.Nullable
  public List<DatacronAffix> getRerollOption() {
    return rerollOption;
  }

  public void setRerollOption(List<DatacronAffix> rerollOption) {
    this.rerollOption = rerollOption;
  }


  public Datacron rerollCount(Integer rerollCount) {
    this.rerollCount = rerollCount;
    return this;
  }

  /**
   * Get rerollCount
   * @return rerollCount
   */
  @javax.annotation.Nullable
  public Integer getRerollCount() {
    return rerollCount;
  }

  public void setRerollCount(Integer rerollCount) {
    this.rerollCount = rerollCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Datacron datacron = (Datacron) o;
    return Objects.equals(this.id, datacron.id) &&
        Objects.equals(this.setId, datacron.setId) &&
        Objects.equals(this.templateId, datacron.templateId) &&
        Objects.equals(this.tag, datacron.tag) &&
        Objects.equals(this.affix, datacron.affix) &&
        Objects.equals(this.locked, datacron.locked) &&
        Objects.equals(this.rerollIndex, datacron.rerollIndex) &&
        Objects.equals(this.rerollOption, datacron.rerollOption) &&
        Objects.equals(this.rerollCount, datacron.rerollCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, setId, templateId, tag, affix, locked, rerollIndex, rerollOption, rerollCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Datacron {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    setId: ").append(toIndentedString(setId)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    affix: ").append(toIndentedString(affix)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    rerollIndex: ").append(toIndentedString(rerollIndex)).append("\n");
    sb.append("    rerollOption: ").append(toIndentedString(rerollOption)).append("\n");
    sb.append("    rerollCount: ").append(toIndentedString(rerollCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("setId");
    openapiFields.add("templateId");
    openapiFields.add("tag");
    openapiFields.add("affix");
    openapiFields.add("locked");
    openapiFields.add("rerollIndex");
    openapiFields.add("rerollOption");
    openapiFields.add("rerollCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Datacron
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Datacron.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Datacron is not found in the empty JSON string", Datacron.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Datacron.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Datacron` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull() && !jsonObj.get("tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if (jsonObj.get("affix") != null && !jsonObj.get("affix").isJsonNull()) {
        JsonArray jsonArrayaffix = jsonObj.getAsJsonArray("affix");
        if (jsonArrayaffix != null) {
          // ensure the json data is an array
          if (!jsonObj.get("affix").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `affix` to be an array in the JSON string but got `%s`", jsonObj.get("affix").toString()));
          }

          // validate the optional field `affix` (array)
          for (int i = 0; i < jsonArrayaffix.size(); i++) {
            DatacronAffix.validateJsonElement(jsonArrayaffix.get(i));
          };
        }
      }
      if (jsonObj.get("rerollOption") != null && !jsonObj.get("rerollOption").isJsonNull()) {
        JsonArray jsonArrayrerollOption = jsonObj.getAsJsonArray("rerollOption");
        if (jsonArrayrerollOption != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rerollOption").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rerollOption` to be an array in the JSON string but got `%s`", jsonObj.get("rerollOption").toString()));
          }

          // validate the optional field `rerollOption` (array)
          for (int i = 0; i < jsonArrayrerollOption.size(); i++) {
            DatacronAffix.validateJsonElement(jsonArrayrerollOption.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Datacron.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Datacron' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Datacron> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Datacron.class));

       return (TypeAdapter<T>) new TypeAdapter<Datacron>() {
           @Override
           public void write(JsonWriter out, Datacron value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Datacron read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Datacron given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Datacron
   * @throws IOException if the JSON string is invalid with respect to Datacron
   */
  public static Datacron fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Datacron.class);
  }

  /**
   * Convert an instance of Datacron to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

