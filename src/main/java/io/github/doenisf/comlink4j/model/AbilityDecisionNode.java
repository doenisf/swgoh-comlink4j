/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.AbilityDecisionParamModifier;
import io.github.doenisf.comlink4j.AbilityDecisionResult;
import io.github.doenisf.comlink4j.AbilityDecisionTarget;
import io.github.doenisf.comlink4j.AbilityDecisionType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * AbilityDecisionNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class AbilityDecisionNode {
  public static final String SERIALIZED_NAME_DECISION_TYPE = "decisionType";
  @SerializedName(SERIALIZED_NAME_DECISION_TYPE)
  private AbilityDecisionType decisionType;

  public static final String SERIALIZED_NAME_DECISION_TARGET = "decisionTarget";
  @SerializedName(SERIALIZED_NAME_DECISION_TARGET)
  private AbilityDecisionTarget decisionTarget;

  public static final String SERIALIZED_NAME_PARAM = "param";
  @SerializedName(SERIALIZED_NAME_PARAM)
  private List<String> param = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAM_MODIFIER = "paramModifier";
  @SerializedName(SERIALIZED_NAME_PARAM_MODIFIER)
  private AbilityDecisionParamModifier paramModifier;

  public static final String SERIALIZED_NAME_TARGET_EXCLUDE_SELF = "targetExcludeSelf";
  @SerializedName(SERIALIZED_NAME_TARGET_EXCLUDE_SELF)
  private Boolean targetExcludeSelf;

  public static final String SERIALIZED_NAME_CHANCE = "chance";
  @SerializedName(SERIALIZED_NAME_CHANCE)
  private Long chance;

  public static final String SERIALIZED_NAME_NEGATE = "negate";
  @SerializedName(SERIALIZED_NAME_NEGATE)
  private Boolean negate;

  public static final String SERIALIZED_NAME_DECISION_RESULT = "decisionResult";
  @SerializedName(SERIALIZED_NAME_DECISION_RESULT)
  private AbilityDecisionResult decisionResult;

  public AbilityDecisionNode() {
  }

  public AbilityDecisionNode decisionType(AbilityDecisionType decisionType) {
    this.decisionType = decisionType;
    return this;
  }

  /**
   * Get decisionType
   * @return decisionType
   */
  @javax.annotation.Nullable
  public AbilityDecisionType getDecisionType() {
    return decisionType;
  }

  public void setDecisionType(AbilityDecisionType decisionType) {
    this.decisionType = decisionType;
  }


  public AbilityDecisionNode decisionTarget(AbilityDecisionTarget decisionTarget) {
    this.decisionTarget = decisionTarget;
    return this;
  }

  /**
   * Get decisionTarget
   * @return decisionTarget
   */
  @javax.annotation.Nullable
  public AbilityDecisionTarget getDecisionTarget() {
    return decisionTarget;
  }

  public void setDecisionTarget(AbilityDecisionTarget decisionTarget) {
    this.decisionTarget = decisionTarget;
  }


  public AbilityDecisionNode param(List<String> param) {
    this.param = param;
    return this;
  }

  public AbilityDecisionNode addParamItem(String paramItem) {
    if (this.param == null) {
      this.param = new ArrayList<>();
    }
    this.param.add(paramItem);
    return this;
  }

  /**
   * Get param
   * @return param
   */
  @javax.annotation.Nullable
  public List<String> getParam() {
    return param;
  }

  public void setParam(List<String> param) {
    this.param = param;
  }


  public AbilityDecisionNode paramModifier(AbilityDecisionParamModifier paramModifier) {
    this.paramModifier = paramModifier;
    return this;
  }

  /**
   * Get paramModifier
   * @return paramModifier
   */
  @javax.annotation.Nullable
  public AbilityDecisionParamModifier getParamModifier() {
    return paramModifier;
  }

  public void setParamModifier(AbilityDecisionParamModifier paramModifier) {
    this.paramModifier = paramModifier;
  }


  public AbilityDecisionNode targetExcludeSelf(Boolean targetExcludeSelf) {
    this.targetExcludeSelf = targetExcludeSelf;
    return this;
  }

  /**
   * Get targetExcludeSelf
   * @return targetExcludeSelf
   */
  @javax.annotation.Nullable
  public Boolean getTargetExcludeSelf() {
    return targetExcludeSelf;
  }

  public void setTargetExcludeSelf(Boolean targetExcludeSelf) {
    this.targetExcludeSelf = targetExcludeSelf;
  }


  public AbilityDecisionNode chance(Long chance) {
    this.chance = chance;
    return this;
  }

  /**
   * Get chance
   * @return chance
   */
  @javax.annotation.Nullable
  public Long getChance() {
    return chance;
  }

  public void setChance(Long chance) {
    this.chance = chance;
  }


  public AbilityDecisionNode negate(Boolean negate) {
    this.negate = negate;
    return this;
  }

  /**
   * Get negate
   * @return negate
   */
  @javax.annotation.Nullable
  public Boolean getNegate() {
    return negate;
  }

  public void setNegate(Boolean negate) {
    this.negate = negate;
  }


  public AbilityDecisionNode decisionResult(AbilityDecisionResult decisionResult) {
    this.decisionResult = decisionResult;
    return this;
  }

  /**
   * Get decisionResult
   * @return decisionResult
   */
  @javax.annotation.Nullable
  public AbilityDecisionResult getDecisionResult() {
    return decisionResult;
  }

  public void setDecisionResult(AbilityDecisionResult decisionResult) {
    this.decisionResult = decisionResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbilityDecisionNode abilityDecisionNode = (AbilityDecisionNode) o;
    return Objects.equals(this.decisionType, abilityDecisionNode.decisionType) &&
        Objects.equals(this.decisionTarget, abilityDecisionNode.decisionTarget) &&
        Objects.equals(this.param, abilityDecisionNode.param) &&
        Objects.equals(this.paramModifier, abilityDecisionNode.paramModifier) &&
        Objects.equals(this.targetExcludeSelf, abilityDecisionNode.targetExcludeSelf) &&
        Objects.equals(this.chance, abilityDecisionNode.chance) &&
        Objects.equals(this.negate, abilityDecisionNode.negate) &&
        Objects.equals(this.decisionResult, abilityDecisionNode.decisionResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decisionType, decisionTarget, param, paramModifier, targetExcludeSelf, chance, negate, decisionResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbilityDecisionNode {\n");
    sb.append("    decisionType: ").append(toIndentedString(decisionType)).append("\n");
    sb.append("    decisionTarget: ").append(toIndentedString(decisionTarget)).append("\n");
    sb.append("    param: ").append(toIndentedString(param)).append("\n");
    sb.append("    paramModifier: ").append(toIndentedString(paramModifier)).append("\n");
    sb.append("    targetExcludeSelf: ").append(toIndentedString(targetExcludeSelf)).append("\n");
    sb.append("    chance: ").append(toIndentedString(chance)).append("\n");
    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("    decisionResult: ").append(toIndentedString(decisionResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("decisionType");
    openapiFields.add("decisionTarget");
    openapiFields.add("param");
    openapiFields.add("paramModifier");
    openapiFields.add("targetExcludeSelf");
    openapiFields.add("chance");
    openapiFields.add("negate");
    openapiFields.add("decisionResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbilityDecisionNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbilityDecisionNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbilityDecisionNode is not found in the empty JSON string", AbilityDecisionNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbilityDecisionNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbilityDecisionNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `decisionType`
      if (jsonObj.get("decisionType") != null && !jsonObj.get("decisionType").isJsonNull()) {
        AbilityDecisionType.validateJsonElement(jsonObj.get("decisionType"));
      }
      // validate the optional field `decisionTarget`
      if (jsonObj.get("decisionTarget") != null && !jsonObj.get("decisionTarget").isJsonNull()) {
        AbilityDecisionTarget.validateJsonElement(jsonObj.get("decisionTarget"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("param") != null && !jsonObj.get("param").isJsonNull() && !jsonObj.get("param").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `param` to be an array in the JSON string but got `%s`", jsonObj.get("param").toString()));
      }
      // validate the optional field `paramModifier`
      if (jsonObj.get("paramModifier") != null && !jsonObj.get("paramModifier").isJsonNull()) {
        AbilityDecisionParamModifier.validateJsonElement(jsonObj.get("paramModifier"));
      }
      // validate the optional field `decisionResult`
      if (jsonObj.get("decisionResult") != null && !jsonObj.get("decisionResult").isJsonNull()) {
        AbilityDecisionResult.validateJsonElement(jsonObj.get("decisionResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbilityDecisionNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbilityDecisionNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbilityDecisionNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbilityDecisionNode.class));

       return (TypeAdapter<T>) new TypeAdapter<AbilityDecisionNode>() {
           @Override
           public void write(JsonWriter out, AbilityDecisionNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbilityDecisionNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbilityDecisionNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbilityDecisionNode
   * @throws IOException if the JSON string is invalid with respect to AbilityDecisionNode
   */
  public static AbilityDecisionNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbilityDecisionNode.class);
  }

  /**
   * Convert an instance of AbilityDecisionNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

