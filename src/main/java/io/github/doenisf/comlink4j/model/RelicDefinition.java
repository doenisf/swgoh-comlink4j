/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.*;

/**
 * RelicDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class RelicDefinition {
  public static final String SERIALIZED_NAME_RELIC_TIER_DEFINITION_ID = "relicTierDefinitionId";
  @SerializedName(SERIALIZED_NAME_RELIC_TIER_DEFINITION_ID)
  private List<String> relicTierDefinitionId = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPGRADE_TABLE_ID = "upgradeTableId";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TABLE_ID)
  private String upgradeTableId;

  public static final String SERIALIZED_NAME_ALIGNMENT_COLOR_OVERRIDE = "alignmentColorOverride";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT_COLOR_OVERRIDE)
  private String alignmentColorOverride;

  public static final String SERIALIZED_NAME_TEXTURE = "texture";
  @SerializedName(SERIALIZED_NAME_TEXTURE)
  private String texture;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public RelicDefinition() {
  }

  public RelicDefinition relicTierDefinitionId(List<String> relicTierDefinitionId) {
    this.relicTierDefinitionId = relicTierDefinitionId;
    return this;
  }

  public RelicDefinition addRelicTierDefinitionIdItem(String relicTierDefinitionIdItem) {
    if (this.relicTierDefinitionId == null) {
      this.relicTierDefinitionId = new ArrayList<>();
    }
    this.relicTierDefinitionId.add(relicTierDefinitionIdItem);
    return this;
  }

  /**
   * Get relicTierDefinitionId
   * @return relicTierDefinitionId
   */
  @javax.annotation.Nullable
  public List<String> getRelicTierDefinitionId() {
    return relicTierDefinitionId;
  }

  public void setRelicTierDefinitionId(List<String> relicTierDefinitionId) {
    this.relicTierDefinitionId = relicTierDefinitionId;
  }


  public RelicDefinition upgradeTableId(String upgradeTableId) {
    this.upgradeTableId = upgradeTableId;
    return this;
  }

  /**
   * Get upgradeTableId
   * @return upgradeTableId
   */
  @javax.annotation.Nullable
  public String getUpgradeTableId() {
    return upgradeTableId;
  }

  public void setUpgradeTableId(String upgradeTableId) {
    this.upgradeTableId = upgradeTableId;
  }


  public RelicDefinition alignmentColorOverride(String alignmentColorOverride) {
    this.alignmentColorOverride = alignmentColorOverride;
    return this;
  }

  /**
   * Get alignmentColorOverride
   * @return alignmentColorOverride
   */
  @javax.annotation.Nullable
  public String getAlignmentColorOverride() {
    return alignmentColorOverride;
  }

  public void setAlignmentColorOverride(String alignmentColorOverride) {
    this.alignmentColorOverride = alignmentColorOverride;
  }


  public RelicDefinition texture(String texture) {
    this.texture = texture;
    return this;
  }

  /**
   * Get texture
   * @return texture
   */
  @javax.annotation.Nullable
  public String getTexture() {
    return texture;
  }

  public void setTexture(String texture) {
    this.texture = texture;
  }


  public RelicDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelicDefinition relicDefinition = (RelicDefinition) o;
    return Objects.equals(this.relicTierDefinitionId, relicDefinition.relicTierDefinitionId) &&
        Objects.equals(this.upgradeTableId, relicDefinition.upgradeTableId) &&
        Objects.equals(this.alignmentColorOverride, relicDefinition.alignmentColorOverride) &&
        Objects.equals(this.texture, relicDefinition.texture) &&
        Objects.equals(this.nameKey, relicDefinition.nameKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relicTierDefinitionId, upgradeTableId, alignmentColorOverride, texture, nameKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelicDefinition {\n");
    sb.append("    relicTierDefinitionId: ").append(toIndentedString(relicTierDefinitionId)).append("\n");
    sb.append("    upgradeTableId: ").append(toIndentedString(upgradeTableId)).append("\n");
    sb.append("    alignmentColorOverride: ").append(toIndentedString(alignmentColorOverride)).append("\n");
    sb.append("    texture: ").append(toIndentedString(texture)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relicTierDefinitionId");
    openapiFields.add("upgradeTableId");
    openapiFields.add("alignmentColorOverride");
    openapiFields.add("texture");
    openapiFields.add("nameKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelicDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelicDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelicDefinition is not found in the empty JSON string", RelicDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelicDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelicDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("relicTierDefinitionId") != null && !jsonObj.get("relicTierDefinitionId").isJsonNull() && !jsonObj.get("relicTierDefinitionId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relicTierDefinitionId` to be an array in the JSON string but got `%s`", jsonObj.get("relicTierDefinitionId").toString()));
      }
      if ((jsonObj.get("upgradeTableId") != null && !jsonObj.get("upgradeTableId").isJsonNull()) && !jsonObj.get("upgradeTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeTableId").toString()));
      }
      if ((jsonObj.get("alignmentColorOverride") != null && !jsonObj.get("alignmentColorOverride").isJsonNull()) && !jsonObj.get("alignmentColorOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alignmentColorOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alignmentColorOverride").toString()));
      }
      if ((jsonObj.get("texture") != null && !jsonObj.get("texture").isJsonNull()) && !jsonObj.get("texture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `texture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("texture").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelicDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelicDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelicDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelicDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<RelicDefinition>() {
           @Override
           public void write(JsonWriter out, RelicDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelicDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelicDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelicDefinition
   * @throws IOException if the JSON string is invalid with respect to RelicDefinition
   */
  public static RelicDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelicDefinition.class);
  }

  /**
   * Convert an instance of RelicDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

