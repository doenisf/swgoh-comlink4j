/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.UnitStat;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * DatacronAffixTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class DatacronAffixTemplate {
  public static final String SERIALIZED_NAME_ABILITY_ID = "abilityId";
  @SerializedName(SERIALIZED_NAME_ABILITY_ID)
  private String abilityId;

  public static final String SERIALIZED_NAME_TARGET_RULE = "targetRule";
  @SerializedName(SERIALIZED_NAME_TARGET_RULE)
  private String targetRule;

  public static final String SERIALIZED_NAME_STAT_TYPE = "statType";
  @SerializedName(SERIALIZED_NAME_STAT_TYPE)
  private UnitStat statType;

  public static final String SERIALIZED_NAME_STAT_VALUE_MIN = "statValueMin";
  @SerializedName(SERIALIZED_NAME_STAT_VALUE_MIN)
  private Long statValueMin;

  public static final String SERIALIZED_NAME_STAT_VALUE_MAX = "statValueMax";
  @SerializedName(SERIALIZED_NAME_STAT_VALUE_MAX)
  private Long statValueMax;

  public static final String SERIALIZED_NAME_MIN_TIER = "minTier";
  @SerializedName(SERIALIZED_NAME_MIN_TIER)
  private Integer minTier;

  public static final String SERIALIZED_NAME_MAX_TIER = "maxTier";
  @SerializedName(SERIALIZED_NAME_MAX_TIER)
  private Integer maxTier;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<String> tag = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE_ICON = "scopeIcon";
  @SerializedName(SERIALIZED_NAME_SCOPE_ICON)
  private String scopeIcon;

  public DatacronAffixTemplate() {
  }

  public DatacronAffixTemplate abilityId(String abilityId) {
    this.abilityId = abilityId;
    return this;
  }

  /**
   * Get abilityId
   * @return abilityId
   */
  @javax.annotation.Nullable
  public String getAbilityId() {
    return abilityId;
  }

  public void setAbilityId(String abilityId) {
    this.abilityId = abilityId;
  }


  public DatacronAffixTemplate targetRule(String targetRule) {
    this.targetRule = targetRule;
    return this;
  }

  /**
   * Get targetRule
   * @return targetRule
   */
  @javax.annotation.Nullable
  public String getTargetRule() {
    return targetRule;
  }

  public void setTargetRule(String targetRule) {
    this.targetRule = targetRule;
  }


  public DatacronAffixTemplate statType(UnitStat statType) {
    this.statType = statType;
    return this;
  }

  /**
   * Get statType
   * @return statType
   */
  @javax.annotation.Nullable
  public UnitStat getStatType() {
    return statType;
  }

  public void setStatType(UnitStat statType) {
    this.statType = statType;
  }


  public DatacronAffixTemplate statValueMin(Long statValueMin) {
    this.statValueMin = statValueMin;
    return this;
  }

  /**
   * Get statValueMin
   * @return statValueMin
   */
  @javax.annotation.Nullable
  public Long getStatValueMin() {
    return statValueMin;
  }

  public void setStatValueMin(Long statValueMin) {
    this.statValueMin = statValueMin;
  }


  public DatacronAffixTemplate statValueMax(Long statValueMax) {
    this.statValueMax = statValueMax;
    return this;
  }

  /**
   * Get statValueMax
   * @return statValueMax
   */
  @javax.annotation.Nullable
  public Long getStatValueMax() {
    return statValueMax;
  }

  public void setStatValueMax(Long statValueMax) {
    this.statValueMax = statValueMax;
  }


  public DatacronAffixTemplate minTier(Integer minTier) {
    this.minTier = minTier;
    return this;
  }

  /**
   * Get minTier
   * @return minTier
   */
  @javax.annotation.Nullable
  public Integer getMinTier() {
    return minTier;
  }

  public void setMinTier(Integer minTier) {
    this.minTier = minTier;
  }


  public DatacronAffixTemplate maxTier(Integer maxTier) {
    this.maxTier = maxTier;
    return this;
  }

  /**
   * Get maxTier
   * @return maxTier
   */
  @javax.annotation.Nullable
  public Integer getMaxTier() {
    return maxTier;
  }

  public void setMaxTier(Integer maxTier) {
    this.maxTier = maxTier;
  }


  public DatacronAffixTemplate tag(List<String> tag) {
    this.tag = tag;
    return this;
  }

  public DatacronAffixTemplate addTagItem(String tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public List<String> getTag() {
    return tag;
  }

  public void setTag(List<String> tag) {
    this.tag = tag;
  }


  public DatacronAffixTemplate scopeIcon(String scopeIcon) {
    this.scopeIcon = scopeIcon;
    return this;
  }

  /**
   * Get scopeIcon
   * @return scopeIcon
   */
  @javax.annotation.Nullable
  public String getScopeIcon() {
    return scopeIcon;
  }

  public void setScopeIcon(String scopeIcon) {
    this.scopeIcon = scopeIcon;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatacronAffixTemplate datacronAffixTemplate = (DatacronAffixTemplate) o;
    return Objects.equals(this.abilityId, datacronAffixTemplate.abilityId) &&
        Objects.equals(this.targetRule, datacronAffixTemplate.targetRule) &&
        Objects.equals(this.statType, datacronAffixTemplate.statType) &&
        Objects.equals(this.statValueMin, datacronAffixTemplate.statValueMin) &&
        Objects.equals(this.statValueMax, datacronAffixTemplate.statValueMax) &&
        Objects.equals(this.minTier, datacronAffixTemplate.minTier) &&
        Objects.equals(this.maxTier, datacronAffixTemplate.maxTier) &&
        Objects.equals(this.tag, datacronAffixTemplate.tag) &&
        Objects.equals(this.scopeIcon, datacronAffixTemplate.scopeIcon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abilityId, targetRule, statType, statValueMin, statValueMax, minTier, maxTier, tag, scopeIcon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatacronAffixTemplate {\n");
    sb.append("    abilityId: ").append(toIndentedString(abilityId)).append("\n");
    sb.append("    targetRule: ").append(toIndentedString(targetRule)).append("\n");
    sb.append("    statType: ").append(toIndentedString(statType)).append("\n");
    sb.append("    statValueMin: ").append(toIndentedString(statValueMin)).append("\n");
    sb.append("    statValueMax: ").append(toIndentedString(statValueMax)).append("\n");
    sb.append("    minTier: ").append(toIndentedString(minTier)).append("\n");
    sb.append("    maxTier: ").append(toIndentedString(maxTier)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    scopeIcon: ").append(toIndentedString(scopeIcon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abilityId");
    openapiFields.add("targetRule");
    openapiFields.add("statType");
    openapiFields.add("statValueMin");
    openapiFields.add("statValueMax");
    openapiFields.add("minTier");
    openapiFields.add("maxTier");
    openapiFields.add("tag");
    openapiFields.add("scopeIcon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatacronAffixTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatacronAffixTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatacronAffixTemplate is not found in the empty JSON string", DatacronAffixTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatacronAffixTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatacronAffixTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abilityId") != null && !jsonObj.get("abilityId").isJsonNull()) && !jsonObj.get("abilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abilityId").toString()));
      }
      if ((jsonObj.get("targetRule") != null && !jsonObj.get("targetRule").isJsonNull()) && !jsonObj.get("targetRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetRule").toString()));
      }
      // validate the optional field `statType`
      if (jsonObj.get("statType") != null && !jsonObj.get("statType").isJsonNull()) {
        UnitStat.validateJsonElement(jsonObj.get("statType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull() && !jsonObj.get("tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("scopeIcon") != null && !jsonObj.get("scopeIcon").isJsonNull()) && !jsonObj.get("scopeIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopeIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scopeIcon").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatacronAffixTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatacronAffixTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatacronAffixTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatacronAffixTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<DatacronAffixTemplate>() {
           @Override
           public void write(JsonWriter out, DatacronAffixTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatacronAffixTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatacronAffixTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatacronAffixTemplate
   * @throws IOException if the JSON string is invalid with respect to DatacronAffixTemplate
   */
  public static DatacronAffixTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatacronAffixTemplate.class);
  }

  /**
   * Convert an instance of DatacronAffixTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

