/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * PersistentVfx
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class PersistentVfx {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PREFAB = "prefab";
  @SerializedName(SERIALIZED_NAME_PREFAB)
  private String prefab;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_LINE_OVERRIDE = "lineOverride";
  @SerializedName(SERIALIZED_NAME_LINE_OVERRIDE)
  private String lineOverride;

  public PersistentVfx() {
  }

  public PersistentVfx id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PersistentVfx prefab(String prefab) {
    this.prefab = prefab;
    return this;
  }

  /**
   * Get prefab
   * @return prefab
   */
  @javax.annotation.Nullable
  public String getPrefab() {
    return prefab;
  }

  public void setPrefab(String prefab) {
    this.prefab = prefab;
  }


  public PersistentVfx priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public PersistentVfx lineOverride(String lineOverride) {
    this.lineOverride = lineOverride;
    return this;
  }

  /**
   * Get lineOverride
   * @return lineOverride
   */
  @javax.annotation.Nullable
  public String getLineOverride() {
    return lineOverride;
  }

  public void setLineOverride(String lineOverride) {
    this.lineOverride = lineOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersistentVfx persistentVfx = (PersistentVfx) o;
    return Objects.equals(this.id, persistentVfx.id) &&
        Objects.equals(this.prefab, persistentVfx.prefab) &&
        Objects.equals(this.priority, persistentVfx.priority) &&
        Objects.equals(this.lineOverride, persistentVfx.lineOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, prefab, priority, lineOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersistentVfx {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    prefab: ").append(toIndentedString(prefab)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    lineOverride: ").append(toIndentedString(lineOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("prefab");
    openapiFields.add("priority");
    openapiFields.add("lineOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersistentVfx
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersistentVfx.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersistentVfx is not found in the empty JSON string", PersistentVfx.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersistentVfx.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersistentVfx` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("prefab") != null && !jsonObj.get("prefab").isJsonNull()) && !jsonObj.get("prefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefab").toString()));
      }
      if ((jsonObj.get("lineOverride") != null && !jsonObj.get("lineOverride").isJsonNull()) && !jsonObj.get("lineOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineOverride").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersistentVfx.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersistentVfx' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersistentVfx> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersistentVfx.class));

       return (TypeAdapter<T>) new TypeAdapter<PersistentVfx>() {
           @Override
           public void write(JsonWriter out, PersistentVfx value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersistentVfx read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersistentVfx given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersistentVfx
   * @throws IOException if the JSON string is invalid with respect to PersistentVfx
   */
  public static PersistentVfx fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersistentVfx.class);
  }

  /**
   * Convert an instance of PersistentVfx to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

