/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CurrencyItem;
import io.github.doenisf.comlink4j.model.EquipmentType;
import io.github.doenisf.comlink4j.model.LookupActionLink;
import io.github.doenisf.comlink4j.model.LookupMission;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.StatDef;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * EquipmentDef
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class EquipmentDef {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_ICON_KEY = "iconKey";
  @SerializedName(SERIALIZED_NAME_ICON_KEY)
  private String iconKey;

  public static final String SERIALIZED_NAME_REQUIRED_LEVEL = "requiredLevel";
  @SerializedName(SERIALIZED_NAME_REQUIRED_LEVEL)
  private Integer requiredLevel;

  public static final String SERIALIZED_NAME_EQUIPMENT_STAT = "equipmentStat";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT_STAT)
  private StatDef equipmentStat;

  public static final String SERIALIZED_NAME_RECIPE_ID = "recipeId";
  @SerializedName(SERIALIZED_NAME_RECIPE_ID)
  private String recipeId;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private UnitTier tier;

  public static final String SERIALIZED_NAME_SELL_VALUE = "sellValue";
  @SerializedName(SERIALIZED_NAME_SELL_VALUE)
  private CurrencyItem sellValue;

  public static final String SERIALIZED_NAME_LOOKUP_MISSION = "lookupMission";
  @SerializedName(SERIALIZED_NAME_LOOKUP_MISSION)
  private List<LookupMission> lookupMission = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARK = "mark";
  @SerializedName(SERIALIZED_NAME_MARK)
  private String mark;

  public static final String SERIALIZED_NAME_OBTAINABLE_TIME = "obtainableTime";
  @SerializedName(SERIALIZED_NAME_OBTAINABLE_TIME)
  private Long obtainableTime;

  public static final String SERIALIZED_NAME_RAID_LOOKUP = "raidLookup";
  @SerializedName(SERIALIZED_NAME_RAID_LOOKUP)
  private List<LookupMission> raidLookup = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EquipmentType type;

  public static final String SERIALIZED_NAME_ACTION_LINK_LOOKUP = "actionLinkLookup";
  @SerializedName(SERIALIZED_NAME_ACTION_LINK_LOOKUP)
  private List<LookupActionLink> actionLinkLookup = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_RARITY = "requiredRarity";
  @SerializedName(SERIALIZED_NAME_REQUIRED_RARITY)
  private Rarity requiredRarity;

  public static final String SERIALIZED_NAME_FIND_FLOW_DISABLED = "findFlowDisabled";
  @SerializedName(SERIALIZED_NAME_FIND_FLOW_DISABLED)
  private Boolean findFlowDisabled;

  public static final String SERIALIZED_NAME_RAID_IMMEDIATE_LOOKUP = "raidImmediateLookup";
  @SerializedName(SERIALIZED_NAME_RAID_IMMEDIATE_LOOKUP)
  private List<LookupMission> raidImmediateLookup = new ArrayList<>();

  public EquipmentDef() {
  }

  public EquipmentDef id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EquipmentDef nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public EquipmentDef iconKey(String iconKey) {
    this.iconKey = iconKey;
    return this;
  }

  /**
   * Get iconKey
   * @return iconKey
   */
  @javax.annotation.Nullable
  public String getIconKey() {
    return iconKey;
  }

  public void setIconKey(String iconKey) {
    this.iconKey = iconKey;
  }


  public EquipmentDef requiredLevel(Integer requiredLevel) {
    this.requiredLevel = requiredLevel;
    return this;
  }

  /**
   * Get requiredLevel
   * @return requiredLevel
   */
  @javax.annotation.Nullable
  public Integer getRequiredLevel() {
    return requiredLevel;
  }

  public void setRequiredLevel(Integer requiredLevel) {
    this.requiredLevel = requiredLevel;
  }


  public EquipmentDef equipmentStat(StatDef equipmentStat) {
    this.equipmentStat = equipmentStat;
    return this;
  }

  /**
   * Get equipmentStat
   * @return equipmentStat
   */
  @javax.annotation.Nullable
  public StatDef getEquipmentStat() {
    return equipmentStat;
  }

  public void setEquipmentStat(StatDef equipmentStat) {
    this.equipmentStat = equipmentStat;
  }


  public EquipmentDef recipeId(String recipeId) {
    this.recipeId = recipeId;
    return this;
  }

  /**
   * Get recipeId
   * @return recipeId
   */
  @javax.annotation.Nullable
  public String getRecipeId() {
    return recipeId;
  }

  public void setRecipeId(String recipeId) {
    this.recipeId = recipeId;
  }


  public EquipmentDef tier(UnitTier tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public UnitTier getTier() {
    return tier;
  }

  public void setTier(UnitTier tier) {
    this.tier = tier;
  }


  public EquipmentDef sellValue(CurrencyItem sellValue) {
    this.sellValue = sellValue;
    return this;
  }

  /**
   * Get sellValue
   * @return sellValue
   */
  @javax.annotation.Nullable
  public CurrencyItem getSellValue() {
    return sellValue;
  }

  public void setSellValue(CurrencyItem sellValue) {
    this.sellValue = sellValue;
  }


  public EquipmentDef lookupMission(List<LookupMission> lookupMission) {
    this.lookupMission = lookupMission;
    return this;
  }

  public EquipmentDef addLookupMissionItem(LookupMission lookupMissionItem) {
    if (this.lookupMission == null) {
      this.lookupMission = new ArrayList<>();
    }
    this.lookupMission.add(lookupMissionItem);
    return this;
  }

  /**
   * Get lookupMission
   * @return lookupMission
   */
  @javax.annotation.Nullable
  public List<LookupMission> getLookupMission() {
    return lookupMission;
  }

  public void setLookupMission(List<LookupMission> lookupMission) {
    this.lookupMission = lookupMission;
  }


  public EquipmentDef mark(String mark) {
    this.mark = mark;
    return this;
  }

  /**
   * Get mark
   * @return mark
   */
  @javax.annotation.Nullable
  public String getMark() {
    return mark;
  }

  public void setMark(String mark) {
    this.mark = mark;
  }


  public EquipmentDef obtainableTime(Long obtainableTime) {
    this.obtainableTime = obtainableTime;
    return this;
  }

  /**
   * Get obtainableTime
   * @return obtainableTime
   */
  @javax.annotation.Nullable
  public Long getObtainableTime() {
    return obtainableTime;
  }

  public void setObtainableTime(Long obtainableTime) {
    this.obtainableTime = obtainableTime;
  }


  public EquipmentDef raidLookup(List<LookupMission> raidLookup) {
    this.raidLookup = raidLookup;
    return this;
  }

  public EquipmentDef addRaidLookupItem(LookupMission raidLookupItem) {
    if (this.raidLookup == null) {
      this.raidLookup = new ArrayList<>();
    }
    this.raidLookup.add(raidLookupItem);
    return this;
  }

  /**
   * Get raidLookup
   * @return raidLookup
   */
  @javax.annotation.Nullable
  public List<LookupMission> getRaidLookup() {
    return raidLookup;
  }

  public void setRaidLookup(List<LookupMission> raidLookup) {
    this.raidLookup = raidLookup;
  }


  public EquipmentDef type(EquipmentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public EquipmentType getType() {
    return type;
  }

  public void setType(EquipmentType type) {
    this.type = type;
  }


  public EquipmentDef actionLinkLookup(List<LookupActionLink> actionLinkLookup) {
    this.actionLinkLookup = actionLinkLookup;
    return this;
  }

  public EquipmentDef addActionLinkLookupItem(LookupActionLink actionLinkLookupItem) {
    if (this.actionLinkLookup == null) {
      this.actionLinkLookup = new ArrayList<>();
    }
    this.actionLinkLookup.add(actionLinkLookupItem);
    return this;
  }

  /**
   * Get actionLinkLookup
   * @return actionLinkLookup
   */
  @javax.annotation.Nullable
  public List<LookupActionLink> getActionLinkLookup() {
    return actionLinkLookup;
  }

  public void setActionLinkLookup(List<LookupActionLink> actionLinkLookup) {
    this.actionLinkLookup = actionLinkLookup;
  }


  public EquipmentDef requiredRarity(Rarity requiredRarity) {
    this.requiredRarity = requiredRarity;
    return this;
  }

  /**
   * Get requiredRarity
   * @return requiredRarity
   */
  @javax.annotation.Nullable
  public Rarity getRequiredRarity() {
    return requiredRarity;
  }

  public void setRequiredRarity(Rarity requiredRarity) {
    this.requiredRarity = requiredRarity;
  }


  public EquipmentDef findFlowDisabled(Boolean findFlowDisabled) {
    this.findFlowDisabled = findFlowDisabled;
    return this;
  }

  /**
   * Get findFlowDisabled
   * @return findFlowDisabled
   */
  @javax.annotation.Nullable
  public Boolean getFindFlowDisabled() {
    return findFlowDisabled;
  }

  public void setFindFlowDisabled(Boolean findFlowDisabled) {
    this.findFlowDisabled = findFlowDisabled;
  }


  public EquipmentDef raidImmediateLookup(List<LookupMission> raidImmediateLookup) {
    this.raidImmediateLookup = raidImmediateLookup;
    return this;
  }

  public EquipmentDef addRaidImmediateLookupItem(LookupMission raidImmediateLookupItem) {
    if (this.raidImmediateLookup == null) {
      this.raidImmediateLookup = new ArrayList<>();
    }
    this.raidImmediateLookup.add(raidImmediateLookupItem);
    return this;
  }

  /**
   * Get raidImmediateLookup
   * @return raidImmediateLookup
   */
  @javax.annotation.Nullable
  public List<LookupMission> getRaidImmediateLookup() {
    return raidImmediateLookup;
  }

  public void setRaidImmediateLookup(List<LookupMission> raidImmediateLookup) {
    this.raidImmediateLookup = raidImmediateLookup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EquipmentDef equipmentDef = (EquipmentDef) o;
    return Objects.equals(this.id, equipmentDef.id) &&
        Objects.equals(this.nameKey, equipmentDef.nameKey) &&
        Objects.equals(this.iconKey, equipmentDef.iconKey) &&
        Objects.equals(this.requiredLevel, equipmentDef.requiredLevel) &&
        Objects.equals(this.equipmentStat, equipmentDef.equipmentStat) &&
        Objects.equals(this.recipeId, equipmentDef.recipeId) &&
        Objects.equals(this.tier, equipmentDef.tier) &&
        Objects.equals(this.sellValue, equipmentDef.sellValue) &&
        Objects.equals(this.lookupMission, equipmentDef.lookupMission) &&
        Objects.equals(this.mark, equipmentDef.mark) &&
        Objects.equals(this.obtainableTime, equipmentDef.obtainableTime) &&
        Objects.equals(this.raidLookup, equipmentDef.raidLookup) &&
        Objects.equals(this.type, equipmentDef.type) &&
        Objects.equals(this.actionLinkLookup, equipmentDef.actionLinkLookup) &&
        Objects.equals(this.requiredRarity, equipmentDef.requiredRarity) &&
        Objects.equals(this.findFlowDisabled, equipmentDef.findFlowDisabled) &&
        Objects.equals(this.raidImmediateLookup, equipmentDef.raidImmediateLookup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, iconKey, requiredLevel, equipmentStat, recipeId, tier, sellValue, lookupMission, mark, obtainableTime, raidLookup, type, actionLinkLookup, requiredRarity, findFlowDisabled, raidImmediateLookup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EquipmentDef {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    iconKey: ").append(toIndentedString(iconKey)).append("\n");
    sb.append("    requiredLevel: ").append(toIndentedString(requiredLevel)).append("\n");
    sb.append("    equipmentStat: ").append(toIndentedString(equipmentStat)).append("\n");
    sb.append("    recipeId: ").append(toIndentedString(recipeId)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    sellValue: ").append(toIndentedString(sellValue)).append("\n");
    sb.append("    lookupMission: ").append(toIndentedString(lookupMission)).append("\n");
    sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
    sb.append("    obtainableTime: ").append(toIndentedString(obtainableTime)).append("\n");
    sb.append("    raidLookup: ").append(toIndentedString(raidLookup)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    actionLinkLookup: ").append(toIndentedString(actionLinkLookup)).append("\n");
    sb.append("    requiredRarity: ").append(toIndentedString(requiredRarity)).append("\n");
    sb.append("    findFlowDisabled: ").append(toIndentedString(findFlowDisabled)).append("\n");
    sb.append("    raidImmediateLookup: ").append(toIndentedString(raidImmediateLookup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("iconKey");
    openapiFields.add("requiredLevel");
    openapiFields.add("equipmentStat");
    openapiFields.add("recipeId");
    openapiFields.add("tier");
    openapiFields.add("sellValue");
    openapiFields.add("lookupMission");
    openapiFields.add("mark");
    openapiFields.add("obtainableTime");
    openapiFields.add("raidLookup");
    openapiFields.add("type");
    openapiFields.add("actionLinkLookup");
    openapiFields.add("requiredRarity");
    openapiFields.add("findFlowDisabled");
    openapiFields.add("raidImmediateLookup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EquipmentDef
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EquipmentDef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EquipmentDef is not found in the empty JSON string", EquipmentDef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EquipmentDef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EquipmentDef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("iconKey") != null && !jsonObj.get("iconKey").isJsonNull()) && !jsonObj.get("iconKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconKey").toString()));
      }
      // validate the optional field `equipmentStat`
      if (jsonObj.get("equipmentStat") != null && !jsonObj.get("equipmentStat").isJsonNull()) {
        StatDef.validateJsonElement(jsonObj.get("equipmentStat"));
      }
      if ((jsonObj.get("recipeId") != null && !jsonObj.get("recipeId").isJsonNull()) && !jsonObj.get("recipeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipeId").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("tier"));
      }
      // validate the optional field `sellValue`
      if (jsonObj.get("sellValue") != null && !jsonObj.get("sellValue").isJsonNull()) {
        CurrencyItem.validateJsonElement(jsonObj.get("sellValue"));
      }
      if (jsonObj.get("lookupMission") != null && !jsonObj.get("lookupMission").isJsonNull()) {
        JsonArray jsonArraylookupMission = jsonObj.getAsJsonArray("lookupMission");
        if (jsonArraylookupMission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lookupMission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lookupMission` to be an array in the JSON string but got `%s`", jsonObj.get("lookupMission").toString()));
          }

          // validate the optional field `lookupMission` (array)
          for (int i = 0; i < jsonArraylookupMission.size(); i++) {
            LookupMission.validateJsonElement(jsonArraylookupMission.get(i));
          };
        }
      }
      if ((jsonObj.get("mark") != null && !jsonObj.get("mark").isJsonNull()) && !jsonObj.get("mark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mark").toString()));
      }
      if (jsonObj.get("raidLookup") != null && !jsonObj.get("raidLookup").isJsonNull()) {
        JsonArray jsonArrayraidLookup = jsonObj.getAsJsonArray("raidLookup");
        if (jsonArrayraidLookup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidLookup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidLookup` to be an array in the JSON string but got `%s`", jsonObj.get("raidLookup").toString()));
          }

          // validate the optional field `raidLookup` (array)
          for (int i = 0; i < jsonArrayraidLookup.size(); i++) {
            LookupMission.validateJsonElement(jsonArrayraidLookup.get(i));
          };
        }
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        EquipmentType.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("actionLinkLookup") != null && !jsonObj.get("actionLinkLookup").isJsonNull()) {
        JsonArray jsonArrayactionLinkLookup = jsonObj.getAsJsonArray("actionLinkLookup");
        if (jsonArrayactionLinkLookup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actionLinkLookup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actionLinkLookup` to be an array in the JSON string but got `%s`", jsonObj.get("actionLinkLookup").toString()));
          }

          // validate the optional field `actionLinkLookup` (array)
          for (int i = 0; i < jsonArrayactionLinkLookup.size(); i++) {
            LookupActionLink.validateJsonElement(jsonArrayactionLinkLookup.get(i));
          };
        }
      }
      // validate the optional field `requiredRarity`
      if (jsonObj.get("requiredRarity") != null && !jsonObj.get("requiredRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("requiredRarity"));
      }
      if (jsonObj.get("raidImmediateLookup") != null && !jsonObj.get("raidImmediateLookup").isJsonNull()) {
        JsonArray jsonArrayraidImmediateLookup = jsonObj.getAsJsonArray("raidImmediateLookup");
        if (jsonArrayraidImmediateLookup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidImmediateLookup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidImmediateLookup` to be an array in the JSON string but got `%s`", jsonObj.get("raidImmediateLookup").toString()));
          }

          // validate the optional field `raidImmediateLookup` (array)
          for (int i = 0; i < jsonArrayraidImmediateLookup.size(); i++) {
            LookupMission.validateJsonElement(jsonArrayraidImmediateLookup.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EquipmentDef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EquipmentDef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EquipmentDef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EquipmentDef.class));

       return (TypeAdapter<T>) new TypeAdapter<EquipmentDef>() {
           @Override
           public void write(JsonWriter out, EquipmentDef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EquipmentDef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EquipmentDef given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EquipmentDef
   * @throws IOException if the JSON string is invalid with respect to EquipmentDef
   */
  public static EquipmentDef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EquipmentDef.class);
  }

  /**
   * Convert an instance of EquipmentDef to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

