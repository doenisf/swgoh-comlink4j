/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.BucketItem;
import io.github.doenisf.comlink4j.CampaignElementProgress;
import io.github.doenisf.comlink4j.CampaignNodeMission;
import io.github.doenisf.comlink4j.CombatType;
import io.github.doenisf.comlink4j.EntryCategoryAllowed;
import io.github.doenisf.comlink4j.ForceAlignment;
import io.github.doenisf.comlink4j.UnitClass;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * CampaignNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CampaignNode {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_CAMPAIGN_NODE_MISSION = "campaignNodeMission";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NODE_MISSION)
  private List<CampaignNodeMission> campaignNodeMission = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_PREFAB = "homePrefab";
  @SerializedName(SERIALIZED_NAME_HOME_PREFAB)
  private String homePrefab;

  public static final String SERIALIZED_NAME_FORCE_ALIGNMENT = "forceAlignment";
  @SerializedName(SERIALIZED_NAME_FORCE_ALIGNMENT)
  private ForceAlignment forceAlignment;

  public static final String SERIALIZED_NAME_DOMINANT_CLASS = "dominantClass";
  @SerializedName(SERIALIZED_NAME_DOMINANT_CLASS)
  private UnitClass dominantClass;

  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public static final String SERIALIZED_NAME_IS_CANNON = "isCannon";
  @SerializedName(SERIALIZED_NAME_IS_CANNON)
  private Boolean isCannon;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private CampaignElementProgress progress;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY = "unlockRequirementLocalizationKey";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY)
  private String unlockRequirementLocalizationKey;

  public static final String SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY = "dailyBattleCapKey";
  @SerializedName(SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY)
  private String dailyBattleCapKey;

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_COOLDOWN_KEY = "cooldownKey";
  @SerializedName(SERIALIZED_NAME_COOLDOWN_KEY)
  private String cooldownKey;

  public static final String SERIALIZED_NAME_GRIND_ENABLED = "grindEnabled";
  @SerializedName(SERIALIZED_NAME_GRIND_ENABLED)
  private Boolean grindEnabled;

  public static final String SERIALIZED_NAME_COOLDOWN_CONDITIONAL_OVERRIDE_KEY = "cooldownConditionalOverrideKey";
  @SerializedName(SERIALIZED_NAME_COOLDOWN_CONDITIONAL_OVERRIDE_KEY)
  private String cooldownConditionalOverrideKey;

  public static final String SERIALIZED_NAME_FIRST_TIME_FINISH_COST = "firstTimeFinishCost";
  @SerializedName(SERIALIZED_NAME_FIRST_TIME_FINISH_COST)
  private List<BucketItem> firstTimeFinishCost = new ArrayList<>();

  public CampaignNode() {
  }

  public CampaignNode id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CampaignNode nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public CampaignNode campaignNodeMission(List<CampaignNodeMission> campaignNodeMission) {
    this.campaignNodeMission = campaignNodeMission;
    return this;
  }

  public CampaignNode addCampaignNodeMissionItem(CampaignNodeMission campaignNodeMissionItem) {
    if (this.campaignNodeMission == null) {
      this.campaignNodeMission = new ArrayList<>();
    }
    this.campaignNodeMission.add(campaignNodeMissionItem);
    return this;
  }

  /**
   * Get campaignNodeMission
   * @return campaignNodeMission
   */
  @javax.annotation.Nullable
  public List<CampaignNodeMission> getCampaignNodeMission() {
    return campaignNodeMission;
  }

  public void setCampaignNodeMission(List<CampaignNodeMission> campaignNodeMission) {
    this.campaignNodeMission = campaignNodeMission;
  }


  public CampaignNode homePrefab(String homePrefab) {
    this.homePrefab = homePrefab;
    return this;
  }

  /**
   * Get homePrefab
   * @return homePrefab
   */
  @javax.annotation.Nullable
  public String getHomePrefab() {
    return homePrefab;
  }

  public void setHomePrefab(String homePrefab) {
    this.homePrefab = homePrefab;
  }


  public CampaignNode forceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
    return this;
  }

  /**
   * Get forceAlignment
   * @return forceAlignment
   */
  @javax.annotation.Nullable
  public ForceAlignment getForceAlignment() {
    return forceAlignment;
  }

  public void setForceAlignment(ForceAlignment forceAlignment) {
    this.forceAlignment = forceAlignment;
  }


  public CampaignNode dominantClass(UnitClass dominantClass) {
    this.dominantClass = dominantClass;
    return this;
  }

  /**
   * Get dominantClass
   * @return dominantClass
   */
  @javax.annotation.Nullable
  public UnitClass getDominantClass() {
    return dominantClass;
  }

  public void setDominantClass(UnitClass dominantClass) {
    this.dominantClass = dominantClass;
  }


  public CampaignNode combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }


  public CampaignNode isCannon(Boolean isCannon) {
    this.isCannon = isCannon;
    return this;
  }

  /**
   * Get isCannon
   * @return isCannon
   */
  @javax.annotation.Nullable
  public Boolean getIsCannon() {
    return isCannon;
  }

  public void setIsCannon(Boolean isCannon) {
    this.isCannon = isCannon;
  }


  public CampaignNode progress(CampaignElementProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public CampaignElementProgress getProgress() {
    return progress;
  }

  public void setProgress(CampaignElementProgress progress) {
    this.progress = progress;
  }


  public CampaignNode unlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
    return this;
  }

  /**
   * Get unlockRequirementLocalizationKey
   * @return unlockRequirementLocalizationKey
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementLocalizationKey() {
    return unlockRequirementLocalizationKey;
  }

  public void setUnlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
  }


  public CampaignNode dailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
    return this;
  }

  /**
   * Get dailyBattleCapKey
   * @return dailyBattleCapKey
   */
  @javax.annotation.Nullable
  public String getDailyBattleCapKey() {
    return dailyBattleCapKey;
  }

  public void setDailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
  }


  public CampaignNode entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public CampaignNode cooldownKey(String cooldownKey) {
    this.cooldownKey = cooldownKey;
    return this;
  }

  /**
   * Get cooldownKey
   * @return cooldownKey
   */
  @javax.annotation.Nullable
  public String getCooldownKey() {
    return cooldownKey;
  }

  public void setCooldownKey(String cooldownKey) {
    this.cooldownKey = cooldownKey;
  }


  public CampaignNode grindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
    return this;
  }

  /**
   * Get grindEnabled
   * @return grindEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGrindEnabled() {
    return grindEnabled;
  }

  public void setGrindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
  }


  public CampaignNode cooldownConditionalOverrideKey(String cooldownConditionalOverrideKey) {
    this.cooldownConditionalOverrideKey = cooldownConditionalOverrideKey;
    return this;
  }

  /**
   * Get cooldownConditionalOverrideKey
   * @return cooldownConditionalOverrideKey
   */
  @javax.annotation.Nullable
  public String getCooldownConditionalOverrideKey() {
    return cooldownConditionalOverrideKey;
  }

  public void setCooldownConditionalOverrideKey(String cooldownConditionalOverrideKey) {
    this.cooldownConditionalOverrideKey = cooldownConditionalOverrideKey;
  }


  public CampaignNode firstTimeFinishCost(List<BucketItem> firstTimeFinishCost) {
    this.firstTimeFinishCost = firstTimeFinishCost;
    return this;
  }

  public CampaignNode addFirstTimeFinishCostItem(BucketItem firstTimeFinishCostItem) {
    if (this.firstTimeFinishCost == null) {
      this.firstTimeFinishCost = new ArrayList<>();
    }
    this.firstTimeFinishCost.add(firstTimeFinishCostItem);
    return this;
  }

  /**
   * Get firstTimeFinishCost
   * @return firstTimeFinishCost
   */
  @javax.annotation.Nullable
  public List<BucketItem> getFirstTimeFinishCost() {
    return firstTimeFinishCost;
  }

  public void setFirstTimeFinishCost(List<BucketItem> firstTimeFinishCost) {
    this.firstTimeFinishCost = firstTimeFinishCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignNode campaignNode = (CampaignNode) o;
    return Objects.equals(this.id, campaignNode.id) &&
        Objects.equals(this.nameKey, campaignNode.nameKey) &&
        Objects.equals(this.campaignNodeMission, campaignNode.campaignNodeMission) &&
        Objects.equals(this.homePrefab, campaignNode.homePrefab) &&
        Objects.equals(this.forceAlignment, campaignNode.forceAlignment) &&
        Objects.equals(this.dominantClass, campaignNode.dominantClass) &&
        Objects.equals(this.combatType, campaignNode.combatType) &&
        Objects.equals(this.isCannon, campaignNode.isCannon) &&
        Objects.equals(this.progress, campaignNode.progress) &&
        Objects.equals(this.unlockRequirementLocalizationKey, campaignNode.unlockRequirementLocalizationKey) &&
        Objects.equals(this.dailyBattleCapKey, campaignNode.dailyBattleCapKey) &&
        Objects.equals(this.entryCategoryAllowed, campaignNode.entryCategoryAllowed) &&
        Objects.equals(this.cooldownKey, campaignNode.cooldownKey) &&
        Objects.equals(this.grindEnabled, campaignNode.grindEnabled) &&
        Objects.equals(this.cooldownConditionalOverrideKey, campaignNode.cooldownConditionalOverrideKey) &&
        Objects.equals(this.firstTimeFinishCost, campaignNode.firstTimeFinishCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, campaignNodeMission, homePrefab, forceAlignment, dominantClass, combatType, isCannon, progress, unlockRequirementLocalizationKey, dailyBattleCapKey, entryCategoryAllowed, cooldownKey, grindEnabled, cooldownConditionalOverrideKey, firstTimeFinishCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignNode {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    campaignNodeMission: ").append(toIndentedString(campaignNodeMission)).append("\n");
    sb.append("    homePrefab: ").append(toIndentedString(homePrefab)).append("\n");
    sb.append("    forceAlignment: ").append(toIndentedString(forceAlignment)).append("\n");
    sb.append("    dominantClass: ").append(toIndentedString(dominantClass)).append("\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("    isCannon: ").append(toIndentedString(isCannon)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    unlockRequirementLocalizationKey: ").append(toIndentedString(unlockRequirementLocalizationKey)).append("\n");
    sb.append("    dailyBattleCapKey: ").append(toIndentedString(dailyBattleCapKey)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    cooldownKey: ").append(toIndentedString(cooldownKey)).append("\n");
    sb.append("    grindEnabled: ").append(toIndentedString(grindEnabled)).append("\n");
    sb.append("    cooldownConditionalOverrideKey: ").append(toIndentedString(cooldownConditionalOverrideKey)).append("\n");
    sb.append("    firstTimeFinishCost: ").append(toIndentedString(firstTimeFinishCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("campaignNodeMission");
    openapiFields.add("homePrefab");
    openapiFields.add("forceAlignment");
    openapiFields.add("dominantClass");
    openapiFields.add("combatType");
    openapiFields.add("isCannon");
    openapiFields.add("progress");
    openapiFields.add("unlockRequirementLocalizationKey");
    openapiFields.add("dailyBattleCapKey");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("cooldownKey");
    openapiFields.add("grindEnabled");
    openapiFields.add("cooldownConditionalOverrideKey");
    openapiFields.add("firstTimeFinishCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignNode is not found in the empty JSON string", CampaignNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if (jsonObj.get("campaignNodeMission") != null && !jsonObj.get("campaignNodeMission").isJsonNull()) {
        JsonArray jsonArraycampaignNodeMission = jsonObj.getAsJsonArray("campaignNodeMission");
        if (jsonArraycampaignNodeMission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaignNodeMission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaignNodeMission` to be an array in the JSON string but got `%s`", jsonObj.get("campaignNodeMission").toString()));
          }

          // validate the optional field `campaignNodeMission` (array)
          for (int i = 0; i < jsonArraycampaignNodeMission.size(); i++) {
            CampaignNodeMission.validateJsonElement(jsonArraycampaignNodeMission.get(i));
          };
        }
      }
      if ((jsonObj.get("homePrefab") != null && !jsonObj.get("homePrefab").isJsonNull()) && !jsonObj.get("homePrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePrefab").toString()));
      }
      // validate the optional field `forceAlignment`
      if (jsonObj.get("forceAlignment") != null && !jsonObj.get("forceAlignment").isJsonNull()) {
        ForceAlignment.validateJsonElement(jsonObj.get("forceAlignment"));
      }
      // validate the optional field `dominantClass`
      if (jsonObj.get("dominantClass") != null && !jsonObj.get("dominantClass").isJsonNull()) {
        UnitClass.validateJsonElement(jsonObj.get("dominantClass"));
      }
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        CampaignElementProgress.validateJsonElement(jsonObj.get("progress"));
      }
      if ((jsonObj.get("unlockRequirementLocalizationKey") != null && !jsonObj.get("unlockRequirementLocalizationKey").isJsonNull()) && !jsonObj.get("unlockRequirementLocalizationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementLocalizationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementLocalizationKey").toString()));
      }
      if ((jsonObj.get("dailyBattleCapKey") != null && !jsonObj.get("dailyBattleCapKey").isJsonNull()) && !jsonObj.get("dailyBattleCapKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dailyBattleCapKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dailyBattleCapKey").toString()));
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
      if ((jsonObj.get("cooldownKey") != null && !jsonObj.get("cooldownKey").isJsonNull()) && !jsonObj.get("cooldownKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cooldownKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cooldownKey").toString()));
      }
      if ((jsonObj.get("cooldownConditionalOverrideKey") != null && !jsonObj.get("cooldownConditionalOverrideKey").isJsonNull()) && !jsonObj.get("cooldownConditionalOverrideKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cooldownConditionalOverrideKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cooldownConditionalOverrideKey").toString()));
      }
      if (jsonObj.get("firstTimeFinishCost") != null && !jsonObj.get("firstTimeFinishCost").isJsonNull()) {
        JsonArray jsonArrayfirstTimeFinishCost = jsonObj.getAsJsonArray("firstTimeFinishCost");
        if (jsonArrayfirstTimeFinishCost != null) {
          // ensure the json data is an array
          if (!jsonObj.get("firstTimeFinishCost").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `firstTimeFinishCost` to be an array in the JSON string but got `%s`", jsonObj.get("firstTimeFinishCost").toString()));
          }

          // validate the optional field `firstTimeFinishCost` (array)
          for (int i = 0; i < jsonArrayfirstTimeFinishCost.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayfirstTimeFinishCost.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignNode.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignNode>() {
           @Override
           public void write(JsonWriter out, CampaignNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignNode
   * @throws IOException if the JSON string is invalid with respect to CampaignNode
   */
  public static CampaignNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignNode.class);
  }

  /**
   * Convert an instance of CampaignNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

