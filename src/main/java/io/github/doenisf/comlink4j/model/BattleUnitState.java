/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.BattleUnitAbilityState;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * BattleUnitState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class BattleUnitState {
  public static final String SERIALIZED_NAME_UNIT_ID = "unitId";
  @SerializedName(SERIALIZED_NAME_UNIT_ID)
  private String unitId;

  public static final String SERIALIZED_NAME_HEALTH_PERCENT = "healthPercent";
  @SerializedName(SERIALIZED_NAME_HEALTH_PERCENT)
  private String healthPercent;

  public static final String SERIALIZED_NAME_ABILITY_STATE = "abilityState";
  @SerializedName(SERIALIZED_NAME_ABILITY_STATE)
  private List<BattleUnitAbilityState> abilityState = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRESS_ITEM = "progressItem";
  @SerializedName(SERIALIZED_NAME_PROGRESS_ITEM)
  private Boolean progressItem;

  public static final String SERIALIZED_NAME_CURRENT_HEALTH = "currentHealth";
  @SerializedName(SERIALIZED_NAME_CURRENT_HEALTH)
  private Long currentHealth;

  public static final String SERIALIZED_NAME_SHIELD_PERCENT = "shieldPercent";
  @SerializedName(SERIALIZED_NAME_SHIELD_PERCENT)
  private String shieldPercent;

  public static final String SERIALIZED_NAME_TURN_PERCENT = "turnPercent";
  @SerializedName(SERIALIZED_NAME_TURN_PERCENT)
  private String turnPercent;

  public static final String SERIALIZED_NAME_MAX_HEALTH = "maxHealth";
  @SerializedName(SERIALIZED_NAME_MAX_HEALTH)
  private Long maxHealth;

  public static final String SERIALIZED_NAME_HAS_FLED = "hasFled";
  @SerializedName(SERIALIZED_NAME_HAS_FLED)
  private Boolean hasFled;

  public static final String SERIALIZED_NAME_MAX_SHIELD = "maxShield";
  @SerializedName(SERIALIZED_NAME_MAX_SHIELD)
  private Long maxShield;

  public static final String SERIALIZED_NAME_IS_COMMANDER = "isCommander";
  @SerializedName(SERIALIZED_NAME_IS_COMMANDER)
  private Boolean isCommander;

  public static final String SERIALIZED_NAME_IS_DEPLOYED = "isDeployed";
  @SerializedName(SERIALIZED_NAME_IS_DEPLOYED)
  private Boolean isDeployed;

  public static final String SERIALIZED_NAME_CURRENT_SHIELD = "currentShield";
  @SerializedName(SERIALIZED_NAME_CURRENT_SHIELD)
  private Long currentShield;

  public static final String SERIALIZED_NAME_OVERKILL_ITEM = "overkillItem";
  @SerializedName(SERIALIZED_NAME_OVERKILL_ITEM)
  private Boolean overkillItem;

  public static final String SERIALIZED_NAME_OVERKILL_DAMAGE = "overkillDamage";
  @SerializedName(SERIALIZED_NAME_OVERKILL_DAMAGE)
  private Long overkillDamage;

  public static final String SERIALIZED_NAME_BATTLE_CONTEXT_MAX_SHIELD = "battleContextMaxShield";
  @SerializedName(SERIALIZED_NAME_BATTLE_CONTEXT_MAX_SHIELD)
  private Long battleContextMaxShield;

  public static final String SERIALIZED_NAME_IS_UNSCATHED = "isUnscathed";
  @SerializedName(SERIALIZED_NAME_IS_UNSCATHED)
  private Boolean isUnscathed;

  public BattleUnitState() {
  }

  public BattleUnitState unitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  /**
   * Get unitId
   * @return unitId
   */
  @javax.annotation.Nullable
  public String getUnitId() {
    return unitId;
  }

  public void setUnitId(String unitId) {
    this.unitId = unitId;
  }


  public BattleUnitState healthPercent(String healthPercent) {
    this.healthPercent = healthPercent;
    return this;
  }

  /**
   * Get healthPercent
   * @return healthPercent
   */
  @javax.annotation.Nullable
  public String getHealthPercent() {
    return healthPercent;
  }

  public void setHealthPercent(String healthPercent) {
    this.healthPercent = healthPercent;
  }


  public BattleUnitState abilityState(List<BattleUnitAbilityState> abilityState) {
    this.abilityState = abilityState;
    return this;
  }

  public BattleUnitState addAbilityStateItem(BattleUnitAbilityState abilityStateItem) {
    if (this.abilityState == null) {
      this.abilityState = new ArrayList<>();
    }
    this.abilityState.add(abilityStateItem);
    return this;
  }

  /**
   * Get abilityState
   * @return abilityState
   */
  @javax.annotation.Nullable
  public List<BattleUnitAbilityState> getAbilityState() {
    return abilityState;
  }

  public void setAbilityState(List<BattleUnitAbilityState> abilityState) {
    this.abilityState = abilityState;
  }


  public BattleUnitState progressItem(Boolean progressItem) {
    this.progressItem = progressItem;
    return this;
  }

  /**
   * Get progressItem
   * @return progressItem
   */
  @javax.annotation.Nullable
  public Boolean getProgressItem() {
    return progressItem;
  }

  public void setProgressItem(Boolean progressItem) {
    this.progressItem = progressItem;
  }


  public BattleUnitState currentHealth(Long currentHealth) {
    this.currentHealth = currentHealth;
    return this;
  }

  /**
   * Get currentHealth
   * @return currentHealth
   */
  @javax.annotation.Nullable
  public Long getCurrentHealth() {
    return currentHealth;
  }

  public void setCurrentHealth(Long currentHealth) {
    this.currentHealth = currentHealth;
  }


  public BattleUnitState shieldPercent(String shieldPercent) {
    this.shieldPercent = shieldPercent;
    return this;
  }

  /**
   * Get shieldPercent
   * @return shieldPercent
   */
  @javax.annotation.Nullable
  public String getShieldPercent() {
    return shieldPercent;
  }

  public void setShieldPercent(String shieldPercent) {
    this.shieldPercent = shieldPercent;
  }


  public BattleUnitState turnPercent(String turnPercent) {
    this.turnPercent = turnPercent;
    return this;
  }

  /**
   * Get turnPercent
   * @return turnPercent
   */
  @javax.annotation.Nullable
  public String getTurnPercent() {
    return turnPercent;
  }

  public void setTurnPercent(String turnPercent) {
    this.turnPercent = turnPercent;
  }


  public BattleUnitState maxHealth(Long maxHealth) {
    this.maxHealth = maxHealth;
    return this;
  }

  /**
   * Get maxHealth
   * @return maxHealth
   */
  @javax.annotation.Nullable
  public Long getMaxHealth() {
    return maxHealth;
  }

  public void setMaxHealth(Long maxHealth) {
    this.maxHealth = maxHealth;
  }


  public BattleUnitState hasFled(Boolean hasFled) {
    this.hasFled = hasFled;
    return this;
  }

  /**
   * Get hasFled
   * @return hasFled
   */
  @javax.annotation.Nullable
  public Boolean getHasFled() {
    return hasFled;
  }

  public void setHasFled(Boolean hasFled) {
    this.hasFled = hasFled;
  }


  public BattleUnitState maxShield(Long maxShield) {
    this.maxShield = maxShield;
    return this;
  }

  /**
   * Get maxShield
   * @return maxShield
   */
  @javax.annotation.Nullable
  public Long getMaxShield() {
    return maxShield;
  }

  public void setMaxShield(Long maxShield) {
    this.maxShield = maxShield;
  }


  public BattleUnitState isCommander(Boolean isCommander) {
    this.isCommander = isCommander;
    return this;
  }

  /**
   * Get isCommander
   * @return isCommander
   */
  @javax.annotation.Nullable
  public Boolean getIsCommander() {
    return isCommander;
  }

  public void setIsCommander(Boolean isCommander) {
    this.isCommander = isCommander;
  }


  public BattleUnitState isDeployed(Boolean isDeployed) {
    this.isDeployed = isDeployed;
    return this;
  }

  /**
   * Get isDeployed
   * @return isDeployed
   */
  @javax.annotation.Nullable
  public Boolean getIsDeployed() {
    return isDeployed;
  }

  public void setIsDeployed(Boolean isDeployed) {
    this.isDeployed = isDeployed;
  }


  public BattleUnitState currentShield(Long currentShield) {
    this.currentShield = currentShield;
    return this;
  }

  /**
   * Get currentShield
   * @return currentShield
   */
  @javax.annotation.Nullable
  public Long getCurrentShield() {
    return currentShield;
  }

  public void setCurrentShield(Long currentShield) {
    this.currentShield = currentShield;
  }


  public BattleUnitState overkillItem(Boolean overkillItem) {
    this.overkillItem = overkillItem;
    return this;
  }

  /**
   * Get overkillItem
   * @return overkillItem
   */
  @javax.annotation.Nullable
  public Boolean getOverkillItem() {
    return overkillItem;
  }

  public void setOverkillItem(Boolean overkillItem) {
    this.overkillItem = overkillItem;
  }


  public BattleUnitState overkillDamage(Long overkillDamage) {
    this.overkillDamage = overkillDamage;
    return this;
  }

  /**
   * Get overkillDamage
   * @return overkillDamage
   */
  @javax.annotation.Nullable
  public Long getOverkillDamage() {
    return overkillDamage;
  }

  public void setOverkillDamage(Long overkillDamage) {
    this.overkillDamage = overkillDamage;
  }


  public BattleUnitState battleContextMaxShield(Long battleContextMaxShield) {
    this.battleContextMaxShield = battleContextMaxShield;
    return this;
  }

  /**
   * Get battleContextMaxShield
   * @return battleContextMaxShield
   */
  @javax.annotation.Nullable
  public Long getBattleContextMaxShield() {
    return battleContextMaxShield;
  }

  public void setBattleContextMaxShield(Long battleContextMaxShield) {
    this.battleContextMaxShield = battleContextMaxShield;
  }


  public BattleUnitState isUnscathed(Boolean isUnscathed) {
    this.isUnscathed = isUnscathed;
    return this;
  }

  /**
   * Get isUnscathed
   * @return isUnscathed
   */
  @javax.annotation.Nullable
  public Boolean getIsUnscathed() {
    return isUnscathed;
  }

  public void setIsUnscathed(Boolean isUnscathed) {
    this.isUnscathed = isUnscathed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BattleUnitState battleUnitState = (BattleUnitState) o;
    return Objects.equals(this.unitId, battleUnitState.unitId) &&
        Objects.equals(this.healthPercent, battleUnitState.healthPercent) &&
        Objects.equals(this.abilityState, battleUnitState.abilityState) &&
        Objects.equals(this.progressItem, battleUnitState.progressItem) &&
        Objects.equals(this.currentHealth, battleUnitState.currentHealth) &&
        Objects.equals(this.shieldPercent, battleUnitState.shieldPercent) &&
        Objects.equals(this.turnPercent, battleUnitState.turnPercent) &&
        Objects.equals(this.maxHealth, battleUnitState.maxHealth) &&
        Objects.equals(this.hasFled, battleUnitState.hasFled) &&
        Objects.equals(this.maxShield, battleUnitState.maxShield) &&
        Objects.equals(this.isCommander, battleUnitState.isCommander) &&
        Objects.equals(this.isDeployed, battleUnitState.isDeployed) &&
        Objects.equals(this.currentShield, battleUnitState.currentShield) &&
        Objects.equals(this.overkillItem, battleUnitState.overkillItem) &&
        Objects.equals(this.overkillDamage, battleUnitState.overkillDamage) &&
        Objects.equals(this.battleContextMaxShield, battleUnitState.battleContextMaxShield) &&
        Objects.equals(this.isUnscathed, battleUnitState.isUnscathed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitId, healthPercent, abilityState, progressItem, currentHealth, shieldPercent, turnPercent, maxHealth, hasFled, maxShield, isCommander, isDeployed, currentShield, overkillItem, overkillDamage, battleContextMaxShield, isUnscathed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BattleUnitState {\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("    healthPercent: ").append(toIndentedString(healthPercent)).append("\n");
    sb.append("    abilityState: ").append(toIndentedString(abilityState)).append("\n");
    sb.append("    progressItem: ").append(toIndentedString(progressItem)).append("\n");
    sb.append("    currentHealth: ").append(toIndentedString(currentHealth)).append("\n");
    sb.append("    shieldPercent: ").append(toIndentedString(shieldPercent)).append("\n");
    sb.append("    turnPercent: ").append(toIndentedString(turnPercent)).append("\n");
    sb.append("    maxHealth: ").append(toIndentedString(maxHealth)).append("\n");
    sb.append("    hasFled: ").append(toIndentedString(hasFled)).append("\n");
    sb.append("    maxShield: ").append(toIndentedString(maxShield)).append("\n");
    sb.append("    isCommander: ").append(toIndentedString(isCommander)).append("\n");
    sb.append("    isDeployed: ").append(toIndentedString(isDeployed)).append("\n");
    sb.append("    currentShield: ").append(toIndentedString(currentShield)).append("\n");
    sb.append("    overkillItem: ").append(toIndentedString(overkillItem)).append("\n");
    sb.append("    overkillDamage: ").append(toIndentedString(overkillDamage)).append("\n");
    sb.append("    battleContextMaxShield: ").append(toIndentedString(battleContextMaxShield)).append("\n");
    sb.append("    isUnscathed: ").append(toIndentedString(isUnscathed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unitId");
    openapiFields.add("healthPercent");
    openapiFields.add("abilityState");
    openapiFields.add("progressItem");
    openapiFields.add("currentHealth");
    openapiFields.add("shieldPercent");
    openapiFields.add("turnPercent");
    openapiFields.add("maxHealth");
    openapiFields.add("hasFled");
    openapiFields.add("maxShield");
    openapiFields.add("isCommander");
    openapiFields.add("isDeployed");
    openapiFields.add("currentShield");
    openapiFields.add("overkillItem");
    openapiFields.add("overkillDamage");
    openapiFields.add("battleContextMaxShield");
    openapiFields.add("isUnscathed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BattleUnitState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BattleUnitState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BattleUnitState is not found in the empty JSON string", BattleUnitState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BattleUnitState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BattleUnitState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("unitId") != null && !jsonObj.get("unitId").isJsonNull()) && !jsonObj.get("unitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitId").toString()));
      }
      if ((jsonObj.get("healthPercent") != null && !jsonObj.get("healthPercent").isJsonNull()) && !jsonObj.get("healthPercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthPercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthPercent").toString()));
      }
      if (jsonObj.get("abilityState") != null && !jsonObj.get("abilityState").isJsonNull()) {
        JsonArray jsonArrayabilityState = jsonObj.getAsJsonArray("abilityState");
        if (jsonArrayabilityState != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abilityState").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abilityState` to be an array in the JSON string but got `%s`", jsonObj.get("abilityState").toString()));
          }

          // validate the optional field `abilityState` (array)
          for (int i = 0; i < jsonArrayabilityState.size(); i++) {
            BattleUnitAbilityState.validateJsonElement(jsonArrayabilityState.get(i));
          };
        }
      }
      if ((jsonObj.get("shieldPercent") != null && !jsonObj.get("shieldPercent").isJsonNull()) && !jsonObj.get("shieldPercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shieldPercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shieldPercent").toString()));
      }
      if ((jsonObj.get("turnPercent") != null && !jsonObj.get("turnPercent").isJsonNull()) && !jsonObj.get("turnPercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `turnPercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("turnPercent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BattleUnitState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BattleUnitState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BattleUnitState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BattleUnitState.class));

       return (TypeAdapter<T>) new TypeAdapter<BattleUnitState>() {
           @Override
           public void write(JsonWriter out, BattleUnitState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BattleUnitState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BattleUnitState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BattleUnitState
   * @throws IOException if the JSON string is invalid with respect to BattleUnitState
   */
  public static BattleUnitState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BattleUnitState.class);
  }

  /**
   * Convert an instance of BattleUnitState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

