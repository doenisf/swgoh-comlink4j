/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.BattleUnitState;
import io.github.doenisf.comlink4j.model.CachedRaidRewards;
import io.github.doenisf.comlink4j.model.CampaignElementIdentifier;
import io.github.doenisf.comlink4j.model.GuildRaidMember;
import io.github.doenisf.comlink4j.model.RaidMember;
import io.github.doenisf.comlink4j.model.RaidState;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * GuildRaidStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GuildRaidStatus {
  public static final String SERIALIZED_NAME_RAID_ID = "raidId";
  @SerializedName(SERIALIZED_NAME_RAID_ID)
  private String raidId;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private Long expireTime;

  public static final String SERIALIZED_NAME_RAID_PROGRESS = "raidProgress";
  @SerializedName(SERIALIZED_NAME_RAID_PROGRESS)
  private Float raidProgress;

  public static final String SERIALIZED_NAME_RAID_MEMBER_OLD = "raidMemberOld";
  @SerializedName(SERIALIZED_NAME_RAID_MEMBER_OLD)
  private List<GuildRaidMember> raidMemberOld = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPPONENT_UNIT_STATE = "opponentUnitState";
  @SerializedName(SERIALIZED_NAME_OPPONENT_UNIT_STATE)
  private List<BattleUnitState> opponentUnitState = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYER_UNIT_STATE = "playerUnitState";
  @SerializedName(SERIALIZED_NAME_PLAYER_UNIT_STATE)
  private List<BattleUnitState> playerUnitState = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private CampaignElementIdentifier identifier;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_ROSTER_REFRESH_TIME = "rosterRefreshTime";
  @SerializedName(SERIALIZED_NAME_ROSTER_REFRESH_TIME)
  private Long rosterRefreshTime;

  public static final String SERIALIZED_NAME_HAS_PLAYER_PARTICIPATED = "hasPlayerParticipated";
  @SerializedName(SERIALIZED_NAME_HAS_PLAYER_PARTICIPATED)
  private Boolean hasPlayerParticipated;

  public static final String SERIALIZED_NAME_RAID_STATE = "raidState";
  @SerializedName(SERIALIZED_NAME_RAID_STATE)
  private RaidState raidState;

  public static final String SERIALIZED_NAME_TALLY_END_TIME = "tallyEndTime";
  @SerializedName(SERIALIZED_NAME_TALLY_END_TIME)
  private Long tallyEndTime;

  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_REWARDS = "eligibleForRewards";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_REWARDS)
  private Boolean eligibleForRewards;

  public static final String SERIALIZED_NAME_ACTIVATE_TIME_MS = "activateTimeMs";
  @SerializedName(SERIALIZED_NAME_ACTIVATE_TIME_MS)
  private Long activateTimeMs;

  public static final String SERIALIZED_NAME_FORBID_LATE_ENTRY = "forbidLateEntry";
  @SerializedName(SERIALIZED_NAME_FORBID_LATE_ENTRY)
  private Boolean forbidLateEntry;

  public static final String SERIALIZED_NAME_JOIN_PERIOD_END_TIME_MS = "joinPeriodEndTimeMs";
  @SerializedName(SERIALIZED_NAME_JOIN_PERIOD_END_TIME_MS)
  private Long joinPeriodEndTimeMs;

  public static final String SERIALIZED_NAME_RAID_MEMBER = "raidMember";
  @SerializedName(SERIALIZED_NAME_RAID_MEMBER)
  private List<RaidMember> raidMember = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIM_ENABLED = "simEnabled";
  @SerializedName(SERIALIZED_NAME_SIM_ENABLED)
  private Boolean simEnabled;

  public static final String SERIALIZED_NAME_ENCOUNTER_ID = "encounterId";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_ID)
  private String encounterId;

  public static final String SERIALIZED_NAME_LAST_ENCOUNTER_ID_PLAYER_PARTICIPATED = "lastEncounterIdPlayerParticipated";
  @SerializedName(SERIALIZED_NAME_LAST_ENCOUNTER_ID_PLAYER_PARTICIPATED)
  private String lastEncounterIdPlayerParticipated;

  public static final String SERIALIZED_NAME_CURRENT_ENCOUNTER_POINTS_SCORED = "currentEncounterPointsScored";
  @SerializedName(SERIALIZED_NAME_CURRENT_ENCOUNTER_POINTS_SCORED)
  private Integer currentEncounterPointsScored;

  public static final String SERIALIZED_NAME_GUILD_REWARD_SCORE = "guildRewardScore";
  @SerializedName(SERIALIZED_NAME_GUILD_REWARD_SCORE)
  private Long guildRewardScore;

  public static final String SERIALIZED_NAME_INELIGIBLE_MEMBER_ID = "ineligibleMemberId";
  @SerializedName(SERIALIZED_NAME_INELIGIBLE_MEMBER_ID)
  private List<String> ineligibleMemberId = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLAIMED_IMMEDIATE_REWARDS = "claimedImmediateRewards";
  @SerializedName(SERIALIZED_NAME_CLAIMED_IMMEDIATE_REWARDS)
  private List<Integer> claimedImmediateRewards = new ArrayList<>();

  public static final String SERIALIZED_NAME_CACHED_REWARDS = "cachedRewards";
  @SerializedName(SERIALIZED_NAME_CACHED_REWARDS)
  private CachedRaidRewards cachedRewards;

  public GuildRaidStatus() {
  }

  public GuildRaidStatus raidId(String raidId) {
    this.raidId = raidId;
    return this;
  }

  /**
   * Get raidId
   * @return raidId
   */
  @javax.annotation.Nullable
  public String getRaidId() {
    return raidId;
  }

  public void setRaidId(String raidId) {
    this.raidId = raidId;
  }


  public GuildRaidStatus expireTime(Long expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Get expireTime
   * @return expireTime
   */
  @javax.annotation.Nullable
  public Long getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(Long expireTime) {
    this.expireTime = expireTime;
  }


  public GuildRaidStatus raidProgress(Float raidProgress) {
    this.raidProgress = raidProgress;
    return this;
  }

  /**
   * Get raidProgress
   * @return raidProgress
   */
  @javax.annotation.Nullable
  public Float getRaidProgress() {
    return raidProgress;
  }

  public void setRaidProgress(Float raidProgress) {
    this.raidProgress = raidProgress;
  }


  public GuildRaidStatus raidMemberOld(List<GuildRaidMember> raidMemberOld) {
    this.raidMemberOld = raidMemberOld;
    return this;
  }

  public GuildRaidStatus addRaidMemberOldItem(GuildRaidMember raidMemberOldItem) {
    if (this.raidMemberOld == null) {
      this.raidMemberOld = new ArrayList<>();
    }
    this.raidMemberOld.add(raidMemberOldItem);
    return this;
  }

  /**
   * Get raidMemberOld
   * @return raidMemberOld
   */
  @javax.annotation.Nullable
  public List<GuildRaidMember> getRaidMemberOld() {
    return raidMemberOld;
  }

  public void setRaidMemberOld(List<GuildRaidMember> raidMemberOld) {
    this.raidMemberOld = raidMemberOld;
  }


  public GuildRaidStatus opponentUnitState(List<BattleUnitState> opponentUnitState) {
    this.opponentUnitState = opponentUnitState;
    return this;
  }

  public GuildRaidStatus addOpponentUnitStateItem(BattleUnitState opponentUnitStateItem) {
    if (this.opponentUnitState == null) {
      this.opponentUnitState = new ArrayList<>();
    }
    this.opponentUnitState.add(opponentUnitStateItem);
    return this;
  }

  /**
   * Get opponentUnitState
   * @return opponentUnitState
   */
  @javax.annotation.Nullable
  public List<BattleUnitState> getOpponentUnitState() {
    return opponentUnitState;
  }

  public void setOpponentUnitState(List<BattleUnitState> opponentUnitState) {
    this.opponentUnitState = opponentUnitState;
  }


  public GuildRaidStatus playerUnitState(List<BattleUnitState> playerUnitState) {
    this.playerUnitState = playerUnitState;
    return this;
  }

  public GuildRaidStatus addPlayerUnitStateItem(BattleUnitState playerUnitStateItem) {
    if (this.playerUnitState == null) {
      this.playerUnitState = new ArrayList<>();
    }
    this.playerUnitState.add(playerUnitStateItem);
    return this;
  }

  /**
   * Get playerUnitState
   * @return playerUnitState
   */
  @javax.annotation.Nullable
  public List<BattleUnitState> getPlayerUnitState() {
    return playerUnitState;
  }

  public void setPlayerUnitState(List<BattleUnitState> playerUnitState) {
    this.playerUnitState = playerUnitState;
  }


  public GuildRaidStatus identifier(CampaignElementIdentifier identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public CampaignElementIdentifier getIdentifier() {
    return identifier;
  }

  public void setIdentifier(CampaignElementIdentifier identifier) {
    this.identifier = identifier;
  }


  public GuildRaidStatus instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public GuildRaidStatus rosterRefreshTime(Long rosterRefreshTime) {
    this.rosterRefreshTime = rosterRefreshTime;
    return this;
  }

  /**
   * Get rosterRefreshTime
   * @return rosterRefreshTime
   */
  @javax.annotation.Nullable
  public Long getRosterRefreshTime() {
    return rosterRefreshTime;
  }

  public void setRosterRefreshTime(Long rosterRefreshTime) {
    this.rosterRefreshTime = rosterRefreshTime;
  }


  public GuildRaidStatus hasPlayerParticipated(Boolean hasPlayerParticipated) {
    this.hasPlayerParticipated = hasPlayerParticipated;
    return this;
  }

  /**
   * Get hasPlayerParticipated
   * @return hasPlayerParticipated
   */
  @javax.annotation.Nullable
  public Boolean getHasPlayerParticipated() {
    return hasPlayerParticipated;
  }

  public void setHasPlayerParticipated(Boolean hasPlayerParticipated) {
    this.hasPlayerParticipated = hasPlayerParticipated;
  }


  public GuildRaidStatus raidState(RaidState raidState) {
    this.raidState = raidState;
    return this;
  }

  /**
   * Get raidState
   * @return raidState
   */
  @javax.annotation.Nullable
  public RaidState getRaidState() {
    return raidState;
  }

  public void setRaidState(RaidState raidState) {
    this.raidState = raidState;
  }


  public GuildRaidStatus tallyEndTime(Long tallyEndTime) {
    this.tallyEndTime = tallyEndTime;
    return this;
  }

  /**
   * Get tallyEndTime
   * @return tallyEndTime
   */
  @javax.annotation.Nullable
  public Long getTallyEndTime() {
    return tallyEndTime;
  }

  public void setTallyEndTime(Long tallyEndTime) {
    this.tallyEndTime = tallyEndTime;
  }


  public GuildRaidStatus eligibleForRewards(Boolean eligibleForRewards) {
    this.eligibleForRewards = eligibleForRewards;
    return this;
  }

  /**
   * Get eligibleForRewards
   * @return eligibleForRewards
   */
  @javax.annotation.Nullable
  public Boolean getEligibleForRewards() {
    return eligibleForRewards;
  }

  public void setEligibleForRewards(Boolean eligibleForRewards) {
    this.eligibleForRewards = eligibleForRewards;
  }


  public GuildRaidStatus activateTimeMs(Long activateTimeMs) {
    this.activateTimeMs = activateTimeMs;
    return this;
  }

  /**
   * Get activateTimeMs
   * @return activateTimeMs
   */
  @javax.annotation.Nullable
  public Long getActivateTimeMs() {
    return activateTimeMs;
  }

  public void setActivateTimeMs(Long activateTimeMs) {
    this.activateTimeMs = activateTimeMs;
  }


  public GuildRaidStatus forbidLateEntry(Boolean forbidLateEntry) {
    this.forbidLateEntry = forbidLateEntry;
    return this;
  }

  /**
   * Get forbidLateEntry
   * @return forbidLateEntry
   */
  @javax.annotation.Nullable
  public Boolean getForbidLateEntry() {
    return forbidLateEntry;
  }

  public void setForbidLateEntry(Boolean forbidLateEntry) {
    this.forbidLateEntry = forbidLateEntry;
  }


  public GuildRaidStatus joinPeriodEndTimeMs(Long joinPeriodEndTimeMs) {
    this.joinPeriodEndTimeMs = joinPeriodEndTimeMs;
    return this;
  }

  /**
   * Get joinPeriodEndTimeMs
   * @return joinPeriodEndTimeMs
   */
  @javax.annotation.Nullable
  public Long getJoinPeriodEndTimeMs() {
    return joinPeriodEndTimeMs;
  }

  public void setJoinPeriodEndTimeMs(Long joinPeriodEndTimeMs) {
    this.joinPeriodEndTimeMs = joinPeriodEndTimeMs;
  }


  public GuildRaidStatus raidMember(List<RaidMember> raidMember) {
    this.raidMember = raidMember;
    return this;
  }

  public GuildRaidStatus addRaidMemberItem(RaidMember raidMemberItem) {
    if (this.raidMember == null) {
      this.raidMember = new ArrayList<>();
    }
    this.raidMember.add(raidMemberItem);
    return this;
  }

  /**
   * Get raidMember
   * @return raidMember
   */
  @javax.annotation.Nullable
  public List<RaidMember> getRaidMember() {
    return raidMember;
  }

  public void setRaidMember(List<RaidMember> raidMember) {
    this.raidMember = raidMember;
  }


  public GuildRaidStatus simEnabled(Boolean simEnabled) {
    this.simEnabled = simEnabled;
    return this;
  }

  /**
   * Get simEnabled
   * @return simEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSimEnabled() {
    return simEnabled;
  }

  public void setSimEnabled(Boolean simEnabled) {
    this.simEnabled = simEnabled;
  }


  public GuildRaidStatus encounterId(String encounterId) {
    this.encounterId = encounterId;
    return this;
  }

  /**
   * Get encounterId
   * @return encounterId
   */
  @javax.annotation.Nullable
  public String getEncounterId() {
    return encounterId;
  }

  public void setEncounterId(String encounterId) {
    this.encounterId = encounterId;
  }


  public GuildRaidStatus lastEncounterIdPlayerParticipated(String lastEncounterIdPlayerParticipated) {
    this.lastEncounterIdPlayerParticipated = lastEncounterIdPlayerParticipated;
    return this;
  }

  /**
   * Get lastEncounterIdPlayerParticipated
   * @return lastEncounterIdPlayerParticipated
   */
  @javax.annotation.Nullable
  public String getLastEncounterIdPlayerParticipated() {
    return lastEncounterIdPlayerParticipated;
  }

  public void setLastEncounterIdPlayerParticipated(String lastEncounterIdPlayerParticipated) {
    this.lastEncounterIdPlayerParticipated = lastEncounterIdPlayerParticipated;
  }


  public GuildRaidStatus currentEncounterPointsScored(Integer currentEncounterPointsScored) {
    this.currentEncounterPointsScored = currentEncounterPointsScored;
    return this;
  }

  /**
   * Get currentEncounterPointsScored
   * @return currentEncounterPointsScored
   */
  @javax.annotation.Nullable
  public Integer getCurrentEncounterPointsScored() {
    return currentEncounterPointsScored;
  }

  public void setCurrentEncounterPointsScored(Integer currentEncounterPointsScored) {
    this.currentEncounterPointsScored = currentEncounterPointsScored;
  }


  public GuildRaidStatus guildRewardScore(Long guildRewardScore) {
    this.guildRewardScore = guildRewardScore;
    return this;
  }

  /**
   * Get guildRewardScore
   * @return guildRewardScore
   */
  @javax.annotation.Nullable
  public Long getGuildRewardScore() {
    return guildRewardScore;
  }

  public void setGuildRewardScore(Long guildRewardScore) {
    this.guildRewardScore = guildRewardScore;
  }


  public GuildRaidStatus ineligibleMemberId(List<String> ineligibleMemberId) {
    this.ineligibleMemberId = ineligibleMemberId;
    return this;
  }

  public GuildRaidStatus addIneligibleMemberIdItem(String ineligibleMemberIdItem) {
    if (this.ineligibleMemberId == null) {
      this.ineligibleMemberId = new ArrayList<>();
    }
    this.ineligibleMemberId.add(ineligibleMemberIdItem);
    return this;
  }

  /**
   * Get ineligibleMemberId
   * @return ineligibleMemberId
   */
  @javax.annotation.Nullable
  public List<String> getIneligibleMemberId() {
    return ineligibleMemberId;
  }

  public void setIneligibleMemberId(List<String> ineligibleMemberId) {
    this.ineligibleMemberId = ineligibleMemberId;
  }


  public GuildRaidStatus claimedImmediateRewards(List<Integer> claimedImmediateRewards) {
    this.claimedImmediateRewards = claimedImmediateRewards;
    return this;
  }

  public GuildRaidStatus addClaimedImmediateRewardsItem(Integer claimedImmediateRewardsItem) {
    if (this.claimedImmediateRewards == null) {
      this.claimedImmediateRewards = new ArrayList<>();
    }
    this.claimedImmediateRewards.add(claimedImmediateRewardsItem);
    return this;
  }

  /**
   * Get claimedImmediateRewards
   * @return claimedImmediateRewards
   */
  @javax.annotation.Nullable
  public List<Integer> getClaimedImmediateRewards() {
    return claimedImmediateRewards;
  }

  public void setClaimedImmediateRewards(List<Integer> claimedImmediateRewards) {
    this.claimedImmediateRewards = claimedImmediateRewards;
  }


  public GuildRaidStatus cachedRewards(CachedRaidRewards cachedRewards) {
    this.cachedRewards = cachedRewards;
    return this;
  }

  /**
   * Get cachedRewards
   * @return cachedRewards
   */
  @javax.annotation.Nullable
  public CachedRaidRewards getCachedRewards() {
    return cachedRewards;
  }

  public void setCachedRewards(CachedRaidRewards cachedRewards) {
    this.cachedRewards = cachedRewards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuildRaidStatus guildRaidStatus = (GuildRaidStatus) o;
    return Objects.equals(this.raidId, guildRaidStatus.raidId) &&
        Objects.equals(this.expireTime, guildRaidStatus.expireTime) &&
        Objects.equals(this.raidProgress, guildRaidStatus.raidProgress) &&
        Objects.equals(this.raidMemberOld, guildRaidStatus.raidMemberOld) &&
        Objects.equals(this.opponentUnitState, guildRaidStatus.opponentUnitState) &&
        Objects.equals(this.playerUnitState, guildRaidStatus.playerUnitState) &&
        Objects.equals(this.identifier, guildRaidStatus.identifier) &&
        Objects.equals(this.instanceId, guildRaidStatus.instanceId) &&
        Objects.equals(this.rosterRefreshTime, guildRaidStatus.rosterRefreshTime) &&
        Objects.equals(this.hasPlayerParticipated, guildRaidStatus.hasPlayerParticipated) &&
        Objects.equals(this.raidState, guildRaidStatus.raidState) &&
        Objects.equals(this.tallyEndTime, guildRaidStatus.tallyEndTime) &&
        Objects.equals(this.eligibleForRewards, guildRaidStatus.eligibleForRewards) &&
        Objects.equals(this.activateTimeMs, guildRaidStatus.activateTimeMs) &&
        Objects.equals(this.forbidLateEntry, guildRaidStatus.forbidLateEntry) &&
        Objects.equals(this.joinPeriodEndTimeMs, guildRaidStatus.joinPeriodEndTimeMs) &&
        Objects.equals(this.raidMember, guildRaidStatus.raidMember) &&
        Objects.equals(this.simEnabled, guildRaidStatus.simEnabled) &&
        Objects.equals(this.encounterId, guildRaidStatus.encounterId) &&
        Objects.equals(this.lastEncounterIdPlayerParticipated, guildRaidStatus.lastEncounterIdPlayerParticipated) &&
        Objects.equals(this.currentEncounterPointsScored, guildRaidStatus.currentEncounterPointsScored) &&
        Objects.equals(this.guildRewardScore, guildRaidStatus.guildRewardScore) &&
        Objects.equals(this.ineligibleMemberId, guildRaidStatus.ineligibleMemberId) &&
        Objects.equals(this.claimedImmediateRewards, guildRaidStatus.claimedImmediateRewards) &&
        Objects.equals(this.cachedRewards, guildRaidStatus.cachedRewards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(raidId, expireTime, raidProgress, raidMemberOld, opponentUnitState, playerUnitState, identifier, instanceId, rosterRefreshTime, hasPlayerParticipated, raidState, tallyEndTime, eligibleForRewards, activateTimeMs, forbidLateEntry, joinPeriodEndTimeMs, raidMember, simEnabled, encounterId, lastEncounterIdPlayerParticipated, currentEncounterPointsScored, guildRewardScore, ineligibleMemberId, claimedImmediateRewards, cachedRewards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuildRaidStatus {\n");
    sb.append("    raidId: ").append(toIndentedString(raidId)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    raidProgress: ").append(toIndentedString(raidProgress)).append("\n");
    sb.append("    raidMemberOld: ").append(toIndentedString(raidMemberOld)).append("\n");
    sb.append("    opponentUnitState: ").append(toIndentedString(opponentUnitState)).append("\n");
    sb.append("    playerUnitState: ").append(toIndentedString(playerUnitState)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    rosterRefreshTime: ").append(toIndentedString(rosterRefreshTime)).append("\n");
    sb.append("    hasPlayerParticipated: ").append(toIndentedString(hasPlayerParticipated)).append("\n");
    sb.append("    raidState: ").append(toIndentedString(raidState)).append("\n");
    sb.append("    tallyEndTime: ").append(toIndentedString(tallyEndTime)).append("\n");
    sb.append("    eligibleForRewards: ").append(toIndentedString(eligibleForRewards)).append("\n");
    sb.append("    activateTimeMs: ").append(toIndentedString(activateTimeMs)).append("\n");
    sb.append("    forbidLateEntry: ").append(toIndentedString(forbidLateEntry)).append("\n");
    sb.append("    joinPeriodEndTimeMs: ").append(toIndentedString(joinPeriodEndTimeMs)).append("\n");
    sb.append("    raidMember: ").append(toIndentedString(raidMember)).append("\n");
    sb.append("    simEnabled: ").append(toIndentedString(simEnabled)).append("\n");
    sb.append("    encounterId: ").append(toIndentedString(encounterId)).append("\n");
    sb.append("    lastEncounterIdPlayerParticipated: ").append(toIndentedString(lastEncounterIdPlayerParticipated)).append("\n");
    sb.append("    currentEncounterPointsScored: ").append(toIndentedString(currentEncounterPointsScored)).append("\n");
    sb.append("    guildRewardScore: ").append(toIndentedString(guildRewardScore)).append("\n");
    sb.append("    ineligibleMemberId: ").append(toIndentedString(ineligibleMemberId)).append("\n");
    sb.append("    claimedImmediateRewards: ").append(toIndentedString(claimedImmediateRewards)).append("\n");
    sb.append("    cachedRewards: ").append(toIndentedString(cachedRewards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("raidId");
    openapiFields.add("expireTime");
    openapiFields.add("raidProgress");
    openapiFields.add("raidMemberOld");
    openapiFields.add("opponentUnitState");
    openapiFields.add("playerUnitState");
    openapiFields.add("identifier");
    openapiFields.add("instanceId");
    openapiFields.add("rosterRefreshTime");
    openapiFields.add("hasPlayerParticipated");
    openapiFields.add("raidState");
    openapiFields.add("tallyEndTime");
    openapiFields.add("eligibleForRewards");
    openapiFields.add("activateTimeMs");
    openapiFields.add("forbidLateEntry");
    openapiFields.add("joinPeriodEndTimeMs");
    openapiFields.add("raidMember");
    openapiFields.add("simEnabled");
    openapiFields.add("encounterId");
    openapiFields.add("lastEncounterIdPlayerParticipated");
    openapiFields.add("currentEncounterPointsScored");
    openapiFields.add("guildRewardScore");
    openapiFields.add("ineligibleMemberId");
    openapiFields.add("claimedImmediateRewards");
    openapiFields.add("cachedRewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuildRaidStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuildRaidStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuildRaidStatus is not found in the empty JSON string", GuildRaidStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuildRaidStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuildRaidStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("raidId") != null && !jsonObj.get("raidId").isJsonNull()) && !jsonObj.get("raidId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raidId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raidId").toString()));
      }
      if (jsonObj.get("raidMemberOld") != null && !jsonObj.get("raidMemberOld").isJsonNull()) {
        JsonArray jsonArrayraidMemberOld = jsonObj.getAsJsonArray("raidMemberOld");
        if (jsonArrayraidMemberOld != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidMemberOld").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidMemberOld` to be an array in the JSON string but got `%s`", jsonObj.get("raidMemberOld").toString()));
          }

          // validate the optional field `raidMemberOld` (array)
          for (int i = 0; i < jsonArrayraidMemberOld.size(); i++) {
            GuildRaidMember.validateJsonElement(jsonArrayraidMemberOld.get(i));
          };
        }
      }
      if (jsonObj.get("opponentUnitState") != null && !jsonObj.get("opponentUnitState").isJsonNull()) {
        JsonArray jsonArrayopponentUnitState = jsonObj.getAsJsonArray("opponentUnitState");
        if (jsonArrayopponentUnitState != null) {
          // ensure the json data is an array
          if (!jsonObj.get("opponentUnitState").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `opponentUnitState` to be an array in the JSON string but got `%s`", jsonObj.get("opponentUnitState").toString()));
          }

          // validate the optional field `opponentUnitState` (array)
          for (int i = 0; i < jsonArrayopponentUnitState.size(); i++) {
            BattleUnitState.validateJsonElement(jsonArrayopponentUnitState.get(i));
          };
        }
      }
      if (jsonObj.get("playerUnitState") != null && !jsonObj.get("playerUnitState").isJsonNull()) {
        JsonArray jsonArrayplayerUnitState = jsonObj.getAsJsonArray("playerUnitState");
        if (jsonArrayplayerUnitState != null) {
          // ensure the json data is an array
          if (!jsonObj.get("playerUnitState").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `playerUnitState` to be an array in the JSON string but got `%s`", jsonObj.get("playerUnitState").toString()));
          }

          // validate the optional field `playerUnitState` (array)
          for (int i = 0; i < jsonArrayplayerUnitState.size(); i++) {
            BattleUnitState.validateJsonElement(jsonArrayplayerUnitState.get(i));
          };
        }
      }
      // validate the optional field `identifier`
      if (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) {
        CampaignElementIdentifier.validateJsonElement(jsonObj.get("identifier"));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      // validate the optional field `raidState`
      if (jsonObj.get("raidState") != null && !jsonObj.get("raidState").isJsonNull()) {
        RaidState.validateJsonElement(jsonObj.get("raidState"));
      }
      if (jsonObj.get("raidMember") != null && !jsonObj.get("raidMember").isJsonNull()) {
        JsonArray jsonArrayraidMember = jsonObj.getAsJsonArray("raidMember");
        if (jsonArrayraidMember != null) {
          // ensure the json data is an array
          if (!jsonObj.get("raidMember").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `raidMember` to be an array in the JSON string but got `%s`", jsonObj.get("raidMember").toString()));
          }

          // validate the optional field `raidMember` (array)
          for (int i = 0; i < jsonArrayraidMember.size(); i++) {
            RaidMember.validateJsonElement(jsonArrayraidMember.get(i));
          };
        }
      }
      if ((jsonObj.get("encounterId") != null && !jsonObj.get("encounterId").isJsonNull()) && !jsonObj.get("encounterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encounterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encounterId").toString()));
      }
      if ((jsonObj.get("lastEncounterIdPlayerParticipated") != null && !jsonObj.get("lastEncounterIdPlayerParticipated").isJsonNull()) && !jsonObj.get("lastEncounterIdPlayerParticipated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastEncounterIdPlayerParticipated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastEncounterIdPlayerParticipated").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ineligibleMemberId") != null && !jsonObj.get("ineligibleMemberId").isJsonNull() && !jsonObj.get("ineligibleMemberId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ineligibleMemberId` to be an array in the JSON string but got `%s`", jsonObj.get("ineligibleMemberId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("claimedImmediateRewards") != null && !jsonObj.get("claimedImmediateRewards").isJsonNull() && !jsonObj.get("claimedImmediateRewards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimedImmediateRewards` to be an array in the JSON string but got `%s`", jsonObj.get("claimedImmediateRewards").toString()));
      }
      // validate the optional field `cachedRewards`
      if (jsonObj.get("cachedRewards") != null && !jsonObj.get("cachedRewards").isJsonNull()) {
        CachedRaidRewards.validateJsonElement(jsonObj.get("cachedRewards"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuildRaidStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuildRaidStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuildRaidStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuildRaidStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GuildRaidStatus>() {
           @Override
           public void write(JsonWriter out, GuildRaidStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuildRaidStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuildRaidStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuildRaidStatus
   * @throws IOException if the JSON string is invalid with respect to GuildRaidStatus
   */
  public static GuildRaidStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuildRaidStatus.class);
  }

  /**
   * Convert an instance of GuildRaidStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

