/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.DynamicDescription;
import io.github.doenisf.comlink4j.model.Environment;
import io.github.doenisf.comlink4j.model.GuildMemberLevel;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.RankRewardPreview;
import io.github.doenisf.comlink4j.model.TerritoryLocalNote;
import io.github.doenisf.comlink4j.model.TerritoryMapStatCategory;
import io.github.doenisf.comlink4j.model.TerritoryReconZoneDefinition;
import io.github.doenisf.comlink4j.model.TerritoryRewardStructure;
import io.github.doenisf.comlink4j.model.TerritoryWarConflictZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryWarDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryWarDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESCRIPTION_KEY = "descriptionKey";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_KEY)
  private String descriptionKey;

  public static final String SERIALIZED_NAME_PREFAB_NAME = "prefabName";
  @SerializedName(SERIALIZED_NAME_PREFAB_NAME)
  private String prefabName;

  public static final String SERIALIZED_NAME_ROUND_COUNT = "roundCount";
  @SerializedName(SERIALIZED_NAME_ROUND_COUNT)
  private Integer roundCount;

  public static final String SERIALIZED_NAME_ICON_PREFAB = "iconPrefab";
  @SerializedName(SERIALIZED_NAME_ICON_PREFAB)
  private String iconPrefab;

  public static final String SERIALIZED_NAME_DETAIL_IMAGE = "detailImage";
  @SerializedName(SERIALIZED_NAME_DETAIL_IMAGE)
  private String detailImage;

  public static final String SERIALIZED_NAME_ROUND_TALLY_DURATION = "roundTallyDuration";
  @SerializedName(SERIALIZED_NAME_ROUND_TALLY_DURATION)
  private Integer roundTallyDuration;

  public static final String SERIALIZED_NAME_DYNAMIC_DESCRIPTION = "dynamicDescription";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DESCRIPTION)
  private List<DynamicDescription> dynamicDescription = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_REWARD_PREVIEW = "firstRewardPreview";
  @SerializedName(SERIALIZED_NAME_FIRST_REWARD_PREVIEW)
  private List<RankRewardPreview> firstRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECOND_REWARD_PREVIEW = "secondRewardPreview";
  @SerializedName(SERIALIZED_NAME_SECOND_REWARD_PREVIEW)
  private List<RankRewardPreview> secondRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATCHMAKING_DURATION = "matchmakingDuration";
  @SerializedName(SERIALIZED_NAME_MATCHMAKING_DURATION)
  private Integer matchmakingDuration;

  public static final String SERIALIZED_NAME_SETUP_DURATION = "setupDuration";
  @SerializedName(SERIALIZED_NAME_SETUP_DURATION)
  private Integer setupDuration;

  public static final String SERIALIZED_NAME_GRANTED_ABILITIES = "grantedAbilities";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITIES)
  private List<MissionGrantedAbility> grantedAbilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOIN_EVENT_ACTION_CAP_KEY = "joinEventActionCapKey";
  @SerializedName(SERIALIZED_NAME_JOIN_EVENT_ACTION_CAP_KEY)
  private String joinEventActionCapKey;

  public static final String SERIALIZED_NAME_MIN_PARTICIPANTS = "minParticipants";
  @SerializedName(SERIALIZED_NAME_MIN_PARTICIPANTS)
  private Integer minParticipants;

  public static final String SERIALIZED_NAME_TERRAIN_PREFAB_NAME = "terrainPrefabName";
  @SerializedName(SERIALIZED_NAME_TERRAIN_PREFAB_NAME)
  private String terrainPrefabName;

  public static final String SERIALIZED_NAME_MAX_PARTICIPANTS = "maxParticipants";
  @SerializedName(SERIALIZED_NAME_MAX_PARTICIPANTS)
  private Integer maxParticipants;

  public static final String SERIALIZED_NAME_MIN_SCORE_REQUIREMENT = "minScoreRequirement";
  @SerializedName(SERIALIZED_NAME_MIN_SCORE_REQUIREMENT)
  private Long minScoreRequirement;

  public static final String SERIALIZED_NAME_WAR_CONFLICT_ZONE_DEFINITION = "warConflictZoneDefinition";
  @SerializedName(SERIALIZED_NAME_WAR_CONFLICT_ZONE_DEFINITION)
  private List<TerritoryWarConflictZoneDefinition> warConflictZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECON_ZONE_DEFINITION = "reconZoneDefinition";
  @SerializedName(SERIALIZED_NAME_RECON_ZONE_DEFINITION)
  private List<TerritoryReconZoneDefinition> reconZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAT_CATEGORY = "statCategory";
  @SerializedName(SERIALIZED_NAME_STAT_CATEGORY)
  private List<TerritoryMapStatCategory> statCategory = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD_STRUCTURE = "rewardStructure";
  @SerializedName(SERIALIZED_NAME_REWARD_STRUCTURE)
  private TerritoryRewardStructure rewardStructure;

  public static final String SERIALIZED_NAME_UNIQUE_JOIN_ID = "uniqueJoinId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_JOIN_ID)
  private String uniqueJoinId;

  public static final String SERIALIZED_NAME_HIDE_LEADERBOARD = "hideLeaderboard";
  @SerializedName(SERIALIZED_NAME_HIDE_LEADERBOARD)
  private Boolean hideLeaderboard;

  public static final String SERIALIZED_NAME_LOCAL_NOTIFICATIONS = "localNotifications";
  @SerializedName(SERIALIZED_NAME_LOCAL_NOTIFICATIONS)
  private List<TerritoryLocalNote> localNotifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_MEMBER_LEVEL_FOR_REPORTING_OPPONENT = "minMemberLevelForReportingOpponent";
  @SerializedName(SERIALIZED_NAME_MIN_MEMBER_LEVEL_FOR_REPORTING_OPPONENT)
  private GuildMemberLevel minMemberLevelForReportingOpponent;

  public static final String SERIALIZED_NAME_MIN_MEMBER_LEVEL_FOR_COMMANDING_GUILD = "minMemberLevelForCommandingGuild";
  @SerializedName(SERIALIZED_NAME_MIN_MEMBER_LEVEL_FOR_COMMANDING_GUILD)
  private GuildMemberLevel minMemberLevelForCommandingGuild;

  public static final String SERIALIZED_NAME_COMMAND_NOTIFICATION_COOLDOWN_DURATION = "commandNotificationCooldownDuration";
  @SerializedName(SERIALIZED_NAME_COMMAND_NOTIFICATION_COOLDOWN_DURATION)
  private Integer commandNotificationCooldownDuration;

  public static final String SERIALIZED_NAME_MAP_TYPE_NAME_KEY = "mapTypeNameKey";
  @SerializedName(SERIALIZED_NAME_MAP_TYPE_NAME_KEY)
  private String mapTypeNameKey;

  public static final String SERIALIZED_NAME_SHOW_TIMER_ON_EVENT = "showTimerOnEvent";
  @SerializedName(SERIALIZED_NAME_SHOW_TIMER_ON_EVENT)
  private Boolean showTimerOnEvent;

  public static final String SERIALIZED_NAME_RESTRICT_SETUP_DURING_ATTACK_PHASE = "restrictSetupDuringAttackPhase";
  @SerializedName(SERIALIZED_NAME_RESTRICT_SETUP_DURING_ATTACK_PHASE)
  private Boolean restrictSetupDuringAttackPhase;

  public static final String SERIALIZED_NAME_DEFAULT_CHARACTER_BATTLE_ENVIRONMENTS = "defaultCharacterBattleEnvironments";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CHARACTER_BATTLE_ENVIRONMENTS)
  private List<Environment> defaultCharacterBattleEnvironments = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_SHIP_BATTLE_ENVIRONMENTS = "defaultShipBattleEnvironments";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SHIP_BATTLE_ENVIRONMENTS)
  private List<Environment> defaultShipBattleEnvironments = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMAP_PREFAB = "minimapPrefab";
  @SerializedName(SERIALIZED_NAME_MINIMAP_PREFAB)
  private String minimapPrefab;

  public static final String SERIALIZED_NAME_DEFENSIVE_CHARACTER_DEPLOY_WARNING_THRESHOLD = "defensiveCharacterDeployWarningThreshold";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_CHARACTER_DEPLOY_WARNING_THRESHOLD)
  private Float defensiveCharacterDeployWarningThreshold;

  public static final String SERIALIZED_NAME_DEFENSIVE_SHIP_DEPLOY_WARNING_THRESHOLD = "defensiveShipDeployWarningThreshold";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_SHIP_DEPLOY_WARNING_THRESHOLD)
  private Float defensiveShipDeployWarningThreshold;

  public static final String SERIALIZED_NAME_LEADERBOARD_KEY = "leaderboardKey";
  @SerializedName(SERIALIZED_NAME_LEADERBOARD_KEY)
  private String leaderboardKey;

  public static final String SERIALIZED_NAME_MIN_PLAYER_SCORE_REQUIREMENT = "minPlayerScoreRequirement";
  @SerializedName(SERIALIZED_NAME_MIN_PLAYER_SCORE_REQUIREMENT)
  private Integer minPlayerScoreRequirement;

  public TerritoryWarDefinition() {
  }

  public TerritoryWarDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TerritoryWarDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public TerritoryWarDefinition descriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
    return this;
  }

  /**
   * Get descriptionKey
   * @return descriptionKey
   */
  @javax.annotation.Nullable
  public String getDescriptionKey() {
    return descriptionKey;
  }

  public void setDescriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
  }


  public TerritoryWarDefinition prefabName(String prefabName) {
    this.prefabName = prefabName;
    return this;
  }

  /**
   * Get prefabName
   * @return prefabName
   */
  @javax.annotation.Nullable
  public String getPrefabName() {
    return prefabName;
  }

  public void setPrefabName(String prefabName) {
    this.prefabName = prefabName;
  }


  public TerritoryWarDefinition roundCount(Integer roundCount) {
    this.roundCount = roundCount;
    return this;
  }

  /**
   * Get roundCount
   * @return roundCount
   */
  @javax.annotation.Nullable
  public Integer getRoundCount() {
    return roundCount;
  }

  public void setRoundCount(Integer roundCount) {
    this.roundCount = roundCount;
  }


  public TerritoryWarDefinition iconPrefab(String iconPrefab) {
    this.iconPrefab = iconPrefab;
    return this;
  }

  /**
   * Get iconPrefab
   * @return iconPrefab
   */
  @javax.annotation.Nullable
  public String getIconPrefab() {
    return iconPrefab;
  }

  public void setIconPrefab(String iconPrefab) {
    this.iconPrefab = iconPrefab;
  }


  public TerritoryWarDefinition detailImage(String detailImage) {
    this.detailImage = detailImage;
    return this;
  }

  /**
   * Get detailImage
   * @return detailImage
   */
  @javax.annotation.Nullable
  public String getDetailImage() {
    return detailImage;
  }

  public void setDetailImage(String detailImage) {
    this.detailImage = detailImage;
  }


  public TerritoryWarDefinition roundTallyDuration(Integer roundTallyDuration) {
    this.roundTallyDuration = roundTallyDuration;
    return this;
  }

  /**
   * Get roundTallyDuration
   * @return roundTallyDuration
   */
  @javax.annotation.Nullable
  public Integer getRoundTallyDuration() {
    return roundTallyDuration;
  }

  public void setRoundTallyDuration(Integer roundTallyDuration) {
    this.roundTallyDuration = roundTallyDuration;
  }


  public TerritoryWarDefinition dynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
    return this;
  }

  public TerritoryWarDefinition addDynamicDescriptionItem(DynamicDescription dynamicDescriptionItem) {
    if (this.dynamicDescription == null) {
      this.dynamicDescription = new ArrayList<>();
    }
    this.dynamicDescription.add(dynamicDescriptionItem);
    return this;
  }

  /**
   * Get dynamicDescription
   * @return dynamicDescription
   */
  @javax.annotation.Nullable
  public List<DynamicDescription> getDynamicDescription() {
    return dynamicDescription;
  }

  public void setDynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
  }


  public TerritoryWarDefinition firstRewardPreview(List<RankRewardPreview> firstRewardPreview) {
    this.firstRewardPreview = firstRewardPreview;
    return this;
  }

  public TerritoryWarDefinition addFirstRewardPreviewItem(RankRewardPreview firstRewardPreviewItem) {
    if (this.firstRewardPreview == null) {
      this.firstRewardPreview = new ArrayList<>();
    }
    this.firstRewardPreview.add(firstRewardPreviewItem);
    return this;
  }

  /**
   * Get firstRewardPreview
   * @return firstRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getFirstRewardPreview() {
    return firstRewardPreview;
  }

  public void setFirstRewardPreview(List<RankRewardPreview> firstRewardPreview) {
    this.firstRewardPreview = firstRewardPreview;
  }


  public TerritoryWarDefinition secondRewardPreview(List<RankRewardPreview> secondRewardPreview) {
    this.secondRewardPreview = secondRewardPreview;
    return this;
  }

  public TerritoryWarDefinition addSecondRewardPreviewItem(RankRewardPreview secondRewardPreviewItem) {
    if (this.secondRewardPreview == null) {
      this.secondRewardPreview = new ArrayList<>();
    }
    this.secondRewardPreview.add(secondRewardPreviewItem);
    return this;
  }

  /**
   * Get secondRewardPreview
   * @return secondRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getSecondRewardPreview() {
    return secondRewardPreview;
  }

  public void setSecondRewardPreview(List<RankRewardPreview> secondRewardPreview) {
    this.secondRewardPreview = secondRewardPreview;
  }


  public TerritoryWarDefinition matchmakingDuration(Integer matchmakingDuration) {
    this.matchmakingDuration = matchmakingDuration;
    return this;
  }

  /**
   * Get matchmakingDuration
   * @return matchmakingDuration
   */
  @javax.annotation.Nullable
  public Integer getMatchmakingDuration() {
    return matchmakingDuration;
  }

  public void setMatchmakingDuration(Integer matchmakingDuration) {
    this.matchmakingDuration = matchmakingDuration;
  }


  public TerritoryWarDefinition setupDuration(Integer setupDuration) {
    this.setupDuration = setupDuration;
    return this;
  }

  /**
   * Get setupDuration
   * @return setupDuration
   */
  @javax.annotation.Nullable
  public Integer getSetupDuration() {
    return setupDuration;
  }

  public void setSetupDuration(Integer setupDuration) {
    this.setupDuration = setupDuration;
  }


  public TerritoryWarDefinition grantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
    return this;
  }

  public TerritoryWarDefinition addGrantedAbilitiesItem(MissionGrantedAbility grantedAbilitiesItem) {
    if (this.grantedAbilities == null) {
      this.grantedAbilities = new ArrayList<>();
    }
    this.grantedAbilities.add(grantedAbilitiesItem);
    return this;
  }

  /**
   * Get grantedAbilities
   * @return grantedAbilities
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbilities() {
    return grantedAbilities;
  }

  public void setGrantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
  }


  public TerritoryWarDefinition joinEventActionCapKey(String joinEventActionCapKey) {
    this.joinEventActionCapKey = joinEventActionCapKey;
    return this;
  }

  /**
   * Get joinEventActionCapKey
   * @return joinEventActionCapKey
   */
  @javax.annotation.Nullable
  public String getJoinEventActionCapKey() {
    return joinEventActionCapKey;
  }

  public void setJoinEventActionCapKey(String joinEventActionCapKey) {
    this.joinEventActionCapKey = joinEventActionCapKey;
  }


  public TerritoryWarDefinition minParticipants(Integer minParticipants) {
    this.minParticipants = minParticipants;
    return this;
  }

  /**
   * Get minParticipants
   * @return minParticipants
   */
  @javax.annotation.Nullable
  public Integer getMinParticipants() {
    return minParticipants;
  }

  public void setMinParticipants(Integer minParticipants) {
    this.minParticipants = minParticipants;
  }


  public TerritoryWarDefinition terrainPrefabName(String terrainPrefabName) {
    this.terrainPrefabName = terrainPrefabName;
    return this;
  }

  /**
   * Get terrainPrefabName
   * @return terrainPrefabName
   */
  @javax.annotation.Nullable
  public String getTerrainPrefabName() {
    return terrainPrefabName;
  }

  public void setTerrainPrefabName(String terrainPrefabName) {
    this.terrainPrefabName = terrainPrefabName;
  }


  public TerritoryWarDefinition maxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
    return this;
  }

  /**
   * Get maxParticipants
   * @return maxParticipants
   */
  @javax.annotation.Nullable
  public Integer getMaxParticipants() {
    return maxParticipants;
  }

  public void setMaxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
  }


  public TerritoryWarDefinition minScoreRequirement(Long minScoreRequirement) {
    this.minScoreRequirement = minScoreRequirement;
    return this;
  }

  /**
   * Get minScoreRequirement
   * @return minScoreRequirement
   */
  @javax.annotation.Nullable
  public Long getMinScoreRequirement() {
    return minScoreRequirement;
  }

  public void setMinScoreRequirement(Long minScoreRequirement) {
    this.minScoreRequirement = minScoreRequirement;
  }


  public TerritoryWarDefinition warConflictZoneDefinition(List<TerritoryWarConflictZoneDefinition> warConflictZoneDefinition) {
    this.warConflictZoneDefinition = warConflictZoneDefinition;
    return this;
  }

  public TerritoryWarDefinition addWarConflictZoneDefinitionItem(TerritoryWarConflictZoneDefinition warConflictZoneDefinitionItem) {
    if (this.warConflictZoneDefinition == null) {
      this.warConflictZoneDefinition = new ArrayList<>();
    }
    this.warConflictZoneDefinition.add(warConflictZoneDefinitionItem);
    return this;
  }

  /**
   * Get warConflictZoneDefinition
   * @return warConflictZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryWarConflictZoneDefinition> getWarConflictZoneDefinition() {
    return warConflictZoneDefinition;
  }

  public void setWarConflictZoneDefinition(List<TerritoryWarConflictZoneDefinition> warConflictZoneDefinition) {
    this.warConflictZoneDefinition = warConflictZoneDefinition;
  }


  public TerritoryWarDefinition reconZoneDefinition(List<TerritoryReconZoneDefinition> reconZoneDefinition) {
    this.reconZoneDefinition = reconZoneDefinition;
    return this;
  }

  public TerritoryWarDefinition addReconZoneDefinitionItem(TerritoryReconZoneDefinition reconZoneDefinitionItem) {
    if (this.reconZoneDefinition == null) {
      this.reconZoneDefinition = new ArrayList<>();
    }
    this.reconZoneDefinition.add(reconZoneDefinitionItem);
    return this;
  }

  /**
   * Get reconZoneDefinition
   * @return reconZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryReconZoneDefinition> getReconZoneDefinition() {
    return reconZoneDefinition;
  }

  public void setReconZoneDefinition(List<TerritoryReconZoneDefinition> reconZoneDefinition) {
    this.reconZoneDefinition = reconZoneDefinition;
  }


  public TerritoryWarDefinition statCategory(List<TerritoryMapStatCategory> statCategory) {
    this.statCategory = statCategory;
    return this;
  }

  public TerritoryWarDefinition addStatCategoryItem(TerritoryMapStatCategory statCategoryItem) {
    if (this.statCategory == null) {
      this.statCategory = new ArrayList<>();
    }
    this.statCategory.add(statCategoryItem);
    return this;
  }

  /**
   * Get statCategory
   * @return statCategory
   */
  @javax.annotation.Nullable
  public List<TerritoryMapStatCategory> getStatCategory() {
    return statCategory;
  }

  public void setStatCategory(List<TerritoryMapStatCategory> statCategory) {
    this.statCategory = statCategory;
  }


  public TerritoryWarDefinition rewardStructure(TerritoryRewardStructure rewardStructure) {
    this.rewardStructure = rewardStructure;
    return this;
  }

  /**
   * Get rewardStructure
   * @return rewardStructure
   */
  @javax.annotation.Nullable
  public TerritoryRewardStructure getRewardStructure() {
    return rewardStructure;
  }

  public void setRewardStructure(TerritoryRewardStructure rewardStructure) {
    this.rewardStructure = rewardStructure;
  }


  public TerritoryWarDefinition uniqueJoinId(String uniqueJoinId) {
    this.uniqueJoinId = uniqueJoinId;
    return this;
  }

  /**
   * Get uniqueJoinId
   * @return uniqueJoinId
   */
  @javax.annotation.Nullable
  public String getUniqueJoinId() {
    return uniqueJoinId;
  }

  public void setUniqueJoinId(String uniqueJoinId) {
    this.uniqueJoinId = uniqueJoinId;
  }


  public TerritoryWarDefinition hideLeaderboard(Boolean hideLeaderboard) {
    this.hideLeaderboard = hideLeaderboard;
    return this;
  }

  /**
   * Get hideLeaderboard
   * @return hideLeaderboard
   */
  @javax.annotation.Nullable
  public Boolean getHideLeaderboard() {
    return hideLeaderboard;
  }

  public void setHideLeaderboard(Boolean hideLeaderboard) {
    this.hideLeaderboard = hideLeaderboard;
  }


  public TerritoryWarDefinition localNotifications(List<TerritoryLocalNote> localNotifications) {
    this.localNotifications = localNotifications;
    return this;
  }

  public TerritoryWarDefinition addLocalNotificationsItem(TerritoryLocalNote localNotificationsItem) {
    if (this.localNotifications == null) {
      this.localNotifications = new ArrayList<>();
    }
    this.localNotifications.add(localNotificationsItem);
    return this;
  }

  /**
   * Get localNotifications
   * @return localNotifications
   */
  @javax.annotation.Nullable
  public List<TerritoryLocalNote> getLocalNotifications() {
    return localNotifications;
  }

  public void setLocalNotifications(List<TerritoryLocalNote> localNotifications) {
    this.localNotifications = localNotifications;
  }


  public TerritoryWarDefinition minMemberLevelForReportingOpponent(GuildMemberLevel minMemberLevelForReportingOpponent) {
    this.minMemberLevelForReportingOpponent = minMemberLevelForReportingOpponent;
    return this;
  }

  /**
   * Get minMemberLevelForReportingOpponent
   * @return minMemberLevelForReportingOpponent
   */
  @javax.annotation.Nullable
  public GuildMemberLevel getMinMemberLevelForReportingOpponent() {
    return minMemberLevelForReportingOpponent;
  }

  public void setMinMemberLevelForReportingOpponent(GuildMemberLevel minMemberLevelForReportingOpponent) {
    this.minMemberLevelForReportingOpponent = minMemberLevelForReportingOpponent;
  }


  public TerritoryWarDefinition minMemberLevelForCommandingGuild(GuildMemberLevel minMemberLevelForCommandingGuild) {
    this.minMemberLevelForCommandingGuild = minMemberLevelForCommandingGuild;
    return this;
  }

  /**
   * Get minMemberLevelForCommandingGuild
   * @return minMemberLevelForCommandingGuild
   */
  @javax.annotation.Nullable
  public GuildMemberLevel getMinMemberLevelForCommandingGuild() {
    return minMemberLevelForCommandingGuild;
  }

  public void setMinMemberLevelForCommandingGuild(GuildMemberLevel minMemberLevelForCommandingGuild) {
    this.minMemberLevelForCommandingGuild = minMemberLevelForCommandingGuild;
  }


  public TerritoryWarDefinition commandNotificationCooldownDuration(Integer commandNotificationCooldownDuration) {
    this.commandNotificationCooldownDuration = commandNotificationCooldownDuration;
    return this;
  }

  /**
   * Get commandNotificationCooldownDuration
   * @return commandNotificationCooldownDuration
   */
  @javax.annotation.Nullable
  public Integer getCommandNotificationCooldownDuration() {
    return commandNotificationCooldownDuration;
  }

  public void setCommandNotificationCooldownDuration(Integer commandNotificationCooldownDuration) {
    this.commandNotificationCooldownDuration = commandNotificationCooldownDuration;
  }


  public TerritoryWarDefinition mapTypeNameKey(String mapTypeNameKey) {
    this.mapTypeNameKey = mapTypeNameKey;
    return this;
  }

  /**
   * Get mapTypeNameKey
   * @return mapTypeNameKey
   */
  @javax.annotation.Nullable
  public String getMapTypeNameKey() {
    return mapTypeNameKey;
  }

  public void setMapTypeNameKey(String mapTypeNameKey) {
    this.mapTypeNameKey = mapTypeNameKey;
  }


  public TerritoryWarDefinition showTimerOnEvent(Boolean showTimerOnEvent) {
    this.showTimerOnEvent = showTimerOnEvent;
    return this;
  }

  /**
   * Get showTimerOnEvent
   * @return showTimerOnEvent
   */
  @javax.annotation.Nullable
  public Boolean getShowTimerOnEvent() {
    return showTimerOnEvent;
  }

  public void setShowTimerOnEvent(Boolean showTimerOnEvent) {
    this.showTimerOnEvent = showTimerOnEvent;
  }


  public TerritoryWarDefinition restrictSetupDuringAttackPhase(Boolean restrictSetupDuringAttackPhase) {
    this.restrictSetupDuringAttackPhase = restrictSetupDuringAttackPhase;
    return this;
  }

  /**
   * Get restrictSetupDuringAttackPhase
   * @return restrictSetupDuringAttackPhase
   */
  @javax.annotation.Nullable
  public Boolean getRestrictSetupDuringAttackPhase() {
    return restrictSetupDuringAttackPhase;
  }

  public void setRestrictSetupDuringAttackPhase(Boolean restrictSetupDuringAttackPhase) {
    this.restrictSetupDuringAttackPhase = restrictSetupDuringAttackPhase;
  }


  public TerritoryWarDefinition defaultCharacterBattleEnvironments(List<Environment> defaultCharacterBattleEnvironments) {
    this.defaultCharacterBattleEnvironments = defaultCharacterBattleEnvironments;
    return this;
  }

  public TerritoryWarDefinition addDefaultCharacterBattleEnvironmentsItem(Environment defaultCharacterBattleEnvironmentsItem) {
    if (this.defaultCharacterBattleEnvironments == null) {
      this.defaultCharacterBattleEnvironments = new ArrayList<>();
    }
    this.defaultCharacterBattleEnvironments.add(defaultCharacterBattleEnvironmentsItem);
    return this;
  }

  /**
   * Get defaultCharacterBattleEnvironments
   * @return defaultCharacterBattleEnvironments
   */
  @javax.annotation.Nullable
  public List<Environment> getDefaultCharacterBattleEnvironments() {
    return defaultCharacterBattleEnvironments;
  }

  public void setDefaultCharacterBattleEnvironments(List<Environment> defaultCharacterBattleEnvironments) {
    this.defaultCharacterBattleEnvironments = defaultCharacterBattleEnvironments;
  }


  public TerritoryWarDefinition defaultShipBattleEnvironments(List<Environment> defaultShipBattleEnvironments) {
    this.defaultShipBattleEnvironments = defaultShipBattleEnvironments;
    return this;
  }

  public TerritoryWarDefinition addDefaultShipBattleEnvironmentsItem(Environment defaultShipBattleEnvironmentsItem) {
    if (this.defaultShipBattleEnvironments == null) {
      this.defaultShipBattleEnvironments = new ArrayList<>();
    }
    this.defaultShipBattleEnvironments.add(defaultShipBattleEnvironmentsItem);
    return this;
  }

  /**
   * Get defaultShipBattleEnvironments
   * @return defaultShipBattleEnvironments
   */
  @javax.annotation.Nullable
  public List<Environment> getDefaultShipBattleEnvironments() {
    return defaultShipBattleEnvironments;
  }

  public void setDefaultShipBattleEnvironments(List<Environment> defaultShipBattleEnvironments) {
    this.defaultShipBattleEnvironments = defaultShipBattleEnvironments;
  }


  public TerritoryWarDefinition minimapPrefab(String minimapPrefab) {
    this.minimapPrefab = minimapPrefab;
    return this;
  }

  /**
   * Get minimapPrefab
   * @return minimapPrefab
   */
  @javax.annotation.Nullable
  public String getMinimapPrefab() {
    return minimapPrefab;
  }

  public void setMinimapPrefab(String minimapPrefab) {
    this.minimapPrefab = minimapPrefab;
  }


  public TerritoryWarDefinition defensiveCharacterDeployWarningThreshold(Float defensiveCharacterDeployWarningThreshold) {
    this.defensiveCharacterDeployWarningThreshold = defensiveCharacterDeployWarningThreshold;
    return this;
  }

  /**
   * Get defensiveCharacterDeployWarningThreshold
   * @return defensiveCharacterDeployWarningThreshold
   */
  @javax.annotation.Nullable
  public Float getDefensiveCharacterDeployWarningThreshold() {
    return defensiveCharacterDeployWarningThreshold;
  }

  public void setDefensiveCharacterDeployWarningThreshold(Float defensiveCharacterDeployWarningThreshold) {
    this.defensiveCharacterDeployWarningThreshold = defensiveCharacterDeployWarningThreshold;
  }


  public TerritoryWarDefinition defensiveShipDeployWarningThreshold(Float defensiveShipDeployWarningThreshold) {
    this.defensiveShipDeployWarningThreshold = defensiveShipDeployWarningThreshold;
    return this;
  }

  /**
   * Get defensiveShipDeployWarningThreshold
   * @return defensiveShipDeployWarningThreshold
   */
  @javax.annotation.Nullable
  public Float getDefensiveShipDeployWarningThreshold() {
    return defensiveShipDeployWarningThreshold;
  }

  public void setDefensiveShipDeployWarningThreshold(Float defensiveShipDeployWarningThreshold) {
    this.defensiveShipDeployWarningThreshold = defensiveShipDeployWarningThreshold;
  }


  public TerritoryWarDefinition leaderboardKey(String leaderboardKey) {
    this.leaderboardKey = leaderboardKey;
    return this;
  }

  /**
   * Get leaderboardKey
   * @return leaderboardKey
   */
  @javax.annotation.Nullable
  public String getLeaderboardKey() {
    return leaderboardKey;
  }

  public void setLeaderboardKey(String leaderboardKey) {
    this.leaderboardKey = leaderboardKey;
  }


  public TerritoryWarDefinition minPlayerScoreRequirement(Integer minPlayerScoreRequirement) {
    this.minPlayerScoreRequirement = minPlayerScoreRequirement;
    return this;
  }

  /**
   * Get minPlayerScoreRequirement
   * @return minPlayerScoreRequirement
   */
  @javax.annotation.Nullable
  public Integer getMinPlayerScoreRequirement() {
    return minPlayerScoreRequirement;
  }

  public void setMinPlayerScoreRequirement(Integer minPlayerScoreRequirement) {
    this.minPlayerScoreRequirement = minPlayerScoreRequirement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryWarDefinition territoryWarDefinition = (TerritoryWarDefinition) o;
    return Objects.equals(this.id, territoryWarDefinition.id) &&
        Objects.equals(this.nameKey, territoryWarDefinition.nameKey) &&
        Objects.equals(this.descriptionKey, territoryWarDefinition.descriptionKey) &&
        Objects.equals(this.prefabName, territoryWarDefinition.prefabName) &&
        Objects.equals(this.roundCount, territoryWarDefinition.roundCount) &&
        Objects.equals(this.iconPrefab, territoryWarDefinition.iconPrefab) &&
        Objects.equals(this.detailImage, territoryWarDefinition.detailImage) &&
        Objects.equals(this.roundTallyDuration, territoryWarDefinition.roundTallyDuration) &&
        Objects.equals(this.dynamicDescription, territoryWarDefinition.dynamicDescription) &&
        Objects.equals(this.firstRewardPreview, territoryWarDefinition.firstRewardPreview) &&
        Objects.equals(this.secondRewardPreview, territoryWarDefinition.secondRewardPreview) &&
        Objects.equals(this.matchmakingDuration, territoryWarDefinition.matchmakingDuration) &&
        Objects.equals(this.setupDuration, territoryWarDefinition.setupDuration) &&
        Objects.equals(this.grantedAbilities, territoryWarDefinition.grantedAbilities) &&
        Objects.equals(this.joinEventActionCapKey, territoryWarDefinition.joinEventActionCapKey) &&
        Objects.equals(this.minParticipants, territoryWarDefinition.minParticipants) &&
        Objects.equals(this.terrainPrefabName, territoryWarDefinition.terrainPrefabName) &&
        Objects.equals(this.maxParticipants, territoryWarDefinition.maxParticipants) &&
        Objects.equals(this.minScoreRequirement, territoryWarDefinition.minScoreRequirement) &&
        Objects.equals(this.warConflictZoneDefinition, territoryWarDefinition.warConflictZoneDefinition) &&
        Objects.equals(this.reconZoneDefinition, territoryWarDefinition.reconZoneDefinition) &&
        Objects.equals(this.statCategory, territoryWarDefinition.statCategory) &&
        Objects.equals(this.rewardStructure, territoryWarDefinition.rewardStructure) &&
        Objects.equals(this.uniqueJoinId, territoryWarDefinition.uniqueJoinId) &&
        Objects.equals(this.hideLeaderboard, territoryWarDefinition.hideLeaderboard) &&
        Objects.equals(this.localNotifications, territoryWarDefinition.localNotifications) &&
        Objects.equals(this.minMemberLevelForReportingOpponent, territoryWarDefinition.minMemberLevelForReportingOpponent) &&
        Objects.equals(this.minMemberLevelForCommandingGuild, territoryWarDefinition.minMemberLevelForCommandingGuild) &&
        Objects.equals(this.commandNotificationCooldownDuration, territoryWarDefinition.commandNotificationCooldownDuration) &&
        Objects.equals(this.mapTypeNameKey, territoryWarDefinition.mapTypeNameKey) &&
        Objects.equals(this.showTimerOnEvent, territoryWarDefinition.showTimerOnEvent) &&
        Objects.equals(this.restrictSetupDuringAttackPhase, territoryWarDefinition.restrictSetupDuringAttackPhase) &&
        Objects.equals(this.defaultCharacterBattleEnvironments, territoryWarDefinition.defaultCharacterBattleEnvironments) &&
        Objects.equals(this.defaultShipBattleEnvironments, territoryWarDefinition.defaultShipBattleEnvironments) &&
        Objects.equals(this.minimapPrefab, territoryWarDefinition.minimapPrefab) &&
        Objects.equals(this.defensiveCharacterDeployWarningThreshold, territoryWarDefinition.defensiveCharacterDeployWarningThreshold) &&
        Objects.equals(this.defensiveShipDeployWarningThreshold, territoryWarDefinition.defensiveShipDeployWarningThreshold) &&
        Objects.equals(this.leaderboardKey, territoryWarDefinition.leaderboardKey) &&
        Objects.equals(this.minPlayerScoreRequirement, territoryWarDefinition.minPlayerScoreRequirement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, descriptionKey, prefabName, roundCount, iconPrefab, detailImage, roundTallyDuration, dynamicDescription, firstRewardPreview, secondRewardPreview, matchmakingDuration, setupDuration, grantedAbilities, joinEventActionCapKey, minParticipants, terrainPrefabName, maxParticipants, minScoreRequirement, warConflictZoneDefinition, reconZoneDefinition, statCategory, rewardStructure, uniqueJoinId, hideLeaderboard, localNotifications, minMemberLevelForReportingOpponent, minMemberLevelForCommandingGuild, commandNotificationCooldownDuration, mapTypeNameKey, showTimerOnEvent, restrictSetupDuringAttackPhase, defaultCharacterBattleEnvironments, defaultShipBattleEnvironments, minimapPrefab, defensiveCharacterDeployWarningThreshold, defensiveShipDeployWarningThreshold, leaderboardKey, minPlayerScoreRequirement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryWarDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descriptionKey: ").append(toIndentedString(descriptionKey)).append("\n");
    sb.append("    prefabName: ").append(toIndentedString(prefabName)).append("\n");
    sb.append("    roundCount: ").append(toIndentedString(roundCount)).append("\n");
    sb.append("    iconPrefab: ").append(toIndentedString(iconPrefab)).append("\n");
    sb.append("    detailImage: ").append(toIndentedString(detailImage)).append("\n");
    sb.append("    roundTallyDuration: ").append(toIndentedString(roundTallyDuration)).append("\n");
    sb.append("    dynamicDescription: ").append(toIndentedString(dynamicDescription)).append("\n");
    sb.append("    firstRewardPreview: ").append(toIndentedString(firstRewardPreview)).append("\n");
    sb.append("    secondRewardPreview: ").append(toIndentedString(secondRewardPreview)).append("\n");
    sb.append("    matchmakingDuration: ").append(toIndentedString(matchmakingDuration)).append("\n");
    sb.append("    setupDuration: ").append(toIndentedString(setupDuration)).append("\n");
    sb.append("    grantedAbilities: ").append(toIndentedString(grantedAbilities)).append("\n");
    sb.append("    joinEventActionCapKey: ").append(toIndentedString(joinEventActionCapKey)).append("\n");
    sb.append("    minParticipants: ").append(toIndentedString(minParticipants)).append("\n");
    sb.append("    terrainPrefabName: ").append(toIndentedString(terrainPrefabName)).append("\n");
    sb.append("    maxParticipants: ").append(toIndentedString(maxParticipants)).append("\n");
    sb.append("    minScoreRequirement: ").append(toIndentedString(minScoreRequirement)).append("\n");
    sb.append("    warConflictZoneDefinition: ").append(toIndentedString(warConflictZoneDefinition)).append("\n");
    sb.append("    reconZoneDefinition: ").append(toIndentedString(reconZoneDefinition)).append("\n");
    sb.append("    statCategory: ").append(toIndentedString(statCategory)).append("\n");
    sb.append("    rewardStructure: ").append(toIndentedString(rewardStructure)).append("\n");
    sb.append("    uniqueJoinId: ").append(toIndentedString(uniqueJoinId)).append("\n");
    sb.append("    hideLeaderboard: ").append(toIndentedString(hideLeaderboard)).append("\n");
    sb.append("    localNotifications: ").append(toIndentedString(localNotifications)).append("\n");
    sb.append("    minMemberLevelForReportingOpponent: ").append(toIndentedString(minMemberLevelForReportingOpponent)).append("\n");
    sb.append("    minMemberLevelForCommandingGuild: ").append(toIndentedString(minMemberLevelForCommandingGuild)).append("\n");
    sb.append("    commandNotificationCooldownDuration: ").append(toIndentedString(commandNotificationCooldownDuration)).append("\n");
    sb.append("    mapTypeNameKey: ").append(toIndentedString(mapTypeNameKey)).append("\n");
    sb.append("    showTimerOnEvent: ").append(toIndentedString(showTimerOnEvent)).append("\n");
    sb.append("    restrictSetupDuringAttackPhase: ").append(toIndentedString(restrictSetupDuringAttackPhase)).append("\n");
    sb.append("    defaultCharacterBattleEnvironments: ").append(toIndentedString(defaultCharacterBattleEnvironments)).append("\n");
    sb.append("    defaultShipBattleEnvironments: ").append(toIndentedString(defaultShipBattleEnvironments)).append("\n");
    sb.append("    minimapPrefab: ").append(toIndentedString(minimapPrefab)).append("\n");
    sb.append("    defensiveCharacterDeployWarningThreshold: ").append(toIndentedString(defensiveCharacterDeployWarningThreshold)).append("\n");
    sb.append("    defensiveShipDeployWarningThreshold: ").append(toIndentedString(defensiveShipDeployWarningThreshold)).append("\n");
    sb.append("    leaderboardKey: ").append(toIndentedString(leaderboardKey)).append("\n");
    sb.append("    minPlayerScoreRequirement: ").append(toIndentedString(minPlayerScoreRequirement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("descriptionKey");
    openapiFields.add("prefabName");
    openapiFields.add("roundCount");
    openapiFields.add("iconPrefab");
    openapiFields.add("detailImage");
    openapiFields.add("roundTallyDuration");
    openapiFields.add("dynamicDescription");
    openapiFields.add("firstRewardPreview");
    openapiFields.add("secondRewardPreview");
    openapiFields.add("matchmakingDuration");
    openapiFields.add("setupDuration");
    openapiFields.add("grantedAbilities");
    openapiFields.add("joinEventActionCapKey");
    openapiFields.add("minParticipants");
    openapiFields.add("terrainPrefabName");
    openapiFields.add("maxParticipants");
    openapiFields.add("minScoreRequirement");
    openapiFields.add("warConflictZoneDefinition");
    openapiFields.add("reconZoneDefinition");
    openapiFields.add("statCategory");
    openapiFields.add("rewardStructure");
    openapiFields.add("uniqueJoinId");
    openapiFields.add("hideLeaderboard");
    openapiFields.add("localNotifications");
    openapiFields.add("minMemberLevelForReportingOpponent");
    openapiFields.add("minMemberLevelForCommandingGuild");
    openapiFields.add("commandNotificationCooldownDuration");
    openapiFields.add("mapTypeNameKey");
    openapiFields.add("showTimerOnEvent");
    openapiFields.add("restrictSetupDuringAttackPhase");
    openapiFields.add("defaultCharacterBattleEnvironments");
    openapiFields.add("defaultShipBattleEnvironments");
    openapiFields.add("minimapPrefab");
    openapiFields.add("defensiveCharacterDeployWarningThreshold");
    openapiFields.add("defensiveShipDeployWarningThreshold");
    openapiFields.add("leaderboardKey");
    openapiFields.add("minPlayerScoreRequirement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryWarDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryWarDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryWarDefinition is not found in the empty JSON string", TerritoryWarDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryWarDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryWarDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descriptionKey") != null && !jsonObj.get("descriptionKey").isJsonNull()) && !jsonObj.get("descriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionKey").toString()));
      }
      if ((jsonObj.get("prefabName") != null && !jsonObj.get("prefabName").isJsonNull()) && !jsonObj.get("prefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefabName").toString()));
      }
      if ((jsonObj.get("iconPrefab") != null && !jsonObj.get("iconPrefab").isJsonNull()) && !jsonObj.get("iconPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconPrefab").toString()));
      }
      if ((jsonObj.get("detailImage") != null && !jsonObj.get("detailImage").isJsonNull()) && !jsonObj.get("detailImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailImage").toString()));
      }
      if (jsonObj.get("dynamicDescription") != null && !jsonObj.get("dynamicDescription").isJsonNull()) {
        JsonArray jsonArraydynamicDescription = jsonObj.getAsJsonArray("dynamicDescription");
        if (jsonArraydynamicDescription != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicDescription").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicDescription` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicDescription").toString()));
          }

          // validate the optional field `dynamicDescription` (array)
          for (int i = 0; i < jsonArraydynamicDescription.size(); i++) {
            DynamicDescription.validateJsonElement(jsonArraydynamicDescription.get(i));
          };
        }
      }
      if (jsonObj.get("firstRewardPreview") != null && !jsonObj.get("firstRewardPreview").isJsonNull()) {
        JsonArray jsonArrayfirstRewardPreview = jsonObj.getAsJsonArray("firstRewardPreview");
        if (jsonArrayfirstRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("firstRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `firstRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("firstRewardPreview").toString()));
          }

          // validate the optional field `firstRewardPreview` (array)
          for (int i = 0; i < jsonArrayfirstRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayfirstRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("secondRewardPreview") != null && !jsonObj.get("secondRewardPreview").isJsonNull()) {
        JsonArray jsonArraysecondRewardPreview = jsonObj.getAsJsonArray("secondRewardPreview");
        if (jsonArraysecondRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secondRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secondRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("secondRewardPreview").toString()));
          }

          // validate the optional field `secondRewardPreview` (array)
          for (int i = 0; i < jsonArraysecondRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArraysecondRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("grantedAbilities") != null && !jsonObj.get("grantedAbilities").isJsonNull()) {
        JsonArray jsonArraygrantedAbilities = jsonObj.getAsJsonArray("grantedAbilities");
        if (jsonArraygrantedAbilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbilities` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbilities").toString()));
          }

          // validate the optional field `grantedAbilities` (array)
          for (int i = 0; i < jsonArraygrantedAbilities.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbilities.get(i));
          };
        }
      }
      if ((jsonObj.get("joinEventActionCapKey") != null && !jsonObj.get("joinEventActionCapKey").isJsonNull()) && !jsonObj.get("joinEventActionCapKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joinEventActionCapKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joinEventActionCapKey").toString()));
      }
      if ((jsonObj.get("terrainPrefabName") != null && !jsonObj.get("terrainPrefabName").isJsonNull()) && !jsonObj.get("terrainPrefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terrainPrefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terrainPrefabName").toString()));
      }
      if (jsonObj.get("warConflictZoneDefinition") != null && !jsonObj.get("warConflictZoneDefinition").isJsonNull()) {
        JsonArray jsonArraywarConflictZoneDefinition = jsonObj.getAsJsonArray("warConflictZoneDefinition");
        if (jsonArraywarConflictZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warConflictZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warConflictZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("warConflictZoneDefinition").toString()));
          }

          // validate the optional field `warConflictZoneDefinition` (array)
          for (int i = 0; i < jsonArraywarConflictZoneDefinition.size(); i++) {
            TerritoryWarConflictZoneDefinition.validateJsonElement(jsonArraywarConflictZoneDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("reconZoneDefinition") != null && !jsonObj.get("reconZoneDefinition").isJsonNull()) {
        JsonArray jsonArrayreconZoneDefinition = jsonObj.getAsJsonArray("reconZoneDefinition");
        if (jsonArrayreconZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reconZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reconZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("reconZoneDefinition").toString()));
          }

          // validate the optional field `reconZoneDefinition` (array)
          for (int i = 0; i < jsonArrayreconZoneDefinition.size(); i++) {
            TerritoryReconZoneDefinition.validateJsonElement(jsonArrayreconZoneDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("statCategory") != null && !jsonObj.get("statCategory").isJsonNull()) {
        JsonArray jsonArraystatCategory = jsonObj.getAsJsonArray("statCategory");
        if (jsonArraystatCategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statCategory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statCategory` to be an array in the JSON string but got `%s`", jsonObj.get("statCategory").toString()));
          }

          // validate the optional field `statCategory` (array)
          for (int i = 0; i < jsonArraystatCategory.size(); i++) {
            TerritoryMapStatCategory.validateJsonElement(jsonArraystatCategory.get(i));
          };
        }
      }
      // validate the optional field `rewardStructure`
      if (jsonObj.get("rewardStructure") != null && !jsonObj.get("rewardStructure").isJsonNull()) {
        TerritoryRewardStructure.validateJsonElement(jsonObj.get("rewardStructure"));
      }
      if ((jsonObj.get("uniqueJoinId") != null && !jsonObj.get("uniqueJoinId").isJsonNull()) && !jsonObj.get("uniqueJoinId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueJoinId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueJoinId").toString()));
      }
      if (jsonObj.get("localNotifications") != null && !jsonObj.get("localNotifications").isJsonNull()) {
        JsonArray jsonArraylocalNotifications = jsonObj.getAsJsonArray("localNotifications");
        if (jsonArraylocalNotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localNotifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localNotifications` to be an array in the JSON string but got `%s`", jsonObj.get("localNotifications").toString()));
          }

          // validate the optional field `localNotifications` (array)
          for (int i = 0; i < jsonArraylocalNotifications.size(); i++) {
            TerritoryLocalNote.validateJsonElement(jsonArraylocalNotifications.get(i));
          };
        }
      }
      // validate the optional field `minMemberLevelForReportingOpponent`
      if (jsonObj.get("minMemberLevelForReportingOpponent") != null && !jsonObj.get("minMemberLevelForReportingOpponent").isJsonNull()) {
        GuildMemberLevel.validateJsonElement(jsonObj.get("minMemberLevelForReportingOpponent"));
      }
      // validate the optional field `minMemberLevelForCommandingGuild`
      if (jsonObj.get("minMemberLevelForCommandingGuild") != null && !jsonObj.get("minMemberLevelForCommandingGuild").isJsonNull()) {
        GuildMemberLevel.validateJsonElement(jsonObj.get("minMemberLevelForCommandingGuild"));
      }
      if ((jsonObj.get("mapTypeNameKey") != null && !jsonObj.get("mapTypeNameKey").isJsonNull()) && !jsonObj.get("mapTypeNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapTypeNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapTypeNameKey").toString()));
      }
      if (jsonObj.get("defaultCharacterBattleEnvironments") != null && !jsonObj.get("defaultCharacterBattleEnvironments").isJsonNull()) {
        JsonArray jsonArraydefaultCharacterBattleEnvironments = jsonObj.getAsJsonArray("defaultCharacterBattleEnvironments");
        if (jsonArraydefaultCharacterBattleEnvironments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defaultCharacterBattleEnvironments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defaultCharacterBattleEnvironments` to be an array in the JSON string but got `%s`", jsonObj.get("defaultCharacterBattleEnvironments").toString()));
          }

          // validate the optional field `defaultCharacterBattleEnvironments` (array)
          for (int i = 0; i < jsonArraydefaultCharacterBattleEnvironments.size(); i++) {
            Environment.validateJsonElement(jsonArraydefaultCharacterBattleEnvironments.get(i));
          };
        }
      }
      if (jsonObj.get("defaultShipBattleEnvironments") != null && !jsonObj.get("defaultShipBattleEnvironments").isJsonNull()) {
        JsonArray jsonArraydefaultShipBattleEnvironments = jsonObj.getAsJsonArray("defaultShipBattleEnvironments");
        if (jsonArraydefaultShipBattleEnvironments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defaultShipBattleEnvironments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defaultShipBattleEnvironments` to be an array in the JSON string but got `%s`", jsonObj.get("defaultShipBattleEnvironments").toString()));
          }

          // validate the optional field `defaultShipBattleEnvironments` (array)
          for (int i = 0; i < jsonArraydefaultShipBattleEnvironments.size(); i++) {
            Environment.validateJsonElement(jsonArraydefaultShipBattleEnvironments.get(i));
          };
        }
      }
      if ((jsonObj.get("minimapPrefab") != null && !jsonObj.get("minimapPrefab").isJsonNull()) && !jsonObj.get("minimapPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimapPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimapPrefab").toString()));
      }
      if ((jsonObj.get("leaderboardKey") != null && !jsonObj.get("leaderboardKey").isJsonNull()) && !jsonObj.get("leaderboardKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaderboardKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaderboardKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryWarDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryWarDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryWarDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryWarDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryWarDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryWarDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryWarDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryWarDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryWarDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryWarDefinition
   */
  public static TerritoryWarDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryWarDefinition.class);
  }

  /**
   * Convert an instance of TerritoryWarDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

