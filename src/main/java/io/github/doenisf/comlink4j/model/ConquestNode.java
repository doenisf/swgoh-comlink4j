/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CampaignMissionEnemyPreview;
import io.github.doenisf.comlink4j.model.ConquestNodeStyle;
import io.github.doenisf.comlink4j.model.ConquestNodeType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * ConquestNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ConquestNode {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ConquestNodeType type;

  public static final String SERIALIZED_NAME_CONQUEST_MISSION_ID = "conquestMissionId";
  @SerializedName(SERIALIZED_NAME_CONQUEST_MISSION_ID)
  private String conquestMissionId;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_ENEMY_UNIT_PREVIEW = "enemyUnitPreview";
  @SerializedName(SERIALIZED_NAME_ENEMY_UNIT_PREVIEW)
  private List<CampaignMissionEnemyPreview> enemyUnitPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONQUEST_COMPLETION_NODE = "conquestCompletionNode";
  @SerializedName(SERIALIZED_NAME_CONQUEST_COMPLETION_NODE)
  private Boolean conquestCompletionNode;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_ID = "unlockRequirementId";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_ID)
  private String unlockRequirementId;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private ConquestNodeStyle style;

  public static final String SERIALIZED_NAME_FINISH_SECTOR = "finishSector";
  @SerializedName(SERIALIZED_NAME_FINISH_SECTOR)
  private Boolean finishSector;

  public ConquestNode() {
  }

  public ConquestNode id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConquestNode type(ConquestNodeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ConquestNodeType getType() {
    return type;
  }

  public void setType(ConquestNodeType type) {
    this.type = type;
  }


  public ConquestNode conquestMissionId(String conquestMissionId) {
    this.conquestMissionId = conquestMissionId;
    return this;
  }

  /**
   * Get conquestMissionId
   * @return conquestMissionId
   */
  @javax.annotation.Nullable
  public String getConquestMissionId() {
    return conquestMissionId;
  }

  public void setConquestMissionId(String conquestMissionId) {
    this.conquestMissionId = conquestMissionId;
  }


  public ConquestNode nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public ConquestNode enemyUnitPreview(List<CampaignMissionEnemyPreview> enemyUnitPreview) {
    this.enemyUnitPreview = enemyUnitPreview;
    return this;
  }

  public ConquestNode addEnemyUnitPreviewItem(CampaignMissionEnemyPreview enemyUnitPreviewItem) {
    if (this.enemyUnitPreview == null) {
      this.enemyUnitPreview = new ArrayList<>();
    }
    this.enemyUnitPreview.add(enemyUnitPreviewItem);
    return this;
  }

  /**
   * Get enemyUnitPreview
   * @return enemyUnitPreview
   */
  @javax.annotation.Nullable
  public List<CampaignMissionEnemyPreview> getEnemyUnitPreview() {
    return enemyUnitPreview;
  }

  public void setEnemyUnitPreview(List<CampaignMissionEnemyPreview> enemyUnitPreview) {
    this.enemyUnitPreview = enemyUnitPreview;
  }


  public ConquestNode conquestCompletionNode(Boolean conquestCompletionNode) {
    this.conquestCompletionNode = conquestCompletionNode;
    return this;
  }

  /**
   * Get conquestCompletionNode
   * @return conquestCompletionNode
   */
  @javax.annotation.Nullable
  public Boolean getConquestCompletionNode() {
    return conquestCompletionNode;
  }

  public void setConquestCompletionNode(Boolean conquestCompletionNode) {
    this.conquestCompletionNode = conquestCompletionNode;
  }


  public ConquestNode unlockRequirementId(String unlockRequirementId) {
    this.unlockRequirementId = unlockRequirementId;
    return this;
  }

  /**
   * Get unlockRequirementId
   * @return unlockRequirementId
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementId() {
    return unlockRequirementId;
  }

  public void setUnlockRequirementId(String unlockRequirementId) {
    this.unlockRequirementId = unlockRequirementId;
  }


  public ConquestNode style(ConquestNodeStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public ConquestNodeStyle getStyle() {
    return style;
  }

  public void setStyle(ConquestNodeStyle style) {
    this.style = style;
  }


  public ConquestNode finishSector(Boolean finishSector) {
    this.finishSector = finishSector;
    return this;
  }

  /**
   * Get finishSector
   * @return finishSector
   */
  @javax.annotation.Nullable
  public Boolean getFinishSector() {
    return finishSector;
  }

  public void setFinishSector(Boolean finishSector) {
    this.finishSector = finishSector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConquestNode conquestNode = (ConquestNode) o;
    return Objects.equals(this.id, conquestNode.id) &&
        Objects.equals(this.type, conquestNode.type) &&
        Objects.equals(this.conquestMissionId, conquestNode.conquestMissionId) &&
        Objects.equals(this.nameKey, conquestNode.nameKey) &&
        Objects.equals(this.enemyUnitPreview, conquestNode.enemyUnitPreview) &&
        Objects.equals(this.conquestCompletionNode, conquestNode.conquestCompletionNode) &&
        Objects.equals(this.unlockRequirementId, conquestNode.unlockRequirementId) &&
        Objects.equals(this.style, conquestNode.style) &&
        Objects.equals(this.finishSector, conquestNode.finishSector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, conquestMissionId, nameKey, enemyUnitPreview, conquestCompletionNode, unlockRequirementId, style, finishSector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConquestNode {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    conquestMissionId: ").append(toIndentedString(conquestMissionId)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    enemyUnitPreview: ").append(toIndentedString(enemyUnitPreview)).append("\n");
    sb.append("    conquestCompletionNode: ").append(toIndentedString(conquestCompletionNode)).append("\n");
    sb.append("    unlockRequirementId: ").append(toIndentedString(unlockRequirementId)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    finishSector: ").append(toIndentedString(finishSector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("conquestMissionId");
    openapiFields.add("nameKey");
    openapiFields.add("enemyUnitPreview");
    openapiFields.add("conquestCompletionNode");
    openapiFields.add("unlockRequirementId");
    openapiFields.add("style");
    openapiFields.add("finishSector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConquestNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConquestNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConquestNode is not found in the empty JSON string", ConquestNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConquestNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConquestNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ConquestNodeType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("conquestMissionId") != null && !jsonObj.get("conquestMissionId").isJsonNull()) && !jsonObj.get("conquestMissionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conquestMissionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conquestMissionId").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if (jsonObj.get("enemyUnitPreview") != null && !jsonObj.get("enemyUnitPreview").isJsonNull()) {
        JsonArray jsonArrayenemyUnitPreview = jsonObj.getAsJsonArray("enemyUnitPreview");
        if (jsonArrayenemyUnitPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enemyUnitPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enemyUnitPreview` to be an array in the JSON string but got `%s`", jsonObj.get("enemyUnitPreview").toString()));
          }

          // validate the optional field `enemyUnitPreview` (array)
          for (int i = 0; i < jsonArrayenemyUnitPreview.size(); i++) {
            CampaignMissionEnemyPreview.validateJsonElement(jsonArrayenemyUnitPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("unlockRequirementId") != null && !jsonObj.get("unlockRequirementId").isJsonNull()) && !jsonObj.get("unlockRequirementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementId").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        ConquestNodeStyle.validateJsonElement(jsonObj.get("style"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConquestNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConquestNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConquestNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConquestNode.class));

       return (TypeAdapter<T>) new TypeAdapter<ConquestNode>() {
           @Override
           public void write(JsonWriter out, ConquestNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConquestNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConquestNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConquestNode
   * @throws IOException if the JSON string is invalid with respect to ConquestNode
   */
  public static ConquestNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConquestNode.class);
  }

  /**
   * Convert an instance of ConquestNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

