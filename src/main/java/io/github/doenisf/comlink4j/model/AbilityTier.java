/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.EffectReference;
import io.github.doenisf.comlink4j.EffectTag;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * AbilityTier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class AbilityTier {
  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_UPGRADE_DESC_KEY = "upgradeDescKey";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DESC_KEY)
  private String upgradeDescKey;

  public static final String SERIALIZED_NAME_COOLDOWN_MAX_OVERRIDE = "cooldownMaxOverride";
  @SerializedName(SERIALIZED_NAME_COOLDOWN_MAX_OVERRIDE)
  private Integer cooldownMaxOverride;

  public static final String SERIALIZED_NAME_EFFECT_REFERENCE = "effectReference";
  @SerializedName(SERIALIZED_NAME_EFFECT_REFERENCE)
  private List<EffectReference> effectReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERACTS_WITH_TAG = "interactsWithTag";
  @SerializedName(SERIALIZED_NAME_INTERACTS_WITH_TAG)
  private List<EffectTag> interactsWithTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKING_EFFECT_ID = "blockingEffectId";
  @SerializedName(SERIALIZED_NAME_BLOCKING_EFFECT_ID)
  private String blockingEffectId;

  public static final String SERIALIZED_NAME_BLOCKED_LOC_KEY = "blockedLocKey";
  @SerializedName(SERIALIZED_NAME_BLOCKED_LOC_KEY)
  private String blockedLocKey;

  public AbilityTier() {
  }

  public AbilityTier descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public AbilityTier upgradeDescKey(String upgradeDescKey) {
    this.upgradeDescKey = upgradeDescKey;
    return this;
  }

  /**
   * Get upgradeDescKey
   * @return upgradeDescKey
   */
  @javax.annotation.Nullable
  public String getUpgradeDescKey() {
    return upgradeDescKey;
  }

  public void setUpgradeDescKey(String upgradeDescKey) {
    this.upgradeDescKey = upgradeDescKey;
  }


  public AbilityTier cooldownMaxOverride(Integer cooldownMaxOverride) {
    this.cooldownMaxOverride = cooldownMaxOverride;
    return this;
  }

  /**
   * Get cooldownMaxOverride
   * @return cooldownMaxOverride
   */
  @javax.annotation.Nullable
  public Integer getCooldownMaxOverride() {
    return cooldownMaxOverride;
  }

  public void setCooldownMaxOverride(Integer cooldownMaxOverride) {
    this.cooldownMaxOverride = cooldownMaxOverride;
  }


  public AbilityTier effectReference(List<EffectReference> effectReference) {
    this.effectReference = effectReference;
    return this;
  }

  public AbilityTier addEffectReferenceItem(EffectReference effectReferenceItem) {
    if (this.effectReference == null) {
      this.effectReference = new ArrayList<>();
    }
    this.effectReference.add(effectReferenceItem);
    return this;
  }

  /**
   * Get effectReference
   * @return effectReference
   */
  @javax.annotation.Nullable
  public List<EffectReference> getEffectReference() {
    return effectReference;
  }

  public void setEffectReference(List<EffectReference> effectReference) {
    this.effectReference = effectReference;
  }


  public AbilityTier interactsWithTag(List<EffectTag> interactsWithTag) {
    this.interactsWithTag = interactsWithTag;
    return this;
  }

  public AbilityTier addInteractsWithTagItem(EffectTag interactsWithTagItem) {
    if (this.interactsWithTag == null) {
      this.interactsWithTag = new ArrayList<>();
    }
    this.interactsWithTag.add(interactsWithTagItem);
    return this;
  }

  /**
   * Get interactsWithTag
   * @return interactsWithTag
   */
  @javax.annotation.Nullable
  public List<EffectTag> getInteractsWithTag() {
    return interactsWithTag;
  }

  public void setInteractsWithTag(List<EffectTag> interactsWithTag) {
    this.interactsWithTag = interactsWithTag;
  }


  public AbilityTier blockingEffectId(String blockingEffectId) {
    this.blockingEffectId = blockingEffectId;
    return this;
  }

  /**
   * Get blockingEffectId
   * @return blockingEffectId
   */
  @javax.annotation.Nullable
  public String getBlockingEffectId() {
    return blockingEffectId;
  }

  public void setBlockingEffectId(String blockingEffectId) {
    this.blockingEffectId = blockingEffectId;
  }


  public AbilityTier blockedLocKey(String blockedLocKey) {
    this.blockedLocKey = blockedLocKey;
    return this;
  }

  /**
   * Get blockedLocKey
   * @return blockedLocKey
   */
  @javax.annotation.Nullable
  public String getBlockedLocKey() {
    return blockedLocKey;
  }

  public void setBlockedLocKey(String blockedLocKey) {
    this.blockedLocKey = blockedLocKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbilityTier abilityTier = (AbilityTier) o;
    return Objects.equals(this.descKey, abilityTier.descKey) &&
        Objects.equals(this.upgradeDescKey, abilityTier.upgradeDescKey) &&
        Objects.equals(this.cooldownMaxOverride, abilityTier.cooldownMaxOverride) &&
        Objects.equals(this.effectReference, abilityTier.effectReference) &&
        Objects.equals(this.interactsWithTag, abilityTier.interactsWithTag) &&
        Objects.equals(this.blockingEffectId, abilityTier.blockingEffectId) &&
        Objects.equals(this.blockedLocKey, abilityTier.blockedLocKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descKey, upgradeDescKey, cooldownMaxOverride, effectReference, interactsWithTag, blockingEffectId, blockedLocKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbilityTier {\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    upgradeDescKey: ").append(toIndentedString(upgradeDescKey)).append("\n");
    sb.append("    cooldownMaxOverride: ").append(toIndentedString(cooldownMaxOverride)).append("\n");
    sb.append("    effectReference: ").append(toIndentedString(effectReference)).append("\n");
    sb.append("    interactsWithTag: ").append(toIndentedString(interactsWithTag)).append("\n");
    sb.append("    blockingEffectId: ").append(toIndentedString(blockingEffectId)).append("\n");
    sb.append("    blockedLocKey: ").append(toIndentedString(blockedLocKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("descKey");
    openapiFields.add("upgradeDescKey");
    openapiFields.add("cooldownMaxOverride");
    openapiFields.add("effectReference");
    openapiFields.add("interactsWithTag");
    openapiFields.add("blockingEffectId");
    openapiFields.add("blockedLocKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbilityTier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbilityTier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbilityTier is not found in the empty JSON string", AbilityTier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbilityTier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbilityTier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      if ((jsonObj.get("upgradeDescKey") != null && !jsonObj.get("upgradeDescKey").isJsonNull()) && !jsonObj.get("upgradeDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeDescKey").toString()));
      }
      if (jsonObj.get("effectReference") != null && !jsonObj.get("effectReference").isJsonNull()) {
        JsonArray jsonArrayeffectReference = jsonObj.getAsJsonArray("effectReference");
        if (jsonArrayeffectReference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectReference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectReference` to be an array in the JSON string but got `%s`", jsonObj.get("effectReference").toString()));
          }

          // validate the optional field `effectReference` (array)
          for (int i = 0; i < jsonArrayeffectReference.size(); i++) {
            EffectReference.validateJsonElement(jsonArrayeffectReference.get(i));
          };
        }
      }
      if (jsonObj.get("interactsWithTag") != null && !jsonObj.get("interactsWithTag").isJsonNull()) {
        JsonArray jsonArrayinteractsWithTag = jsonObj.getAsJsonArray("interactsWithTag");
        if (jsonArrayinteractsWithTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interactsWithTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interactsWithTag` to be an array in the JSON string but got `%s`", jsonObj.get("interactsWithTag").toString()));
          }

          // validate the optional field `interactsWithTag` (array)
          for (int i = 0; i < jsonArrayinteractsWithTag.size(); i++) {
            EffectTag.validateJsonElement(jsonArrayinteractsWithTag.get(i));
          };
        }
      }
      if ((jsonObj.get("blockingEffectId") != null && !jsonObj.get("blockingEffectId").isJsonNull()) && !jsonObj.get("blockingEffectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockingEffectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockingEffectId").toString()));
      }
      if ((jsonObj.get("blockedLocKey") != null && !jsonObj.get("blockedLocKey").isJsonNull()) && !jsonObj.get("blockedLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockedLocKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbilityTier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbilityTier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbilityTier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbilityTier.class));

       return (TypeAdapter<T>) new TypeAdapter<AbilityTier>() {
           @Override
           public void write(JsonWriter out, AbilityTier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbilityTier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbilityTier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbilityTier
   * @throws IOException if the JSON string is invalid with respect to AbilityTier
   */
  public static AbilityTier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbilityTier.class);
  }

  /**
   * Convert an instance of AbilityTier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

