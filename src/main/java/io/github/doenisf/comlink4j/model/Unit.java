/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.EquipmentSlot;
import io.github.doenisf.comlink4j.Rarity;
import io.github.doenisf.comlink4j.Relic;
import io.github.doenisf.comlink4j.Skill;
import io.github.doenisf.comlink4j.StatDef;
import io.github.doenisf.comlink4j.StatMod;
import io.github.doenisf.comlink4j.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * Unit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Unit {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DEFINITION_ID = "definitionId";
  @SerializedName(SERIALIZED_NAME_DEFINITION_ID)
  private String definitionId;

  public static final String SERIALIZED_NAME_CURRENT_RARITY = "currentRarity";
  @SerializedName(SERIALIZED_NAME_CURRENT_RARITY)
  private Rarity currentRarity;

  public static final String SERIALIZED_NAME_CURRENT_LEVEL = "currentLevel";
  @SerializedName(SERIALIZED_NAME_CURRENT_LEVEL)
  private Integer currentLevel;

  public static final String SERIALIZED_NAME_CURRENT_XP = "currentXp";
  @SerializedName(SERIALIZED_NAME_CURRENT_XP)
  private Integer currentXp;

  public static final String SERIALIZED_NAME_PROMOTION_RECIPE_REFERENCE = "promotionRecipeReference";
  @SerializedName(SERIALIZED_NAME_PROMOTION_RECIPE_REFERENCE)
  private String promotionRecipeReference;

  public static final String SERIALIZED_NAME_SKILL = "skill";
  @SerializedName(SERIALIZED_NAME_SKILL)
  private List<Skill> skill = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_STAT = "unitStat";
  @SerializedName(SERIALIZED_NAME_UNIT_STAT)
  private StatDef unitStat;

  public static final String SERIALIZED_NAME_EQUIPMENT = "equipment";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT)
  private List<EquipmentSlot> equipment = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_TIER = "currentTier";
  @SerializedName(SERIALIZED_NAME_CURRENT_TIER)
  private UnitTier currentTier;

  public static final String SERIALIZED_NAME_EQUIPPED_STAT_MOD_OLD = "equippedStatModOld";
  @SerializedName(SERIALIZED_NAME_EQUIPPED_STAT_MOD_OLD)
  private List<String> equippedStatModOld = new ArrayList<>();

  public static final String SERIALIZED_NAME_EQUIPPED_STAT_MOD = "equippedStatMod";
  @SerializedName(SERIALIZED_NAME_EQUIPPED_STAT_MOD)
  private List<StatMod> equippedStatMod = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELIC = "relic";
  @SerializedName(SERIALIZED_NAME_RELIC)
  private Relic relic;

  public static final String SERIALIZED_NAME_PURCHASED_ABILITY_ID = "purchasedAbilityId";
  @SerializedName(SERIALIZED_NAME_PURCHASED_ABILITY_ID)
  private List<String> purchasedAbilityId = new ArrayList<>();

  public Unit() {
  }

  public Unit id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Unit definitionId(String definitionId) {
    this.definitionId = definitionId;
    return this;
  }

  /**
   * Get definitionId
   * @return definitionId
   */
  @javax.annotation.Nullable
  public String getDefinitionId() {
    return definitionId;
  }

  public void setDefinitionId(String definitionId) {
    this.definitionId = definitionId;
  }


  public Unit currentRarity(Rarity currentRarity) {
    this.currentRarity = currentRarity;
    return this;
  }

  /**
   * Get currentRarity
   * @return currentRarity
   */
  @javax.annotation.Nullable
  public Rarity getCurrentRarity() {
    return currentRarity;
  }

  public void setCurrentRarity(Rarity currentRarity) {
    this.currentRarity = currentRarity;
  }


  public Unit currentLevel(Integer currentLevel) {
    this.currentLevel = currentLevel;
    return this;
  }

  /**
   * Get currentLevel
   * @return currentLevel
   */
  @javax.annotation.Nullable
  public Integer getCurrentLevel() {
    return currentLevel;
  }

  public void setCurrentLevel(Integer currentLevel) {
    this.currentLevel = currentLevel;
  }


  public Unit currentXp(Integer currentXp) {
    this.currentXp = currentXp;
    return this;
  }

  /**
   * Get currentXp
   * @return currentXp
   */
  @javax.annotation.Nullable
  public Integer getCurrentXp() {
    return currentXp;
  }

  public void setCurrentXp(Integer currentXp) {
    this.currentXp = currentXp;
  }


  public Unit promotionRecipeReference(String promotionRecipeReference) {
    this.promotionRecipeReference = promotionRecipeReference;
    return this;
  }

  /**
   * Get promotionRecipeReference
   * @return promotionRecipeReference
   */
  @javax.annotation.Nullable
  public String getPromotionRecipeReference() {
    return promotionRecipeReference;
  }

  public void setPromotionRecipeReference(String promotionRecipeReference) {
    this.promotionRecipeReference = promotionRecipeReference;
  }


  public Unit skill(List<Skill> skill) {
    this.skill = skill;
    return this;
  }

  public Unit addSkillItem(Skill skillItem) {
    if (this.skill == null) {
      this.skill = new ArrayList<>();
    }
    this.skill.add(skillItem);
    return this;
  }

  /**
   * Get skill
   * @return skill
   */
  @javax.annotation.Nullable
  public List<Skill> getSkill() {
    return skill;
  }

  public void setSkill(List<Skill> skill) {
    this.skill = skill;
  }


  public Unit unitStat(StatDef unitStat) {
    this.unitStat = unitStat;
    return this;
  }

  /**
   * Get unitStat
   * @return unitStat
   */
  @javax.annotation.Nullable
  public StatDef getUnitStat() {
    return unitStat;
  }

  public void setUnitStat(StatDef unitStat) {
    this.unitStat = unitStat;
  }


  public Unit equipment(List<EquipmentSlot> equipment) {
    this.equipment = equipment;
    return this;
  }

  public Unit addEquipmentItem(EquipmentSlot equipmentItem) {
    if (this.equipment == null) {
      this.equipment = new ArrayList<>();
    }
    this.equipment.add(equipmentItem);
    return this;
  }

  /**
   * Get equipment
   * @return equipment
   */
  @javax.annotation.Nullable
  public List<EquipmentSlot> getEquipment() {
    return equipment;
  }

  public void setEquipment(List<EquipmentSlot> equipment) {
    this.equipment = equipment;
  }


  public Unit currentTier(UnitTier currentTier) {
    this.currentTier = currentTier;
    return this;
  }

  /**
   * Get currentTier
   * @return currentTier
   */
  @javax.annotation.Nullable
  public UnitTier getCurrentTier() {
    return currentTier;
  }

  public void setCurrentTier(UnitTier currentTier) {
    this.currentTier = currentTier;
  }


  public Unit equippedStatModOld(List<String> equippedStatModOld) {
    this.equippedStatModOld = equippedStatModOld;
    return this;
  }

  public Unit addEquippedStatModOldItem(String equippedStatModOldItem) {
    if (this.equippedStatModOld == null) {
      this.equippedStatModOld = new ArrayList<>();
    }
    this.equippedStatModOld.add(equippedStatModOldItem);
    return this;
  }

  /**
   * Get equippedStatModOld
   * @return equippedStatModOld
   */
  @javax.annotation.Nullable
  public List<String> getEquippedStatModOld() {
    return equippedStatModOld;
  }

  public void setEquippedStatModOld(List<String> equippedStatModOld) {
    this.equippedStatModOld = equippedStatModOld;
  }


  public Unit equippedStatMod(List<StatMod> equippedStatMod) {
    this.equippedStatMod = equippedStatMod;
    return this;
  }

  public Unit addEquippedStatModItem(StatMod equippedStatModItem) {
    if (this.equippedStatMod == null) {
      this.equippedStatMod = new ArrayList<>();
    }
    this.equippedStatMod.add(equippedStatModItem);
    return this;
  }

  /**
   * Get equippedStatMod
   * @return equippedStatMod
   */
  @javax.annotation.Nullable
  public List<StatMod> getEquippedStatMod() {
    return equippedStatMod;
  }

  public void setEquippedStatMod(List<StatMod> equippedStatMod) {
    this.equippedStatMod = equippedStatMod;
  }


  public Unit relic(Relic relic) {
    this.relic = relic;
    return this;
  }

  /**
   * Get relic
   * @return relic
   */
  @javax.annotation.Nullable
  public Relic getRelic() {
    return relic;
  }

  public void setRelic(Relic relic) {
    this.relic = relic;
  }


  public Unit purchasedAbilityId(List<String> purchasedAbilityId) {
    this.purchasedAbilityId = purchasedAbilityId;
    return this;
  }

  public Unit addPurchasedAbilityIdItem(String purchasedAbilityIdItem) {
    if (this.purchasedAbilityId == null) {
      this.purchasedAbilityId = new ArrayList<>();
    }
    this.purchasedAbilityId.add(purchasedAbilityIdItem);
    return this;
  }

  /**
   * Get purchasedAbilityId
   * @return purchasedAbilityId
   */
  @javax.annotation.Nullable
  public List<String> getPurchasedAbilityId() {
    return purchasedAbilityId;
  }

  public void setPurchasedAbilityId(List<String> purchasedAbilityId) {
    this.purchasedAbilityId = purchasedAbilityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Unit unit = (Unit) o;
    return Objects.equals(this.id, unit.id) &&
        Objects.equals(this.definitionId, unit.definitionId) &&
        Objects.equals(this.currentRarity, unit.currentRarity) &&
        Objects.equals(this.currentLevel, unit.currentLevel) &&
        Objects.equals(this.currentXp, unit.currentXp) &&
        Objects.equals(this.promotionRecipeReference, unit.promotionRecipeReference) &&
        Objects.equals(this.skill, unit.skill) &&
        Objects.equals(this.unitStat, unit.unitStat) &&
        Objects.equals(this.equipment, unit.equipment) &&
        Objects.equals(this.currentTier, unit.currentTier) &&
        Objects.equals(this.equippedStatModOld, unit.equippedStatModOld) &&
        Objects.equals(this.equippedStatMod, unit.equippedStatMod) &&
        Objects.equals(this.relic, unit.relic) &&
        Objects.equals(this.purchasedAbilityId, unit.purchasedAbilityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, definitionId, currentRarity, currentLevel, currentXp, promotionRecipeReference, skill, unitStat, equipment, currentTier, equippedStatModOld, equippedStatMod, relic, purchasedAbilityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Unit {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    definitionId: ").append(toIndentedString(definitionId)).append("\n");
    sb.append("    currentRarity: ").append(toIndentedString(currentRarity)).append("\n");
    sb.append("    currentLevel: ").append(toIndentedString(currentLevel)).append("\n");
    sb.append("    currentXp: ").append(toIndentedString(currentXp)).append("\n");
    sb.append("    promotionRecipeReference: ").append(toIndentedString(promotionRecipeReference)).append("\n");
    sb.append("    skill: ").append(toIndentedString(skill)).append("\n");
    sb.append("    unitStat: ").append(toIndentedString(unitStat)).append("\n");
    sb.append("    equipment: ").append(toIndentedString(equipment)).append("\n");
    sb.append("    currentTier: ").append(toIndentedString(currentTier)).append("\n");
    sb.append("    equippedStatModOld: ").append(toIndentedString(equippedStatModOld)).append("\n");
    sb.append("    equippedStatMod: ").append(toIndentedString(equippedStatMod)).append("\n");
    sb.append("    relic: ").append(toIndentedString(relic)).append("\n");
    sb.append("    purchasedAbilityId: ").append(toIndentedString(purchasedAbilityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("definitionId");
    openapiFields.add("currentRarity");
    openapiFields.add("currentLevel");
    openapiFields.add("currentXp");
    openapiFields.add("promotionRecipeReference");
    openapiFields.add("skill");
    openapiFields.add("unitStat");
    openapiFields.add("equipment");
    openapiFields.add("currentTier");
    openapiFields.add("equippedStatModOld");
    openapiFields.add("equippedStatMod");
    openapiFields.add("relic");
    openapiFields.add("purchasedAbilityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Unit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Unit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Unit is not found in the empty JSON string", Unit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Unit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Unit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("definitionId") != null && !jsonObj.get("definitionId").isJsonNull()) && !jsonObj.get("definitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definitionId").toString()));
      }
      // validate the optional field `currentRarity`
      if (jsonObj.get("currentRarity") != null && !jsonObj.get("currentRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("currentRarity"));
      }
      if ((jsonObj.get("promotionRecipeReference") != null && !jsonObj.get("promotionRecipeReference").isJsonNull()) && !jsonObj.get("promotionRecipeReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionRecipeReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionRecipeReference").toString()));
      }
      if (jsonObj.get("skill") != null && !jsonObj.get("skill").isJsonNull()) {
        JsonArray jsonArrayskill = jsonObj.getAsJsonArray("skill");
        if (jsonArrayskill != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skill").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skill` to be an array in the JSON string but got `%s`", jsonObj.get("skill").toString()));
          }

          // validate the optional field `skill` (array)
          for (int i = 0; i < jsonArrayskill.size(); i++) {
            Skill.validateJsonElement(jsonArrayskill.get(i));
          };
        }
      }
      // validate the optional field `unitStat`
      if (jsonObj.get("unitStat") != null && !jsonObj.get("unitStat").isJsonNull()) {
        StatDef.validateJsonElement(jsonObj.get("unitStat"));
      }
      if (jsonObj.get("equipment") != null && !jsonObj.get("equipment").isJsonNull()) {
        JsonArray jsonArrayequipment = jsonObj.getAsJsonArray("equipment");
        if (jsonArrayequipment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("equipment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `equipment` to be an array in the JSON string but got `%s`", jsonObj.get("equipment").toString()));
          }

          // validate the optional field `equipment` (array)
          for (int i = 0; i < jsonArrayequipment.size(); i++) {
            EquipmentSlot.validateJsonElement(jsonArrayequipment.get(i));
          };
        }
      }
      // validate the optional field `currentTier`
      if (jsonObj.get("currentTier") != null && !jsonObj.get("currentTier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("currentTier"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("equippedStatModOld") != null && !jsonObj.get("equippedStatModOld").isJsonNull() && !jsonObj.get("equippedStatModOld").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `equippedStatModOld` to be an array in the JSON string but got `%s`", jsonObj.get("equippedStatModOld").toString()));
      }
      if (jsonObj.get("equippedStatMod") != null && !jsonObj.get("equippedStatMod").isJsonNull()) {
        JsonArray jsonArrayequippedStatMod = jsonObj.getAsJsonArray("equippedStatMod");
        if (jsonArrayequippedStatMod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("equippedStatMod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `equippedStatMod` to be an array in the JSON string but got `%s`", jsonObj.get("equippedStatMod").toString()));
          }

          // validate the optional field `equippedStatMod` (array)
          for (int i = 0; i < jsonArrayequippedStatMod.size(); i++) {
            StatMod.validateJsonElement(jsonArrayequippedStatMod.get(i));
          };
        }
      }
      // validate the optional field `relic`
      if (jsonObj.get("relic") != null && !jsonObj.get("relic").isJsonNull()) {
        Relic.validateJsonElement(jsonObj.get("relic"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("purchasedAbilityId") != null && !jsonObj.get("purchasedAbilityId").isJsonNull() && !jsonObj.get("purchasedAbilityId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasedAbilityId` to be an array in the JSON string but got `%s`", jsonObj.get("purchasedAbilityId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Unit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Unit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Unit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Unit.class));

       return (TypeAdapter<T>) new TypeAdapter<Unit>() {
           @Override
           public void write(JsonWriter out, Unit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Unit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Unit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Unit
   * @throws IOException if the JSON string is invalid with respect to Unit
   */
  public static Unit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Unit.class);
  }

  /**
   * Convert an instance of Unit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

