/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.GuildRaidRosterRefresh;
import io.github.doenisf.comlink4j.model.GuildRaidRosterRefreshType;
import io.github.doenisf.comlink4j.model.GuildRaidType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * GuildRaidConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GuildRaidConfig {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RAID_TYPE = "raidType";
  @SerializedName(SERIALIZED_NAME_RAID_TYPE)
  private GuildRaidType raidType;

  public static final String SERIALIZED_NAME_ROSTER_REFRESH_TYPE = "rosterRefreshType";
  @SerializedName(SERIALIZED_NAME_ROSTER_REFRESH_TYPE)
  private GuildRaidRosterRefreshType rosterRefreshType;

  public static final String SERIALIZED_NAME_ROSTER_REFRESH = "rosterRefresh";
  @SerializedName(SERIALIZED_NAME_ROSTER_REFRESH)
  private GuildRaidRosterRefresh rosterRefresh;

  public static final String SERIALIZED_NAME_RAID_DURATION = "raidDuration";
  @SerializedName(SERIALIZED_NAME_RAID_DURATION)
  private Long raidDuration;

  public GuildRaidConfig() {
  }

  public GuildRaidConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GuildRaidConfig raidType(GuildRaidType raidType) {
    this.raidType = raidType;
    return this;
  }

  /**
   * Get raidType
   * @return raidType
   */
  @javax.annotation.Nullable
  public GuildRaidType getRaidType() {
    return raidType;
  }

  public void setRaidType(GuildRaidType raidType) {
    this.raidType = raidType;
  }


  public GuildRaidConfig rosterRefreshType(GuildRaidRosterRefreshType rosterRefreshType) {
    this.rosterRefreshType = rosterRefreshType;
    return this;
  }

  /**
   * Get rosterRefreshType
   * @return rosterRefreshType
   */
  @javax.annotation.Nullable
  public GuildRaidRosterRefreshType getRosterRefreshType() {
    return rosterRefreshType;
  }

  public void setRosterRefreshType(GuildRaidRosterRefreshType rosterRefreshType) {
    this.rosterRefreshType = rosterRefreshType;
  }


  public GuildRaidConfig rosterRefresh(GuildRaidRosterRefresh rosterRefresh) {
    this.rosterRefresh = rosterRefresh;
    return this;
  }

  /**
   * Get rosterRefresh
   * @return rosterRefresh
   */
  @javax.annotation.Nullable
  public GuildRaidRosterRefresh getRosterRefresh() {
    return rosterRefresh;
  }

  public void setRosterRefresh(GuildRaidRosterRefresh rosterRefresh) {
    this.rosterRefresh = rosterRefresh;
  }


  public GuildRaidConfig raidDuration(Long raidDuration) {
    this.raidDuration = raidDuration;
    return this;
  }

  /**
   * Get raidDuration
   * @return raidDuration
   */
  @javax.annotation.Nullable
  public Long getRaidDuration() {
    return raidDuration;
  }

  public void setRaidDuration(Long raidDuration) {
    this.raidDuration = raidDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuildRaidConfig guildRaidConfig = (GuildRaidConfig) o;
    return Objects.equals(this.id, guildRaidConfig.id) &&
        Objects.equals(this.raidType, guildRaidConfig.raidType) &&
        Objects.equals(this.rosterRefreshType, guildRaidConfig.rosterRefreshType) &&
        Objects.equals(this.rosterRefresh, guildRaidConfig.rosterRefresh) &&
        Objects.equals(this.raidDuration, guildRaidConfig.raidDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, raidType, rosterRefreshType, rosterRefresh, raidDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuildRaidConfig {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    raidType: ").append(toIndentedString(raidType)).append("\n");
    sb.append("    rosterRefreshType: ").append(toIndentedString(rosterRefreshType)).append("\n");
    sb.append("    rosterRefresh: ").append(toIndentedString(rosterRefresh)).append("\n");
    sb.append("    raidDuration: ").append(toIndentedString(raidDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("raidType");
    openapiFields.add("rosterRefreshType");
    openapiFields.add("rosterRefresh");
    openapiFields.add("raidDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuildRaidConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuildRaidConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuildRaidConfig is not found in the empty JSON string", GuildRaidConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuildRaidConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuildRaidConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `raidType`
      if (jsonObj.get("raidType") != null && !jsonObj.get("raidType").isJsonNull()) {
        GuildRaidType.validateJsonElement(jsonObj.get("raidType"));
      }
      // validate the optional field `rosterRefreshType`
      if (jsonObj.get("rosterRefreshType") != null && !jsonObj.get("rosterRefreshType").isJsonNull()) {
        GuildRaidRosterRefreshType.validateJsonElement(jsonObj.get("rosterRefreshType"));
      }
      // validate the optional field `rosterRefresh`
      if (jsonObj.get("rosterRefresh") != null && !jsonObj.get("rosterRefresh").isJsonNull()) {
        GuildRaidRosterRefresh.validateJsonElement(jsonObj.get("rosterRefresh"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuildRaidConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuildRaidConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuildRaidConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuildRaidConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GuildRaidConfig>() {
           @Override
           public void write(JsonWriter out, GuildRaidConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuildRaidConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuildRaidConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuildRaidConfig
   * @throws IOException if the JSON string is invalid with respect to GuildRaidConfig
   */
  public static GuildRaidConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuildRaidConfig.class);
  }

  /**
   * Convert an instance of GuildRaidConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

