/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.TimeZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TimeZoneChangeConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TimeZoneChangeConfig {
  public static final String SERIALIZED_NAME_ALLOWED_CHANGES_PER_PERIOD = "allowedChangesPerPeriod";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CHANGES_PER_PERIOD)
  private Integer allowedChangesPerPeriod;

  public static final String SERIALIZED_NAME_ALLOWED_CHANGES_LOC_KEY = "allowedChangesLocKey";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CHANGES_LOC_KEY)
  private String allowedChangesLocKey;

  public static final String SERIALIZED_NAME_ALLOWED_CHANGES_RESET_LOC_KEY = "allowedChangesResetLocKey";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CHANGES_RESET_LOC_KEY)
  private String allowedChangesResetLocKey;

  public static final String SERIALIZED_NAME_MAX_TIME_ZONE_CHANGE_HOURS_EXCLUSIVE = "maxTimeZoneChangeHoursExclusive";
  @SerializedName(SERIALIZED_NAME_MAX_TIME_ZONE_CHANGE_HOURS_EXCLUSIVE)
  private Integer maxTimeZoneChangeHoursExclusive;

  public static final String SERIALIZED_NAME_TIME_ZONE_DEFINITION = "timeZoneDefinition";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_DEFINITION)
  private List<TimeZoneDefinition> timeZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE_CHANGE_COOLDOWN_ID = "timeZoneChangeCooldownId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_CHANGE_COOLDOWN_ID)
  private String timeZoneChangeCooldownId;

  public TimeZoneChangeConfig() {
  }

  public TimeZoneChangeConfig allowedChangesPerPeriod(Integer allowedChangesPerPeriod) {
    this.allowedChangesPerPeriod = allowedChangesPerPeriod;
    return this;
  }

  /**
   * Get allowedChangesPerPeriod
   * @return allowedChangesPerPeriod
   */
  @javax.annotation.Nullable
  public Integer getAllowedChangesPerPeriod() {
    return allowedChangesPerPeriod;
  }

  public void setAllowedChangesPerPeriod(Integer allowedChangesPerPeriod) {
    this.allowedChangesPerPeriod = allowedChangesPerPeriod;
  }


  public TimeZoneChangeConfig allowedChangesLocKey(String allowedChangesLocKey) {
    this.allowedChangesLocKey = allowedChangesLocKey;
    return this;
  }

  /**
   * Get allowedChangesLocKey
   * @return allowedChangesLocKey
   */
  @javax.annotation.Nullable
  public String getAllowedChangesLocKey() {
    return allowedChangesLocKey;
  }

  public void setAllowedChangesLocKey(String allowedChangesLocKey) {
    this.allowedChangesLocKey = allowedChangesLocKey;
  }


  public TimeZoneChangeConfig allowedChangesResetLocKey(String allowedChangesResetLocKey) {
    this.allowedChangesResetLocKey = allowedChangesResetLocKey;
    return this;
  }

  /**
   * Get allowedChangesResetLocKey
   * @return allowedChangesResetLocKey
   */
  @javax.annotation.Nullable
  public String getAllowedChangesResetLocKey() {
    return allowedChangesResetLocKey;
  }

  public void setAllowedChangesResetLocKey(String allowedChangesResetLocKey) {
    this.allowedChangesResetLocKey = allowedChangesResetLocKey;
  }


  public TimeZoneChangeConfig maxTimeZoneChangeHoursExclusive(Integer maxTimeZoneChangeHoursExclusive) {
    this.maxTimeZoneChangeHoursExclusive = maxTimeZoneChangeHoursExclusive;
    return this;
  }

  /**
   * Get maxTimeZoneChangeHoursExclusive
   * @return maxTimeZoneChangeHoursExclusive
   */
  @javax.annotation.Nullable
  public Integer getMaxTimeZoneChangeHoursExclusive() {
    return maxTimeZoneChangeHoursExclusive;
  }

  public void setMaxTimeZoneChangeHoursExclusive(Integer maxTimeZoneChangeHoursExclusive) {
    this.maxTimeZoneChangeHoursExclusive = maxTimeZoneChangeHoursExclusive;
  }


  public TimeZoneChangeConfig timeZoneDefinition(List<TimeZoneDefinition> timeZoneDefinition) {
    this.timeZoneDefinition = timeZoneDefinition;
    return this;
  }

  public TimeZoneChangeConfig addTimeZoneDefinitionItem(TimeZoneDefinition timeZoneDefinitionItem) {
    if (this.timeZoneDefinition == null) {
      this.timeZoneDefinition = new ArrayList<>();
    }
    this.timeZoneDefinition.add(timeZoneDefinitionItem);
    return this;
  }

  /**
   * Get timeZoneDefinition
   * @return timeZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TimeZoneDefinition> getTimeZoneDefinition() {
    return timeZoneDefinition;
  }

  public void setTimeZoneDefinition(List<TimeZoneDefinition> timeZoneDefinition) {
    this.timeZoneDefinition = timeZoneDefinition;
  }


  public TimeZoneChangeConfig timeZoneChangeCooldownId(String timeZoneChangeCooldownId) {
    this.timeZoneChangeCooldownId = timeZoneChangeCooldownId;
    return this;
  }

  /**
   * Get timeZoneChangeCooldownId
   * @return timeZoneChangeCooldownId
   */
  @javax.annotation.Nullable
  public String getTimeZoneChangeCooldownId() {
    return timeZoneChangeCooldownId;
  }

  public void setTimeZoneChangeCooldownId(String timeZoneChangeCooldownId) {
    this.timeZoneChangeCooldownId = timeZoneChangeCooldownId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeZoneChangeConfig timeZoneChangeConfig = (TimeZoneChangeConfig) o;
    return Objects.equals(this.allowedChangesPerPeriod, timeZoneChangeConfig.allowedChangesPerPeriod) &&
        Objects.equals(this.allowedChangesLocKey, timeZoneChangeConfig.allowedChangesLocKey) &&
        Objects.equals(this.allowedChangesResetLocKey, timeZoneChangeConfig.allowedChangesResetLocKey) &&
        Objects.equals(this.maxTimeZoneChangeHoursExclusive, timeZoneChangeConfig.maxTimeZoneChangeHoursExclusive) &&
        Objects.equals(this.timeZoneDefinition, timeZoneChangeConfig.timeZoneDefinition) &&
        Objects.equals(this.timeZoneChangeCooldownId, timeZoneChangeConfig.timeZoneChangeCooldownId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedChangesPerPeriod, allowedChangesLocKey, allowedChangesResetLocKey, maxTimeZoneChangeHoursExclusive, timeZoneDefinition, timeZoneChangeCooldownId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeZoneChangeConfig {\n");
    sb.append("    allowedChangesPerPeriod: ").append(toIndentedString(allowedChangesPerPeriod)).append("\n");
    sb.append("    allowedChangesLocKey: ").append(toIndentedString(allowedChangesLocKey)).append("\n");
    sb.append("    allowedChangesResetLocKey: ").append(toIndentedString(allowedChangesResetLocKey)).append("\n");
    sb.append("    maxTimeZoneChangeHoursExclusive: ").append(toIndentedString(maxTimeZoneChangeHoursExclusive)).append("\n");
    sb.append("    timeZoneDefinition: ").append(toIndentedString(timeZoneDefinition)).append("\n");
    sb.append("    timeZoneChangeCooldownId: ").append(toIndentedString(timeZoneChangeCooldownId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedChangesPerPeriod");
    openapiFields.add("allowedChangesLocKey");
    openapiFields.add("allowedChangesResetLocKey");
    openapiFields.add("maxTimeZoneChangeHoursExclusive");
    openapiFields.add("timeZoneDefinition");
    openapiFields.add("timeZoneChangeCooldownId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeZoneChangeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeZoneChangeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeZoneChangeConfig is not found in the empty JSON string", TimeZoneChangeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeZoneChangeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeZoneChangeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedChangesLocKey") != null && !jsonObj.get("allowedChangesLocKey").isJsonNull()) && !jsonObj.get("allowedChangesLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedChangesLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedChangesLocKey").toString()));
      }
      if ((jsonObj.get("allowedChangesResetLocKey") != null && !jsonObj.get("allowedChangesResetLocKey").isJsonNull()) && !jsonObj.get("allowedChangesResetLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedChangesResetLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedChangesResetLocKey").toString()));
      }
      if (jsonObj.get("timeZoneDefinition") != null && !jsonObj.get("timeZoneDefinition").isJsonNull()) {
        JsonArray jsonArraytimeZoneDefinition = jsonObj.getAsJsonArray("timeZoneDefinition");
        if (jsonArraytimeZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("timeZoneDefinition").toString()));
          }

          // validate the optional field `timeZoneDefinition` (array)
          for (int i = 0; i < jsonArraytimeZoneDefinition.size(); i++) {
            TimeZoneDefinition.validateJsonElement(jsonArraytimeZoneDefinition.get(i));
          };
        }
      }
      if ((jsonObj.get("timeZoneChangeCooldownId") != null && !jsonObj.get("timeZoneChangeCooldownId").isJsonNull()) && !jsonObj.get("timeZoneChangeCooldownId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZoneChangeCooldownId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZoneChangeCooldownId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeZoneChangeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeZoneChangeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeZoneChangeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeZoneChangeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeZoneChangeConfig>() {
           @Override
           public void write(JsonWriter out, TimeZoneChangeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeZoneChangeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeZoneChangeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeZoneChangeConfig
   * @throws IOException if the JSON string is invalid with respect to TimeZoneChangeConfig
   */
  public static TimeZoneChangeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeZoneChangeConfig.class);
  }

  /**
   * Convert an instance of TimeZoneChangeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

