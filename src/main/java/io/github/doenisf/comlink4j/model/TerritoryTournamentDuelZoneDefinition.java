/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.EntryCategoryAllowed;
import io.github.doenisf.comlink4j.model.Environment;
import io.github.doenisf.comlink4j.model.TerritoryWarPointStructure;
import io.github.doenisf.comlink4j.model.TerritoryZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryTournamentDuelZoneDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryTournamentDuelZoneDefinition {
  public static final String SERIALIZED_NAME_ZONE_DEFINITION = "zoneDefinition";
  @SerializedName(SERIALIZED_NAME_ZONE_DEFINITION)
  private TerritoryZoneDefinition zoneDefinition;

  public static final String SERIALIZED_NAME_DUEL_IMAGE = "duelImage";
  @SerializedName(SERIALIZED_NAME_DUEL_IMAGE)
  private String duelImage;

  public static final String SERIALIZED_NAME_DUEL_REQUIREMENT = "duelRequirement";
  @SerializedName(SERIALIZED_NAME_DUEL_REQUIREMENT)
  private String duelRequirement;

  public static final String SERIALIZED_NAME_DUEL_DETAIL = "duelDetail";
  @SerializedName(SERIALIZED_NAME_DUEL_DETAIL)
  private String duelDetail;

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_DEFENSE_ENTRY_CATEGORY_ALLOWED = "defenseEntryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_DEFENSE_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed defenseEntryCategoryAllowed;

  public static final String SERIALIZED_NAME_BATTLE_ENVIRONMENTS = "battleEnvironments";
  @SerializedName(SERIALIZED_NAME_BATTLE_ENVIRONMENTS)
  private List<Environment> battleEnvironments = new ArrayList<>();

  public static final String SERIALIZED_NAME_POINT_STRUCTURE = "pointStructure";
  @SerializedName(SERIALIZED_NAME_POINT_STRUCTURE)
  private TerritoryWarPointStructure pointStructure;

  public static final String SERIALIZED_NAME_SAVE_SQUAD_ZONE_NUMBER = "saveSquadZoneNumber";
  @SerializedName(SERIALIZED_NAME_SAVE_SQUAD_ZONE_NUMBER)
  private Integer saveSquadZoneNumber;

  public TerritoryTournamentDuelZoneDefinition() {
  }

  public TerritoryTournamentDuelZoneDefinition zoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
    return this;
  }

  /**
   * Get zoneDefinition
   * @return zoneDefinition
   */
  @javax.annotation.Nullable
  public TerritoryZoneDefinition getZoneDefinition() {
    return zoneDefinition;
  }

  public void setZoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
  }


  public TerritoryTournamentDuelZoneDefinition duelImage(String duelImage) {
    this.duelImage = duelImage;
    return this;
  }

  /**
   * Get duelImage
   * @return duelImage
   */
  @javax.annotation.Nullable
  public String getDuelImage() {
    return duelImage;
  }

  public void setDuelImage(String duelImage) {
    this.duelImage = duelImage;
  }


  public TerritoryTournamentDuelZoneDefinition duelRequirement(String duelRequirement) {
    this.duelRequirement = duelRequirement;
    return this;
  }

  /**
   * Get duelRequirement
   * @return duelRequirement
   */
  @javax.annotation.Nullable
  public String getDuelRequirement() {
    return duelRequirement;
  }

  public void setDuelRequirement(String duelRequirement) {
    this.duelRequirement = duelRequirement;
  }


  public TerritoryTournamentDuelZoneDefinition duelDetail(String duelDetail) {
    this.duelDetail = duelDetail;
    return this;
  }

  /**
   * Get duelDetail
   * @return duelDetail
   */
  @javax.annotation.Nullable
  public String getDuelDetail() {
    return duelDetail;
  }

  public void setDuelDetail(String duelDetail) {
    this.duelDetail = duelDetail;
  }


  public TerritoryTournamentDuelZoneDefinition entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public TerritoryTournamentDuelZoneDefinition defenseEntryCategoryAllowed(EntryCategoryAllowed defenseEntryCategoryAllowed) {
    this.defenseEntryCategoryAllowed = defenseEntryCategoryAllowed;
    return this;
  }

  /**
   * Get defenseEntryCategoryAllowed
   * @return defenseEntryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getDefenseEntryCategoryAllowed() {
    return defenseEntryCategoryAllowed;
  }

  public void setDefenseEntryCategoryAllowed(EntryCategoryAllowed defenseEntryCategoryAllowed) {
    this.defenseEntryCategoryAllowed = defenseEntryCategoryAllowed;
  }


  public TerritoryTournamentDuelZoneDefinition battleEnvironments(List<Environment> battleEnvironments) {
    this.battleEnvironments = battleEnvironments;
    return this;
  }

  public TerritoryTournamentDuelZoneDefinition addBattleEnvironmentsItem(Environment battleEnvironmentsItem) {
    if (this.battleEnvironments == null) {
      this.battleEnvironments = new ArrayList<>();
    }
    this.battleEnvironments.add(battleEnvironmentsItem);
    return this;
  }

  /**
   * Get battleEnvironments
   * @return battleEnvironments
   */
  @javax.annotation.Nullable
  public List<Environment> getBattleEnvironments() {
    return battleEnvironments;
  }

  public void setBattleEnvironments(List<Environment> battleEnvironments) {
    this.battleEnvironments = battleEnvironments;
  }


  public TerritoryTournamentDuelZoneDefinition pointStructure(TerritoryWarPointStructure pointStructure) {
    this.pointStructure = pointStructure;
    return this;
  }

  /**
   * Get pointStructure
   * @return pointStructure
   */
  @javax.annotation.Nullable
  public TerritoryWarPointStructure getPointStructure() {
    return pointStructure;
  }

  public void setPointStructure(TerritoryWarPointStructure pointStructure) {
    this.pointStructure = pointStructure;
  }


  public TerritoryTournamentDuelZoneDefinition saveSquadZoneNumber(Integer saveSquadZoneNumber) {
    this.saveSquadZoneNumber = saveSquadZoneNumber;
    return this;
  }

  /**
   * Get saveSquadZoneNumber
   * @return saveSquadZoneNumber
   */
  @javax.annotation.Nullable
  public Integer getSaveSquadZoneNumber() {
    return saveSquadZoneNumber;
  }

  public void setSaveSquadZoneNumber(Integer saveSquadZoneNumber) {
    this.saveSquadZoneNumber = saveSquadZoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryTournamentDuelZoneDefinition territoryTournamentDuelZoneDefinition = (TerritoryTournamentDuelZoneDefinition) o;
    return Objects.equals(this.zoneDefinition, territoryTournamentDuelZoneDefinition.zoneDefinition) &&
        Objects.equals(this.duelImage, territoryTournamentDuelZoneDefinition.duelImage) &&
        Objects.equals(this.duelRequirement, territoryTournamentDuelZoneDefinition.duelRequirement) &&
        Objects.equals(this.duelDetail, territoryTournamentDuelZoneDefinition.duelDetail) &&
        Objects.equals(this.entryCategoryAllowed, territoryTournamentDuelZoneDefinition.entryCategoryAllowed) &&
        Objects.equals(this.defenseEntryCategoryAllowed, territoryTournamentDuelZoneDefinition.defenseEntryCategoryAllowed) &&
        Objects.equals(this.battleEnvironments, territoryTournamentDuelZoneDefinition.battleEnvironments) &&
        Objects.equals(this.pointStructure, territoryTournamentDuelZoneDefinition.pointStructure) &&
        Objects.equals(this.saveSquadZoneNumber, territoryTournamentDuelZoneDefinition.saveSquadZoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneDefinition, duelImage, duelRequirement, duelDetail, entryCategoryAllowed, defenseEntryCategoryAllowed, battleEnvironments, pointStructure, saveSquadZoneNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryTournamentDuelZoneDefinition {\n");
    sb.append("    zoneDefinition: ").append(toIndentedString(zoneDefinition)).append("\n");
    sb.append("    duelImage: ").append(toIndentedString(duelImage)).append("\n");
    sb.append("    duelRequirement: ").append(toIndentedString(duelRequirement)).append("\n");
    sb.append("    duelDetail: ").append(toIndentedString(duelDetail)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    defenseEntryCategoryAllowed: ").append(toIndentedString(defenseEntryCategoryAllowed)).append("\n");
    sb.append("    battleEnvironments: ").append(toIndentedString(battleEnvironments)).append("\n");
    sb.append("    pointStructure: ").append(toIndentedString(pointStructure)).append("\n");
    sb.append("    saveSquadZoneNumber: ").append(toIndentedString(saveSquadZoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("zoneDefinition");
    openapiFields.add("duelImage");
    openapiFields.add("duelRequirement");
    openapiFields.add("duelDetail");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("defenseEntryCategoryAllowed");
    openapiFields.add("battleEnvironments");
    openapiFields.add("pointStructure");
    openapiFields.add("saveSquadZoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryTournamentDuelZoneDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryTournamentDuelZoneDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryTournamentDuelZoneDefinition is not found in the empty JSON string", TerritoryTournamentDuelZoneDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryTournamentDuelZoneDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryTournamentDuelZoneDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `zoneDefinition`
      if (jsonObj.get("zoneDefinition") != null && !jsonObj.get("zoneDefinition").isJsonNull()) {
        TerritoryZoneDefinition.validateJsonElement(jsonObj.get("zoneDefinition"));
      }
      if ((jsonObj.get("duelImage") != null && !jsonObj.get("duelImage").isJsonNull()) && !jsonObj.get("duelImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duelImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duelImage").toString()));
      }
      if ((jsonObj.get("duelRequirement") != null && !jsonObj.get("duelRequirement").isJsonNull()) && !jsonObj.get("duelRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duelRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duelRequirement").toString()));
      }
      if ((jsonObj.get("duelDetail") != null && !jsonObj.get("duelDetail").isJsonNull()) && !jsonObj.get("duelDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duelDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duelDetail").toString()));
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
      // validate the optional field `defenseEntryCategoryAllowed`
      if (jsonObj.get("defenseEntryCategoryAllowed") != null && !jsonObj.get("defenseEntryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("defenseEntryCategoryAllowed"));
      }
      if (jsonObj.get("battleEnvironments") != null && !jsonObj.get("battleEnvironments").isJsonNull()) {
        JsonArray jsonArraybattleEnvironments = jsonObj.getAsJsonArray("battleEnvironments");
        if (jsonArraybattleEnvironments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battleEnvironments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battleEnvironments` to be an array in the JSON string but got `%s`", jsonObj.get("battleEnvironments").toString()));
          }

          // validate the optional field `battleEnvironments` (array)
          for (int i = 0; i < jsonArraybattleEnvironments.size(); i++) {
            Environment.validateJsonElement(jsonArraybattleEnvironments.get(i));
          };
        }
      }
      // validate the optional field `pointStructure`
      if (jsonObj.get("pointStructure") != null && !jsonObj.get("pointStructure").isJsonNull()) {
        TerritoryWarPointStructure.validateJsonElement(jsonObj.get("pointStructure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryTournamentDuelZoneDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryTournamentDuelZoneDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryTournamentDuelZoneDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryTournamentDuelZoneDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryTournamentDuelZoneDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryTournamentDuelZoneDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryTournamentDuelZoneDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryTournamentDuelZoneDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryTournamentDuelZoneDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryTournamentDuelZoneDefinition
   */
  public static TerritoryTournamentDuelZoneDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryTournamentDuelZoneDefinition.class);
  }

  /**
   * Convert an instance of TerritoryTournamentDuelZoneDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

