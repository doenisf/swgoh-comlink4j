/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.BattleCondition;
import io.github.doenisf.comlink4j.model.EffectApplyType;
import io.github.doenisf.comlink4j.model.EffectDamageType;
import io.github.doenisf.comlink4j.model.EffectReference;
import io.github.doenisf.comlink4j.model.EffectTag;
import io.github.doenisf.comlink4j.model.EffectTarget;
import io.github.doenisf.comlink4j.model.EffectType;
import io.github.doenisf.comlink4j.model.PersistentVfxReference;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * Effect
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Effect {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EffectType type;

  public static final String SERIALIZED_NAME_PARAM = "param";
  @SerializedName(SERIALIZED_NAME_PARAM)
  private List<String> param = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANCE = "chance";
  @SerializedName(SERIALIZED_NAME_CHANCE)
  private Integer chance;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private List<EffectTarget> target = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTIVE_TAG = "descriptiveTag";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIVE_TAG)
  private List<EffectTag> descriptiveTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECTED_TAG = "effectedTag";
  @SerializedName(SERIALIZED_NAME_EFFECTED_TAG)
  private List<EffectTag> effectedTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGER_CONDITION = "triggerCondition";
  @SerializedName(SERIALIZED_NAME_TRIGGER_CONDITION)
  private List<BattleCondition> triggerCondition = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECT_DEFINITION = "effectDefinition";
  @SerializedName(SERIALIZED_NAME_EFFECT_DEFINITION)
  private List<Effect> effectDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXT_INDEX = "contextIndex";
  @SerializedName(SERIALIZED_NAME_CONTEXT_INDEX)
  private List<Integer> contextIndex = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRATION_CONDITION = "expirationCondition";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_CONDITION)
  private List<BattleCondition> expirationCondition = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLY_TYPE = "applyType";
  @SerializedName(SERIALIZED_NAME_APPLY_TYPE)
  private EffectApplyType applyType;

  public static final String SERIALIZED_NAME_DAMAGE_TYPE = "damageType";
  @SerializedName(SERIALIZED_NAME_DAMAGE_TYPE)
  private EffectDamageType damageType;

  public static final String SERIALIZED_NAME_PERSISTENT_ICON = "persistentIcon";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_ICON)
  private String persistentIcon;

  public static final String SERIALIZED_NAME_TRIGGERED_VFX = "triggeredVfx";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_VFX)
  private String triggeredVfx;

  public static final String SERIALIZED_NAME_TRIGGERED_LOC_KEY = "triggeredLocKey";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_LOC_KEY)
  private String triggeredLocKey;

  public static final String SERIALIZED_NAME_MAX_BONUS_MOVES = "maxBonusMoves";
  @SerializedName(SERIALIZED_NAME_MAX_BONUS_MOVES)
  private Integer maxBonusMoves;

  public static final String SERIALIZED_NAME_EFFECT_REFERENCE = "effectReference";
  @SerializedName(SERIALIZED_NAME_EFFECT_REFERENCE)
  private List<EffectReference> effectReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTIPLIER_AMOUNT_DECIMAL = "multiplierAmountDecimal";
  @SerializedName(SERIALIZED_NAME_MULTIPLIER_AMOUNT_DECIMAL)
  private Integer multiplierAmountDecimal;

  public static final String SERIALIZED_NAME_CONTEXT_MULTIPLIER_DECIMAL = "contextMultiplierDecimal";
  @SerializedName(SERIALIZED_NAME_CONTEXT_MULTIPLIER_DECIMAL)
  private Integer contextMultiplierDecimal;

  public static final String SERIALIZED_NAME_ADDITIVE_AMOUNT_DECIMAL = "additiveAmountDecimal";
  @SerializedName(SERIALIZED_NAME_ADDITIVE_AMOUNT_DECIMAL)
  private Long additiveAmountDecimal;

  public static final String SERIALIZED_NAME_RESULT_VARIANCE_DECIMAL = "resultVarianceDecimal";
  @SerializedName(SERIALIZED_NAME_RESULT_VARIANCE_DECIMAL)
  private Integer resultVarianceDecimal;

  public static final String SERIALIZED_NAME_PERSISTENT_LOC_KEY = "persistentLocKey";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_LOC_KEY)
  private String persistentLocKey;

  public static final String SERIALIZED_NAME_STACKING_LINE_OVERRIDE = "stackingLineOverride";
  @SerializedName(SERIALIZED_NAME_STACKING_LINE_OVERRIDE)
  private String stackingLineOverride;

  public static final String SERIALIZED_NAME_PERSISTENT_ICON_OVERLAY = "persistentIconOverlay";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_ICON_OVERLAY)
  private String persistentIconOverlay;

  public static final String SERIALIZED_NAME_PERSISTENT_ICON_PRIORITY = "persistentIconPriority";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_ICON_PRIORITY)
  private Integer persistentIconPriority;

  public static final String SERIALIZED_NAME_ICON_COLOR = "iconColor";
  @SerializedName(SERIALIZED_NAME_ICON_COLOR)
  private String iconColor;

  public static final String SERIALIZED_NAME_PERSISTENT_ICON_GROUPABLE = "persistentIconGroupable";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_ICON_GROUPABLE)
  private Boolean persistentIconGroupable;

  public static final String SERIALIZED_NAME_PERSISTENT_VFX_REFERENCE = "persistentVfxReference";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_VFX_REFERENCE)
  private PersistentVfxReference persistentVfxReference;

  public static final String SERIALIZED_NAME_BLACKBOARD_NAME = "blackboardName";
  @SerializedName(SERIALIZED_NAME_BLACKBOARD_NAME)
  private String blackboardName;

  public static final String SERIALIZED_NAME_SUMMON_ID = "summonId";
  @SerializedName(SERIALIZED_NAME_SUMMON_ID)
  private String summonId;

  public static final String SERIALIZED_NAME_SUMMON_EFFECT = "summonEffect";
  @SerializedName(SERIALIZED_NAME_SUMMON_EFFECT)
  private List<Effect> summonEffect = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMON_LEVEL = "summonLevel";
  @SerializedName(SERIALIZED_NAME_SUMMON_LEVEL)
  private Integer summonLevel;

  public static final String SERIALIZED_NAME_SUMMON_TIER = "summonTier";
  @SerializedName(SERIALIZED_NAME_SUMMON_TIER)
  private UnitTier summonTier;

  public static final String SERIALIZED_NAME_SUMMON_RARITY = "summonRarity";
  @SerializedName(SERIALIZED_NAME_SUMMON_RARITY)
  private Rarity summonRarity;

  public static final String SERIALIZED_NAME_SUMMON_SQUAD_INCREASE = "summonSquadIncrease";
  @SerializedName(SERIALIZED_NAME_SUMMON_SQUAD_INCREASE)
  private Integer summonSquadIncrease;

  public static final String SERIALIZED_NAME_IGNORE_DAMAGE_ANIMATION = "ignoreDamageAnimation";
  @SerializedName(SERIALIZED_NAME_IGNORE_DAMAGE_ANIMATION)
  private Boolean ignoreDamageAnimation;

  public static final String SERIALIZED_NAME_INFINITE_CYCLE_EFFECT = "infiniteCycleEffect";
  @SerializedName(SERIALIZED_NAME_INFINITE_CYCLE_EFFECT)
  private List<String> infiniteCycleEffect = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLACKBOARD_COMPARE_NAME = "blackboardCompareName";
  @SerializedName(SERIALIZED_NAME_BLACKBOARD_COMPARE_NAME)
  private String blackboardCompareName;

  public static final String SERIALIZED_NAME_SUMMON_MARKER_INDEX = "summonMarkerIndex";
  @SerializedName(SERIALIZED_NAME_SUMMON_MARKER_INDEX)
  private Integer summonMarkerIndex;

  public static final String SERIALIZED_NAME_SUMMON_ENABLE_INITIAL_VFX = "summonEnableInitialVfx";
  @SerializedName(SERIALIZED_NAME_SUMMON_ENABLE_INITIAL_VFX)
  private Boolean summonEnableInitialVfx;

  public static final String SERIALIZED_NAME_SUMMON_COUNT = "summonCount";
  @SerializedName(SERIALIZED_NAME_SUMMON_COUNT)
  private Integer summonCount;

  public Effect() {
  }

  public Effect id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Effect type(EffectType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public EffectType getType() {
    return type;
  }

  public void setType(EffectType type) {
    this.type = type;
  }


  public Effect param(List<String> param) {
    this.param = param;
    return this;
  }

  public Effect addParamItem(String paramItem) {
    if (this.param == null) {
      this.param = new ArrayList<>();
    }
    this.param.add(paramItem);
    return this;
  }

  /**
   * Get param
   * @return param
   */
  @javax.annotation.Nullable
  public List<String> getParam() {
    return param;
  }

  public void setParam(List<String> param) {
    this.param = param;
  }


  public Effect chance(Integer chance) {
    this.chance = chance;
    return this;
  }

  /**
   * Get chance
   * @return chance
   */
  @javax.annotation.Nullable
  public Integer getChance() {
    return chance;
  }

  public void setChance(Integer chance) {
    this.chance = chance;
  }


  public Effect target(List<EffectTarget> target) {
    this.target = target;
    return this;
  }

  public Effect addTargetItem(EffectTarget targetItem) {
    if (this.target == null) {
      this.target = new ArrayList<>();
    }
    this.target.add(targetItem);
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public List<EffectTarget> getTarget() {
    return target;
  }

  public void setTarget(List<EffectTarget> target) {
    this.target = target;
  }


  public Effect descriptiveTag(List<EffectTag> descriptiveTag) {
    this.descriptiveTag = descriptiveTag;
    return this;
  }

  public Effect addDescriptiveTagItem(EffectTag descriptiveTagItem) {
    if (this.descriptiveTag == null) {
      this.descriptiveTag = new ArrayList<>();
    }
    this.descriptiveTag.add(descriptiveTagItem);
    return this;
  }

  /**
   * Get descriptiveTag
   * @return descriptiveTag
   */
  @javax.annotation.Nullable
  public List<EffectTag> getDescriptiveTag() {
    return descriptiveTag;
  }

  public void setDescriptiveTag(List<EffectTag> descriptiveTag) {
    this.descriptiveTag = descriptiveTag;
  }


  public Effect effectedTag(List<EffectTag> effectedTag) {
    this.effectedTag = effectedTag;
    return this;
  }

  public Effect addEffectedTagItem(EffectTag effectedTagItem) {
    if (this.effectedTag == null) {
      this.effectedTag = new ArrayList<>();
    }
    this.effectedTag.add(effectedTagItem);
    return this;
  }

  /**
   * Get effectedTag
   * @return effectedTag
   */
  @javax.annotation.Nullable
  public List<EffectTag> getEffectedTag() {
    return effectedTag;
  }

  public void setEffectedTag(List<EffectTag> effectedTag) {
    this.effectedTag = effectedTag;
  }


  public Effect triggerCondition(List<BattleCondition> triggerCondition) {
    this.triggerCondition = triggerCondition;
    return this;
  }

  public Effect addTriggerConditionItem(BattleCondition triggerConditionItem) {
    if (this.triggerCondition == null) {
      this.triggerCondition = new ArrayList<>();
    }
    this.triggerCondition.add(triggerConditionItem);
    return this;
  }

  /**
   * Get triggerCondition
   * @return triggerCondition
   */
  @javax.annotation.Nullable
  public List<BattleCondition> getTriggerCondition() {
    return triggerCondition;
  }

  public void setTriggerCondition(List<BattleCondition> triggerCondition) {
    this.triggerCondition = triggerCondition;
  }


  public Effect effectDefinition(List<Effect> effectDefinition) {
    this.effectDefinition = effectDefinition;
    return this;
  }

  public Effect addEffectDefinitionItem(Effect effectDefinitionItem) {
    if (this.effectDefinition == null) {
      this.effectDefinition = new ArrayList<>();
    }
    this.effectDefinition.add(effectDefinitionItem);
    return this;
  }

  /**
   * Get effectDefinition
   * @return effectDefinition
   */
  @javax.annotation.Nullable
  public List<Effect> getEffectDefinition() {
    return effectDefinition;
  }

  public void setEffectDefinition(List<Effect> effectDefinition) {
    this.effectDefinition = effectDefinition;
  }


  public Effect contextIndex(List<Integer> contextIndex) {
    this.contextIndex = contextIndex;
    return this;
  }

  public Effect addContextIndexItem(Integer contextIndexItem) {
    if (this.contextIndex == null) {
      this.contextIndex = new ArrayList<>();
    }
    this.contextIndex.add(contextIndexItem);
    return this;
  }

  /**
   * Get contextIndex
   * @return contextIndex
   */
  @javax.annotation.Nullable
  public List<Integer> getContextIndex() {
    return contextIndex;
  }

  public void setContextIndex(List<Integer> contextIndex) {
    this.contextIndex = contextIndex;
  }


  public Effect expirationCondition(List<BattleCondition> expirationCondition) {
    this.expirationCondition = expirationCondition;
    return this;
  }

  public Effect addExpirationConditionItem(BattleCondition expirationConditionItem) {
    if (this.expirationCondition == null) {
      this.expirationCondition = new ArrayList<>();
    }
    this.expirationCondition.add(expirationConditionItem);
    return this;
  }

  /**
   * Get expirationCondition
   * @return expirationCondition
   */
  @javax.annotation.Nullable
  public List<BattleCondition> getExpirationCondition() {
    return expirationCondition;
  }

  public void setExpirationCondition(List<BattleCondition> expirationCondition) {
    this.expirationCondition = expirationCondition;
  }


  public Effect applyType(EffectApplyType applyType) {
    this.applyType = applyType;
    return this;
  }

  /**
   * Get applyType
   * @return applyType
   */
  @javax.annotation.Nullable
  public EffectApplyType getApplyType() {
    return applyType;
  }

  public void setApplyType(EffectApplyType applyType) {
    this.applyType = applyType;
  }


  public Effect damageType(EffectDamageType damageType) {
    this.damageType = damageType;
    return this;
  }

  /**
   * Get damageType
   * @return damageType
   */
  @javax.annotation.Nullable
  public EffectDamageType getDamageType() {
    return damageType;
  }

  public void setDamageType(EffectDamageType damageType) {
    this.damageType = damageType;
  }


  public Effect persistentIcon(String persistentIcon) {
    this.persistentIcon = persistentIcon;
    return this;
  }

  /**
   * Get persistentIcon
   * @return persistentIcon
   */
  @javax.annotation.Nullable
  public String getPersistentIcon() {
    return persistentIcon;
  }

  public void setPersistentIcon(String persistentIcon) {
    this.persistentIcon = persistentIcon;
  }


  public Effect triggeredVfx(String triggeredVfx) {
    this.triggeredVfx = triggeredVfx;
    return this;
  }

  /**
   * Get triggeredVfx
   * @return triggeredVfx
   */
  @javax.annotation.Nullable
  public String getTriggeredVfx() {
    return triggeredVfx;
  }

  public void setTriggeredVfx(String triggeredVfx) {
    this.triggeredVfx = triggeredVfx;
  }


  public Effect triggeredLocKey(String triggeredLocKey) {
    this.triggeredLocKey = triggeredLocKey;
    return this;
  }

  /**
   * Get triggeredLocKey
   * @return triggeredLocKey
   */
  @javax.annotation.Nullable
  public String getTriggeredLocKey() {
    return triggeredLocKey;
  }

  public void setTriggeredLocKey(String triggeredLocKey) {
    this.triggeredLocKey = triggeredLocKey;
  }


  public Effect maxBonusMoves(Integer maxBonusMoves) {
    this.maxBonusMoves = maxBonusMoves;
    return this;
  }

  /**
   * Get maxBonusMoves
   * @return maxBonusMoves
   */
  @javax.annotation.Nullable
  public Integer getMaxBonusMoves() {
    return maxBonusMoves;
  }

  public void setMaxBonusMoves(Integer maxBonusMoves) {
    this.maxBonusMoves = maxBonusMoves;
  }


  public Effect effectReference(List<EffectReference> effectReference) {
    this.effectReference = effectReference;
    return this;
  }

  public Effect addEffectReferenceItem(EffectReference effectReferenceItem) {
    if (this.effectReference == null) {
      this.effectReference = new ArrayList<>();
    }
    this.effectReference.add(effectReferenceItem);
    return this;
  }

  /**
   * Get effectReference
   * @return effectReference
   */
  @javax.annotation.Nullable
  public List<EffectReference> getEffectReference() {
    return effectReference;
  }

  public void setEffectReference(List<EffectReference> effectReference) {
    this.effectReference = effectReference;
  }


  public Effect multiplierAmountDecimal(Integer multiplierAmountDecimal) {
    this.multiplierAmountDecimal = multiplierAmountDecimal;
    return this;
  }

  /**
   * Get multiplierAmountDecimal
   * @return multiplierAmountDecimal
   */
  @javax.annotation.Nullable
  public Integer getMultiplierAmountDecimal() {
    return multiplierAmountDecimal;
  }

  public void setMultiplierAmountDecimal(Integer multiplierAmountDecimal) {
    this.multiplierAmountDecimal = multiplierAmountDecimal;
  }


  public Effect contextMultiplierDecimal(Integer contextMultiplierDecimal) {
    this.contextMultiplierDecimal = contextMultiplierDecimal;
    return this;
  }

  /**
   * Get contextMultiplierDecimal
   * @return contextMultiplierDecimal
   */
  @javax.annotation.Nullable
  public Integer getContextMultiplierDecimal() {
    return contextMultiplierDecimal;
  }

  public void setContextMultiplierDecimal(Integer contextMultiplierDecimal) {
    this.contextMultiplierDecimal = contextMultiplierDecimal;
  }


  public Effect additiveAmountDecimal(Long additiveAmountDecimal) {
    this.additiveAmountDecimal = additiveAmountDecimal;
    return this;
  }

  /**
   * Get additiveAmountDecimal
   * @return additiveAmountDecimal
   */
  @javax.annotation.Nullable
  public Long getAdditiveAmountDecimal() {
    return additiveAmountDecimal;
  }

  public void setAdditiveAmountDecimal(Long additiveAmountDecimal) {
    this.additiveAmountDecimal = additiveAmountDecimal;
  }


  public Effect resultVarianceDecimal(Integer resultVarianceDecimal) {
    this.resultVarianceDecimal = resultVarianceDecimal;
    return this;
  }

  /**
   * Get resultVarianceDecimal
   * @return resultVarianceDecimal
   */
  @javax.annotation.Nullable
  public Integer getResultVarianceDecimal() {
    return resultVarianceDecimal;
  }

  public void setResultVarianceDecimal(Integer resultVarianceDecimal) {
    this.resultVarianceDecimal = resultVarianceDecimal;
  }


  public Effect persistentLocKey(String persistentLocKey) {
    this.persistentLocKey = persistentLocKey;
    return this;
  }

  /**
   * Get persistentLocKey
   * @return persistentLocKey
   */
  @javax.annotation.Nullable
  public String getPersistentLocKey() {
    return persistentLocKey;
  }

  public void setPersistentLocKey(String persistentLocKey) {
    this.persistentLocKey = persistentLocKey;
  }


  public Effect stackingLineOverride(String stackingLineOverride) {
    this.stackingLineOverride = stackingLineOverride;
    return this;
  }

  /**
   * Get stackingLineOverride
   * @return stackingLineOverride
   */
  @javax.annotation.Nullable
  public String getStackingLineOverride() {
    return stackingLineOverride;
  }

  public void setStackingLineOverride(String stackingLineOverride) {
    this.stackingLineOverride = stackingLineOverride;
  }


  public Effect persistentIconOverlay(String persistentIconOverlay) {
    this.persistentIconOverlay = persistentIconOverlay;
    return this;
  }

  /**
   * Get persistentIconOverlay
   * @return persistentIconOverlay
   */
  @javax.annotation.Nullable
  public String getPersistentIconOverlay() {
    return persistentIconOverlay;
  }

  public void setPersistentIconOverlay(String persistentIconOverlay) {
    this.persistentIconOverlay = persistentIconOverlay;
  }


  public Effect persistentIconPriority(Integer persistentIconPriority) {
    this.persistentIconPriority = persistentIconPriority;
    return this;
  }

  /**
   * Get persistentIconPriority
   * @return persistentIconPriority
   */
  @javax.annotation.Nullable
  public Integer getPersistentIconPriority() {
    return persistentIconPriority;
  }

  public void setPersistentIconPriority(Integer persistentIconPriority) {
    this.persistentIconPriority = persistentIconPriority;
  }


  public Effect iconColor(String iconColor) {
    this.iconColor = iconColor;
    return this;
  }

  /**
   * Get iconColor
   * @return iconColor
   */
  @javax.annotation.Nullable
  public String getIconColor() {
    return iconColor;
  }

  public void setIconColor(String iconColor) {
    this.iconColor = iconColor;
  }


  public Effect persistentIconGroupable(Boolean persistentIconGroupable) {
    this.persistentIconGroupable = persistentIconGroupable;
    return this;
  }

  /**
   * Get persistentIconGroupable
   * @return persistentIconGroupable
   */
  @javax.annotation.Nullable
  public Boolean getPersistentIconGroupable() {
    return persistentIconGroupable;
  }

  public void setPersistentIconGroupable(Boolean persistentIconGroupable) {
    this.persistentIconGroupable = persistentIconGroupable;
  }


  public Effect persistentVfxReference(PersistentVfxReference persistentVfxReference) {
    this.persistentVfxReference = persistentVfxReference;
    return this;
  }

  /**
   * Get persistentVfxReference
   * @return persistentVfxReference
   */
  @javax.annotation.Nullable
  public PersistentVfxReference getPersistentVfxReference() {
    return persistentVfxReference;
  }

  public void setPersistentVfxReference(PersistentVfxReference persistentVfxReference) {
    this.persistentVfxReference = persistentVfxReference;
  }


  public Effect blackboardName(String blackboardName) {
    this.blackboardName = blackboardName;
    return this;
  }

  /**
   * Get blackboardName
   * @return blackboardName
   */
  @javax.annotation.Nullable
  public String getBlackboardName() {
    return blackboardName;
  }

  public void setBlackboardName(String blackboardName) {
    this.blackboardName = blackboardName;
  }


  public Effect summonId(String summonId) {
    this.summonId = summonId;
    return this;
  }

  /**
   * Get summonId
   * @return summonId
   */
  @javax.annotation.Nullable
  public String getSummonId() {
    return summonId;
  }

  public void setSummonId(String summonId) {
    this.summonId = summonId;
  }


  public Effect summonEffect(List<Effect> summonEffect) {
    this.summonEffect = summonEffect;
    return this;
  }

  public Effect addSummonEffectItem(Effect summonEffectItem) {
    if (this.summonEffect == null) {
      this.summonEffect = new ArrayList<>();
    }
    this.summonEffect.add(summonEffectItem);
    return this;
  }

  /**
   * Get summonEffect
   * @return summonEffect
   */
  @javax.annotation.Nullable
  public List<Effect> getSummonEffect() {
    return summonEffect;
  }

  public void setSummonEffect(List<Effect> summonEffect) {
    this.summonEffect = summonEffect;
  }


  public Effect summonLevel(Integer summonLevel) {
    this.summonLevel = summonLevel;
    return this;
  }

  /**
   * Get summonLevel
   * @return summonLevel
   */
  @javax.annotation.Nullable
  public Integer getSummonLevel() {
    return summonLevel;
  }

  public void setSummonLevel(Integer summonLevel) {
    this.summonLevel = summonLevel;
  }


  public Effect summonTier(UnitTier summonTier) {
    this.summonTier = summonTier;
    return this;
  }

  /**
   * Get summonTier
   * @return summonTier
   */
  @javax.annotation.Nullable
  public UnitTier getSummonTier() {
    return summonTier;
  }

  public void setSummonTier(UnitTier summonTier) {
    this.summonTier = summonTier;
  }


  public Effect summonRarity(Rarity summonRarity) {
    this.summonRarity = summonRarity;
    return this;
  }

  /**
   * Get summonRarity
   * @return summonRarity
   */
  @javax.annotation.Nullable
  public Rarity getSummonRarity() {
    return summonRarity;
  }

  public void setSummonRarity(Rarity summonRarity) {
    this.summonRarity = summonRarity;
  }


  public Effect summonSquadIncrease(Integer summonSquadIncrease) {
    this.summonSquadIncrease = summonSquadIncrease;
    return this;
  }

  /**
   * Get summonSquadIncrease
   * @return summonSquadIncrease
   */
  @javax.annotation.Nullable
  public Integer getSummonSquadIncrease() {
    return summonSquadIncrease;
  }

  public void setSummonSquadIncrease(Integer summonSquadIncrease) {
    this.summonSquadIncrease = summonSquadIncrease;
  }


  public Effect ignoreDamageAnimation(Boolean ignoreDamageAnimation) {
    this.ignoreDamageAnimation = ignoreDamageAnimation;
    return this;
  }

  /**
   * Get ignoreDamageAnimation
   * @return ignoreDamageAnimation
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreDamageAnimation() {
    return ignoreDamageAnimation;
  }

  public void setIgnoreDamageAnimation(Boolean ignoreDamageAnimation) {
    this.ignoreDamageAnimation = ignoreDamageAnimation;
  }


  public Effect infiniteCycleEffect(List<String> infiniteCycleEffect) {
    this.infiniteCycleEffect = infiniteCycleEffect;
    return this;
  }

  public Effect addInfiniteCycleEffectItem(String infiniteCycleEffectItem) {
    if (this.infiniteCycleEffect == null) {
      this.infiniteCycleEffect = new ArrayList<>();
    }
    this.infiniteCycleEffect.add(infiniteCycleEffectItem);
    return this;
  }

  /**
   * Get infiniteCycleEffect
   * @return infiniteCycleEffect
   */
  @javax.annotation.Nullable
  public List<String> getInfiniteCycleEffect() {
    return infiniteCycleEffect;
  }

  public void setInfiniteCycleEffect(List<String> infiniteCycleEffect) {
    this.infiniteCycleEffect = infiniteCycleEffect;
  }


  public Effect blackboardCompareName(String blackboardCompareName) {
    this.blackboardCompareName = blackboardCompareName;
    return this;
  }

  /**
   * Get blackboardCompareName
   * @return blackboardCompareName
   */
  @javax.annotation.Nullable
  public String getBlackboardCompareName() {
    return blackboardCompareName;
  }

  public void setBlackboardCompareName(String blackboardCompareName) {
    this.blackboardCompareName = blackboardCompareName;
  }


  public Effect summonMarkerIndex(Integer summonMarkerIndex) {
    this.summonMarkerIndex = summonMarkerIndex;
    return this;
  }

  /**
   * Get summonMarkerIndex
   * @return summonMarkerIndex
   */
  @javax.annotation.Nullable
  public Integer getSummonMarkerIndex() {
    return summonMarkerIndex;
  }

  public void setSummonMarkerIndex(Integer summonMarkerIndex) {
    this.summonMarkerIndex = summonMarkerIndex;
  }


  public Effect summonEnableInitialVfx(Boolean summonEnableInitialVfx) {
    this.summonEnableInitialVfx = summonEnableInitialVfx;
    return this;
  }

  /**
   * Get summonEnableInitialVfx
   * @return summonEnableInitialVfx
   */
  @javax.annotation.Nullable
  public Boolean getSummonEnableInitialVfx() {
    return summonEnableInitialVfx;
  }

  public void setSummonEnableInitialVfx(Boolean summonEnableInitialVfx) {
    this.summonEnableInitialVfx = summonEnableInitialVfx;
  }


  public Effect summonCount(Integer summonCount) {
    this.summonCount = summonCount;
    return this;
  }

  /**
   * Get summonCount
   * @return summonCount
   */
  @javax.annotation.Nullable
  public Integer getSummonCount() {
    return summonCount;
  }

  public void setSummonCount(Integer summonCount) {
    this.summonCount = summonCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Effect effect = (Effect) o;
    return Objects.equals(this.id, effect.id) &&
        Objects.equals(this.type, effect.type) &&
        Objects.equals(this.param, effect.param) &&
        Objects.equals(this.chance, effect.chance) &&
        Objects.equals(this.target, effect.target) &&
        Objects.equals(this.descriptiveTag, effect.descriptiveTag) &&
        Objects.equals(this.effectedTag, effect.effectedTag) &&
        Objects.equals(this.triggerCondition, effect.triggerCondition) &&
        Objects.equals(this.effectDefinition, effect.effectDefinition) &&
        Objects.equals(this.contextIndex, effect.contextIndex) &&
        Objects.equals(this.expirationCondition, effect.expirationCondition) &&
        Objects.equals(this.applyType, effect.applyType) &&
        Objects.equals(this.damageType, effect.damageType) &&
        Objects.equals(this.persistentIcon, effect.persistentIcon) &&
        Objects.equals(this.triggeredVfx, effect.triggeredVfx) &&
        Objects.equals(this.triggeredLocKey, effect.triggeredLocKey) &&
        Objects.equals(this.maxBonusMoves, effect.maxBonusMoves) &&
        Objects.equals(this.effectReference, effect.effectReference) &&
        Objects.equals(this.multiplierAmountDecimal, effect.multiplierAmountDecimal) &&
        Objects.equals(this.contextMultiplierDecimal, effect.contextMultiplierDecimal) &&
        Objects.equals(this.additiveAmountDecimal, effect.additiveAmountDecimal) &&
        Objects.equals(this.resultVarianceDecimal, effect.resultVarianceDecimal) &&
        Objects.equals(this.persistentLocKey, effect.persistentLocKey) &&
        Objects.equals(this.stackingLineOverride, effect.stackingLineOverride) &&
        Objects.equals(this.persistentIconOverlay, effect.persistentIconOverlay) &&
        Objects.equals(this.persistentIconPriority, effect.persistentIconPriority) &&
        Objects.equals(this.iconColor, effect.iconColor) &&
        Objects.equals(this.persistentIconGroupable, effect.persistentIconGroupable) &&
        Objects.equals(this.persistentVfxReference, effect.persistentVfxReference) &&
        Objects.equals(this.blackboardName, effect.blackboardName) &&
        Objects.equals(this.summonId, effect.summonId) &&
        Objects.equals(this.summonEffect, effect.summonEffect) &&
        Objects.equals(this.summonLevel, effect.summonLevel) &&
        Objects.equals(this.summonTier, effect.summonTier) &&
        Objects.equals(this.summonRarity, effect.summonRarity) &&
        Objects.equals(this.summonSquadIncrease, effect.summonSquadIncrease) &&
        Objects.equals(this.ignoreDamageAnimation, effect.ignoreDamageAnimation) &&
        Objects.equals(this.infiniteCycleEffect, effect.infiniteCycleEffect) &&
        Objects.equals(this.blackboardCompareName, effect.blackboardCompareName) &&
        Objects.equals(this.summonMarkerIndex, effect.summonMarkerIndex) &&
        Objects.equals(this.summonEnableInitialVfx, effect.summonEnableInitialVfx) &&
        Objects.equals(this.summonCount, effect.summonCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, param, chance, target, descriptiveTag, effectedTag, triggerCondition, effectDefinition, contextIndex, expirationCondition, applyType, damageType, persistentIcon, triggeredVfx, triggeredLocKey, maxBonusMoves, effectReference, multiplierAmountDecimal, contextMultiplierDecimal, additiveAmountDecimal, resultVarianceDecimal, persistentLocKey, stackingLineOverride, persistentIconOverlay, persistentIconPriority, iconColor, persistentIconGroupable, persistentVfxReference, blackboardName, summonId, summonEffect, summonLevel, summonTier, summonRarity, summonSquadIncrease, ignoreDamageAnimation, infiniteCycleEffect, blackboardCompareName, summonMarkerIndex, summonEnableInitialVfx, summonCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Effect {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    param: ").append(toIndentedString(param)).append("\n");
    sb.append("    chance: ").append(toIndentedString(chance)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    descriptiveTag: ").append(toIndentedString(descriptiveTag)).append("\n");
    sb.append("    effectedTag: ").append(toIndentedString(effectedTag)).append("\n");
    sb.append("    triggerCondition: ").append(toIndentedString(triggerCondition)).append("\n");
    sb.append("    effectDefinition: ").append(toIndentedString(effectDefinition)).append("\n");
    sb.append("    contextIndex: ").append(toIndentedString(contextIndex)).append("\n");
    sb.append("    expirationCondition: ").append(toIndentedString(expirationCondition)).append("\n");
    sb.append("    applyType: ").append(toIndentedString(applyType)).append("\n");
    sb.append("    damageType: ").append(toIndentedString(damageType)).append("\n");
    sb.append("    persistentIcon: ").append(toIndentedString(persistentIcon)).append("\n");
    sb.append("    triggeredVfx: ").append(toIndentedString(triggeredVfx)).append("\n");
    sb.append("    triggeredLocKey: ").append(toIndentedString(triggeredLocKey)).append("\n");
    sb.append("    maxBonusMoves: ").append(toIndentedString(maxBonusMoves)).append("\n");
    sb.append("    effectReference: ").append(toIndentedString(effectReference)).append("\n");
    sb.append("    multiplierAmountDecimal: ").append(toIndentedString(multiplierAmountDecimal)).append("\n");
    sb.append("    contextMultiplierDecimal: ").append(toIndentedString(contextMultiplierDecimal)).append("\n");
    sb.append("    additiveAmountDecimal: ").append(toIndentedString(additiveAmountDecimal)).append("\n");
    sb.append("    resultVarianceDecimal: ").append(toIndentedString(resultVarianceDecimal)).append("\n");
    sb.append("    persistentLocKey: ").append(toIndentedString(persistentLocKey)).append("\n");
    sb.append("    stackingLineOverride: ").append(toIndentedString(stackingLineOverride)).append("\n");
    sb.append("    persistentIconOverlay: ").append(toIndentedString(persistentIconOverlay)).append("\n");
    sb.append("    persistentIconPriority: ").append(toIndentedString(persistentIconPriority)).append("\n");
    sb.append("    iconColor: ").append(toIndentedString(iconColor)).append("\n");
    sb.append("    persistentIconGroupable: ").append(toIndentedString(persistentIconGroupable)).append("\n");
    sb.append("    persistentVfxReference: ").append(toIndentedString(persistentVfxReference)).append("\n");
    sb.append("    blackboardName: ").append(toIndentedString(blackboardName)).append("\n");
    sb.append("    summonId: ").append(toIndentedString(summonId)).append("\n");
    sb.append("    summonEffect: ").append(toIndentedString(summonEffect)).append("\n");
    sb.append("    summonLevel: ").append(toIndentedString(summonLevel)).append("\n");
    sb.append("    summonTier: ").append(toIndentedString(summonTier)).append("\n");
    sb.append("    summonRarity: ").append(toIndentedString(summonRarity)).append("\n");
    sb.append("    summonSquadIncrease: ").append(toIndentedString(summonSquadIncrease)).append("\n");
    sb.append("    ignoreDamageAnimation: ").append(toIndentedString(ignoreDamageAnimation)).append("\n");
    sb.append("    infiniteCycleEffect: ").append(toIndentedString(infiniteCycleEffect)).append("\n");
    sb.append("    blackboardCompareName: ").append(toIndentedString(blackboardCompareName)).append("\n");
    sb.append("    summonMarkerIndex: ").append(toIndentedString(summonMarkerIndex)).append("\n");
    sb.append("    summonEnableInitialVfx: ").append(toIndentedString(summonEnableInitialVfx)).append("\n");
    sb.append("    summonCount: ").append(toIndentedString(summonCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("param");
    openapiFields.add("chance");
    openapiFields.add("target");
    openapiFields.add("descriptiveTag");
    openapiFields.add("effectedTag");
    openapiFields.add("triggerCondition");
    openapiFields.add("effectDefinition");
    openapiFields.add("contextIndex");
    openapiFields.add("expirationCondition");
    openapiFields.add("applyType");
    openapiFields.add("damageType");
    openapiFields.add("persistentIcon");
    openapiFields.add("triggeredVfx");
    openapiFields.add("triggeredLocKey");
    openapiFields.add("maxBonusMoves");
    openapiFields.add("effectReference");
    openapiFields.add("multiplierAmountDecimal");
    openapiFields.add("contextMultiplierDecimal");
    openapiFields.add("additiveAmountDecimal");
    openapiFields.add("resultVarianceDecimal");
    openapiFields.add("persistentLocKey");
    openapiFields.add("stackingLineOverride");
    openapiFields.add("persistentIconOverlay");
    openapiFields.add("persistentIconPriority");
    openapiFields.add("iconColor");
    openapiFields.add("persistentIconGroupable");
    openapiFields.add("persistentVfxReference");
    openapiFields.add("blackboardName");
    openapiFields.add("summonId");
    openapiFields.add("summonEffect");
    openapiFields.add("summonLevel");
    openapiFields.add("summonTier");
    openapiFields.add("summonRarity");
    openapiFields.add("summonSquadIncrease");
    openapiFields.add("ignoreDamageAnimation");
    openapiFields.add("infiniteCycleEffect");
    openapiFields.add("blackboardCompareName");
    openapiFields.add("summonMarkerIndex");
    openapiFields.add("summonEnableInitialVfx");
    openapiFields.add("summonCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Effect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Effect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Effect is not found in the empty JSON string", Effect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Effect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Effect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        EffectType.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("param") != null && !jsonObj.get("param").isJsonNull() && !jsonObj.get("param").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `param` to be an array in the JSON string but got `%s`", jsonObj.get("param").toString()));
      }
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        JsonArray jsonArraytarget = jsonObj.getAsJsonArray("target");
        if (jsonArraytarget != null) {
          // ensure the json data is an array
          if (!jsonObj.get("target").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `target` to be an array in the JSON string but got `%s`", jsonObj.get("target").toString()));
          }

          // validate the optional field `target` (array)
          for (int i = 0; i < jsonArraytarget.size(); i++) {
            EffectTarget.validateJsonElement(jsonArraytarget.get(i));
          };
        }
      }
      if (jsonObj.get("descriptiveTag") != null && !jsonObj.get("descriptiveTag").isJsonNull()) {
        JsonArray jsonArraydescriptiveTag = jsonObj.getAsJsonArray("descriptiveTag");
        if (jsonArraydescriptiveTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("descriptiveTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `descriptiveTag` to be an array in the JSON string but got `%s`", jsonObj.get("descriptiveTag").toString()));
          }

          // validate the optional field `descriptiveTag` (array)
          for (int i = 0; i < jsonArraydescriptiveTag.size(); i++) {
            EffectTag.validateJsonElement(jsonArraydescriptiveTag.get(i));
          };
        }
      }
      if (jsonObj.get("effectedTag") != null && !jsonObj.get("effectedTag").isJsonNull()) {
        JsonArray jsonArrayeffectedTag = jsonObj.getAsJsonArray("effectedTag");
        if (jsonArrayeffectedTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectedTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectedTag` to be an array in the JSON string but got `%s`", jsonObj.get("effectedTag").toString()));
          }

          // validate the optional field `effectedTag` (array)
          for (int i = 0; i < jsonArrayeffectedTag.size(); i++) {
            EffectTag.validateJsonElement(jsonArrayeffectedTag.get(i));
          };
        }
      }
      if (jsonObj.get("triggerCondition") != null && !jsonObj.get("triggerCondition").isJsonNull()) {
        JsonArray jsonArraytriggerCondition = jsonObj.getAsJsonArray("triggerCondition");
        if (jsonArraytriggerCondition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggerCondition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggerCondition` to be an array in the JSON string but got `%s`", jsonObj.get("triggerCondition").toString()));
          }

          // validate the optional field `triggerCondition` (array)
          for (int i = 0; i < jsonArraytriggerCondition.size(); i++) {
            BattleCondition.validateJsonElement(jsonArraytriggerCondition.get(i));
          };
        }
      }
      if (jsonObj.get("effectDefinition") != null && !jsonObj.get("effectDefinition").isJsonNull()) {
        JsonArray jsonArrayeffectDefinition = jsonObj.getAsJsonArray("effectDefinition");
        if (jsonArrayeffectDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("effectDefinition").toString()));
          }

          // validate the optional field `effectDefinition` (array)
          for (int i = 0; i < jsonArrayeffectDefinition.size(); i++) {
            Effect.validateJsonElement(jsonArrayeffectDefinition.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contextIndex") != null && !jsonObj.get("contextIndex").isJsonNull() && !jsonObj.get("contextIndex").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextIndex` to be an array in the JSON string but got `%s`", jsonObj.get("contextIndex").toString()));
      }
      if (jsonObj.get("expirationCondition") != null && !jsonObj.get("expirationCondition").isJsonNull()) {
        JsonArray jsonArrayexpirationCondition = jsonObj.getAsJsonArray("expirationCondition");
        if (jsonArrayexpirationCondition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expirationCondition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expirationCondition` to be an array in the JSON string but got `%s`", jsonObj.get("expirationCondition").toString()));
          }

          // validate the optional field `expirationCondition` (array)
          for (int i = 0; i < jsonArrayexpirationCondition.size(); i++) {
            BattleCondition.validateJsonElement(jsonArrayexpirationCondition.get(i));
          };
        }
      }
      // validate the optional field `applyType`
      if (jsonObj.get("applyType") != null && !jsonObj.get("applyType").isJsonNull()) {
        EffectApplyType.validateJsonElement(jsonObj.get("applyType"));
      }
      // validate the optional field `damageType`
      if (jsonObj.get("damageType") != null && !jsonObj.get("damageType").isJsonNull()) {
        EffectDamageType.validateJsonElement(jsonObj.get("damageType"));
      }
      if ((jsonObj.get("persistentIcon") != null && !jsonObj.get("persistentIcon").isJsonNull()) && !jsonObj.get("persistentIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistentIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistentIcon").toString()));
      }
      if ((jsonObj.get("triggeredVfx") != null && !jsonObj.get("triggeredVfx").isJsonNull()) && !jsonObj.get("triggeredVfx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggeredVfx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggeredVfx").toString()));
      }
      if ((jsonObj.get("triggeredLocKey") != null && !jsonObj.get("triggeredLocKey").isJsonNull()) && !jsonObj.get("triggeredLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggeredLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggeredLocKey").toString()));
      }
      if (jsonObj.get("effectReference") != null && !jsonObj.get("effectReference").isJsonNull()) {
        JsonArray jsonArrayeffectReference = jsonObj.getAsJsonArray("effectReference");
        if (jsonArrayeffectReference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectReference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectReference` to be an array in the JSON string but got `%s`", jsonObj.get("effectReference").toString()));
          }

          // validate the optional field `effectReference` (array)
          for (int i = 0; i < jsonArrayeffectReference.size(); i++) {
            EffectReference.validateJsonElement(jsonArrayeffectReference.get(i));
          };
        }
      }
      if ((jsonObj.get("persistentLocKey") != null && !jsonObj.get("persistentLocKey").isJsonNull()) && !jsonObj.get("persistentLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistentLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistentLocKey").toString()));
      }
      if ((jsonObj.get("stackingLineOverride") != null && !jsonObj.get("stackingLineOverride").isJsonNull()) && !jsonObj.get("stackingLineOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackingLineOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackingLineOverride").toString()));
      }
      if ((jsonObj.get("persistentIconOverlay") != null && !jsonObj.get("persistentIconOverlay").isJsonNull()) && !jsonObj.get("persistentIconOverlay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistentIconOverlay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistentIconOverlay").toString()));
      }
      if ((jsonObj.get("iconColor") != null && !jsonObj.get("iconColor").isJsonNull()) && !jsonObj.get("iconColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconColor").toString()));
      }
      // validate the optional field `persistentVfxReference`
      if (jsonObj.get("persistentVfxReference") != null && !jsonObj.get("persistentVfxReference").isJsonNull()) {
        PersistentVfxReference.validateJsonElement(jsonObj.get("persistentVfxReference"));
      }
      if ((jsonObj.get("blackboardName") != null && !jsonObj.get("blackboardName").isJsonNull()) && !jsonObj.get("blackboardName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blackboardName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blackboardName").toString()));
      }
      if ((jsonObj.get("summonId") != null && !jsonObj.get("summonId").isJsonNull()) && !jsonObj.get("summonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summonId").toString()));
      }
      if (jsonObj.get("summonEffect") != null && !jsonObj.get("summonEffect").isJsonNull()) {
        JsonArray jsonArraysummonEffect = jsonObj.getAsJsonArray("summonEffect");
        if (jsonArraysummonEffect != null) {
          // ensure the json data is an array
          if (!jsonObj.get("summonEffect").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `summonEffect` to be an array in the JSON string but got `%s`", jsonObj.get("summonEffect").toString()));
          }

          // validate the optional field `summonEffect` (array)
          for (int i = 0; i < jsonArraysummonEffect.size(); i++) {
            Effect.validateJsonElement(jsonArraysummonEffect.get(i));
          };
        }
      }
      // validate the optional field `summonTier`
      if (jsonObj.get("summonTier") != null && !jsonObj.get("summonTier").isJsonNull()) {
        UnitTier.validateJsonElement(jsonObj.get("summonTier"));
      }
      // validate the optional field `summonRarity`
      if (jsonObj.get("summonRarity") != null && !jsonObj.get("summonRarity").isJsonNull()) {
        Rarity.validateJsonElement(jsonObj.get("summonRarity"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("infiniteCycleEffect") != null && !jsonObj.get("infiniteCycleEffect").isJsonNull() && !jsonObj.get("infiniteCycleEffect").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infiniteCycleEffect` to be an array in the JSON string but got `%s`", jsonObj.get("infiniteCycleEffect").toString()));
      }
      if ((jsonObj.get("blackboardCompareName") != null && !jsonObj.get("blackboardCompareName").isJsonNull()) && !jsonObj.get("blackboardCompareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blackboardCompareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blackboardCompareName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Effect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Effect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Effect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Effect.class));

       return (TypeAdapter<T>) new TypeAdapter<Effect>() {
           @Override
           public void write(JsonWriter out, Effect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Effect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Effect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Effect
   * @throws IOException if the JSON string is invalid with respect to Effect
   */
  public static Effect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Effect.class);
  }

  /**
   * Convert an instance of Effect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

