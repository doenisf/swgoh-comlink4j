/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.Squad;
import io.github.doenisf.comlink4j.model.TerritoryWarSquadStatus;
import io.github.doenisf.comlink4j.model.UnitTierSummary;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryWarSquad
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryWarSquad {
  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_PLAYER_NAME = "playerName";
  @SerializedName(SERIALIZED_NAME_PLAYER_NAME)
  private String playerName;

  public static final String SERIALIZED_NAME_POWER = "power";
  @SerializedName(SERIALIZED_NAME_POWER)
  private Integer power;

  public static final String SERIALIZED_NAME_SQUAD = "squad";
  @SerializedName(SERIALIZED_NAME_SQUAD)
  private Squad squad;

  public static final String SERIALIZED_NAME_SQUAD_ID = "squadId";
  @SerializedName(SERIALIZED_NAME_SQUAD_ID)
  private String squadId;

  public static final String SERIALIZED_NAME_SQUAD_STATUS = "squadStatus";
  @SerializedName(SERIALIZED_NAME_SQUAD_STATUS)
  private TerritoryWarSquadStatus squadStatus;

  public static final String SERIALIZED_NAME_LOCK_NAME = "lockName";
  @SerializedName(SERIALIZED_NAME_LOCK_NAME)
  private String lockName;

  public static final String SERIALIZED_NAME_SUCCESSFUL_DEFENDS = "successfulDefends";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_DEFENDS)
  private Integer successfulDefends;

  public static final String SERIALIZED_NAME_CREW_INFO = "crewInfo";
  @SerializedName(SERIALIZED_NAME_CREW_INFO)
  private List<UnitTierSummary> crewInfo = new ArrayList<>();

  public TerritoryWarSquad() {
  }

  public TerritoryWarSquad playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }


  public TerritoryWarSquad playerName(String playerName) {
    this.playerName = playerName;
    return this;
  }

  /**
   * Get playerName
   * @return playerName
   */
  @javax.annotation.Nullable
  public String getPlayerName() {
    return playerName;
  }

  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }


  public TerritoryWarSquad power(Integer power) {
    this.power = power;
    return this;
  }

  /**
   * Get power
   * @return power
   */
  @javax.annotation.Nullable
  public Integer getPower() {
    return power;
  }

  public void setPower(Integer power) {
    this.power = power;
  }


  public TerritoryWarSquad squad(Squad squad) {
    this.squad = squad;
    return this;
  }

  /**
   * Get squad
   * @return squad
   */
  @javax.annotation.Nullable
  public Squad getSquad() {
    return squad;
  }

  public void setSquad(Squad squad) {
    this.squad = squad;
  }


  public TerritoryWarSquad squadId(String squadId) {
    this.squadId = squadId;
    return this;
  }

  /**
   * Get squadId
   * @return squadId
   */
  @javax.annotation.Nullable
  public String getSquadId() {
    return squadId;
  }

  public void setSquadId(String squadId) {
    this.squadId = squadId;
  }


  public TerritoryWarSquad squadStatus(TerritoryWarSquadStatus squadStatus) {
    this.squadStatus = squadStatus;
    return this;
  }

  /**
   * Get squadStatus
   * @return squadStatus
   */
  @javax.annotation.Nullable
  public TerritoryWarSquadStatus getSquadStatus() {
    return squadStatus;
  }

  public void setSquadStatus(TerritoryWarSquadStatus squadStatus) {
    this.squadStatus = squadStatus;
  }


  public TerritoryWarSquad lockName(String lockName) {
    this.lockName = lockName;
    return this;
  }

  /**
   * Get lockName
   * @return lockName
   */
  @javax.annotation.Nullable
  public String getLockName() {
    return lockName;
  }

  public void setLockName(String lockName) {
    this.lockName = lockName;
  }


  public TerritoryWarSquad successfulDefends(Integer successfulDefends) {
    this.successfulDefends = successfulDefends;
    return this;
  }

  /**
   * Get successfulDefends
   * @return successfulDefends
   */
  @javax.annotation.Nullable
  public Integer getSuccessfulDefends() {
    return successfulDefends;
  }

  public void setSuccessfulDefends(Integer successfulDefends) {
    this.successfulDefends = successfulDefends;
  }


  public TerritoryWarSquad crewInfo(List<UnitTierSummary> crewInfo) {
    this.crewInfo = crewInfo;
    return this;
  }

  public TerritoryWarSquad addCrewInfoItem(UnitTierSummary crewInfoItem) {
    if (this.crewInfo == null) {
      this.crewInfo = new ArrayList<>();
    }
    this.crewInfo.add(crewInfoItem);
    return this;
  }

  /**
   * Get crewInfo
   * @return crewInfo
   */
  @javax.annotation.Nullable
  public List<UnitTierSummary> getCrewInfo() {
    return crewInfo;
  }

  public void setCrewInfo(List<UnitTierSummary> crewInfo) {
    this.crewInfo = crewInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryWarSquad territoryWarSquad = (TerritoryWarSquad) o;
    return Objects.equals(this.playerId, territoryWarSquad.playerId) &&
        Objects.equals(this.playerName, territoryWarSquad.playerName) &&
        Objects.equals(this.power, territoryWarSquad.power) &&
        Objects.equals(this.squad, territoryWarSquad.squad) &&
        Objects.equals(this.squadId, territoryWarSquad.squadId) &&
        Objects.equals(this.squadStatus, territoryWarSquad.squadStatus) &&
        Objects.equals(this.lockName, territoryWarSquad.lockName) &&
        Objects.equals(this.successfulDefends, territoryWarSquad.successfulDefends) &&
        Objects.equals(this.crewInfo, territoryWarSquad.crewInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerId, playerName, power, squad, squadId, squadStatus, lockName, successfulDefends, crewInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryWarSquad {\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    playerName: ").append(toIndentedString(playerName)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    squad: ").append(toIndentedString(squad)).append("\n");
    sb.append("    squadId: ").append(toIndentedString(squadId)).append("\n");
    sb.append("    squadStatus: ").append(toIndentedString(squadStatus)).append("\n");
    sb.append("    lockName: ").append(toIndentedString(lockName)).append("\n");
    sb.append("    successfulDefends: ").append(toIndentedString(successfulDefends)).append("\n");
    sb.append("    crewInfo: ").append(toIndentedString(crewInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("playerId");
    openapiFields.add("playerName");
    openapiFields.add("power");
    openapiFields.add("squad");
    openapiFields.add("squadId");
    openapiFields.add("squadStatus");
    openapiFields.add("lockName");
    openapiFields.add("successfulDefends");
    openapiFields.add("crewInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryWarSquad
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryWarSquad.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryWarSquad is not found in the empty JSON string", TerritoryWarSquad.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryWarSquad.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryWarSquad` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("playerId") != null && !jsonObj.get("playerId").isJsonNull()) && !jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      if ((jsonObj.get("playerName") != null && !jsonObj.get("playerName").isJsonNull()) && !jsonObj.get("playerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerName").toString()));
      }
      // validate the optional field `squad`
      if (jsonObj.get("squad") != null && !jsonObj.get("squad").isJsonNull()) {
        Squad.validateJsonElement(jsonObj.get("squad"));
      }
      if ((jsonObj.get("squadId") != null && !jsonObj.get("squadId").isJsonNull()) && !jsonObj.get("squadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squadId").toString()));
      }
      // validate the optional field `squadStatus`
      if (jsonObj.get("squadStatus") != null && !jsonObj.get("squadStatus").isJsonNull()) {
        TerritoryWarSquadStatus.validateJsonElement(jsonObj.get("squadStatus"));
      }
      if ((jsonObj.get("lockName") != null && !jsonObj.get("lockName").isJsonNull()) && !jsonObj.get("lockName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockName").toString()));
      }
      if (jsonObj.get("crewInfo") != null && !jsonObj.get("crewInfo").isJsonNull()) {
        JsonArray jsonArraycrewInfo = jsonObj.getAsJsonArray("crewInfo");
        if (jsonArraycrewInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("crewInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `crewInfo` to be an array in the JSON string but got `%s`", jsonObj.get("crewInfo").toString()));
          }

          // validate the optional field `crewInfo` (array)
          for (int i = 0; i < jsonArraycrewInfo.size(); i++) {
            UnitTierSummary.validateJsonElement(jsonArraycrewInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryWarSquad.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryWarSquad' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryWarSquad> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryWarSquad.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryWarSquad>() {
           @Override
           public void write(JsonWriter out, TerritoryWarSquad value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryWarSquad read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryWarSquad given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryWarSquad
   * @throws IOException if the JSON string is invalid with respect to TerritoryWarSquad
   */
  public static TerritoryWarSquad fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryWarSquad.class);
  }

  /**
   * Convert an instance of TerritoryWarSquad to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

