/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * TerritoryWarResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryWarResult {
  public static final String SERIALIZED_NAME_TERRITORY_WAR_ID = "territoryWarId";
  @SerializedName(SERIALIZED_NAME_TERRITORY_WAR_ID)
  private String territoryWarId;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Long score;

  public static final String SERIALIZED_NAME_POWER = "power";
  @SerializedName(SERIALIZED_NAME_POWER)
  private Integer power;

  public static final String SERIALIZED_NAME_OPPONENT_SCORE = "opponentScore";
  @SerializedName(SERIALIZED_NAME_OPPONENT_SCORE)
  private Long opponentScore;

  public static final String SERIALIZED_NAME_END_TIME_SECONDS = "endTimeSeconds";
  @SerializedName(SERIALIZED_NAME_END_TIME_SECONDS)
  private Long endTimeSeconds;

  public TerritoryWarResult() {
  }

  public TerritoryWarResult territoryWarId(String territoryWarId) {
    this.territoryWarId = territoryWarId;
    return this;
  }

  /**
   * Get territoryWarId
   * @return territoryWarId
   */
  @javax.annotation.Nullable
  public String getTerritoryWarId() {
    return territoryWarId;
  }

  public void setTerritoryWarId(String territoryWarId) {
    this.territoryWarId = territoryWarId;
  }


  public TerritoryWarResult score(Long score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Long getScore() {
    return score;
  }

  public void setScore(Long score) {
    this.score = score;
  }


  public TerritoryWarResult power(Integer power) {
    this.power = power;
    return this;
  }

  /**
   * Get power
   * @return power
   */
  @javax.annotation.Nullable
  public Integer getPower() {
    return power;
  }

  public void setPower(Integer power) {
    this.power = power;
  }


  public TerritoryWarResult opponentScore(Long opponentScore) {
    this.opponentScore = opponentScore;
    return this;
  }

  /**
   * Get opponentScore
   * @return opponentScore
   */
  @javax.annotation.Nullable
  public Long getOpponentScore() {
    return opponentScore;
  }

  public void setOpponentScore(Long opponentScore) {
    this.opponentScore = opponentScore;
  }


  public TerritoryWarResult endTimeSeconds(Long endTimeSeconds) {
    this.endTimeSeconds = endTimeSeconds;
    return this;
  }

  /**
   * Get endTimeSeconds
   * @return endTimeSeconds
   */
  @javax.annotation.Nullable
  public Long getEndTimeSeconds() {
    return endTimeSeconds;
  }

  public void setEndTimeSeconds(Long endTimeSeconds) {
    this.endTimeSeconds = endTimeSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryWarResult territoryWarResult = (TerritoryWarResult) o;
    return Objects.equals(this.territoryWarId, territoryWarResult.territoryWarId) &&
        Objects.equals(this.score, territoryWarResult.score) &&
        Objects.equals(this.power, territoryWarResult.power) &&
        Objects.equals(this.opponentScore, territoryWarResult.opponentScore) &&
        Objects.equals(this.endTimeSeconds, territoryWarResult.endTimeSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(territoryWarId, score, power, opponentScore, endTimeSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryWarResult {\n");
    sb.append("    territoryWarId: ").append(toIndentedString(territoryWarId)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    opponentScore: ").append(toIndentedString(opponentScore)).append("\n");
    sb.append("    endTimeSeconds: ").append(toIndentedString(endTimeSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("territoryWarId");
    openapiFields.add("score");
    openapiFields.add("power");
    openapiFields.add("opponentScore");
    openapiFields.add("endTimeSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryWarResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryWarResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryWarResult is not found in the empty JSON string", TerritoryWarResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryWarResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryWarResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("territoryWarId") != null && !jsonObj.get("territoryWarId").isJsonNull()) && !jsonObj.get("territoryWarId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `territoryWarId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("territoryWarId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryWarResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryWarResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryWarResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryWarResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryWarResult>() {
           @Override
           public void write(JsonWriter out, TerritoryWarResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryWarResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryWarResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryWarResult
   * @throws IOException if the JSON string is invalid with respect to TerritoryWarResult
   */
  public static TerritoryWarResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryWarResult.class);
  }

  /**
   * Convert an instance of TerritoryWarResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

