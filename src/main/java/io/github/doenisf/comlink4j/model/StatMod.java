/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.BucketItem;
import io.github.doenisf.comlink4j.model.CurrencyItem;
import io.github.doenisf.comlink4j.model.StatModStat;
import io.github.doenisf.comlink4j.model.StatModTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * StatMod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class StatMod {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DEFINITION_ID = "definitionId";
  @SerializedName(SERIALIZED_NAME_DEFINITION_ID)
  private String definitionId;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private StatModTier tier;

  public static final String SERIALIZED_NAME_SELL_VALUE = "sellValue";
  @SerializedName(SERIALIZED_NAME_SELL_VALUE)
  private CurrencyItem sellValue;

  public static final String SERIALIZED_NAME_REMOVE_COST = "removeCost";
  @SerializedName(SERIALIZED_NAME_REMOVE_COST)
  private CurrencyItem removeCost;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_PRIMARY_STAT = "primaryStat";
  @SerializedName(SERIALIZED_NAME_PRIMARY_STAT)
  private StatModStat primaryStat;

  public static final String SERIALIZED_NAME_SECONDARY_STAT = "secondaryStat";
  @SerializedName(SERIALIZED_NAME_SECONDARY_STAT)
  private List<StatModStat> secondaryStat = new ArrayList<>();

  public static final String SERIALIZED_NAME_XP = "xp";
  @SerializedName(SERIALIZED_NAME_XP)
  private Integer xp;

  public static final String SERIALIZED_NAME_LEVEL_COST = "levelCost";
  @SerializedName(SERIALIZED_NAME_LEVEL_COST)
  private CurrencyItem levelCost;

  public static final String SERIALIZED_NAME_BONUS_QUANTITY = "bonusQuantity";
  @SerializedName(SERIALIZED_NAME_BONUS_QUANTITY)
  private Integer bonusQuantity;

  public static final String SERIALIZED_NAME_CONVERTED_ITEM = "convertedItem";
  @SerializedName(SERIALIZED_NAME_CONVERTED_ITEM)
  private BucketItem convertedItem;

  public static final String SERIALIZED_NAME_REROLLED_COUNT = "rerolledCount";
  @SerializedName(SERIALIZED_NAME_REROLLED_COUNT)
  private Integer rerolledCount;

  public StatMod() {
  }

  public StatMod id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StatMod definitionId(String definitionId) {
    this.definitionId = definitionId;
    return this;
  }

  /**
   * Get definitionId
   * @return definitionId
   */
  @javax.annotation.Nullable
  public String getDefinitionId() {
    return definitionId;
  }

  public void setDefinitionId(String definitionId) {
    this.definitionId = definitionId;
  }


  public StatMod level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public StatMod tier(StatModTier tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public StatModTier getTier() {
    return tier;
  }

  public void setTier(StatModTier tier) {
    this.tier = tier;
  }


  public StatMod sellValue(CurrencyItem sellValue) {
    this.sellValue = sellValue;
    return this;
  }

  /**
   * Get sellValue
   * @return sellValue
   */
  @javax.annotation.Nullable
  public CurrencyItem getSellValue() {
    return sellValue;
  }

  public void setSellValue(CurrencyItem sellValue) {
    this.sellValue = sellValue;
  }


  public StatMod removeCost(CurrencyItem removeCost) {
    this.removeCost = removeCost;
    return this;
  }

  /**
   * Get removeCost
   * @return removeCost
   */
  @javax.annotation.Nullable
  public CurrencyItem getRemoveCost() {
    return removeCost;
  }

  public void setRemoveCost(CurrencyItem removeCost) {
    this.removeCost = removeCost;
  }


  public StatMod locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public StatMod primaryStat(StatModStat primaryStat) {
    this.primaryStat = primaryStat;
    return this;
  }

  /**
   * Get primaryStat
   * @return primaryStat
   */
  @javax.annotation.Nullable
  public StatModStat getPrimaryStat() {
    return primaryStat;
  }

  public void setPrimaryStat(StatModStat primaryStat) {
    this.primaryStat = primaryStat;
  }


  public StatMod secondaryStat(List<StatModStat> secondaryStat) {
    this.secondaryStat = secondaryStat;
    return this;
  }

  public StatMod addSecondaryStatItem(StatModStat secondaryStatItem) {
    if (this.secondaryStat == null) {
      this.secondaryStat = new ArrayList<>();
    }
    this.secondaryStat.add(secondaryStatItem);
    return this;
  }

  /**
   * Get secondaryStat
   * @return secondaryStat
   */
  @javax.annotation.Nullable
  public List<StatModStat> getSecondaryStat() {
    return secondaryStat;
  }

  public void setSecondaryStat(List<StatModStat> secondaryStat) {
    this.secondaryStat = secondaryStat;
  }


  public StatMod xp(Integer xp) {
    this.xp = xp;
    return this;
  }

  /**
   * Get xp
   * @return xp
   */
  @javax.annotation.Nullable
  public Integer getXp() {
    return xp;
  }

  public void setXp(Integer xp) {
    this.xp = xp;
  }


  public StatMod levelCost(CurrencyItem levelCost) {
    this.levelCost = levelCost;
    return this;
  }

  /**
   * Get levelCost
   * @return levelCost
   */
  @javax.annotation.Nullable
  public CurrencyItem getLevelCost() {
    return levelCost;
  }

  public void setLevelCost(CurrencyItem levelCost) {
    this.levelCost = levelCost;
  }


  public StatMod bonusQuantity(Integer bonusQuantity) {
    this.bonusQuantity = bonusQuantity;
    return this;
  }

  /**
   * Get bonusQuantity
   * @return bonusQuantity
   */
  @javax.annotation.Nullable
  public Integer getBonusQuantity() {
    return bonusQuantity;
  }

  public void setBonusQuantity(Integer bonusQuantity) {
    this.bonusQuantity = bonusQuantity;
  }


  public StatMod convertedItem(BucketItem convertedItem) {
    this.convertedItem = convertedItem;
    return this;
  }

  /**
   * Get convertedItem
   * @return convertedItem
   */
  @javax.annotation.Nullable
  public BucketItem getConvertedItem() {
    return convertedItem;
  }

  public void setConvertedItem(BucketItem convertedItem) {
    this.convertedItem = convertedItem;
  }


  public StatMod rerolledCount(Integer rerolledCount) {
    this.rerolledCount = rerolledCount;
    return this;
  }

  /**
   * Get rerolledCount
   * @return rerolledCount
   */
  @javax.annotation.Nullable
  public Integer getRerolledCount() {
    return rerolledCount;
  }

  public void setRerolledCount(Integer rerolledCount) {
    this.rerolledCount = rerolledCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatMod statMod = (StatMod) o;
    return Objects.equals(this.id, statMod.id) &&
        Objects.equals(this.definitionId, statMod.definitionId) &&
        Objects.equals(this.level, statMod.level) &&
        Objects.equals(this.tier, statMod.tier) &&
        Objects.equals(this.sellValue, statMod.sellValue) &&
        Objects.equals(this.removeCost, statMod.removeCost) &&
        Objects.equals(this.locked, statMod.locked) &&
        Objects.equals(this.primaryStat, statMod.primaryStat) &&
        Objects.equals(this.secondaryStat, statMod.secondaryStat) &&
        Objects.equals(this.xp, statMod.xp) &&
        Objects.equals(this.levelCost, statMod.levelCost) &&
        Objects.equals(this.bonusQuantity, statMod.bonusQuantity) &&
        Objects.equals(this.convertedItem, statMod.convertedItem) &&
        Objects.equals(this.rerolledCount, statMod.rerolledCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, definitionId, level, tier, sellValue, removeCost, locked, primaryStat, secondaryStat, xp, levelCost, bonusQuantity, convertedItem, rerolledCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatMod {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    definitionId: ").append(toIndentedString(definitionId)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    sellValue: ").append(toIndentedString(sellValue)).append("\n");
    sb.append("    removeCost: ").append(toIndentedString(removeCost)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    primaryStat: ").append(toIndentedString(primaryStat)).append("\n");
    sb.append("    secondaryStat: ").append(toIndentedString(secondaryStat)).append("\n");
    sb.append("    xp: ").append(toIndentedString(xp)).append("\n");
    sb.append("    levelCost: ").append(toIndentedString(levelCost)).append("\n");
    sb.append("    bonusQuantity: ").append(toIndentedString(bonusQuantity)).append("\n");
    sb.append("    convertedItem: ").append(toIndentedString(convertedItem)).append("\n");
    sb.append("    rerolledCount: ").append(toIndentedString(rerolledCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("definitionId");
    openapiFields.add("level");
    openapiFields.add("tier");
    openapiFields.add("sellValue");
    openapiFields.add("removeCost");
    openapiFields.add("locked");
    openapiFields.add("primaryStat");
    openapiFields.add("secondaryStat");
    openapiFields.add("xp");
    openapiFields.add("levelCost");
    openapiFields.add("bonusQuantity");
    openapiFields.add("convertedItem");
    openapiFields.add("rerolledCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatMod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatMod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatMod is not found in the empty JSON string", StatMod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatMod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatMod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("definitionId") != null && !jsonObj.get("definitionId").isJsonNull()) && !jsonObj.get("definitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definitionId").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        StatModTier.validateJsonElement(jsonObj.get("tier"));
      }
      // validate the optional field `sellValue`
      if (jsonObj.get("sellValue") != null && !jsonObj.get("sellValue").isJsonNull()) {
        CurrencyItem.validateJsonElement(jsonObj.get("sellValue"));
      }
      // validate the optional field `removeCost`
      if (jsonObj.get("removeCost") != null && !jsonObj.get("removeCost").isJsonNull()) {
        CurrencyItem.validateJsonElement(jsonObj.get("removeCost"));
      }
      // validate the optional field `primaryStat`
      if (jsonObj.get("primaryStat") != null && !jsonObj.get("primaryStat").isJsonNull()) {
        StatModStat.validateJsonElement(jsonObj.get("primaryStat"));
      }
      if (jsonObj.get("secondaryStat") != null && !jsonObj.get("secondaryStat").isJsonNull()) {
        JsonArray jsonArraysecondaryStat = jsonObj.getAsJsonArray("secondaryStat");
        if (jsonArraysecondaryStat != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secondaryStat").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secondaryStat` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryStat").toString()));
          }

          // validate the optional field `secondaryStat` (array)
          for (int i = 0; i < jsonArraysecondaryStat.size(); i++) {
            StatModStat.validateJsonElement(jsonArraysecondaryStat.get(i));
          };
        }
      }
      // validate the optional field `levelCost`
      if (jsonObj.get("levelCost") != null && !jsonObj.get("levelCost").isJsonNull()) {
        CurrencyItem.validateJsonElement(jsonObj.get("levelCost"));
      }
      // validate the optional field `convertedItem`
      if (jsonObj.get("convertedItem") != null && !jsonObj.get("convertedItem").isJsonNull()) {
        BucketItem.validateJsonElement(jsonObj.get("convertedItem"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatMod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatMod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatMod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatMod.class));

       return (TypeAdapter<T>) new TypeAdapter<StatMod>() {
           @Override
           public void write(JsonWriter out, StatMod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatMod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatMod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatMod
   * @throws IOException if the JSON string is invalid with respect to StatMod
   */
  public static StatMod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatMod.class);
  }

  /**
   * Convert an instance of StatMod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

