/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.*;

/**
 * SocialStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class SocialStatus {
  public static final String SERIALIZED_NAME_CHAT_ICONS = "chatIcons";
  @SerializedName(SERIALIZED_NAME_CHAT_ICONS)
  private List<SocialStatusIcon> chatIcons = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAT_TITLES = "chatTitles";
  @SerializedName(SERIALIZED_NAME_CHAT_TITLES)
  private List<SocialStatusTitle> chatTitles = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_LOGO = "guildLogo";
  @SerializedName(SERIALIZED_NAME_GUILD_LOGO)
  private List<SocialStatusGuildBannerLogo> guildLogo = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUILD_COLOR = "guildColor";
  @SerializedName(SERIALIZED_NAME_GUILD_COLOR)
  private List<SocialStatusGuildBannerColor> guildColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAT_PORTRAITS = "chatPortraits";
  @SerializedName(SERIALIZED_NAME_CHAT_PORTRAITS)
  private List<SocialStatusPortrait> chatPortraits = new ArrayList<>();

  public SocialStatus() {
  }

  public SocialStatus chatIcons(List<SocialStatusIcon> chatIcons) {
    this.chatIcons = chatIcons;
    return this;
  }

  public SocialStatus addChatIconsItem(SocialStatusIcon chatIconsItem) {
    if (this.chatIcons == null) {
      this.chatIcons = new ArrayList<>();
    }
    this.chatIcons.add(chatIconsItem);
    return this;
  }

  /**
   * Get chatIcons
   * @return chatIcons
   */
  @javax.annotation.Nullable
  public List<SocialStatusIcon> getChatIcons() {
    return chatIcons;
  }

  public void setChatIcons(List<SocialStatusIcon> chatIcons) {
    this.chatIcons = chatIcons;
  }


  public SocialStatus chatTitles(List<SocialStatusTitle> chatTitles) {
    this.chatTitles = chatTitles;
    return this;
  }

  public SocialStatus addChatTitlesItem(SocialStatusTitle chatTitlesItem) {
    if (this.chatTitles == null) {
      this.chatTitles = new ArrayList<>();
    }
    this.chatTitles.add(chatTitlesItem);
    return this;
  }

  /**
   * Get chatTitles
   * @return chatTitles
   */
  @javax.annotation.Nullable
  public List<SocialStatusTitle> getChatTitles() {
    return chatTitles;
  }

  public void setChatTitles(List<SocialStatusTitle> chatTitles) {
    this.chatTitles = chatTitles;
  }


  public SocialStatus guildLogo(List<SocialStatusGuildBannerLogo> guildLogo) {
    this.guildLogo = guildLogo;
    return this;
  }

  public SocialStatus addGuildLogoItem(SocialStatusGuildBannerLogo guildLogoItem) {
    if (this.guildLogo == null) {
      this.guildLogo = new ArrayList<>();
    }
    this.guildLogo.add(guildLogoItem);
    return this;
  }

  /**
   * Get guildLogo
   * @return guildLogo
   */
  @javax.annotation.Nullable
  public List<SocialStatusGuildBannerLogo> getGuildLogo() {
    return guildLogo;
  }

  public void setGuildLogo(List<SocialStatusGuildBannerLogo> guildLogo) {
    this.guildLogo = guildLogo;
  }


  public SocialStatus guildColor(List<SocialStatusGuildBannerColor> guildColor) {
    this.guildColor = guildColor;
    return this;
  }

  public SocialStatus addGuildColorItem(SocialStatusGuildBannerColor guildColorItem) {
    if (this.guildColor == null) {
      this.guildColor = new ArrayList<>();
    }
    this.guildColor.add(guildColorItem);
    return this;
  }

  /**
   * Get guildColor
   * @return guildColor
   */
  @javax.annotation.Nullable
  public List<SocialStatusGuildBannerColor> getGuildColor() {
    return guildColor;
  }

  public void setGuildColor(List<SocialStatusGuildBannerColor> guildColor) {
    this.guildColor = guildColor;
  }


  public SocialStatus chatPortraits(List<SocialStatusPortrait> chatPortraits) {
    this.chatPortraits = chatPortraits;
    return this;
  }

  public SocialStatus addChatPortraitsItem(SocialStatusPortrait chatPortraitsItem) {
    if (this.chatPortraits == null) {
      this.chatPortraits = new ArrayList<>();
    }
    this.chatPortraits.add(chatPortraitsItem);
    return this;
  }

  /**
   * Get chatPortraits
   * @return chatPortraits
   */
  @javax.annotation.Nullable
  public List<SocialStatusPortrait> getChatPortraits() {
    return chatPortraits;
  }

  public void setChatPortraits(List<SocialStatusPortrait> chatPortraits) {
    this.chatPortraits = chatPortraits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SocialStatus socialStatus = (SocialStatus) o;
    return Objects.equals(this.chatIcons, socialStatus.chatIcons) &&
        Objects.equals(this.chatTitles, socialStatus.chatTitles) &&
        Objects.equals(this.guildLogo, socialStatus.guildLogo) &&
        Objects.equals(this.guildColor, socialStatus.guildColor) &&
        Objects.equals(this.chatPortraits, socialStatus.chatPortraits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chatIcons, chatTitles, guildLogo, guildColor, chatPortraits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SocialStatus {\n");
    sb.append("    chatIcons: ").append(toIndentedString(chatIcons)).append("\n");
    sb.append("    chatTitles: ").append(toIndentedString(chatTitles)).append("\n");
    sb.append("    guildLogo: ").append(toIndentedString(guildLogo)).append("\n");
    sb.append("    guildColor: ").append(toIndentedString(guildColor)).append("\n");
    sb.append("    chatPortraits: ").append(toIndentedString(chatPortraits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chatIcons");
    openapiFields.add("chatTitles");
    openapiFields.add("guildLogo");
    openapiFields.add("guildColor");
    openapiFields.add("chatPortraits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SocialStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SocialStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SocialStatus is not found in the empty JSON string", SocialStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SocialStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SocialStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("chatIcons") != null && !jsonObj.get("chatIcons").isJsonNull()) {
        JsonArray jsonArraychatIcons = jsonObj.getAsJsonArray("chatIcons");
        if (jsonArraychatIcons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("chatIcons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `chatIcons` to be an array in the JSON string but got `%s`", jsonObj.get("chatIcons").toString()));
          }

          // validate the optional field `chatIcons` (array)
          for (int i = 0; i < jsonArraychatIcons.size(); i++) {
            SocialStatusIcon.validateJsonElement(jsonArraychatIcons.get(i));
          };
        }
      }
      if (jsonObj.get("chatTitles") != null && !jsonObj.get("chatTitles").isJsonNull()) {
        JsonArray jsonArraychatTitles = jsonObj.getAsJsonArray("chatTitles");
        if (jsonArraychatTitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("chatTitles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `chatTitles` to be an array in the JSON string but got `%s`", jsonObj.get("chatTitles").toString()));
          }

          // validate the optional field `chatTitles` (array)
          for (int i = 0; i < jsonArraychatTitles.size(); i++) {
            SocialStatusTitle.validateJsonElement(jsonArraychatTitles.get(i));
          };
        }
      }
      if (jsonObj.get("guildLogo") != null && !jsonObj.get("guildLogo").isJsonNull()) {
        JsonArray jsonArrayguildLogo = jsonObj.getAsJsonArray("guildLogo");
        if (jsonArrayguildLogo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guildLogo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guildLogo` to be an array in the JSON string but got `%s`", jsonObj.get("guildLogo").toString()));
          }

          // validate the optional field `guildLogo` (array)
          for (int i = 0; i < jsonArrayguildLogo.size(); i++) {
            SocialStatusGuildBannerLogo.validateJsonElement(jsonArrayguildLogo.get(i));
          };
        }
      }
      if (jsonObj.get("guildColor") != null && !jsonObj.get("guildColor").isJsonNull()) {
        JsonArray jsonArrayguildColor = jsonObj.getAsJsonArray("guildColor");
        if (jsonArrayguildColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guildColor").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guildColor` to be an array in the JSON string but got `%s`", jsonObj.get("guildColor").toString()));
          }

          // validate the optional field `guildColor` (array)
          for (int i = 0; i < jsonArrayguildColor.size(); i++) {
            SocialStatusGuildBannerColor.validateJsonElement(jsonArrayguildColor.get(i));
          };
        }
      }
      if (jsonObj.get("chatPortraits") != null && !jsonObj.get("chatPortraits").isJsonNull()) {
        JsonArray jsonArraychatPortraits = jsonObj.getAsJsonArray("chatPortraits");
        if (jsonArraychatPortraits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("chatPortraits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `chatPortraits` to be an array in the JSON string but got `%s`", jsonObj.get("chatPortraits").toString()));
          }

          // validate the optional field `chatPortraits` (array)
          for (int i = 0; i < jsonArraychatPortraits.size(); i++) {
            SocialStatusPortrait.validateJsonElement(jsonArraychatPortraits.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SocialStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SocialStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SocialStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SocialStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<SocialStatus>() {
           @Override
           public void write(JsonWriter out, SocialStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SocialStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SocialStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SocialStatus
   * @throws IOException if the JSON string is invalid with respect to SocialStatus
   */
  public static SocialStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SocialStatus.class);
  }

  /**
   * Convert an instance of SocialStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

