/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * ChallengeStyle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class ChallengeStyle {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BUTTON_ICON = "buttonIcon";
  @SerializedName(SERIALIZED_NAME_BUTTON_ICON)
  private String buttonIcon;

  public static final String SERIALIZED_NAME_CHARACTER_ICON = "characterIcon";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ICON)
  private String characterIcon;

  public static final String SERIALIZED_NAME_CHARACTER_NAME_KEY = "characterNameKey";
  @SerializedName(SERIALIZED_NAME_CHARACTER_NAME_KEY)
  private String characterNameKey;

  public static final String SERIALIZED_NAME_CHARACTER_REWARD_ICON = "characterRewardIcon";
  @SerializedName(SERIALIZED_NAME_CHARACTER_REWARD_ICON)
  private String characterRewardIcon;

  public static final String SERIALIZED_NAME_COMPLETE_KEY = "completeKey";
  @SerializedName(SERIALIZED_NAME_COMPLETE_KEY)
  private String completeKey;

  public static final String SERIALIZED_NAME_AUDIO_KEY = "audioKey";
  @SerializedName(SERIALIZED_NAME_AUDIO_KEY)
  private String audioKey;

  public static final String SERIALIZED_NAME_QUEST_TITLE_KEY = "questTitleKey";
  @SerializedName(SERIALIZED_NAME_QUEST_TITLE_KEY)
  private String questTitleKey;

  public ChallengeStyle() {
  }

  public ChallengeStyle id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ChallengeStyle buttonIcon(String buttonIcon) {
    this.buttonIcon = buttonIcon;
    return this;
  }

  /**
   * Get buttonIcon
   * @return buttonIcon
   */
  @javax.annotation.Nullable
  public String getButtonIcon() {
    return buttonIcon;
  }

  public void setButtonIcon(String buttonIcon) {
    this.buttonIcon = buttonIcon;
  }


  public ChallengeStyle characterIcon(String characterIcon) {
    this.characterIcon = characterIcon;
    return this;
  }

  /**
   * Get characterIcon
   * @return characterIcon
   */
  @javax.annotation.Nullable
  public String getCharacterIcon() {
    return characterIcon;
  }

  public void setCharacterIcon(String characterIcon) {
    this.characterIcon = characterIcon;
  }


  public ChallengeStyle characterNameKey(String characterNameKey) {
    this.characterNameKey = characterNameKey;
    return this;
  }

  /**
   * Get characterNameKey
   * @return characterNameKey
   */
  @javax.annotation.Nullable
  public String getCharacterNameKey() {
    return characterNameKey;
  }

  public void setCharacterNameKey(String characterNameKey) {
    this.characterNameKey = characterNameKey;
  }


  public ChallengeStyle characterRewardIcon(String characterRewardIcon) {
    this.characterRewardIcon = characterRewardIcon;
    return this;
  }

  /**
   * Get characterRewardIcon
   * @return characterRewardIcon
   */
  @javax.annotation.Nullable
  public String getCharacterRewardIcon() {
    return characterRewardIcon;
  }

  public void setCharacterRewardIcon(String characterRewardIcon) {
    this.characterRewardIcon = characterRewardIcon;
  }


  public ChallengeStyle completeKey(String completeKey) {
    this.completeKey = completeKey;
    return this;
  }

  /**
   * Get completeKey
   * @return completeKey
   */
  @javax.annotation.Nullable
  public String getCompleteKey() {
    return completeKey;
  }

  public void setCompleteKey(String completeKey) {
    this.completeKey = completeKey;
  }


  public ChallengeStyle audioKey(String audioKey) {
    this.audioKey = audioKey;
    return this;
  }

  /**
   * Get audioKey
   * @return audioKey
   */
  @javax.annotation.Nullable
  public String getAudioKey() {
    return audioKey;
  }

  public void setAudioKey(String audioKey) {
    this.audioKey = audioKey;
  }


  public ChallengeStyle questTitleKey(String questTitleKey) {
    this.questTitleKey = questTitleKey;
    return this;
  }

  /**
   * Get questTitleKey
   * @return questTitleKey
   */
  @javax.annotation.Nullable
  public String getQuestTitleKey() {
    return questTitleKey;
  }

  public void setQuestTitleKey(String questTitleKey) {
    this.questTitleKey = questTitleKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChallengeStyle challengeStyle = (ChallengeStyle) o;
    return Objects.equals(this.id, challengeStyle.id) &&
        Objects.equals(this.buttonIcon, challengeStyle.buttonIcon) &&
        Objects.equals(this.characterIcon, challengeStyle.characterIcon) &&
        Objects.equals(this.characterNameKey, challengeStyle.characterNameKey) &&
        Objects.equals(this.characterRewardIcon, challengeStyle.characterRewardIcon) &&
        Objects.equals(this.completeKey, challengeStyle.completeKey) &&
        Objects.equals(this.audioKey, challengeStyle.audioKey) &&
        Objects.equals(this.questTitleKey, challengeStyle.questTitleKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, buttonIcon, characterIcon, characterNameKey, characterRewardIcon, completeKey, audioKey, questTitleKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChallengeStyle {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    buttonIcon: ").append(toIndentedString(buttonIcon)).append("\n");
    sb.append("    characterIcon: ").append(toIndentedString(characterIcon)).append("\n");
    sb.append("    characterNameKey: ").append(toIndentedString(characterNameKey)).append("\n");
    sb.append("    characterRewardIcon: ").append(toIndentedString(characterRewardIcon)).append("\n");
    sb.append("    completeKey: ").append(toIndentedString(completeKey)).append("\n");
    sb.append("    audioKey: ").append(toIndentedString(audioKey)).append("\n");
    sb.append("    questTitleKey: ").append(toIndentedString(questTitleKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("buttonIcon");
    openapiFields.add("characterIcon");
    openapiFields.add("characterNameKey");
    openapiFields.add("characterRewardIcon");
    openapiFields.add("completeKey");
    openapiFields.add("audioKey");
    openapiFields.add("questTitleKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChallengeStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChallengeStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChallengeStyle is not found in the empty JSON string", ChallengeStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChallengeStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChallengeStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("buttonIcon") != null && !jsonObj.get("buttonIcon").isJsonNull()) && !jsonObj.get("buttonIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buttonIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buttonIcon").toString()));
      }
      if ((jsonObj.get("characterIcon") != null && !jsonObj.get("characterIcon").isJsonNull()) && !jsonObj.get("characterIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("characterIcon").toString()));
      }
      if ((jsonObj.get("characterNameKey") != null && !jsonObj.get("characterNameKey").isJsonNull()) && !jsonObj.get("characterNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("characterNameKey").toString()));
      }
      if ((jsonObj.get("characterRewardIcon") != null && !jsonObj.get("characterRewardIcon").isJsonNull()) && !jsonObj.get("characterRewardIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterRewardIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("characterRewardIcon").toString()));
      }
      if ((jsonObj.get("completeKey") != null && !jsonObj.get("completeKey").isJsonNull()) && !jsonObj.get("completeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completeKey").toString()));
      }
      if ((jsonObj.get("audioKey") != null && !jsonObj.get("audioKey").isJsonNull()) && !jsonObj.get("audioKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioKey").toString()));
      }
      if ((jsonObj.get("questTitleKey") != null && !jsonObj.get("questTitleKey").isJsonNull()) && !jsonObj.get("questTitleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questTitleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questTitleKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChallengeStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChallengeStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChallengeStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChallengeStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<ChallengeStyle>() {
           @Override
           public void write(JsonWriter out, ChallengeStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChallengeStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChallengeStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChallengeStyle
   * @throws IOException if the JSON string is invalid with respect to ChallengeStyle
   */
  public static ChallengeStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChallengeStyle.class);
  }

  /**
   * Convert an instance of ChallengeStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

