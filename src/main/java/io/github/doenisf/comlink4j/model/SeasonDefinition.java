/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.JSON;

import java.io.IOException;
import java.util.*;

/**
 * SeasonDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class SeasonDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_SEASON_LEAGUE_REFERENCE = "seasonLeagueReference";
  @SerializedName(SERIALIZED_NAME_SEASON_LEAGUE_REFERENCE)
  private List<SeasonLeagueReference> seasonLeagueReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_DIVISION_REFERENCE = "seasonDivisionReference";
  @SerializedName(SERIALIZED_NAME_SEASON_DIVISION_REFERENCE)
  private List<SeasonDivisionReference> seasonDivisionReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_REWARD_TABLE_ID = "seasonRewardTableId";
  @SerializedName(SERIALIZED_NAME_SEASON_REWARD_TABLE_ID)
  private String seasonRewardTableId;

  public static final String SERIALIZED_NAME_MINIMUM_BANNER_SEASON_REWARD_THRESHOLD = "minimumBannerSeasonRewardThreshold";
  @SerializedName(SERIALIZED_NAME_MINIMUM_BANNER_SEASON_REWARD_THRESHOLD)
  private Integer minimumBannerSeasonRewardThreshold;

  public static final String SERIALIZED_NAME_DIVISION_SKILL_BOUNDARY = "divisionSkillBoundary";
  @SerializedName(SERIALIZED_NAME_DIVISION_SKILL_BOUNDARY)
  private List<SeasonDivisionSkillBoundary> divisionSkillBoundary = new ArrayList<>();

  public SeasonDefinition() {
  }

  public SeasonDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SeasonDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public SeasonDefinition seasonLeagueReference(List<SeasonLeagueReference> seasonLeagueReference) {
    this.seasonLeagueReference = seasonLeagueReference;
    return this;
  }

  public SeasonDefinition addSeasonLeagueReferenceItem(SeasonLeagueReference seasonLeagueReferenceItem) {
    if (this.seasonLeagueReference == null) {
      this.seasonLeagueReference = new ArrayList<>();
    }
    this.seasonLeagueReference.add(seasonLeagueReferenceItem);
    return this;
  }

  /**
   * Get seasonLeagueReference
   * @return seasonLeagueReference
   */
  @javax.annotation.Nullable
  public List<SeasonLeagueReference> getSeasonLeagueReference() {
    return seasonLeagueReference;
  }

  public void setSeasonLeagueReference(List<SeasonLeagueReference> seasonLeagueReference) {
    this.seasonLeagueReference = seasonLeagueReference;
  }


  public SeasonDefinition seasonDivisionReference(List<SeasonDivisionReference> seasonDivisionReference) {
    this.seasonDivisionReference = seasonDivisionReference;
    return this;
  }

  public SeasonDefinition addSeasonDivisionReferenceItem(SeasonDivisionReference seasonDivisionReferenceItem) {
    if (this.seasonDivisionReference == null) {
      this.seasonDivisionReference = new ArrayList<>();
    }
    this.seasonDivisionReference.add(seasonDivisionReferenceItem);
    return this;
  }

  /**
   * Get seasonDivisionReference
   * @return seasonDivisionReference
   */
  @javax.annotation.Nullable
  public List<SeasonDivisionReference> getSeasonDivisionReference() {
    return seasonDivisionReference;
  }

  public void setSeasonDivisionReference(List<SeasonDivisionReference> seasonDivisionReference) {
    this.seasonDivisionReference = seasonDivisionReference;
  }


  public SeasonDefinition seasonRewardTableId(String seasonRewardTableId) {
    this.seasonRewardTableId = seasonRewardTableId;
    return this;
  }

  /**
   * Get seasonRewardTableId
   * @return seasonRewardTableId
   */
  @javax.annotation.Nullable
  public String getSeasonRewardTableId() {
    return seasonRewardTableId;
  }

  public void setSeasonRewardTableId(String seasonRewardTableId) {
    this.seasonRewardTableId = seasonRewardTableId;
  }


  public SeasonDefinition minimumBannerSeasonRewardThreshold(Integer minimumBannerSeasonRewardThreshold) {
    this.minimumBannerSeasonRewardThreshold = minimumBannerSeasonRewardThreshold;
    return this;
  }

  /**
   * Get minimumBannerSeasonRewardThreshold
   * @return minimumBannerSeasonRewardThreshold
   */
  @javax.annotation.Nullable
  public Integer getMinimumBannerSeasonRewardThreshold() {
    return minimumBannerSeasonRewardThreshold;
  }

  public void setMinimumBannerSeasonRewardThreshold(Integer minimumBannerSeasonRewardThreshold) {
    this.minimumBannerSeasonRewardThreshold = minimumBannerSeasonRewardThreshold;
  }


  public SeasonDefinition divisionSkillBoundary(List<SeasonDivisionSkillBoundary> divisionSkillBoundary) {
    this.divisionSkillBoundary = divisionSkillBoundary;
    return this;
  }

  public SeasonDefinition addDivisionSkillBoundaryItem(SeasonDivisionSkillBoundary divisionSkillBoundaryItem) {
    if (this.divisionSkillBoundary == null) {
      this.divisionSkillBoundary = new ArrayList<>();
    }
    this.divisionSkillBoundary.add(divisionSkillBoundaryItem);
    return this;
  }

  /**
   * Get divisionSkillBoundary
   * @return divisionSkillBoundary
   */
  @javax.annotation.Nullable
  public List<SeasonDivisionSkillBoundary> getDivisionSkillBoundary() {
    return divisionSkillBoundary;
  }

  public void setDivisionSkillBoundary(List<SeasonDivisionSkillBoundary> divisionSkillBoundary) {
    this.divisionSkillBoundary = divisionSkillBoundary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeasonDefinition seasonDefinition = (SeasonDefinition) o;
    return Objects.equals(this.id, seasonDefinition.id) &&
        Objects.equals(this.nameKey, seasonDefinition.nameKey) &&
        Objects.equals(this.seasonLeagueReference, seasonDefinition.seasonLeagueReference) &&
        Objects.equals(this.seasonDivisionReference, seasonDefinition.seasonDivisionReference) &&
        Objects.equals(this.seasonRewardTableId, seasonDefinition.seasonRewardTableId) &&
        Objects.equals(this.minimumBannerSeasonRewardThreshold, seasonDefinition.minimumBannerSeasonRewardThreshold) &&
        Objects.equals(this.divisionSkillBoundary, seasonDefinition.divisionSkillBoundary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, seasonLeagueReference, seasonDivisionReference, seasonRewardTableId, minimumBannerSeasonRewardThreshold, divisionSkillBoundary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeasonDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    seasonLeagueReference: ").append(toIndentedString(seasonLeagueReference)).append("\n");
    sb.append("    seasonDivisionReference: ").append(toIndentedString(seasonDivisionReference)).append("\n");
    sb.append("    seasonRewardTableId: ").append(toIndentedString(seasonRewardTableId)).append("\n");
    sb.append("    minimumBannerSeasonRewardThreshold: ").append(toIndentedString(minimumBannerSeasonRewardThreshold)).append("\n");
    sb.append("    divisionSkillBoundary: ").append(toIndentedString(divisionSkillBoundary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("seasonLeagueReference");
    openapiFields.add("seasonDivisionReference");
    openapiFields.add("seasonRewardTableId");
    openapiFields.add("minimumBannerSeasonRewardThreshold");
    openapiFields.add("divisionSkillBoundary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeasonDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeasonDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeasonDefinition is not found in the empty JSON string", SeasonDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeasonDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeasonDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if (jsonObj.get("seasonLeagueReference") != null && !jsonObj.get("seasonLeagueReference").isJsonNull()) {
        JsonArray jsonArrayseasonLeagueReference = jsonObj.getAsJsonArray("seasonLeagueReference");
        if (jsonArrayseasonLeagueReference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonLeagueReference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonLeagueReference` to be an array in the JSON string but got `%s`", jsonObj.get("seasonLeagueReference").toString()));
          }

          // validate the optional field `seasonLeagueReference` (array)
          for (int i = 0; i < jsonArrayseasonLeagueReference.size(); i++) {
            SeasonLeagueReference.validateJsonElement(jsonArrayseasonLeagueReference.get(i));
          };
        }
      }
      if (jsonObj.get("seasonDivisionReference") != null && !jsonObj.get("seasonDivisionReference").isJsonNull()) {
        JsonArray jsonArrayseasonDivisionReference = jsonObj.getAsJsonArray("seasonDivisionReference");
        if (jsonArrayseasonDivisionReference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonDivisionReference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonDivisionReference` to be an array in the JSON string but got `%s`", jsonObj.get("seasonDivisionReference").toString()));
          }

          // validate the optional field `seasonDivisionReference` (array)
          for (int i = 0; i < jsonArrayseasonDivisionReference.size(); i++) {
            SeasonDivisionReference.validateJsonElement(jsonArrayseasonDivisionReference.get(i));
          };
        }
      }
      if ((jsonObj.get("seasonRewardTableId") != null && !jsonObj.get("seasonRewardTableId").isJsonNull()) && !jsonObj.get("seasonRewardTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonRewardTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonRewardTableId").toString()));
      }
      if (jsonObj.get("divisionSkillBoundary") != null && !jsonObj.get("divisionSkillBoundary").isJsonNull()) {
        JsonArray jsonArraydivisionSkillBoundary = jsonObj.getAsJsonArray("divisionSkillBoundary");
        if (jsonArraydivisionSkillBoundary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("divisionSkillBoundary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `divisionSkillBoundary` to be an array in the JSON string but got `%s`", jsonObj.get("divisionSkillBoundary").toString()));
          }

          // validate the optional field `divisionSkillBoundary` (array)
          for (int i = 0; i < jsonArraydivisionSkillBoundary.size(); i++) {
            SeasonDivisionSkillBoundary.validateJsonElement(jsonArraydivisionSkillBoundary.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeasonDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeasonDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeasonDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeasonDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<SeasonDefinition>() {
           @Override
           public void write(JsonWriter out, SeasonDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeasonDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeasonDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeasonDefinition
   * @throws IOException if the JSON string is invalid with respect to SeasonDefinition
   */
  public static SeasonDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeasonDefinition.class);
  }

  /**
   * Convert an instance of SeasonDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

