/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.BattleUnitState;
import io.github.doenisf.comlink4j.model.SquadUnitType;
import io.github.doenisf.comlink4j.model.UnitBattleStat;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * SquadCell
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class SquadCell {
  public static final String SERIALIZED_NAME_UNIT_ID = "unitId";
  @SerializedName(SERIALIZED_NAME_UNIT_ID)
  private String unitId;

  public static final String SERIALIZED_NAME_UNIT_DEF_ID = "unitDefId";
  @SerializedName(SERIALIZED_NAME_UNIT_DEF_ID)
  private String unitDefId;

  public static final String SERIALIZED_NAME_CELL_INDEX = "cellIndex";
  @SerializedName(SERIALIZED_NAME_CELL_INDEX)
  private Integer cellIndex;

  public static final String SERIALIZED_NAME_UNIT_BATTLE_STAT = "unitBattleStat";
  @SerializedName(SERIALIZED_NAME_UNIT_BATTLE_STAT)
  private UnitBattleStat unitBattleStat;

  public static final String SERIALIZED_NAME_MESSAGE_RETICLE = "messageReticle";
  @SerializedName(SERIALIZED_NAME_MESSAGE_RETICLE)
  private String messageReticle;

  public static final String SERIALIZED_NAME_PROGRESS_ITEM = "progressItem";
  @SerializedName(SERIALIZED_NAME_PROGRESS_ITEM)
  private Boolean progressItem;

  public static final String SERIALIZED_NAME_SQUAD_UNIT_TYPE = "squadUnitType";
  @SerializedName(SERIALIZED_NAME_SQUAD_UNIT_TYPE)
  private SquadUnitType squadUnitType;

  public static final String SERIALIZED_NAME_CREW_BATTLE_STAT = "crewBattleStat";
  @SerializedName(SERIALIZED_NAME_CREW_BATTLE_STAT)
  private List<UnitBattleStat> crewBattleStat = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_STATE = "unitState";
  @SerializedName(SERIALIZED_NAME_UNIT_STATE)
  private BattleUnitState unitState;

  public static final String SERIALIZED_NAME_SELECTABLE = "selectable";
  @SerializedName(SERIALIZED_NAME_SELECTABLE)
  private Boolean selectable;

  public static final String SERIALIZED_NAME_OVERKILL_ITEM = "overkillItem";
  @SerializedName(SERIALIZED_NAME_OVERKILL_ITEM)
  private Boolean overkillItem;

  public static final String SERIALIZED_NAME_INHERIT_FROM_DEFINITION_ID = "inheritFromDefinitionId";
  @SerializedName(SERIALIZED_NAME_INHERIT_FROM_DEFINITION_ID)
  private String inheritFromDefinitionId;

  public SquadCell() {
  }

  public SquadCell unitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  /**
   * Get unitId
   * @return unitId
   */
  @javax.annotation.Nullable
  public String getUnitId() {
    return unitId;
  }

  public void setUnitId(String unitId) {
    this.unitId = unitId;
  }


  public SquadCell unitDefId(String unitDefId) {
    this.unitDefId = unitDefId;
    return this;
  }

  /**
   * Get unitDefId
   * @return unitDefId
   */
  @javax.annotation.Nullable
  public String getUnitDefId() {
    return unitDefId;
  }

  public void setUnitDefId(String unitDefId) {
    this.unitDefId = unitDefId;
  }


  public SquadCell cellIndex(Integer cellIndex) {
    this.cellIndex = cellIndex;
    return this;
  }

  /**
   * Get cellIndex
   * @return cellIndex
   */
  @javax.annotation.Nullable
  public Integer getCellIndex() {
    return cellIndex;
  }

  public void setCellIndex(Integer cellIndex) {
    this.cellIndex = cellIndex;
  }


  public SquadCell unitBattleStat(UnitBattleStat unitBattleStat) {
    this.unitBattleStat = unitBattleStat;
    return this;
  }

  /**
   * Get unitBattleStat
   * @return unitBattleStat
   */
  @javax.annotation.Nullable
  public UnitBattleStat getUnitBattleStat() {
    return unitBattleStat;
  }

  public void setUnitBattleStat(UnitBattleStat unitBattleStat) {
    this.unitBattleStat = unitBattleStat;
  }


  public SquadCell messageReticle(String messageReticle) {
    this.messageReticle = messageReticle;
    return this;
  }

  /**
   * Get messageReticle
   * @return messageReticle
   */
  @javax.annotation.Nullable
  public String getMessageReticle() {
    return messageReticle;
  }

  public void setMessageReticle(String messageReticle) {
    this.messageReticle = messageReticle;
  }


  public SquadCell progressItem(Boolean progressItem) {
    this.progressItem = progressItem;
    return this;
  }

  /**
   * Get progressItem
   * @return progressItem
   */
  @javax.annotation.Nullable
  public Boolean getProgressItem() {
    return progressItem;
  }

  public void setProgressItem(Boolean progressItem) {
    this.progressItem = progressItem;
  }


  public SquadCell squadUnitType(SquadUnitType squadUnitType) {
    this.squadUnitType = squadUnitType;
    return this;
  }

  /**
   * Get squadUnitType
   * @return squadUnitType
   */
  @javax.annotation.Nullable
  public SquadUnitType getSquadUnitType() {
    return squadUnitType;
  }

  public void setSquadUnitType(SquadUnitType squadUnitType) {
    this.squadUnitType = squadUnitType;
  }


  public SquadCell crewBattleStat(List<UnitBattleStat> crewBattleStat) {
    this.crewBattleStat = crewBattleStat;
    return this;
  }

  public SquadCell addCrewBattleStatItem(UnitBattleStat crewBattleStatItem) {
    if (this.crewBattleStat == null) {
      this.crewBattleStat = new ArrayList<>();
    }
    this.crewBattleStat.add(crewBattleStatItem);
    return this;
  }

  /**
   * Get crewBattleStat
   * @return crewBattleStat
   */
  @javax.annotation.Nullable
  public List<UnitBattleStat> getCrewBattleStat() {
    return crewBattleStat;
  }

  public void setCrewBattleStat(List<UnitBattleStat> crewBattleStat) {
    this.crewBattleStat = crewBattleStat;
  }


  public SquadCell unitState(BattleUnitState unitState) {
    this.unitState = unitState;
    return this;
  }

  /**
   * Get unitState
   * @return unitState
   */
  @javax.annotation.Nullable
  public BattleUnitState getUnitState() {
    return unitState;
  }

  public void setUnitState(BattleUnitState unitState) {
    this.unitState = unitState;
  }


  public SquadCell selectable(Boolean selectable) {
    this.selectable = selectable;
    return this;
  }

  /**
   * Get selectable
   * @return selectable
   */
  @javax.annotation.Nullable
  public Boolean getSelectable() {
    return selectable;
  }

  public void setSelectable(Boolean selectable) {
    this.selectable = selectable;
  }


  public SquadCell overkillItem(Boolean overkillItem) {
    this.overkillItem = overkillItem;
    return this;
  }

  /**
   * Get overkillItem
   * @return overkillItem
   */
  @javax.annotation.Nullable
  public Boolean getOverkillItem() {
    return overkillItem;
  }

  public void setOverkillItem(Boolean overkillItem) {
    this.overkillItem = overkillItem;
  }


  public SquadCell inheritFromDefinitionId(String inheritFromDefinitionId) {
    this.inheritFromDefinitionId = inheritFromDefinitionId;
    return this;
  }

  /**
   * Get inheritFromDefinitionId
   * @return inheritFromDefinitionId
   */
  @javax.annotation.Nullable
  public String getInheritFromDefinitionId() {
    return inheritFromDefinitionId;
  }

  public void setInheritFromDefinitionId(String inheritFromDefinitionId) {
    this.inheritFromDefinitionId = inheritFromDefinitionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SquadCell squadCell = (SquadCell) o;
    return Objects.equals(this.unitId, squadCell.unitId) &&
        Objects.equals(this.unitDefId, squadCell.unitDefId) &&
        Objects.equals(this.cellIndex, squadCell.cellIndex) &&
        Objects.equals(this.unitBattleStat, squadCell.unitBattleStat) &&
        Objects.equals(this.messageReticle, squadCell.messageReticle) &&
        Objects.equals(this.progressItem, squadCell.progressItem) &&
        Objects.equals(this.squadUnitType, squadCell.squadUnitType) &&
        Objects.equals(this.crewBattleStat, squadCell.crewBattleStat) &&
        Objects.equals(this.unitState, squadCell.unitState) &&
        Objects.equals(this.selectable, squadCell.selectable) &&
        Objects.equals(this.overkillItem, squadCell.overkillItem) &&
        Objects.equals(this.inheritFromDefinitionId, squadCell.inheritFromDefinitionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitId, unitDefId, cellIndex, unitBattleStat, messageReticle, progressItem, squadUnitType, crewBattleStat, unitState, selectable, overkillItem, inheritFromDefinitionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SquadCell {\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("    unitDefId: ").append(toIndentedString(unitDefId)).append("\n");
    sb.append("    cellIndex: ").append(toIndentedString(cellIndex)).append("\n");
    sb.append("    unitBattleStat: ").append(toIndentedString(unitBattleStat)).append("\n");
    sb.append("    messageReticle: ").append(toIndentedString(messageReticle)).append("\n");
    sb.append("    progressItem: ").append(toIndentedString(progressItem)).append("\n");
    sb.append("    squadUnitType: ").append(toIndentedString(squadUnitType)).append("\n");
    sb.append("    crewBattleStat: ").append(toIndentedString(crewBattleStat)).append("\n");
    sb.append("    unitState: ").append(toIndentedString(unitState)).append("\n");
    sb.append("    selectable: ").append(toIndentedString(selectable)).append("\n");
    sb.append("    overkillItem: ").append(toIndentedString(overkillItem)).append("\n");
    sb.append("    inheritFromDefinitionId: ").append(toIndentedString(inheritFromDefinitionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unitId");
    openapiFields.add("unitDefId");
    openapiFields.add("cellIndex");
    openapiFields.add("unitBattleStat");
    openapiFields.add("messageReticle");
    openapiFields.add("progressItem");
    openapiFields.add("squadUnitType");
    openapiFields.add("crewBattleStat");
    openapiFields.add("unitState");
    openapiFields.add("selectable");
    openapiFields.add("overkillItem");
    openapiFields.add("inheritFromDefinitionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SquadCell
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SquadCell.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SquadCell is not found in the empty JSON string", SquadCell.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SquadCell.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SquadCell` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("unitId") != null && !jsonObj.get("unitId").isJsonNull()) && !jsonObj.get("unitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitId").toString()));
      }
      if ((jsonObj.get("unitDefId") != null && !jsonObj.get("unitDefId").isJsonNull()) && !jsonObj.get("unitDefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitDefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitDefId").toString()));
      }
      // validate the optional field `unitBattleStat`
      if (jsonObj.get("unitBattleStat") != null && !jsonObj.get("unitBattleStat").isJsonNull()) {
        UnitBattleStat.validateJsonElement(jsonObj.get("unitBattleStat"));
      }
      if ((jsonObj.get("messageReticle") != null && !jsonObj.get("messageReticle").isJsonNull()) && !jsonObj.get("messageReticle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageReticle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageReticle").toString()));
      }
      // validate the optional field `squadUnitType`
      if (jsonObj.get("squadUnitType") != null && !jsonObj.get("squadUnitType").isJsonNull()) {
        SquadUnitType.validateJsonElement(jsonObj.get("squadUnitType"));
      }
      if (jsonObj.get("crewBattleStat") != null && !jsonObj.get("crewBattleStat").isJsonNull()) {
        JsonArray jsonArraycrewBattleStat = jsonObj.getAsJsonArray("crewBattleStat");
        if (jsonArraycrewBattleStat != null) {
          // ensure the json data is an array
          if (!jsonObj.get("crewBattleStat").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `crewBattleStat` to be an array in the JSON string but got `%s`", jsonObj.get("crewBattleStat").toString()));
          }

          // validate the optional field `crewBattleStat` (array)
          for (int i = 0; i < jsonArraycrewBattleStat.size(); i++) {
            UnitBattleStat.validateJsonElement(jsonArraycrewBattleStat.get(i));
          };
        }
      }
      // validate the optional field `unitState`
      if (jsonObj.get("unitState") != null && !jsonObj.get("unitState").isJsonNull()) {
        BattleUnitState.validateJsonElement(jsonObj.get("unitState"));
      }
      if ((jsonObj.get("inheritFromDefinitionId") != null && !jsonObj.get("inheritFromDefinitionId").isJsonNull()) && !jsonObj.get("inheritFromDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inheritFromDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inheritFromDefinitionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SquadCell.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SquadCell' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SquadCell> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SquadCell.class));

       return (TypeAdapter<T>) new TypeAdapter<SquadCell>() {
           @Override
           public void write(JsonWriter out, SquadCell value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SquadCell read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SquadCell given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SquadCell
   * @throws IOException if the JSON string is invalid with respect to SquadCell
   */
  public static SquadCell fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SquadCell.class);
  }

  /**
   * Convert an instance of SquadCell to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

