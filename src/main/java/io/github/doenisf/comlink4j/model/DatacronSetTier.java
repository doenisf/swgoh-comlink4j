/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.DatacronScopeIdentifier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * DatacronSetTier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class DatacronSetTier {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_UPGRADE_COST_RECIPE_ID = "upgradeCostRecipeId";
  @SerializedName(SERIALIZED_NAME_UPGRADE_COST_RECIPE_ID)
  private String upgradeCostRecipeId;

  public static final String SERIALIZED_NAME_DUST_GRANT_RECIPE_ID = "dustGrantRecipeId";
  @SerializedName(SERIALIZED_NAME_DUST_GRANT_RECIPE_ID)
  private String dustGrantRecipeId;

  public static final String SERIALIZED_NAME_REROLL_COST_RECIPE_ID = "rerollCostRecipeId";
  @SerializedName(SERIALIZED_NAME_REROLL_COST_RECIPE_ID)
  private List<String> rerollCostRecipeId = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE_IDENTIFIER = "scopeIdentifier";
  @SerializedName(SERIALIZED_NAME_SCOPE_IDENTIFIER)
  private DatacronScopeIdentifier scopeIdentifier;

  public DatacronSetTier() {
  }

  public DatacronSetTier id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DatacronSetTier upgradeCostRecipeId(String upgradeCostRecipeId) {
    this.upgradeCostRecipeId = upgradeCostRecipeId;
    return this;
  }

  /**
   * Get upgradeCostRecipeId
   * @return upgradeCostRecipeId
   */
  @javax.annotation.Nullable
  public String getUpgradeCostRecipeId() {
    return upgradeCostRecipeId;
  }

  public void setUpgradeCostRecipeId(String upgradeCostRecipeId) {
    this.upgradeCostRecipeId = upgradeCostRecipeId;
  }


  public DatacronSetTier dustGrantRecipeId(String dustGrantRecipeId) {
    this.dustGrantRecipeId = dustGrantRecipeId;
    return this;
  }

  /**
   * Get dustGrantRecipeId
   * @return dustGrantRecipeId
   */
  @javax.annotation.Nullable
  public String getDustGrantRecipeId() {
    return dustGrantRecipeId;
  }

  public void setDustGrantRecipeId(String dustGrantRecipeId) {
    this.dustGrantRecipeId = dustGrantRecipeId;
  }


  public DatacronSetTier rerollCostRecipeId(List<String> rerollCostRecipeId) {
    this.rerollCostRecipeId = rerollCostRecipeId;
    return this;
  }

  public DatacronSetTier addRerollCostRecipeIdItem(String rerollCostRecipeIdItem) {
    if (this.rerollCostRecipeId == null) {
      this.rerollCostRecipeId = new ArrayList<>();
    }
    this.rerollCostRecipeId.add(rerollCostRecipeIdItem);
    return this;
  }

  /**
   * Get rerollCostRecipeId
   * @return rerollCostRecipeId
   */
  @javax.annotation.Nullable
  public List<String> getRerollCostRecipeId() {
    return rerollCostRecipeId;
  }

  public void setRerollCostRecipeId(List<String> rerollCostRecipeId) {
    this.rerollCostRecipeId = rerollCostRecipeId;
  }


  public DatacronSetTier scopeIdentifier(DatacronScopeIdentifier scopeIdentifier) {
    this.scopeIdentifier = scopeIdentifier;
    return this;
  }

  /**
   * Get scopeIdentifier
   * @return scopeIdentifier
   */
  @javax.annotation.Nullable
  public DatacronScopeIdentifier getScopeIdentifier() {
    return scopeIdentifier;
  }

  public void setScopeIdentifier(DatacronScopeIdentifier scopeIdentifier) {
    this.scopeIdentifier = scopeIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatacronSetTier datacronSetTier = (DatacronSetTier) o;
    return Objects.equals(this.id, datacronSetTier.id) &&
        Objects.equals(this.upgradeCostRecipeId, datacronSetTier.upgradeCostRecipeId) &&
        Objects.equals(this.dustGrantRecipeId, datacronSetTier.dustGrantRecipeId) &&
        Objects.equals(this.rerollCostRecipeId, datacronSetTier.rerollCostRecipeId) &&
        Objects.equals(this.scopeIdentifier, datacronSetTier.scopeIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, upgradeCostRecipeId, dustGrantRecipeId, rerollCostRecipeId, scopeIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatacronSetTier {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    upgradeCostRecipeId: ").append(toIndentedString(upgradeCostRecipeId)).append("\n");
    sb.append("    dustGrantRecipeId: ").append(toIndentedString(dustGrantRecipeId)).append("\n");
    sb.append("    rerollCostRecipeId: ").append(toIndentedString(rerollCostRecipeId)).append("\n");
    sb.append("    scopeIdentifier: ").append(toIndentedString(scopeIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("upgradeCostRecipeId");
    openapiFields.add("dustGrantRecipeId");
    openapiFields.add("rerollCostRecipeId");
    openapiFields.add("scopeIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatacronSetTier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatacronSetTier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatacronSetTier is not found in the empty JSON string", DatacronSetTier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatacronSetTier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatacronSetTier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("upgradeCostRecipeId") != null && !jsonObj.get("upgradeCostRecipeId").isJsonNull()) && !jsonObj.get("upgradeCostRecipeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeCostRecipeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeCostRecipeId").toString()));
      }
      if ((jsonObj.get("dustGrantRecipeId") != null && !jsonObj.get("dustGrantRecipeId").isJsonNull()) && !jsonObj.get("dustGrantRecipeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dustGrantRecipeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dustGrantRecipeId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rerollCostRecipeId") != null && !jsonObj.get("rerollCostRecipeId").isJsonNull() && !jsonObj.get("rerollCostRecipeId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerollCostRecipeId` to be an array in the JSON string but got `%s`", jsonObj.get("rerollCostRecipeId").toString()));
      }
      // validate the optional field `scopeIdentifier`
      if (jsonObj.get("scopeIdentifier") != null && !jsonObj.get("scopeIdentifier").isJsonNull()) {
        DatacronScopeIdentifier.validateJsonElement(jsonObj.get("scopeIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatacronSetTier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatacronSetTier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatacronSetTier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatacronSetTier.class));

       return (TypeAdapter<T>) new TypeAdapter<DatacronSetTier>() {
           @Override
           public void write(JsonWriter out, DatacronSetTier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatacronSetTier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatacronSetTier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatacronSetTier
   * @throws IOException if the JSON string is invalid with respect to DatacronSetTier
   */
  public static DatacronSetTier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatacronSetTier.class);
  }

  /**
   * Convert an instance of DatacronSetTier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

