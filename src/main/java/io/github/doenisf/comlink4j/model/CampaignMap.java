/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.BucketItem;
import io.github.doenisf.comlink4j.CampaignElementProgress;
import io.github.doenisf.comlink4j.CampaignNodeDifficultyGroup;
import io.github.doenisf.comlink4j.EntryCategoryAllowed;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * CampaignMap
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CampaignMap {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CAMPAIGN_NODE_DIFFICULTY_GROUP = "campaignNodeDifficultyGroup";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NODE_DIFFICULTY_GROUP)
  private List<CampaignNodeDifficultyGroup> campaignNodeDifficultyGroup = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private CampaignElementProgress progress;

  public static final String SERIALIZED_NAME_ENTRY_OWNERSHIP_REQUIREMENT = "entryOwnershipRequirement";
  @SerializedName(SERIALIZED_NAME_ENTRY_OWNERSHIP_REQUIREMENT)
  private List<BucketItem> entryOwnershipRequirement = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY = "unlockRequirementLocalizationKey";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENT_LOCALIZATION_KEY)
  private String unlockRequirementLocalizationKey;

  public static final String SERIALIZED_NAME_IS_PLAYER_SQUAD_SUPPLIED = "isPlayerSquadSupplied";
  @SerializedName(SERIALIZED_NAME_IS_PLAYER_SQUAD_SUPPLIED)
  private Boolean isPlayerSquadSupplied;

  public static final String SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY = "dailyBattleCapKey";
  @SerializedName(SERIALIZED_NAME_DAILY_BATTLE_CAP_KEY)
  private String dailyBattleCapKey;

  public static final String SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED = "entryCategoryAllowed";
  @SerializedName(SERIALIZED_NAME_ENTRY_CATEGORY_ALLOWED)
  private EntryCategoryAllowed entryCategoryAllowed;

  public static final String SERIALIZED_NAME_GRIND_ENABLED = "grindEnabled";
  @SerializedName(SERIALIZED_NAME_GRIND_ENABLED)
  private Boolean grindEnabled;

  public static final String SERIALIZED_NAME_GAME_MODE_KEY = "gameModeKey";
  @SerializedName(SERIALIZED_NAME_GAME_MODE_KEY)
  private String gameModeKey;

  public CampaignMap() {
  }

  public CampaignMap id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CampaignMap campaignNodeDifficultyGroup(List<CampaignNodeDifficultyGroup> campaignNodeDifficultyGroup) {
    this.campaignNodeDifficultyGroup = campaignNodeDifficultyGroup;
    return this;
  }

  public CampaignMap addCampaignNodeDifficultyGroupItem(CampaignNodeDifficultyGroup campaignNodeDifficultyGroupItem) {
    if (this.campaignNodeDifficultyGroup == null) {
      this.campaignNodeDifficultyGroup = new ArrayList<>();
    }
    this.campaignNodeDifficultyGroup.add(campaignNodeDifficultyGroupItem);
    return this;
  }

  /**
   * Get campaignNodeDifficultyGroup
   * @return campaignNodeDifficultyGroup
   */
  @javax.annotation.Nullable
  public List<CampaignNodeDifficultyGroup> getCampaignNodeDifficultyGroup() {
    return campaignNodeDifficultyGroup;
  }

  public void setCampaignNodeDifficultyGroup(List<CampaignNodeDifficultyGroup> campaignNodeDifficultyGroup) {
    this.campaignNodeDifficultyGroup = campaignNodeDifficultyGroup;
  }


  public CampaignMap progress(CampaignElementProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public CampaignElementProgress getProgress() {
    return progress;
  }

  public void setProgress(CampaignElementProgress progress) {
    this.progress = progress;
  }


  public CampaignMap entryOwnershipRequirement(List<BucketItem> entryOwnershipRequirement) {
    this.entryOwnershipRequirement = entryOwnershipRequirement;
    return this;
  }

  public CampaignMap addEntryOwnershipRequirementItem(BucketItem entryOwnershipRequirementItem) {
    if (this.entryOwnershipRequirement == null) {
      this.entryOwnershipRequirement = new ArrayList<>();
    }
    this.entryOwnershipRequirement.add(entryOwnershipRequirementItem);
    return this;
  }

  /**
   * Get entryOwnershipRequirement
   * @return entryOwnershipRequirement
   */
  @javax.annotation.Nullable
  public List<BucketItem> getEntryOwnershipRequirement() {
    return entryOwnershipRequirement;
  }

  public void setEntryOwnershipRequirement(List<BucketItem> entryOwnershipRequirement) {
    this.entryOwnershipRequirement = entryOwnershipRequirement;
  }


  public CampaignMap unlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
    return this;
  }

  /**
   * Get unlockRequirementLocalizationKey
   * @return unlockRequirementLocalizationKey
   */
  @javax.annotation.Nullable
  public String getUnlockRequirementLocalizationKey() {
    return unlockRequirementLocalizationKey;
  }

  public void setUnlockRequirementLocalizationKey(String unlockRequirementLocalizationKey) {
    this.unlockRequirementLocalizationKey = unlockRequirementLocalizationKey;
  }


  public CampaignMap isPlayerSquadSupplied(Boolean isPlayerSquadSupplied) {
    this.isPlayerSquadSupplied = isPlayerSquadSupplied;
    return this;
  }

  /**
   * Get isPlayerSquadSupplied
   * @return isPlayerSquadSupplied
   */
  @javax.annotation.Nullable
  public Boolean getIsPlayerSquadSupplied() {
    return isPlayerSquadSupplied;
  }

  public void setIsPlayerSquadSupplied(Boolean isPlayerSquadSupplied) {
    this.isPlayerSquadSupplied = isPlayerSquadSupplied;
  }


  public CampaignMap dailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
    return this;
  }

  /**
   * Get dailyBattleCapKey
   * @return dailyBattleCapKey
   */
  @javax.annotation.Nullable
  public String getDailyBattleCapKey() {
    return dailyBattleCapKey;
  }

  public void setDailyBattleCapKey(String dailyBattleCapKey) {
    this.dailyBattleCapKey = dailyBattleCapKey;
  }


  public CampaignMap entryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
    return this;
  }

  /**
   * Get entryCategoryAllowed
   * @return entryCategoryAllowed
   */
  @javax.annotation.Nullable
  public EntryCategoryAllowed getEntryCategoryAllowed() {
    return entryCategoryAllowed;
  }

  public void setEntryCategoryAllowed(EntryCategoryAllowed entryCategoryAllowed) {
    this.entryCategoryAllowed = entryCategoryAllowed;
  }


  public CampaignMap grindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
    return this;
  }

  /**
   * Get grindEnabled
   * @return grindEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGrindEnabled() {
    return grindEnabled;
  }

  public void setGrindEnabled(Boolean grindEnabled) {
    this.grindEnabled = grindEnabled;
  }


  public CampaignMap gameModeKey(String gameModeKey) {
    this.gameModeKey = gameModeKey;
    return this;
  }

  /**
   * Get gameModeKey
   * @return gameModeKey
   */
  @javax.annotation.Nullable
  public String getGameModeKey() {
    return gameModeKey;
  }

  public void setGameModeKey(String gameModeKey) {
    this.gameModeKey = gameModeKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignMap campaignMap = (CampaignMap) o;
    return Objects.equals(this.id, campaignMap.id) &&
        Objects.equals(this.campaignNodeDifficultyGroup, campaignMap.campaignNodeDifficultyGroup) &&
        Objects.equals(this.progress, campaignMap.progress) &&
        Objects.equals(this.entryOwnershipRequirement, campaignMap.entryOwnershipRequirement) &&
        Objects.equals(this.unlockRequirementLocalizationKey, campaignMap.unlockRequirementLocalizationKey) &&
        Objects.equals(this.isPlayerSquadSupplied, campaignMap.isPlayerSquadSupplied) &&
        Objects.equals(this.dailyBattleCapKey, campaignMap.dailyBattleCapKey) &&
        Objects.equals(this.entryCategoryAllowed, campaignMap.entryCategoryAllowed) &&
        Objects.equals(this.grindEnabled, campaignMap.grindEnabled) &&
        Objects.equals(this.gameModeKey, campaignMap.gameModeKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, campaignNodeDifficultyGroup, progress, entryOwnershipRequirement, unlockRequirementLocalizationKey, isPlayerSquadSupplied, dailyBattleCapKey, entryCategoryAllowed, grindEnabled, gameModeKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignMap {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    campaignNodeDifficultyGroup: ").append(toIndentedString(campaignNodeDifficultyGroup)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    entryOwnershipRequirement: ").append(toIndentedString(entryOwnershipRequirement)).append("\n");
    sb.append("    unlockRequirementLocalizationKey: ").append(toIndentedString(unlockRequirementLocalizationKey)).append("\n");
    sb.append("    isPlayerSquadSupplied: ").append(toIndentedString(isPlayerSquadSupplied)).append("\n");
    sb.append("    dailyBattleCapKey: ").append(toIndentedString(dailyBattleCapKey)).append("\n");
    sb.append("    entryCategoryAllowed: ").append(toIndentedString(entryCategoryAllowed)).append("\n");
    sb.append("    grindEnabled: ").append(toIndentedString(grindEnabled)).append("\n");
    sb.append("    gameModeKey: ").append(toIndentedString(gameModeKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("campaignNodeDifficultyGroup");
    openapiFields.add("progress");
    openapiFields.add("entryOwnershipRequirement");
    openapiFields.add("unlockRequirementLocalizationKey");
    openapiFields.add("isPlayerSquadSupplied");
    openapiFields.add("dailyBattleCapKey");
    openapiFields.add("entryCategoryAllowed");
    openapiFields.add("grindEnabled");
    openapiFields.add("gameModeKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignMap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignMap is not found in the empty JSON string", CampaignMap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignMap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignMap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("campaignNodeDifficultyGroup") != null && !jsonObj.get("campaignNodeDifficultyGroup").isJsonNull()) {
        JsonArray jsonArraycampaignNodeDifficultyGroup = jsonObj.getAsJsonArray("campaignNodeDifficultyGroup");
        if (jsonArraycampaignNodeDifficultyGroup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaignNodeDifficultyGroup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaignNodeDifficultyGroup` to be an array in the JSON string but got `%s`", jsonObj.get("campaignNodeDifficultyGroup").toString()));
          }

          // validate the optional field `campaignNodeDifficultyGroup` (array)
          for (int i = 0; i < jsonArraycampaignNodeDifficultyGroup.size(); i++) {
            CampaignNodeDifficultyGroup.validateJsonElement(jsonArraycampaignNodeDifficultyGroup.get(i));
          };
        }
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        CampaignElementProgress.validateJsonElement(jsonObj.get("progress"));
      }
      if (jsonObj.get("entryOwnershipRequirement") != null && !jsonObj.get("entryOwnershipRequirement").isJsonNull()) {
        JsonArray jsonArrayentryOwnershipRequirement = jsonObj.getAsJsonArray("entryOwnershipRequirement");
        if (jsonArrayentryOwnershipRequirement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entryOwnershipRequirement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entryOwnershipRequirement` to be an array in the JSON string but got `%s`", jsonObj.get("entryOwnershipRequirement").toString()));
          }

          // validate the optional field `entryOwnershipRequirement` (array)
          for (int i = 0; i < jsonArrayentryOwnershipRequirement.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayentryOwnershipRequirement.get(i));
          };
        }
      }
      if ((jsonObj.get("unlockRequirementLocalizationKey") != null && !jsonObj.get("unlockRequirementLocalizationKey").isJsonNull()) && !jsonObj.get("unlockRequirementLocalizationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockRequirementLocalizationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockRequirementLocalizationKey").toString()));
      }
      if ((jsonObj.get("dailyBattleCapKey") != null && !jsonObj.get("dailyBattleCapKey").isJsonNull()) && !jsonObj.get("dailyBattleCapKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dailyBattleCapKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dailyBattleCapKey").toString()));
      }
      // validate the optional field `entryCategoryAllowed`
      if (jsonObj.get("entryCategoryAllowed") != null && !jsonObj.get("entryCategoryAllowed").isJsonNull()) {
        EntryCategoryAllowed.validateJsonElement(jsonObj.get("entryCategoryAllowed"));
      }
      if ((jsonObj.get("gameModeKey") != null && !jsonObj.get("gameModeKey").isJsonNull()) && !jsonObj.get("gameModeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameModeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameModeKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignMap.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignMap>() {
           @Override
           public void write(JsonWriter out, CampaignMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignMap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignMap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignMap
   * @throws IOException if the JSON string is invalid with respect to CampaignMap
   */
  public static CampaignMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignMap.class);
  }

  /**
   * Convert an instance of CampaignMap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

