/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.TerritoryMapPhase;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryLocalNote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryLocalNote {
  public static final String SERIALIZED_NAME_MESSAGE_KEY = "messageKey";
  @SerializedName(SERIALIZED_NAME_MESSAGE_KEY)
  private String messageKey;

  public static final String SERIALIZED_NAME_TITLE_KEY = "titleKey";
  @SerializedName(SERIALIZED_NAME_TITLE_KEY)
  private String titleKey;

  public static final String SERIALIZED_NAME_OPTED_IN = "optedIn";
  @SerializedName(SERIALIZED_NAME_OPTED_IN)
  private Boolean optedIn;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private TerritoryMapPhase phase;

  public static final String SERIALIZED_NAME_PHASE_TIME_OFFSET_SECONDS = "phaseTimeOffsetSeconds";
  @SerializedName(SERIALIZED_NAME_PHASE_TIME_OFFSET_SECONDS)
  private Integer phaseTimeOffsetSeconds;

  public static final String SERIALIZED_NAME_FINAL_MATCH_ONLY = "finalMatchOnly";
  @SerializedName(SERIALIZED_NAME_FINAL_MATCH_ONLY)
  private Boolean finalMatchOnly;

  public static final String SERIALIZED_NAME_PER_SUB_PHASE_ROUND_END = "perSubPhaseRoundEnd";
  @SerializedName(SERIALIZED_NAME_PER_SUB_PHASE_ROUND_END)
  private Boolean perSubPhaseRoundEnd;

  public TerritoryLocalNote() {
  }

  public TerritoryLocalNote messageKey(String messageKey) {
    this.messageKey = messageKey;
    return this;
  }

  /**
   * Get messageKey
   * @return messageKey
   */
  @javax.annotation.Nullable
  public String getMessageKey() {
    return messageKey;
  }

  public void setMessageKey(String messageKey) {
    this.messageKey = messageKey;
  }


  public TerritoryLocalNote titleKey(String titleKey) {
    this.titleKey = titleKey;
    return this;
  }

  /**
   * Get titleKey
   * @return titleKey
   */
  @javax.annotation.Nullable
  public String getTitleKey() {
    return titleKey;
  }

  public void setTitleKey(String titleKey) {
    this.titleKey = titleKey;
  }


  public TerritoryLocalNote optedIn(Boolean optedIn) {
    this.optedIn = optedIn;
    return this;
  }

  /**
   * Get optedIn
   * @return optedIn
   */
  @javax.annotation.Nullable
  public Boolean getOptedIn() {
    return optedIn;
  }

  public void setOptedIn(Boolean optedIn) {
    this.optedIn = optedIn;
  }


  public TerritoryLocalNote phase(TerritoryMapPhase phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public TerritoryMapPhase getPhase() {
    return phase;
  }

  public void setPhase(TerritoryMapPhase phase) {
    this.phase = phase;
  }


  public TerritoryLocalNote phaseTimeOffsetSeconds(Integer phaseTimeOffsetSeconds) {
    this.phaseTimeOffsetSeconds = phaseTimeOffsetSeconds;
    return this;
  }

  /**
   * Get phaseTimeOffsetSeconds
   * @return phaseTimeOffsetSeconds
   */
  @javax.annotation.Nullable
  public Integer getPhaseTimeOffsetSeconds() {
    return phaseTimeOffsetSeconds;
  }

  public void setPhaseTimeOffsetSeconds(Integer phaseTimeOffsetSeconds) {
    this.phaseTimeOffsetSeconds = phaseTimeOffsetSeconds;
  }


  public TerritoryLocalNote finalMatchOnly(Boolean finalMatchOnly) {
    this.finalMatchOnly = finalMatchOnly;
    return this;
  }

  /**
   * Get finalMatchOnly
   * @return finalMatchOnly
   */
  @javax.annotation.Nullable
  public Boolean getFinalMatchOnly() {
    return finalMatchOnly;
  }

  public void setFinalMatchOnly(Boolean finalMatchOnly) {
    this.finalMatchOnly = finalMatchOnly;
  }


  public TerritoryLocalNote perSubPhaseRoundEnd(Boolean perSubPhaseRoundEnd) {
    this.perSubPhaseRoundEnd = perSubPhaseRoundEnd;
    return this;
  }

  /**
   * Get perSubPhaseRoundEnd
   * @return perSubPhaseRoundEnd
   */
  @javax.annotation.Nullable
  public Boolean getPerSubPhaseRoundEnd() {
    return perSubPhaseRoundEnd;
  }

  public void setPerSubPhaseRoundEnd(Boolean perSubPhaseRoundEnd) {
    this.perSubPhaseRoundEnd = perSubPhaseRoundEnd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryLocalNote territoryLocalNote = (TerritoryLocalNote) o;
    return Objects.equals(this.messageKey, territoryLocalNote.messageKey) &&
        Objects.equals(this.titleKey, territoryLocalNote.titleKey) &&
        Objects.equals(this.optedIn, territoryLocalNote.optedIn) &&
        Objects.equals(this.phase, territoryLocalNote.phase) &&
        Objects.equals(this.phaseTimeOffsetSeconds, territoryLocalNote.phaseTimeOffsetSeconds) &&
        Objects.equals(this.finalMatchOnly, territoryLocalNote.finalMatchOnly) &&
        Objects.equals(this.perSubPhaseRoundEnd, territoryLocalNote.perSubPhaseRoundEnd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageKey, titleKey, optedIn, phase, phaseTimeOffsetSeconds, finalMatchOnly, perSubPhaseRoundEnd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryLocalNote {\n");
    sb.append("    messageKey: ").append(toIndentedString(messageKey)).append("\n");
    sb.append("    titleKey: ").append(toIndentedString(titleKey)).append("\n");
    sb.append("    optedIn: ").append(toIndentedString(optedIn)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    phaseTimeOffsetSeconds: ").append(toIndentedString(phaseTimeOffsetSeconds)).append("\n");
    sb.append("    finalMatchOnly: ").append(toIndentedString(finalMatchOnly)).append("\n");
    sb.append("    perSubPhaseRoundEnd: ").append(toIndentedString(perSubPhaseRoundEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageKey");
    openapiFields.add("titleKey");
    openapiFields.add("optedIn");
    openapiFields.add("phase");
    openapiFields.add("phaseTimeOffsetSeconds");
    openapiFields.add("finalMatchOnly");
    openapiFields.add("perSubPhaseRoundEnd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryLocalNote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryLocalNote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryLocalNote is not found in the empty JSON string", TerritoryLocalNote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryLocalNote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryLocalNote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("messageKey") != null && !jsonObj.get("messageKey").isJsonNull()) && !jsonObj.get("messageKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageKey").toString()));
      }
      if ((jsonObj.get("titleKey") != null && !jsonObj.get("titleKey").isJsonNull()) && !jsonObj.get("titleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleKey").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        TerritoryMapPhase.validateJsonElement(jsonObj.get("phase"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryLocalNote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryLocalNote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryLocalNote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryLocalNote.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryLocalNote>() {
           @Override
           public void write(JsonWriter out, TerritoryLocalNote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryLocalNote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryLocalNote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryLocalNote
   * @throws IOException if the JSON string is invalid with respect to TerritoryLocalNote
   */
  public static TerritoryLocalNote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryLocalNote.class);
  }

  /**
   * Convert an instance of TerritoryLocalNote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

