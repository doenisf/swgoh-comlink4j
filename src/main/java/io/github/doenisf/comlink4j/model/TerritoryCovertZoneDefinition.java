/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.BucketItem;
import io.github.doenisf.comlink4j.CampaignElementIdentifier;
import io.github.doenisf.comlink4j.CombatType;
import io.github.doenisf.comlink4j.TerritoryZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * TerritoryCovertZoneDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryCovertZoneDefinition {
  public static final String SERIALIZED_NAME_ZONE_DEFINITION = "zoneDefinition";
  @SerializedName(SERIALIZED_NAME_ZONE_DEFINITION)
  private TerritoryZoneDefinition zoneDefinition;

  public static final String SERIALIZED_NAME_CAMPAIGN_ELEMENT_IDENTIFIER = "campaignElementIdentifier";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ELEMENT_IDENTIFIER)
  private CampaignElementIdentifier campaignElementIdentifier;

  public static final String SERIALIZED_NAME_VICTORY_REWARD = "victoryReward";
  @SerializedName(SERIALIZED_NAME_VICTORY_REWARD)
  private List<BucketItem> victoryReward = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLE_REWARD_ON_MAP = "disableRewardOnMap";
  @SerializedName(SERIALIZED_NAME_DISABLE_REWARD_ON_MAP)
  private Boolean disableRewardOnMap;

  public static final String SERIALIZED_NAME_COMBAT_TYPE = "combatType";
  @SerializedName(SERIALIZED_NAME_COMBAT_TYPE)
  private CombatType combatType;

  public TerritoryCovertZoneDefinition() {
  }

  public TerritoryCovertZoneDefinition zoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
    return this;
  }

  /**
   * Get zoneDefinition
   * @return zoneDefinition
   */
  @javax.annotation.Nullable
  public TerritoryZoneDefinition getZoneDefinition() {
    return zoneDefinition;
  }

  public void setZoneDefinition(TerritoryZoneDefinition zoneDefinition) {
    this.zoneDefinition = zoneDefinition;
  }


  public TerritoryCovertZoneDefinition campaignElementIdentifier(CampaignElementIdentifier campaignElementIdentifier) {
    this.campaignElementIdentifier = campaignElementIdentifier;
    return this;
  }

  /**
   * Get campaignElementIdentifier
   * @return campaignElementIdentifier
   */
  @javax.annotation.Nullable
  public CampaignElementIdentifier getCampaignElementIdentifier() {
    return campaignElementIdentifier;
  }

  public void setCampaignElementIdentifier(CampaignElementIdentifier campaignElementIdentifier) {
    this.campaignElementIdentifier = campaignElementIdentifier;
  }


  public TerritoryCovertZoneDefinition victoryReward(List<BucketItem> victoryReward) {
    this.victoryReward = victoryReward;
    return this;
  }

  public TerritoryCovertZoneDefinition addVictoryRewardItem(BucketItem victoryRewardItem) {
    if (this.victoryReward == null) {
      this.victoryReward = new ArrayList<>();
    }
    this.victoryReward.add(victoryRewardItem);
    return this;
  }

  /**
   * Get victoryReward
   * @return victoryReward
   */
  @javax.annotation.Nullable
  public List<BucketItem> getVictoryReward() {
    return victoryReward;
  }

  public void setVictoryReward(List<BucketItem> victoryReward) {
    this.victoryReward = victoryReward;
  }


  public TerritoryCovertZoneDefinition disableRewardOnMap(Boolean disableRewardOnMap) {
    this.disableRewardOnMap = disableRewardOnMap;
    return this;
  }

  /**
   * Get disableRewardOnMap
   * @return disableRewardOnMap
   */
  @javax.annotation.Nullable
  public Boolean getDisableRewardOnMap() {
    return disableRewardOnMap;
  }

  public void setDisableRewardOnMap(Boolean disableRewardOnMap) {
    this.disableRewardOnMap = disableRewardOnMap;
  }


  public TerritoryCovertZoneDefinition combatType(CombatType combatType) {
    this.combatType = combatType;
    return this;
  }

  /**
   * Get combatType
   * @return combatType
   */
  @javax.annotation.Nullable
  public CombatType getCombatType() {
    return combatType;
  }

  public void setCombatType(CombatType combatType) {
    this.combatType = combatType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryCovertZoneDefinition territoryCovertZoneDefinition = (TerritoryCovertZoneDefinition) o;
    return Objects.equals(this.zoneDefinition, territoryCovertZoneDefinition.zoneDefinition) &&
        Objects.equals(this.campaignElementIdentifier, territoryCovertZoneDefinition.campaignElementIdentifier) &&
        Objects.equals(this.victoryReward, territoryCovertZoneDefinition.victoryReward) &&
        Objects.equals(this.disableRewardOnMap, territoryCovertZoneDefinition.disableRewardOnMap) &&
        Objects.equals(this.combatType, territoryCovertZoneDefinition.combatType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneDefinition, campaignElementIdentifier, victoryReward, disableRewardOnMap, combatType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryCovertZoneDefinition {\n");
    sb.append("    zoneDefinition: ").append(toIndentedString(zoneDefinition)).append("\n");
    sb.append("    campaignElementIdentifier: ").append(toIndentedString(campaignElementIdentifier)).append("\n");
    sb.append("    victoryReward: ").append(toIndentedString(victoryReward)).append("\n");
    sb.append("    disableRewardOnMap: ").append(toIndentedString(disableRewardOnMap)).append("\n");
    sb.append("    combatType: ").append(toIndentedString(combatType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("zoneDefinition");
    openapiFields.add("campaignElementIdentifier");
    openapiFields.add("victoryReward");
    openapiFields.add("disableRewardOnMap");
    openapiFields.add("combatType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryCovertZoneDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryCovertZoneDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryCovertZoneDefinition is not found in the empty JSON string", TerritoryCovertZoneDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryCovertZoneDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryCovertZoneDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `zoneDefinition`
      if (jsonObj.get("zoneDefinition") != null && !jsonObj.get("zoneDefinition").isJsonNull()) {
        TerritoryZoneDefinition.validateJsonElement(jsonObj.get("zoneDefinition"));
      }
      // validate the optional field `campaignElementIdentifier`
      if (jsonObj.get("campaignElementIdentifier") != null && !jsonObj.get("campaignElementIdentifier").isJsonNull()) {
        CampaignElementIdentifier.validateJsonElement(jsonObj.get("campaignElementIdentifier"));
      }
      if (jsonObj.get("victoryReward") != null && !jsonObj.get("victoryReward").isJsonNull()) {
        JsonArray jsonArrayvictoryReward = jsonObj.getAsJsonArray("victoryReward");
        if (jsonArrayvictoryReward != null) {
          // ensure the json data is an array
          if (!jsonObj.get("victoryReward").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `victoryReward` to be an array in the JSON string but got `%s`", jsonObj.get("victoryReward").toString()));
          }

          // validate the optional field `victoryReward` (array)
          for (int i = 0; i < jsonArrayvictoryReward.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayvictoryReward.get(i));
          };
        }
      }
      // validate the optional field `combatType`
      if (jsonObj.get("combatType") != null && !jsonObj.get("combatType").isJsonNull()) {
        CombatType.validateJsonElement(jsonObj.get("combatType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryCovertZoneDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryCovertZoneDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryCovertZoneDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryCovertZoneDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryCovertZoneDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryCovertZoneDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryCovertZoneDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryCovertZoneDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryCovertZoneDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryCovertZoneDefinition
   */
  public static TerritoryCovertZoneDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryCovertZoneDefinition.class);
  }

  /**
   * Convert an instance of TerritoryCovertZoneDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

