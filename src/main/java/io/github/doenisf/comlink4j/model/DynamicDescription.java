/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.DynamicDescriptionTextAlignmentType;
import io.github.doenisf.comlink4j.DynamicDescriptionTextColumn;
import io.github.doenisf.comlink4j.DynamicDescriptionType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.JSON;

/**
 * DynamicDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T16:29:17.254694600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class DynamicDescription {
  public static final String SERIALIZED_NAME_DESCRIPTION_TYPE = "descriptionType";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TYPE)
  private DynamicDescriptionType descriptionType;

  public static final String SERIALIZED_NAME_UNIT_TEXTURE = "unitTexture";
  @SerializedName(SERIALIZED_NAME_UNIT_TEXTURE)
  private String unitTexture;

  public static final String SERIALIZED_NAME_UNIT_NAME_KEY = "unitNameKey";
  @SerializedName(SERIALIZED_NAME_UNIT_NAME_KEY)
  private String unitNameKey;

  public static final String SERIALIZED_NAME_ABILITY_NAME_KEY = "abilityNameKey";
  @SerializedName(SERIALIZED_NAME_ABILITY_NAME_KEY)
  private String abilityNameKey;

  public static final String SERIALIZED_NAME_ABILITY_DESCRIPTION_KEY = "abilityDescriptionKey";
  @SerializedName(SERIALIZED_NAME_ABILITY_DESCRIPTION_KEY)
  private String abilityDescriptionKey;

  public static final String SERIALIZED_NAME_ABILITY_TEXTURE = "abilityTexture";
  @SerializedName(SERIALIZED_NAME_ABILITY_TEXTURE)
  private String abilityTexture;

  public static final String SERIALIZED_NAME_HEADER_KEY = "headerKey";
  @SerializedName(SERIALIZED_NAME_HEADER_KEY)
  private String headerKey;

  public static final String SERIALIZED_NAME_TEXT_KEY = "textKey";
  @SerializedName(SERIALIZED_NAME_TEXT_KEY)
  private String textKey;

  public static final String SERIALIZED_NAME_MARGIN_LEFT = "marginLeft";
  @SerializedName(SERIALIZED_NAME_MARGIN_LEFT)
  private Integer marginLeft;

  public static final String SERIALIZED_NAME_TEXT_COLUMN = "textColumn";
  @SerializedName(SERIALIZED_NAME_TEXT_COLUMN)
  private List<DynamicDescriptionTextColumn> textColumn = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT_ALIGNMENT = "textAlignment";
  @SerializedName(SERIALIZED_NAME_TEXT_ALIGNMENT)
  private DynamicDescriptionTextAlignmentType textAlignment;

  public static final String SERIALIZED_NAME_BACKGROUND_OVERRIDE_SPRITE = "backgroundOverrideSprite";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_OVERRIDE_SPRITE)
  private String backgroundOverrideSprite;

  public DynamicDescription() {
  }

  public DynamicDescription descriptionType(DynamicDescriptionType descriptionType) {
    this.descriptionType = descriptionType;
    return this;
  }

  /**
   * Get descriptionType
   * @return descriptionType
   */
  @javax.annotation.Nullable
  public DynamicDescriptionType getDescriptionType() {
    return descriptionType;
  }

  public void setDescriptionType(DynamicDescriptionType descriptionType) {
    this.descriptionType = descriptionType;
  }


  public DynamicDescription unitTexture(String unitTexture) {
    this.unitTexture = unitTexture;
    return this;
  }

  /**
   * Get unitTexture
   * @return unitTexture
   */
  @javax.annotation.Nullable
  public String getUnitTexture() {
    return unitTexture;
  }

  public void setUnitTexture(String unitTexture) {
    this.unitTexture = unitTexture;
  }


  public DynamicDescription unitNameKey(String unitNameKey) {
    this.unitNameKey = unitNameKey;
    return this;
  }

  /**
   * Get unitNameKey
   * @return unitNameKey
   */
  @javax.annotation.Nullable
  public String getUnitNameKey() {
    return unitNameKey;
  }

  public void setUnitNameKey(String unitNameKey) {
    this.unitNameKey = unitNameKey;
  }


  public DynamicDescription abilityNameKey(String abilityNameKey) {
    this.abilityNameKey = abilityNameKey;
    return this;
  }

  /**
   * Get abilityNameKey
   * @return abilityNameKey
   */
  @javax.annotation.Nullable
  public String getAbilityNameKey() {
    return abilityNameKey;
  }

  public void setAbilityNameKey(String abilityNameKey) {
    this.abilityNameKey = abilityNameKey;
  }


  public DynamicDescription abilityDescriptionKey(String abilityDescriptionKey) {
    this.abilityDescriptionKey = abilityDescriptionKey;
    return this;
  }

  /**
   * Get abilityDescriptionKey
   * @return abilityDescriptionKey
   */
  @javax.annotation.Nullable
  public String getAbilityDescriptionKey() {
    return abilityDescriptionKey;
  }

  public void setAbilityDescriptionKey(String abilityDescriptionKey) {
    this.abilityDescriptionKey = abilityDescriptionKey;
  }


  public DynamicDescription abilityTexture(String abilityTexture) {
    this.abilityTexture = abilityTexture;
    return this;
  }

  /**
   * Get abilityTexture
   * @return abilityTexture
   */
  @javax.annotation.Nullable
  public String getAbilityTexture() {
    return abilityTexture;
  }

  public void setAbilityTexture(String abilityTexture) {
    this.abilityTexture = abilityTexture;
  }


  public DynamicDescription headerKey(String headerKey) {
    this.headerKey = headerKey;
    return this;
  }

  /**
   * Get headerKey
   * @return headerKey
   */
  @javax.annotation.Nullable
  public String getHeaderKey() {
    return headerKey;
  }

  public void setHeaderKey(String headerKey) {
    this.headerKey = headerKey;
  }


  public DynamicDescription textKey(String textKey) {
    this.textKey = textKey;
    return this;
  }

  /**
   * Get textKey
   * @return textKey
   */
  @javax.annotation.Nullable
  public String getTextKey() {
    return textKey;
  }

  public void setTextKey(String textKey) {
    this.textKey = textKey;
  }


  public DynamicDescription marginLeft(Integer marginLeft) {
    this.marginLeft = marginLeft;
    return this;
  }

  /**
   * Get marginLeft
   * @return marginLeft
   */
  @javax.annotation.Nullable
  public Integer getMarginLeft() {
    return marginLeft;
  }

  public void setMarginLeft(Integer marginLeft) {
    this.marginLeft = marginLeft;
  }


  public DynamicDescription textColumn(List<DynamicDescriptionTextColumn> textColumn) {
    this.textColumn = textColumn;
    return this;
  }

  public DynamicDescription addTextColumnItem(DynamicDescriptionTextColumn textColumnItem) {
    if (this.textColumn == null) {
      this.textColumn = new ArrayList<>();
    }
    this.textColumn.add(textColumnItem);
    return this;
  }

  /**
   * Get textColumn
   * @return textColumn
   */
  @javax.annotation.Nullable
  public List<DynamicDescriptionTextColumn> getTextColumn() {
    return textColumn;
  }

  public void setTextColumn(List<DynamicDescriptionTextColumn> textColumn) {
    this.textColumn = textColumn;
  }


  public DynamicDescription textAlignment(DynamicDescriptionTextAlignmentType textAlignment) {
    this.textAlignment = textAlignment;
    return this;
  }

  /**
   * Get textAlignment
   * @return textAlignment
   */
  @javax.annotation.Nullable
  public DynamicDescriptionTextAlignmentType getTextAlignment() {
    return textAlignment;
  }

  public void setTextAlignment(DynamicDescriptionTextAlignmentType textAlignment) {
    this.textAlignment = textAlignment;
  }


  public DynamicDescription backgroundOverrideSprite(String backgroundOverrideSprite) {
    this.backgroundOverrideSprite = backgroundOverrideSprite;
    return this;
  }

  /**
   * Get backgroundOverrideSprite
   * @return backgroundOverrideSprite
   */
  @javax.annotation.Nullable
  public String getBackgroundOverrideSprite() {
    return backgroundOverrideSprite;
  }

  public void setBackgroundOverrideSprite(String backgroundOverrideSprite) {
    this.backgroundOverrideSprite = backgroundOverrideSprite;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicDescription dynamicDescription = (DynamicDescription) o;
    return Objects.equals(this.descriptionType, dynamicDescription.descriptionType) &&
        Objects.equals(this.unitTexture, dynamicDescription.unitTexture) &&
        Objects.equals(this.unitNameKey, dynamicDescription.unitNameKey) &&
        Objects.equals(this.abilityNameKey, dynamicDescription.abilityNameKey) &&
        Objects.equals(this.abilityDescriptionKey, dynamicDescription.abilityDescriptionKey) &&
        Objects.equals(this.abilityTexture, dynamicDescription.abilityTexture) &&
        Objects.equals(this.headerKey, dynamicDescription.headerKey) &&
        Objects.equals(this.textKey, dynamicDescription.textKey) &&
        Objects.equals(this.marginLeft, dynamicDescription.marginLeft) &&
        Objects.equals(this.textColumn, dynamicDescription.textColumn) &&
        Objects.equals(this.textAlignment, dynamicDescription.textAlignment) &&
        Objects.equals(this.backgroundOverrideSprite, dynamicDescription.backgroundOverrideSprite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descriptionType, unitTexture, unitNameKey, abilityNameKey, abilityDescriptionKey, abilityTexture, headerKey, textKey, marginLeft, textColumn, textAlignment, backgroundOverrideSprite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicDescription {\n");
    sb.append("    descriptionType: ").append(toIndentedString(descriptionType)).append("\n");
    sb.append("    unitTexture: ").append(toIndentedString(unitTexture)).append("\n");
    sb.append("    unitNameKey: ").append(toIndentedString(unitNameKey)).append("\n");
    sb.append("    abilityNameKey: ").append(toIndentedString(abilityNameKey)).append("\n");
    sb.append("    abilityDescriptionKey: ").append(toIndentedString(abilityDescriptionKey)).append("\n");
    sb.append("    abilityTexture: ").append(toIndentedString(abilityTexture)).append("\n");
    sb.append("    headerKey: ").append(toIndentedString(headerKey)).append("\n");
    sb.append("    textKey: ").append(toIndentedString(textKey)).append("\n");
    sb.append("    marginLeft: ").append(toIndentedString(marginLeft)).append("\n");
    sb.append("    textColumn: ").append(toIndentedString(textColumn)).append("\n");
    sb.append("    textAlignment: ").append(toIndentedString(textAlignment)).append("\n");
    sb.append("    backgroundOverrideSprite: ").append(toIndentedString(backgroundOverrideSprite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("descriptionType");
    openapiFields.add("unitTexture");
    openapiFields.add("unitNameKey");
    openapiFields.add("abilityNameKey");
    openapiFields.add("abilityDescriptionKey");
    openapiFields.add("abilityTexture");
    openapiFields.add("headerKey");
    openapiFields.add("textKey");
    openapiFields.add("marginLeft");
    openapiFields.add("textColumn");
    openapiFields.add("textAlignment");
    openapiFields.add("backgroundOverrideSprite");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicDescription is not found in the empty JSON string", DynamicDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `descriptionType`
      if (jsonObj.get("descriptionType") != null && !jsonObj.get("descriptionType").isJsonNull()) {
        DynamicDescriptionType.validateJsonElement(jsonObj.get("descriptionType"));
      }
      if ((jsonObj.get("unitTexture") != null && !jsonObj.get("unitTexture").isJsonNull()) && !jsonObj.get("unitTexture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitTexture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitTexture").toString()));
      }
      if ((jsonObj.get("unitNameKey") != null && !jsonObj.get("unitNameKey").isJsonNull()) && !jsonObj.get("unitNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitNameKey").toString()));
      }
      if ((jsonObj.get("abilityNameKey") != null && !jsonObj.get("abilityNameKey").isJsonNull()) && !jsonObj.get("abilityNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abilityNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abilityNameKey").toString()));
      }
      if ((jsonObj.get("abilityDescriptionKey") != null && !jsonObj.get("abilityDescriptionKey").isJsonNull()) && !jsonObj.get("abilityDescriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abilityDescriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abilityDescriptionKey").toString()));
      }
      if ((jsonObj.get("abilityTexture") != null && !jsonObj.get("abilityTexture").isJsonNull()) && !jsonObj.get("abilityTexture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abilityTexture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abilityTexture").toString()));
      }
      if ((jsonObj.get("headerKey") != null && !jsonObj.get("headerKey").isJsonNull()) && !jsonObj.get("headerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headerKey").toString()));
      }
      if ((jsonObj.get("textKey") != null && !jsonObj.get("textKey").isJsonNull()) && !jsonObj.get("textKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textKey").toString()));
      }
      if (jsonObj.get("textColumn") != null && !jsonObj.get("textColumn").isJsonNull()) {
        JsonArray jsonArraytextColumn = jsonObj.getAsJsonArray("textColumn");
        if (jsonArraytextColumn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textColumn").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textColumn` to be an array in the JSON string but got `%s`", jsonObj.get("textColumn").toString()));
          }

          // validate the optional field `textColumn` (array)
          for (int i = 0; i < jsonArraytextColumn.size(); i++) {
            DynamicDescriptionTextColumn.validateJsonElement(jsonArraytextColumn.get(i));
          };
        }
      }
      // validate the optional field `textAlignment`
      if (jsonObj.get("textAlignment") != null && !jsonObj.get("textAlignment").isJsonNull()) {
        DynamicDescriptionTextAlignmentType.validateJsonElement(jsonObj.get("textAlignment"));
      }
      if ((jsonObj.get("backgroundOverrideSprite") != null && !jsonObj.get("backgroundOverrideSprite").isJsonNull()) && !jsonObj.get("backgroundOverrideSprite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundOverrideSprite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundOverrideSprite").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicDescription>() {
           @Override
           public void write(JsonWriter out, DynamicDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicDescription
   * @throws IOException if the JSON string is invalid with respect to DynamicDescription
   */
  public static DynamicDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicDescription.class);
  }

  /**
   * Convert an instance of DynamicDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

