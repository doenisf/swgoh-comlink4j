/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.DynamicDescription;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.RankRewardPreview;
import io.github.doenisf.comlink4j.model.TerritoryLocalNote;
import io.github.doenisf.comlink4j.model.TerritoryTournamentConflictZoneDefinition;
import io.github.doenisf.comlink4j.model.TerritoryTournamentDuelZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * TerritoryTournamentDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class TerritoryTournamentDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESCRIPTION_KEY = "descriptionKey";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_KEY)
  private String descriptionKey;

  public static final String SERIALIZED_NAME_PREFAB_NAME = "prefabName";
  @SerializedName(SERIALIZED_NAME_PREFAB_NAME)
  private String prefabName;

  public static final String SERIALIZED_NAME_ICON_PREFAB = "iconPrefab";
  @SerializedName(SERIALIZED_NAME_ICON_PREFAB)
  private String iconPrefab;

  public static final String SERIALIZED_NAME_DETAIL_IMAGE = "detailImage";
  @SerializedName(SERIALIZED_NAME_DETAIL_IMAGE)
  private String detailImage;

  public static final String SERIALIZED_NAME_TERRITORY_CATEGORY = "territoryCategory";
  @SerializedName(SERIALIZED_NAME_TERRITORY_CATEGORY)
  private String territoryCategory;

  public static final String SERIALIZED_NAME_MINIMAP_PREFAB = "minimapPrefab";
  @SerializedName(SERIALIZED_NAME_MINIMAP_PREFAB)
  private String minimapPrefab;

  public static final String SERIALIZED_NAME_ROUND_COUNT = "roundCount";
  @SerializedName(SERIALIZED_NAME_ROUND_COUNT)
  private Integer roundCount;

  public static final String SERIALIZED_NAME_ROUND_TALLY_DURATION = "roundTallyDuration";
  @SerializedName(SERIALIZED_NAME_ROUND_TALLY_DURATION)
  private Integer roundTallyDuration;

  public static final String SERIALIZED_NAME_MATCHMAKING_DURATION = "matchmakingDuration";
  @SerializedName(SERIALIZED_NAME_MATCHMAKING_DURATION)
  private Integer matchmakingDuration;

  public static final String SERIALIZED_NAME_DYNAMIC_DESCRIPTION = "dynamicDescription";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DESCRIPTION)
  private List<DynamicDescription> dynamicDescription = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLETE_RANK_REWARD_PREVIEW = "completeRankRewardPreview";
  @SerializedName(SERIALIZED_NAME_COMPLETE_RANK_REWARD_PREVIEW)
  private List<RankRewardPreview> completeRankRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRANTED_ABILITIES = "grantedAbilities";
  @SerializedName(SERIALIZED_NAME_GRANTED_ABILITIES)
  private List<MissionGrantedAbility> grantedAbilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCAL_NOTIFICATIONS = "localNotifications";
  @SerializedName(SERIALIZED_NAME_LOCAL_NOTIFICATIONS)
  private List<TerritoryLocalNote> localNotifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICT_SETUP_DURING_ATTACK_PHASE = "restrictSetupDuringAttackPhase";
  @SerializedName(SERIALIZED_NAME_RESTRICT_SETUP_DURING_ATTACK_PHASE)
  private Boolean restrictSetupDuringAttackPhase;

  public static final String SERIALIZED_NAME_CONFLICT_ZONE_DEFINITION = "conflictZoneDefinition";
  @SerializedName(SERIALIZED_NAME_CONFLICT_ZONE_DEFINITION)
  private List<TerritoryTournamentConflictZoneDefinition> conflictZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_DUEL_ZONE_DEFINITION = "duelZoneDefinition";
  @SerializedName(SERIALIZED_NAME_DUEL_ZONE_DEFINITION)
  private List<TerritoryTournamentDuelZoneDefinition> duelZoneDefinition = new ArrayList<>();

  public static final String SERIALIZED_NAME_NO_JOIN_DURATION = "noJoinDuration";
  @SerializedName(SERIALIZED_NAME_NO_JOIN_DURATION)
  private Integer noJoinDuration;

  public static final String SERIALIZED_NAME_DEFENSIVE_CHARACTER_DEPLOY_WARNING_THRESHOLD = "defensiveCharacterDeployWarningThreshold";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_CHARACTER_DEPLOY_WARNING_THRESHOLD)
  private Float defensiveCharacterDeployWarningThreshold;

  public static final String SERIALIZED_NAME_DEFENSIVE_SHIP_DEPLOY_WARNING_THRESHOLD = "defensiveShipDeployWarningThreshold";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_SHIP_DEPLOY_WARNING_THRESHOLD)
  private Float defensiveShipDeployWarningThreshold;

  public static final String SERIALIZED_NAME_MATCH_COUNT = "matchCount";
  @SerializedName(SERIALIZED_NAME_MATCH_COUNT)
  private Integer matchCount;

  public static final String SERIALIZED_NAME_ROUND_REWARD_PREVIEW = "roundRewardPreview";
  @SerializedName(SERIALIZED_NAME_ROUND_REWARD_PREVIEW)
  private List<RankRewardPreview> roundRewardPreview = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_POINTS_PER_BANNER_PERCENT = "seasonPointsPerBannerPercent";
  @SerializedName(SERIALIZED_NAME_SEASON_POINTS_PER_BANNER_PERCENT)
  private Integer seasonPointsPerBannerPercent;

  public static final String SERIALIZED_NAME_ROUND_SEASON_REWARD_TABLE_ID = "roundSeasonRewardTableId";
  @SerializedName(SERIALIZED_NAME_ROUND_SEASON_REWARD_TABLE_ID)
  private String roundSeasonRewardTableId;

  public static final String SERIALIZED_NAME_MINIMUM_BANNER_ROUND_REWARD_THRESHOLD = "minimumBannerRoundRewardThreshold";
  @SerializedName(SERIALIZED_NAME_MINIMUM_BANNER_ROUND_REWARD_THRESHOLD)
  private Integer minimumBannerRoundRewardThreshold;

  public static final String SERIALIZED_NAME_MINIMUM_BANNER_EVENT_REWARD_THRESHOLD = "minimumBannerEventRewardThreshold";
  @SerializedName(SERIALIZED_NAME_MINIMUM_BANNER_EVENT_REWARD_THRESHOLD)
  private Integer minimumBannerEventRewardThreshold;

  public static final String SERIALIZED_NAME_SAVED_SQUAD_CONFIG_ID = "savedSquadConfigId";
  @SerializedName(SERIALIZED_NAME_SAVED_SQUAD_CONFIG_ID)
  private String savedSquadConfigId;

  public TerritoryTournamentDefinition() {
  }

  public TerritoryTournamentDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TerritoryTournamentDefinition nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public TerritoryTournamentDefinition descriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
    return this;
  }

  /**
   * Get descriptionKey
   * @return descriptionKey
   */
  @javax.annotation.Nullable
  public String getDescriptionKey() {
    return descriptionKey;
  }

  public void setDescriptionKey(String descriptionKey) {
    this.descriptionKey = descriptionKey;
  }


  public TerritoryTournamentDefinition prefabName(String prefabName) {
    this.prefabName = prefabName;
    return this;
  }

  /**
   * Get prefabName
   * @return prefabName
   */
  @javax.annotation.Nullable
  public String getPrefabName() {
    return prefabName;
  }

  public void setPrefabName(String prefabName) {
    this.prefabName = prefabName;
  }


  public TerritoryTournamentDefinition iconPrefab(String iconPrefab) {
    this.iconPrefab = iconPrefab;
    return this;
  }

  /**
   * Get iconPrefab
   * @return iconPrefab
   */
  @javax.annotation.Nullable
  public String getIconPrefab() {
    return iconPrefab;
  }

  public void setIconPrefab(String iconPrefab) {
    this.iconPrefab = iconPrefab;
  }


  public TerritoryTournamentDefinition detailImage(String detailImage) {
    this.detailImage = detailImage;
    return this;
  }

  /**
   * Get detailImage
   * @return detailImage
   */
  @javax.annotation.Nullable
  public String getDetailImage() {
    return detailImage;
  }

  public void setDetailImage(String detailImage) {
    this.detailImage = detailImage;
  }


  public TerritoryTournamentDefinition territoryCategory(String territoryCategory) {
    this.territoryCategory = territoryCategory;
    return this;
  }

  /**
   * Get territoryCategory
   * @return territoryCategory
   */
  @javax.annotation.Nullable
  public String getTerritoryCategory() {
    return territoryCategory;
  }

  public void setTerritoryCategory(String territoryCategory) {
    this.territoryCategory = territoryCategory;
  }


  public TerritoryTournamentDefinition minimapPrefab(String minimapPrefab) {
    this.minimapPrefab = minimapPrefab;
    return this;
  }

  /**
   * Get minimapPrefab
   * @return minimapPrefab
   */
  @javax.annotation.Nullable
  public String getMinimapPrefab() {
    return minimapPrefab;
  }

  public void setMinimapPrefab(String minimapPrefab) {
    this.minimapPrefab = minimapPrefab;
  }


  public TerritoryTournamentDefinition roundCount(Integer roundCount) {
    this.roundCount = roundCount;
    return this;
  }

  /**
   * Get roundCount
   * @return roundCount
   */
  @javax.annotation.Nullable
  public Integer getRoundCount() {
    return roundCount;
  }

  public void setRoundCount(Integer roundCount) {
    this.roundCount = roundCount;
  }


  public TerritoryTournamentDefinition roundTallyDuration(Integer roundTallyDuration) {
    this.roundTallyDuration = roundTallyDuration;
    return this;
  }

  /**
   * Get roundTallyDuration
   * @return roundTallyDuration
   */
  @javax.annotation.Nullable
  public Integer getRoundTallyDuration() {
    return roundTallyDuration;
  }

  public void setRoundTallyDuration(Integer roundTallyDuration) {
    this.roundTallyDuration = roundTallyDuration;
  }


  public TerritoryTournamentDefinition matchmakingDuration(Integer matchmakingDuration) {
    this.matchmakingDuration = matchmakingDuration;
    return this;
  }

  /**
   * Get matchmakingDuration
   * @return matchmakingDuration
   */
  @javax.annotation.Nullable
  public Integer getMatchmakingDuration() {
    return matchmakingDuration;
  }

  public void setMatchmakingDuration(Integer matchmakingDuration) {
    this.matchmakingDuration = matchmakingDuration;
  }


  public TerritoryTournamentDefinition dynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
    return this;
  }

  public TerritoryTournamentDefinition addDynamicDescriptionItem(DynamicDescription dynamicDescriptionItem) {
    if (this.dynamicDescription == null) {
      this.dynamicDescription = new ArrayList<>();
    }
    this.dynamicDescription.add(dynamicDescriptionItem);
    return this;
  }

  /**
   * Get dynamicDescription
   * @return dynamicDescription
   */
  @javax.annotation.Nullable
  public List<DynamicDescription> getDynamicDescription() {
    return dynamicDescription;
  }

  public void setDynamicDescription(List<DynamicDescription> dynamicDescription) {
    this.dynamicDescription = dynamicDescription;
  }


  public TerritoryTournamentDefinition completeRankRewardPreview(List<RankRewardPreview> completeRankRewardPreview) {
    this.completeRankRewardPreview = completeRankRewardPreview;
    return this;
  }

  public TerritoryTournamentDefinition addCompleteRankRewardPreviewItem(RankRewardPreview completeRankRewardPreviewItem) {
    if (this.completeRankRewardPreview == null) {
      this.completeRankRewardPreview = new ArrayList<>();
    }
    this.completeRankRewardPreview.add(completeRankRewardPreviewItem);
    return this;
  }

  /**
   * Get completeRankRewardPreview
   * @return completeRankRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getCompleteRankRewardPreview() {
    return completeRankRewardPreview;
  }

  public void setCompleteRankRewardPreview(List<RankRewardPreview> completeRankRewardPreview) {
    this.completeRankRewardPreview = completeRankRewardPreview;
  }


  public TerritoryTournamentDefinition grantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
    return this;
  }

  public TerritoryTournamentDefinition addGrantedAbilitiesItem(MissionGrantedAbility grantedAbilitiesItem) {
    if (this.grantedAbilities == null) {
      this.grantedAbilities = new ArrayList<>();
    }
    this.grantedAbilities.add(grantedAbilitiesItem);
    return this;
  }

  /**
   * Get grantedAbilities
   * @return grantedAbilities
   */
  @javax.annotation.Nullable
  public List<MissionGrantedAbility> getGrantedAbilities() {
    return grantedAbilities;
  }

  public void setGrantedAbilities(List<MissionGrantedAbility> grantedAbilities) {
    this.grantedAbilities = grantedAbilities;
  }


  public TerritoryTournamentDefinition localNotifications(List<TerritoryLocalNote> localNotifications) {
    this.localNotifications = localNotifications;
    return this;
  }

  public TerritoryTournamentDefinition addLocalNotificationsItem(TerritoryLocalNote localNotificationsItem) {
    if (this.localNotifications == null) {
      this.localNotifications = new ArrayList<>();
    }
    this.localNotifications.add(localNotificationsItem);
    return this;
  }

  /**
   * Get localNotifications
   * @return localNotifications
   */
  @javax.annotation.Nullable
  public List<TerritoryLocalNote> getLocalNotifications() {
    return localNotifications;
  }

  public void setLocalNotifications(List<TerritoryLocalNote> localNotifications) {
    this.localNotifications = localNotifications;
  }


  public TerritoryTournamentDefinition restrictSetupDuringAttackPhase(Boolean restrictSetupDuringAttackPhase) {
    this.restrictSetupDuringAttackPhase = restrictSetupDuringAttackPhase;
    return this;
  }

  /**
   * Get restrictSetupDuringAttackPhase
   * @return restrictSetupDuringAttackPhase
   */
  @javax.annotation.Nullable
  public Boolean getRestrictSetupDuringAttackPhase() {
    return restrictSetupDuringAttackPhase;
  }

  public void setRestrictSetupDuringAttackPhase(Boolean restrictSetupDuringAttackPhase) {
    this.restrictSetupDuringAttackPhase = restrictSetupDuringAttackPhase;
  }


  public TerritoryTournamentDefinition conflictZoneDefinition(List<TerritoryTournamentConflictZoneDefinition> conflictZoneDefinition) {
    this.conflictZoneDefinition = conflictZoneDefinition;
    return this;
  }

  public TerritoryTournamentDefinition addConflictZoneDefinitionItem(TerritoryTournamentConflictZoneDefinition conflictZoneDefinitionItem) {
    if (this.conflictZoneDefinition == null) {
      this.conflictZoneDefinition = new ArrayList<>();
    }
    this.conflictZoneDefinition.add(conflictZoneDefinitionItem);
    return this;
  }

  /**
   * Get conflictZoneDefinition
   * @return conflictZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryTournamentConflictZoneDefinition> getConflictZoneDefinition() {
    return conflictZoneDefinition;
  }

  public void setConflictZoneDefinition(List<TerritoryTournamentConflictZoneDefinition> conflictZoneDefinition) {
    this.conflictZoneDefinition = conflictZoneDefinition;
  }


  public TerritoryTournamentDefinition duelZoneDefinition(List<TerritoryTournamentDuelZoneDefinition> duelZoneDefinition) {
    this.duelZoneDefinition = duelZoneDefinition;
    return this;
  }

  public TerritoryTournamentDefinition addDuelZoneDefinitionItem(TerritoryTournamentDuelZoneDefinition duelZoneDefinitionItem) {
    if (this.duelZoneDefinition == null) {
      this.duelZoneDefinition = new ArrayList<>();
    }
    this.duelZoneDefinition.add(duelZoneDefinitionItem);
    return this;
  }

  /**
   * Get duelZoneDefinition
   * @return duelZoneDefinition
   */
  @javax.annotation.Nullable
  public List<TerritoryTournamentDuelZoneDefinition> getDuelZoneDefinition() {
    return duelZoneDefinition;
  }

  public void setDuelZoneDefinition(List<TerritoryTournamentDuelZoneDefinition> duelZoneDefinition) {
    this.duelZoneDefinition = duelZoneDefinition;
  }


  public TerritoryTournamentDefinition noJoinDuration(Integer noJoinDuration) {
    this.noJoinDuration = noJoinDuration;
    return this;
  }

  /**
   * Get noJoinDuration
   * @return noJoinDuration
   */
  @javax.annotation.Nullable
  public Integer getNoJoinDuration() {
    return noJoinDuration;
  }

  public void setNoJoinDuration(Integer noJoinDuration) {
    this.noJoinDuration = noJoinDuration;
  }


  public TerritoryTournamentDefinition defensiveCharacterDeployWarningThreshold(Float defensiveCharacterDeployWarningThreshold) {
    this.defensiveCharacterDeployWarningThreshold = defensiveCharacterDeployWarningThreshold;
    return this;
  }

  /**
   * Get defensiveCharacterDeployWarningThreshold
   * @return defensiveCharacterDeployWarningThreshold
   */
  @javax.annotation.Nullable
  public Float getDefensiveCharacterDeployWarningThreshold() {
    return defensiveCharacterDeployWarningThreshold;
  }

  public void setDefensiveCharacterDeployWarningThreshold(Float defensiveCharacterDeployWarningThreshold) {
    this.defensiveCharacterDeployWarningThreshold = defensiveCharacterDeployWarningThreshold;
  }


  public TerritoryTournamentDefinition defensiveShipDeployWarningThreshold(Float defensiveShipDeployWarningThreshold) {
    this.defensiveShipDeployWarningThreshold = defensiveShipDeployWarningThreshold;
    return this;
  }

  /**
   * Get defensiveShipDeployWarningThreshold
   * @return defensiveShipDeployWarningThreshold
   */
  @javax.annotation.Nullable
  public Float getDefensiveShipDeployWarningThreshold() {
    return defensiveShipDeployWarningThreshold;
  }

  public void setDefensiveShipDeployWarningThreshold(Float defensiveShipDeployWarningThreshold) {
    this.defensiveShipDeployWarningThreshold = defensiveShipDeployWarningThreshold;
  }


  public TerritoryTournamentDefinition matchCount(Integer matchCount) {
    this.matchCount = matchCount;
    return this;
  }

  /**
   * Get matchCount
   * @return matchCount
   */
  @javax.annotation.Nullable
  public Integer getMatchCount() {
    return matchCount;
  }

  public void setMatchCount(Integer matchCount) {
    this.matchCount = matchCount;
  }


  public TerritoryTournamentDefinition roundRewardPreview(List<RankRewardPreview> roundRewardPreview) {
    this.roundRewardPreview = roundRewardPreview;
    return this;
  }

  public TerritoryTournamentDefinition addRoundRewardPreviewItem(RankRewardPreview roundRewardPreviewItem) {
    if (this.roundRewardPreview == null) {
      this.roundRewardPreview = new ArrayList<>();
    }
    this.roundRewardPreview.add(roundRewardPreviewItem);
    return this;
  }

  /**
   * Get roundRewardPreview
   * @return roundRewardPreview
   */
  @javax.annotation.Nullable
  public List<RankRewardPreview> getRoundRewardPreview() {
    return roundRewardPreview;
  }

  public void setRoundRewardPreview(List<RankRewardPreview> roundRewardPreview) {
    this.roundRewardPreview = roundRewardPreview;
  }


  public TerritoryTournamentDefinition seasonPointsPerBannerPercent(Integer seasonPointsPerBannerPercent) {
    this.seasonPointsPerBannerPercent = seasonPointsPerBannerPercent;
    return this;
  }

  /**
   * Get seasonPointsPerBannerPercent
   * @return seasonPointsPerBannerPercent
   */
  @javax.annotation.Nullable
  public Integer getSeasonPointsPerBannerPercent() {
    return seasonPointsPerBannerPercent;
  }

  public void setSeasonPointsPerBannerPercent(Integer seasonPointsPerBannerPercent) {
    this.seasonPointsPerBannerPercent = seasonPointsPerBannerPercent;
  }


  public TerritoryTournamentDefinition roundSeasonRewardTableId(String roundSeasonRewardTableId) {
    this.roundSeasonRewardTableId = roundSeasonRewardTableId;
    return this;
  }

  /**
   * Get roundSeasonRewardTableId
   * @return roundSeasonRewardTableId
   */
  @javax.annotation.Nullable
  public String getRoundSeasonRewardTableId() {
    return roundSeasonRewardTableId;
  }

  public void setRoundSeasonRewardTableId(String roundSeasonRewardTableId) {
    this.roundSeasonRewardTableId = roundSeasonRewardTableId;
  }


  public TerritoryTournamentDefinition minimumBannerRoundRewardThreshold(Integer minimumBannerRoundRewardThreshold) {
    this.minimumBannerRoundRewardThreshold = minimumBannerRoundRewardThreshold;
    return this;
  }

  /**
   * Get minimumBannerRoundRewardThreshold
   * @return minimumBannerRoundRewardThreshold
   */
  @javax.annotation.Nullable
  public Integer getMinimumBannerRoundRewardThreshold() {
    return minimumBannerRoundRewardThreshold;
  }

  public void setMinimumBannerRoundRewardThreshold(Integer minimumBannerRoundRewardThreshold) {
    this.minimumBannerRoundRewardThreshold = minimumBannerRoundRewardThreshold;
  }


  public TerritoryTournamentDefinition minimumBannerEventRewardThreshold(Integer minimumBannerEventRewardThreshold) {
    this.minimumBannerEventRewardThreshold = minimumBannerEventRewardThreshold;
    return this;
  }

  /**
   * Get minimumBannerEventRewardThreshold
   * @return minimumBannerEventRewardThreshold
   */
  @javax.annotation.Nullable
  public Integer getMinimumBannerEventRewardThreshold() {
    return minimumBannerEventRewardThreshold;
  }

  public void setMinimumBannerEventRewardThreshold(Integer minimumBannerEventRewardThreshold) {
    this.minimumBannerEventRewardThreshold = minimumBannerEventRewardThreshold;
  }


  public TerritoryTournamentDefinition savedSquadConfigId(String savedSquadConfigId) {
    this.savedSquadConfigId = savedSquadConfigId;
    return this;
  }

  /**
   * Get savedSquadConfigId
   * @return savedSquadConfigId
   */
  @javax.annotation.Nullable
  public String getSavedSquadConfigId() {
    return savedSquadConfigId;
  }

  public void setSavedSquadConfigId(String savedSquadConfigId) {
    this.savedSquadConfigId = savedSquadConfigId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerritoryTournamentDefinition territoryTournamentDefinition = (TerritoryTournamentDefinition) o;
    return Objects.equals(this.id, territoryTournamentDefinition.id) &&
        Objects.equals(this.nameKey, territoryTournamentDefinition.nameKey) &&
        Objects.equals(this.descriptionKey, territoryTournamentDefinition.descriptionKey) &&
        Objects.equals(this.prefabName, territoryTournamentDefinition.prefabName) &&
        Objects.equals(this.iconPrefab, territoryTournamentDefinition.iconPrefab) &&
        Objects.equals(this.detailImage, territoryTournamentDefinition.detailImage) &&
        Objects.equals(this.territoryCategory, territoryTournamentDefinition.territoryCategory) &&
        Objects.equals(this.minimapPrefab, territoryTournamentDefinition.minimapPrefab) &&
        Objects.equals(this.roundCount, territoryTournamentDefinition.roundCount) &&
        Objects.equals(this.roundTallyDuration, territoryTournamentDefinition.roundTallyDuration) &&
        Objects.equals(this.matchmakingDuration, territoryTournamentDefinition.matchmakingDuration) &&
        Objects.equals(this.dynamicDescription, territoryTournamentDefinition.dynamicDescription) &&
        Objects.equals(this.completeRankRewardPreview, territoryTournamentDefinition.completeRankRewardPreview) &&
        Objects.equals(this.grantedAbilities, territoryTournamentDefinition.grantedAbilities) &&
        Objects.equals(this.localNotifications, territoryTournamentDefinition.localNotifications) &&
        Objects.equals(this.restrictSetupDuringAttackPhase, territoryTournamentDefinition.restrictSetupDuringAttackPhase) &&
        Objects.equals(this.conflictZoneDefinition, territoryTournamentDefinition.conflictZoneDefinition) &&
        Objects.equals(this.duelZoneDefinition, territoryTournamentDefinition.duelZoneDefinition) &&
        Objects.equals(this.noJoinDuration, territoryTournamentDefinition.noJoinDuration) &&
        Objects.equals(this.defensiveCharacterDeployWarningThreshold, territoryTournamentDefinition.defensiveCharacterDeployWarningThreshold) &&
        Objects.equals(this.defensiveShipDeployWarningThreshold, territoryTournamentDefinition.defensiveShipDeployWarningThreshold) &&
        Objects.equals(this.matchCount, territoryTournamentDefinition.matchCount) &&
        Objects.equals(this.roundRewardPreview, territoryTournamentDefinition.roundRewardPreview) &&
        Objects.equals(this.seasonPointsPerBannerPercent, territoryTournamentDefinition.seasonPointsPerBannerPercent) &&
        Objects.equals(this.roundSeasonRewardTableId, territoryTournamentDefinition.roundSeasonRewardTableId) &&
        Objects.equals(this.minimumBannerRoundRewardThreshold, territoryTournamentDefinition.minimumBannerRoundRewardThreshold) &&
        Objects.equals(this.minimumBannerEventRewardThreshold, territoryTournamentDefinition.minimumBannerEventRewardThreshold) &&
        Objects.equals(this.savedSquadConfigId, territoryTournamentDefinition.savedSquadConfigId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameKey, descriptionKey, prefabName, iconPrefab, detailImage, territoryCategory, minimapPrefab, roundCount, roundTallyDuration, matchmakingDuration, dynamicDescription, completeRankRewardPreview, grantedAbilities, localNotifications, restrictSetupDuringAttackPhase, conflictZoneDefinition, duelZoneDefinition, noJoinDuration, defensiveCharacterDeployWarningThreshold, defensiveShipDeployWarningThreshold, matchCount, roundRewardPreview, seasonPointsPerBannerPercent, roundSeasonRewardTableId, minimumBannerRoundRewardThreshold, minimumBannerEventRewardThreshold, savedSquadConfigId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerritoryTournamentDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descriptionKey: ").append(toIndentedString(descriptionKey)).append("\n");
    sb.append("    prefabName: ").append(toIndentedString(prefabName)).append("\n");
    sb.append("    iconPrefab: ").append(toIndentedString(iconPrefab)).append("\n");
    sb.append("    detailImage: ").append(toIndentedString(detailImage)).append("\n");
    sb.append("    territoryCategory: ").append(toIndentedString(territoryCategory)).append("\n");
    sb.append("    minimapPrefab: ").append(toIndentedString(minimapPrefab)).append("\n");
    sb.append("    roundCount: ").append(toIndentedString(roundCount)).append("\n");
    sb.append("    roundTallyDuration: ").append(toIndentedString(roundTallyDuration)).append("\n");
    sb.append("    matchmakingDuration: ").append(toIndentedString(matchmakingDuration)).append("\n");
    sb.append("    dynamicDescription: ").append(toIndentedString(dynamicDescription)).append("\n");
    sb.append("    completeRankRewardPreview: ").append(toIndentedString(completeRankRewardPreview)).append("\n");
    sb.append("    grantedAbilities: ").append(toIndentedString(grantedAbilities)).append("\n");
    sb.append("    localNotifications: ").append(toIndentedString(localNotifications)).append("\n");
    sb.append("    restrictSetupDuringAttackPhase: ").append(toIndentedString(restrictSetupDuringAttackPhase)).append("\n");
    sb.append("    conflictZoneDefinition: ").append(toIndentedString(conflictZoneDefinition)).append("\n");
    sb.append("    duelZoneDefinition: ").append(toIndentedString(duelZoneDefinition)).append("\n");
    sb.append("    noJoinDuration: ").append(toIndentedString(noJoinDuration)).append("\n");
    sb.append("    defensiveCharacterDeployWarningThreshold: ").append(toIndentedString(defensiveCharacterDeployWarningThreshold)).append("\n");
    sb.append("    defensiveShipDeployWarningThreshold: ").append(toIndentedString(defensiveShipDeployWarningThreshold)).append("\n");
    sb.append("    matchCount: ").append(toIndentedString(matchCount)).append("\n");
    sb.append("    roundRewardPreview: ").append(toIndentedString(roundRewardPreview)).append("\n");
    sb.append("    seasonPointsPerBannerPercent: ").append(toIndentedString(seasonPointsPerBannerPercent)).append("\n");
    sb.append("    roundSeasonRewardTableId: ").append(toIndentedString(roundSeasonRewardTableId)).append("\n");
    sb.append("    minimumBannerRoundRewardThreshold: ").append(toIndentedString(minimumBannerRoundRewardThreshold)).append("\n");
    sb.append("    minimumBannerEventRewardThreshold: ").append(toIndentedString(minimumBannerEventRewardThreshold)).append("\n");
    sb.append("    savedSquadConfigId: ").append(toIndentedString(savedSquadConfigId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameKey");
    openapiFields.add("descriptionKey");
    openapiFields.add("prefabName");
    openapiFields.add("iconPrefab");
    openapiFields.add("detailImage");
    openapiFields.add("territoryCategory");
    openapiFields.add("minimapPrefab");
    openapiFields.add("roundCount");
    openapiFields.add("roundTallyDuration");
    openapiFields.add("matchmakingDuration");
    openapiFields.add("dynamicDescription");
    openapiFields.add("completeRankRewardPreview");
    openapiFields.add("grantedAbilities");
    openapiFields.add("localNotifications");
    openapiFields.add("restrictSetupDuringAttackPhase");
    openapiFields.add("conflictZoneDefinition");
    openapiFields.add("duelZoneDefinition");
    openapiFields.add("noJoinDuration");
    openapiFields.add("defensiveCharacterDeployWarningThreshold");
    openapiFields.add("defensiveShipDeployWarningThreshold");
    openapiFields.add("matchCount");
    openapiFields.add("roundRewardPreview");
    openapiFields.add("seasonPointsPerBannerPercent");
    openapiFields.add("roundSeasonRewardTableId");
    openapiFields.add("minimumBannerRoundRewardThreshold");
    openapiFields.add("minimumBannerEventRewardThreshold");
    openapiFields.add("savedSquadConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerritoryTournamentDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerritoryTournamentDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerritoryTournamentDefinition is not found in the empty JSON string", TerritoryTournamentDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerritoryTournamentDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerritoryTournamentDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descriptionKey") != null && !jsonObj.get("descriptionKey").isJsonNull()) && !jsonObj.get("descriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionKey").toString()));
      }
      if ((jsonObj.get("prefabName") != null && !jsonObj.get("prefabName").isJsonNull()) && !jsonObj.get("prefabName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefabName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefabName").toString()));
      }
      if ((jsonObj.get("iconPrefab") != null && !jsonObj.get("iconPrefab").isJsonNull()) && !jsonObj.get("iconPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconPrefab").toString()));
      }
      if ((jsonObj.get("detailImage") != null && !jsonObj.get("detailImage").isJsonNull()) && !jsonObj.get("detailImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailImage").toString()));
      }
      if ((jsonObj.get("territoryCategory") != null && !jsonObj.get("territoryCategory").isJsonNull()) && !jsonObj.get("territoryCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `territoryCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("territoryCategory").toString()));
      }
      if ((jsonObj.get("minimapPrefab") != null && !jsonObj.get("minimapPrefab").isJsonNull()) && !jsonObj.get("minimapPrefab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimapPrefab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimapPrefab").toString()));
      }
      if (jsonObj.get("dynamicDescription") != null && !jsonObj.get("dynamicDescription").isJsonNull()) {
        JsonArray jsonArraydynamicDescription = jsonObj.getAsJsonArray("dynamicDescription");
        if (jsonArraydynamicDescription != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicDescription").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicDescription` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicDescription").toString()));
          }

          // validate the optional field `dynamicDescription` (array)
          for (int i = 0; i < jsonArraydynamicDescription.size(); i++) {
            DynamicDescription.validateJsonElement(jsonArraydynamicDescription.get(i));
          };
        }
      }
      if (jsonObj.get("completeRankRewardPreview") != null && !jsonObj.get("completeRankRewardPreview").isJsonNull()) {
        JsonArray jsonArraycompleteRankRewardPreview = jsonObj.getAsJsonArray("completeRankRewardPreview");
        if (jsonArraycompleteRankRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("completeRankRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `completeRankRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("completeRankRewardPreview").toString()));
          }

          // validate the optional field `completeRankRewardPreview` (array)
          for (int i = 0; i < jsonArraycompleteRankRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArraycompleteRankRewardPreview.get(i));
          };
        }
      }
      if (jsonObj.get("grantedAbilities") != null && !jsonObj.get("grantedAbilities").isJsonNull()) {
        JsonArray jsonArraygrantedAbilities = jsonObj.getAsJsonArray("grantedAbilities");
        if (jsonArraygrantedAbilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantedAbilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantedAbilities` to be an array in the JSON string but got `%s`", jsonObj.get("grantedAbilities").toString()));
          }

          // validate the optional field `grantedAbilities` (array)
          for (int i = 0; i < jsonArraygrantedAbilities.size(); i++) {
            MissionGrantedAbility.validateJsonElement(jsonArraygrantedAbilities.get(i));
          };
        }
      }
      if (jsonObj.get("localNotifications") != null && !jsonObj.get("localNotifications").isJsonNull()) {
        JsonArray jsonArraylocalNotifications = jsonObj.getAsJsonArray("localNotifications");
        if (jsonArraylocalNotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localNotifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localNotifications` to be an array in the JSON string but got `%s`", jsonObj.get("localNotifications").toString()));
          }

          // validate the optional field `localNotifications` (array)
          for (int i = 0; i < jsonArraylocalNotifications.size(); i++) {
            TerritoryLocalNote.validateJsonElement(jsonArraylocalNotifications.get(i));
          };
        }
      }
      if (jsonObj.get("conflictZoneDefinition") != null && !jsonObj.get("conflictZoneDefinition").isJsonNull()) {
        JsonArray jsonArrayconflictZoneDefinition = jsonObj.getAsJsonArray("conflictZoneDefinition");
        if (jsonArrayconflictZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conflictZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conflictZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("conflictZoneDefinition").toString()));
          }

          // validate the optional field `conflictZoneDefinition` (array)
          for (int i = 0; i < jsonArrayconflictZoneDefinition.size(); i++) {
            TerritoryTournamentConflictZoneDefinition.validateJsonElement(jsonArrayconflictZoneDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("duelZoneDefinition") != null && !jsonObj.get("duelZoneDefinition").isJsonNull()) {
        JsonArray jsonArrayduelZoneDefinition = jsonObj.getAsJsonArray("duelZoneDefinition");
        if (jsonArrayduelZoneDefinition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("duelZoneDefinition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `duelZoneDefinition` to be an array in the JSON string but got `%s`", jsonObj.get("duelZoneDefinition").toString()));
          }

          // validate the optional field `duelZoneDefinition` (array)
          for (int i = 0; i < jsonArrayduelZoneDefinition.size(); i++) {
            TerritoryTournamentDuelZoneDefinition.validateJsonElement(jsonArrayduelZoneDefinition.get(i));
          };
        }
      }
      if (jsonObj.get("roundRewardPreview") != null && !jsonObj.get("roundRewardPreview").isJsonNull()) {
        JsonArray jsonArrayroundRewardPreview = jsonObj.getAsJsonArray("roundRewardPreview");
        if (jsonArrayroundRewardPreview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roundRewardPreview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roundRewardPreview` to be an array in the JSON string but got `%s`", jsonObj.get("roundRewardPreview").toString()));
          }

          // validate the optional field `roundRewardPreview` (array)
          for (int i = 0; i < jsonArrayroundRewardPreview.size(); i++) {
            RankRewardPreview.validateJsonElement(jsonArrayroundRewardPreview.get(i));
          };
        }
      }
      if ((jsonObj.get("roundSeasonRewardTableId") != null && !jsonObj.get("roundSeasonRewardTableId").isJsonNull()) && !jsonObj.get("roundSeasonRewardTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roundSeasonRewardTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roundSeasonRewardTableId").toString()));
      }
      if ((jsonObj.get("savedSquadConfigId") != null && !jsonObj.get("savedSquadConfigId").isJsonNull()) && !jsonObj.get("savedSquadConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `savedSquadConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("savedSquadConfigId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerritoryTournamentDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerritoryTournamentDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerritoryTournamentDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerritoryTournamentDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TerritoryTournamentDefinition>() {
           @Override
           public void write(JsonWriter out, TerritoryTournamentDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerritoryTournamentDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerritoryTournamentDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerritoryTournamentDefinition
   * @throws IOException if the JSON string is invalid with respect to TerritoryTournamentDefinition
   */
  public static TerritoryTournamentDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerritoryTournamentDefinition.class);
  }

  /**
   * Convert an instance of TerritoryTournamentDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

