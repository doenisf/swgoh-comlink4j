/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.ActionLink;
import io.github.doenisf.comlink4j.model.BucketItem;
import io.github.doenisf.comlink4j.model.ChallengeClaimType;
import io.github.doenisf.comlink4j.model.ChallengeRewardType;
import io.github.doenisf.comlink4j.model.ChallengeTask;
import io.github.doenisf.comlink4j.model.ChallengeType;
import io.github.doenisf.comlink4j.model.ContextualMessageGroup;
import io.github.doenisf.comlink4j.model.Requirement;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.doenisf.comlink4j.JSON;

/**
 * Challenge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-05T21:53:04.897531600+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class Challenge {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChallengeType type;

  public static final String SERIALIZED_NAME_NAME_KEY = "nameKey";
  @SerializedName(SERIALIZED_NAME_NAME_KEY)
  private String nameKey;

  public static final String SERIALIZED_NAME_DESC_KEY = "descKey";
  @SerializedName(SERIALIZED_NAME_DESC_KEY)
  private String descKey;

  public static final String SERIALIZED_NAME_VIEW_REQUIREMENT = "viewRequirement";
  @SerializedName(SERIALIZED_NAME_VIEW_REQUIREMENT)
  private Requirement viewRequirement;

  public static final String SERIALIZED_NAME_REWARD = "reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private List<BucketItem> reward = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM_ACHIEVEMENT_ID = "platformAchievementId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ACHIEVEMENT_ID)
  private String platformAchievementId;

  public static final String SERIALIZED_NAME_ACTION_LINK_DEF = "actionLinkDef";
  @SerializedName(SERIALIZED_NAME_ACTION_LINK_DEF)
  private ActionLink actionLinkDef;

  public static final String SERIALIZED_NAME_CLAIM_TYPE = "claimType";
  @SerializedName(SERIALIZED_NAME_CLAIM_TYPE)
  private ChallengeClaimType claimType;

  public static final String SERIALIZED_NAME_REWARD_TYPE = "rewardType";
  @SerializedName(SERIALIZED_NAME_REWARD_TYPE)
  private ChallengeRewardType rewardType;

  public static final String SERIALIZED_NAME_REWARD_RATIO = "rewardRatio";
  @SerializedName(SERIALIZED_NAME_REWARD_RATIO)
  private Float rewardRatio;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private List<ChallengeTask> task = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_GROUP = "messageGroup";
  @SerializedName(SERIALIZED_NAME_MESSAGE_GROUP)
  private ContextualMessageGroup messageGroup;

  public static final String SERIALIZED_NAME_STYLE_ID = "styleId";
  @SerializedName(SERIALIZED_NAME_STYLE_ID)
  private String styleId;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_NEXT_CHALLENGE_ID = "nextChallengeId";
  @SerializedName(SERIALIZED_NAME_NEXT_CHALLENGE_ID)
  private String nextChallengeId;

  public static final String SERIALIZED_NAME_REWARD_DIALOG_KEY = "rewardDialogKey";
  @SerializedName(SERIALIZED_NAME_REWARD_DIALOG_KEY)
  private String rewardDialogKey;

  public static final String SERIALIZED_NAME_REWARD_REDIRECT_TO_HOME = "rewardRedirectToHome";
  @SerializedName(SERIALIZED_NAME_REWARD_REDIRECT_TO_HOME)
  private Boolean rewardRedirectToHome;

  public static final String SERIALIZED_NAME_REWARD_DESC_KEY = "rewardDescKey";
  @SerializedName(SERIALIZED_NAME_REWARD_DESC_KEY)
  private String rewardDescKey;

  public static final String SERIALIZED_NAME_STARTER_GUILD_GRADUATION = "starterGuildGraduation";
  @SerializedName(SERIALIZED_NAME_STARTER_GUILD_GRADUATION)
  private Boolean starterGuildGraduation;

  public static final String SERIALIZED_NAME_REWARD_POINTS = "rewardPoints";
  @SerializedName(SERIALIZED_NAME_REWARD_POINTS)
  private Integer rewardPoints;

  public static final String SERIALIZED_NAME_DETAILS_KEY = "detailsKey";
  @SerializedName(SERIALIZED_NAME_DETAILS_KEY)
  private String detailsKey;

  public static final String SERIALIZED_NAME_HIDDEN_IN_MAIN_QUESTS = "hiddenInMainQuests";
  @SerializedName(SERIALIZED_NAME_HIDDEN_IN_MAIN_QUESTS)
  private Boolean hiddenInMainQuests;

  public Challenge() {
  }

  public Challenge id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Challenge type(ChallengeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ChallengeType getType() {
    return type;
  }

  public void setType(ChallengeType type) {
    this.type = type;
  }


  public Challenge nameKey(String nameKey) {
    this.nameKey = nameKey;
    return this;
  }

  /**
   * Get nameKey
   * @return nameKey
   */
  @javax.annotation.Nullable
  public String getNameKey() {
    return nameKey;
  }

  public void setNameKey(String nameKey) {
    this.nameKey = nameKey;
  }


  public Challenge descKey(String descKey) {
    this.descKey = descKey;
    return this;
  }

  /**
   * Get descKey
   * @return descKey
   */
  @javax.annotation.Nullable
  public String getDescKey() {
    return descKey;
  }

  public void setDescKey(String descKey) {
    this.descKey = descKey;
  }


  public Challenge viewRequirement(Requirement viewRequirement) {
    this.viewRequirement = viewRequirement;
    return this;
  }

  /**
   * Get viewRequirement
   * @return viewRequirement
   */
  @javax.annotation.Nullable
  public Requirement getViewRequirement() {
    return viewRequirement;
  }

  public void setViewRequirement(Requirement viewRequirement) {
    this.viewRequirement = viewRequirement;
  }


  public Challenge reward(List<BucketItem> reward) {
    this.reward = reward;
    return this;
  }

  public Challenge addRewardItem(BucketItem rewardItem) {
    if (this.reward == null) {
      this.reward = new ArrayList<>();
    }
    this.reward.add(rewardItem);
    return this;
  }

  /**
   * Get reward
   * @return reward
   */
  @javax.annotation.Nullable
  public List<BucketItem> getReward() {
    return reward;
  }

  public void setReward(List<BucketItem> reward) {
    this.reward = reward;
  }


  public Challenge platformAchievementId(String platformAchievementId) {
    this.platformAchievementId = platformAchievementId;
    return this;
  }

  /**
   * Get platformAchievementId
   * @return platformAchievementId
   */
  @javax.annotation.Nullable
  public String getPlatformAchievementId() {
    return platformAchievementId;
  }

  public void setPlatformAchievementId(String platformAchievementId) {
    this.platformAchievementId = platformAchievementId;
  }


  public Challenge actionLinkDef(ActionLink actionLinkDef) {
    this.actionLinkDef = actionLinkDef;
    return this;
  }

  /**
   * Get actionLinkDef
   * @return actionLinkDef
   */
  @javax.annotation.Nullable
  public ActionLink getActionLinkDef() {
    return actionLinkDef;
  }

  public void setActionLinkDef(ActionLink actionLinkDef) {
    this.actionLinkDef = actionLinkDef;
  }


  public Challenge claimType(ChallengeClaimType claimType) {
    this.claimType = claimType;
    return this;
  }

  /**
   * Get claimType
   * @return claimType
   */
  @javax.annotation.Nullable
  public ChallengeClaimType getClaimType() {
    return claimType;
  }

  public void setClaimType(ChallengeClaimType claimType) {
    this.claimType = claimType;
  }


  public Challenge rewardType(ChallengeRewardType rewardType) {
    this.rewardType = rewardType;
    return this;
  }

  /**
   * Get rewardType
   * @return rewardType
   */
  @javax.annotation.Nullable
  public ChallengeRewardType getRewardType() {
    return rewardType;
  }

  public void setRewardType(ChallengeRewardType rewardType) {
    this.rewardType = rewardType;
  }


  public Challenge rewardRatio(Float rewardRatio) {
    this.rewardRatio = rewardRatio;
    return this;
  }

  /**
   * Get rewardRatio
   * @return rewardRatio
   */
  @javax.annotation.Nullable
  public Float getRewardRatio() {
    return rewardRatio;
  }

  public void setRewardRatio(Float rewardRatio) {
    this.rewardRatio = rewardRatio;
  }


  public Challenge task(List<ChallengeTask> task) {
    this.task = task;
    return this;
  }

  public Challenge addTaskItem(ChallengeTask taskItem) {
    if (this.task == null) {
      this.task = new ArrayList<>();
    }
    this.task.add(taskItem);
    return this;
  }

  /**
   * Get task
   * @return task
   */
  @javax.annotation.Nullable
  public List<ChallengeTask> getTask() {
    return task;
  }

  public void setTask(List<ChallengeTask> task) {
    this.task = task;
  }


  public Challenge messageGroup(ContextualMessageGroup messageGroup) {
    this.messageGroup = messageGroup;
    return this;
  }

  /**
   * Get messageGroup
   * @return messageGroup
   */
  @javax.annotation.Nullable
  public ContextualMessageGroup getMessageGroup() {
    return messageGroup;
  }

  public void setMessageGroup(ContextualMessageGroup messageGroup) {
    this.messageGroup = messageGroup;
  }


  public Challenge styleId(String styleId) {
    this.styleId = styleId;
    return this;
  }

  /**
   * Get styleId
   * @return styleId
   */
  @javax.annotation.Nullable
  public String getStyleId() {
    return styleId;
  }

  public void setStyleId(String styleId) {
    this.styleId = styleId;
  }


  public Challenge priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public Challenge nextChallengeId(String nextChallengeId) {
    this.nextChallengeId = nextChallengeId;
    return this;
  }

  /**
   * Get nextChallengeId
   * @return nextChallengeId
   */
  @javax.annotation.Nullable
  public String getNextChallengeId() {
    return nextChallengeId;
  }

  public void setNextChallengeId(String nextChallengeId) {
    this.nextChallengeId = nextChallengeId;
  }


  public Challenge rewardDialogKey(String rewardDialogKey) {
    this.rewardDialogKey = rewardDialogKey;
    return this;
  }

  /**
   * Get rewardDialogKey
   * @return rewardDialogKey
   */
  @javax.annotation.Nullable
  public String getRewardDialogKey() {
    return rewardDialogKey;
  }

  public void setRewardDialogKey(String rewardDialogKey) {
    this.rewardDialogKey = rewardDialogKey;
  }


  public Challenge rewardRedirectToHome(Boolean rewardRedirectToHome) {
    this.rewardRedirectToHome = rewardRedirectToHome;
    return this;
  }

  /**
   * Get rewardRedirectToHome
   * @return rewardRedirectToHome
   */
  @javax.annotation.Nullable
  public Boolean getRewardRedirectToHome() {
    return rewardRedirectToHome;
  }

  public void setRewardRedirectToHome(Boolean rewardRedirectToHome) {
    this.rewardRedirectToHome = rewardRedirectToHome;
  }


  public Challenge rewardDescKey(String rewardDescKey) {
    this.rewardDescKey = rewardDescKey;
    return this;
  }

  /**
   * Get rewardDescKey
   * @return rewardDescKey
   */
  @javax.annotation.Nullable
  public String getRewardDescKey() {
    return rewardDescKey;
  }

  public void setRewardDescKey(String rewardDescKey) {
    this.rewardDescKey = rewardDescKey;
  }


  public Challenge starterGuildGraduation(Boolean starterGuildGraduation) {
    this.starterGuildGraduation = starterGuildGraduation;
    return this;
  }

  /**
   * Get starterGuildGraduation
   * @return starterGuildGraduation
   */
  @javax.annotation.Nullable
  public Boolean getStarterGuildGraduation() {
    return starterGuildGraduation;
  }

  public void setStarterGuildGraduation(Boolean starterGuildGraduation) {
    this.starterGuildGraduation = starterGuildGraduation;
  }


  public Challenge rewardPoints(Integer rewardPoints) {
    this.rewardPoints = rewardPoints;
    return this;
  }

  /**
   * Get rewardPoints
   * @return rewardPoints
   */
  @javax.annotation.Nullable
  public Integer getRewardPoints() {
    return rewardPoints;
  }

  public void setRewardPoints(Integer rewardPoints) {
    this.rewardPoints = rewardPoints;
  }


  public Challenge detailsKey(String detailsKey) {
    this.detailsKey = detailsKey;
    return this;
  }

  /**
   * Get detailsKey
   * @return detailsKey
   */
  @javax.annotation.Nullable
  public String getDetailsKey() {
    return detailsKey;
  }

  public void setDetailsKey(String detailsKey) {
    this.detailsKey = detailsKey;
  }


  public Challenge hiddenInMainQuests(Boolean hiddenInMainQuests) {
    this.hiddenInMainQuests = hiddenInMainQuests;
    return this;
  }

  /**
   * Get hiddenInMainQuests
   * @return hiddenInMainQuests
   */
  @javax.annotation.Nullable
  public Boolean getHiddenInMainQuests() {
    return hiddenInMainQuests;
  }

  public void setHiddenInMainQuests(Boolean hiddenInMainQuests) {
    this.hiddenInMainQuests = hiddenInMainQuests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Challenge challenge = (Challenge) o;
    return Objects.equals(this.id, challenge.id) &&
        Objects.equals(this.type, challenge.type) &&
        Objects.equals(this.nameKey, challenge.nameKey) &&
        Objects.equals(this.descKey, challenge.descKey) &&
        Objects.equals(this.viewRequirement, challenge.viewRequirement) &&
        Objects.equals(this.reward, challenge.reward) &&
        Objects.equals(this.platformAchievementId, challenge.platformAchievementId) &&
        Objects.equals(this.actionLinkDef, challenge.actionLinkDef) &&
        Objects.equals(this.claimType, challenge.claimType) &&
        Objects.equals(this.rewardType, challenge.rewardType) &&
        Objects.equals(this.rewardRatio, challenge.rewardRatio) &&
        Objects.equals(this.task, challenge.task) &&
        Objects.equals(this.messageGroup, challenge.messageGroup) &&
        Objects.equals(this.styleId, challenge.styleId) &&
        Objects.equals(this.priority, challenge.priority) &&
        Objects.equals(this.nextChallengeId, challenge.nextChallengeId) &&
        Objects.equals(this.rewardDialogKey, challenge.rewardDialogKey) &&
        Objects.equals(this.rewardRedirectToHome, challenge.rewardRedirectToHome) &&
        Objects.equals(this.rewardDescKey, challenge.rewardDescKey) &&
        Objects.equals(this.starterGuildGraduation, challenge.starterGuildGraduation) &&
        Objects.equals(this.rewardPoints, challenge.rewardPoints) &&
        Objects.equals(this.detailsKey, challenge.detailsKey) &&
        Objects.equals(this.hiddenInMainQuests, challenge.hiddenInMainQuests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, nameKey, descKey, viewRequirement, reward, platformAchievementId, actionLinkDef, claimType, rewardType, rewardRatio, task, messageGroup, styleId, priority, nextChallengeId, rewardDialogKey, rewardRedirectToHome, rewardDescKey, starterGuildGraduation, rewardPoints, detailsKey, hiddenInMainQuests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Challenge {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    nameKey: ").append(toIndentedString(nameKey)).append("\n");
    sb.append("    descKey: ").append(toIndentedString(descKey)).append("\n");
    sb.append("    viewRequirement: ").append(toIndentedString(viewRequirement)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("    platformAchievementId: ").append(toIndentedString(platformAchievementId)).append("\n");
    sb.append("    actionLinkDef: ").append(toIndentedString(actionLinkDef)).append("\n");
    sb.append("    claimType: ").append(toIndentedString(claimType)).append("\n");
    sb.append("    rewardType: ").append(toIndentedString(rewardType)).append("\n");
    sb.append("    rewardRatio: ").append(toIndentedString(rewardRatio)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    messageGroup: ").append(toIndentedString(messageGroup)).append("\n");
    sb.append("    styleId: ").append(toIndentedString(styleId)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    nextChallengeId: ").append(toIndentedString(nextChallengeId)).append("\n");
    sb.append("    rewardDialogKey: ").append(toIndentedString(rewardDialogKey)).append("\n");
    sb.append("    rewardRedirectToHome: ").append(toIndentedString(rewardRedirectToHome)).append("\n");
    sb.append("    rewardDescKey: ").append(toIndentedString(rewardDescKey)).append("\n");
    sb.append("    starterGuildGraduation: ").append(toIndentedString(starterGuildGraduation)).append("\n");
    sb.append("    rewardPoints: ").append(toIndentedString(rewardPoints)).append("\n");
    sb.append("    detailsKey: ").append(toIndentedString(detailsKey)).append("\n");
    sb.append("    hiddenInMainQuests: ").append(toIndentedString(hiddenInMainQuests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("nameKey");
    openapiFields.add("descKey");
    openapiFields.add("viewRequirement");
    openapiFields.add("reward");
    openapiFields.add("platformAchievementId");
    openapiFields.add("actionLinkDef");
    openapiFields.add("claimType");
    openapiFields.add("rewardType");
    openapiFields.add("rewardRatio");
    openapiFields.add("task");
    openapiFields.add("messageGroup");
    openapiFields.add("styleId");
    openapiFields.add("priority");
    openapiFields.add("nextChallengeId");
    openapiFields.add("rewardDialogKey");
    openapiFields.add("rewardRedirectToHome");
    openapiFields.add("rewardDescKey");
    openapiFields.add("starterGuildGraduation");
    openapiFields.add("rewardPoints");
    openapiFields.add("detailsKey");
    openapiFields.add("hiddenInMainQuests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Challenge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Challenge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Challenge is not found in the empty JSON string", Challenge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Challenge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Challenge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ChallengeType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("nameKey") != null && !jsonObj.get("nameKey").isJsonNull()) && !jsonObj.get("nameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameKey").toString()));
      }
      if ((jsonObj.get("descKey") != null && !jsonObj.get("descKey").isJsonNull()) && !jsonObj.get("descKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descKey").toString()));
      }
      // validate the optional field `viewRequirement`
      if (jsonObj.get("viewRequirement") != null && !jsonObj.get("viewRequirement").isJsonNull()) {
        Requirement.validateJsonElement(jsonObj.get("viewRequirement"));
      }
      if (jsonObj.get("reward") != null && !jsonObj.get("reward").isJsonNull()) {
        JsonArray jsonArrayreward = jsonObj.getAsJsonArray("reward");
        if (jsonArrayreward != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reward").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reward` to be an array in the JSON string but got `%s`", jsonObj.get("reward").toString()));
          }

          // validate the optional field `reward` (array)
          for (int i = 0; i < jsonArrayreward.size(); i++) {
            BucketItem.validateJsonElement(jsonArrayreward.get(i));
          };
        }
      }
      if ((jsonObj.get("platformAchievementId") != null && !jsonObj.get("platformAchievementId").isJsonNull()) && !jsonObj.get("platformAchievementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformAchievementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformAchievementId").toString()));
      }
      // validate the optional field `actionLinkDef`
      if (jsonObj.get("actionLinkDef") != null && !jsonObj.get("actionLinkDef").isJsonNull()) {
        ActionLink.validateJsonElement(jsonObj.get("actionLinkDef"));
      }
      // validate the optional field `claimType`
      if (jsonObj.get("claimType") != null && !jsonObj.get("claimType").isJsonNull()) {
        ChallengeClaimType.validateJsonElement(jsonObj.get("claimType"));
      }
      // validate the optional field `rewardType`
      if (jsonObj.get("rewardType") != null && !jsonObj.get("rewardType").isJsonNull()) {
        ChallengeRewardType.validateJsonElement(jsonObj.get("rewardType"));
      }
      if (jsonObj.get("task") != null && !jsonObj.get("task").isJsonNull()) {
        JsonArray jsonArraytask = jsonObj.getAsJsonArray("task");
        if (jsonArraytask != null) {
          // ensure the json data is an array
          if (!jsonObj.get("task").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `task` to be an array in the JSON string but got `%s`", jsonObj.get("task").toString()));
          }

          // validate the optional field `task` (array)
          for (int i = 0; i < jsonArraytask.size(); i++) {
            ChallengeTask.validateJsonElement(jsonArraytask.get(i));
          };
        }
      }
      // validate the optional field `messageGroup`
      if (jsonObj.get("messageGroup") != null && !jsonObj.get("messageGroup").isJsonNull()) {
        ContextualMessageGroup.validateJsonElement(jsonObj.get("messageGroup"));
      }
      if ((jsonObj.get("styleId") != null && !jsonObj.get("styleId").isJsonNull()) && !jsonObj.get("styleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `styleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("styleId").toString()));
      }
      if ((jsonObj.get("nextChallengeId") != null && !jsonObj.get("nextChallengeId").isJsonNull()) && !jsonObj.get("nextChallengeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextChallengeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextChallengeId").toString()));
      }
      if ((jsonObj.get("rewardDialogKey") != null && !jsonObj.get("rewardDialogKey").isJsonNull()) && !jsonObj.get("rewardDialogKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardDialogKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rewardDialogKey").toString()));
      }
      if ((jsonObj.get("rewardDescKey") != null && !jsonObj.get("rewardDescKey").isJsonNull()) && !jsonObj.get("rewardDescKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardDescKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rewardDescKey").toString()));
      }
      if ((jsonObj.get("detailsKey") != null && !jsonObj.get("detailsKey").isJsonNull()) && !jsonObj.get("detailsKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailsKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailsKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Challenge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Challenge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Challenge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Challenge.class));

       return (TypeAdapter<T>) new TypeAdapter<Challenge>() {
           @Override
           public void write(JsonWriter out, Challenge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Challenge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Challenge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Challenge
   * @throws IOException if the JSON string is invalid with respect to Challenge
   */
  public static Challenge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Challenge.class);
  }

  /**
   * Convert an instance of Challenge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

