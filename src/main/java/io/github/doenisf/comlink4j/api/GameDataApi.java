/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.api;

import io.github.doenisf.comlink4j.ApiCallback;
import io.github.doenisf.comlink4j.ApiClient;
import io.github.doenisf.comlink4j.ApiException;
import io.github.doenisf.comlink4j.ApiResponse;
import io.github.doenisf.comlink4j.Configuration;
import io.github.doenisf.comlink4j.Pair;
import io.github.doenisf.comlink4j.ProgressRequestBody;
import io.github.doenisf.comlink4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.doenisf.comlink4j.model.GetGameData2XXResponse;
import io.github.doenisf.comlink4j.model.GetGameDataRequest;
import io.github.doenisf.comlink4j.model.GetLocalizationBundle2XXResponse;
import io.github.doenisf.comlink4j.model.GetLocalizationBundleRequest;
import io.github.doenisf.comlink4j.model.GetMetaData2XXResponse;
import io.github.doenisf.comlink4j.model.GetMetaDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GameDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GameDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GameDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enumsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td>  </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enumsGetCall(_callback);

    }

    /**
     * Get an object containing all of the game data enums
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td>  </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object enumsGet() throws ApiException {
        ApiResponse<Object> localVarResp = enumsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get an object containing all of the game data enums
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td>  </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> enumsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enumsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an object containing all of the game data enums (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td>  </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumsGetAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGameData
     * @param getGameDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getGameData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGameDataCall(GetGameDataRequest getGameDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGameDataRequest;

        // create path and map variables
        String localVarPath = "/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGameDataValidateBeforeCall(GetGameDataRequest getGameDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getGameDataRequest' is set
        if (getGameDataRequest == null) {
            throw new ApiException("Missing the required parameter 'getGameDataRequest' when calling getGameData(Async)");
        }

        return getGameDataCall(getGameDataRequest, _callback);

    }

    /**
     * Get the game data
     * 
     * @param getGameDataRequest  (required)
     * @return GetGameData2XXResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getGameData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetGameData2XXResponse getGameData(GetGameDataRequest getGameDataRequest) throws ApiException {
        ApiResponse<GetGameData2XXResponse> localVarResp = getGameDataWithHttpInfo(getGameDataRequest);
        return localVarResp.getData();
    }

    /**
     * Get the game data
     * 
     * @param getGameDataRequest  (required)
     * @return ApiResponse&lt;GetGameData2XXResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getGameData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGameData2XXResponse> getGameDataWithHttpInfo(GetGameDataRequest getGameDataRequest) throws ApiException {
        okhttp3.Call localVarCall = getGameDataValidateBeforeCall(getGameDataRequest, null);
        Type localVarReturnType = new TypeToken<GetGameData2XXResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the game data (asynchronously)
     * 
     * @param getGameDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getGameData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGameDataAsync(GetGameDataRequest getGameDataRequest, final ApiCallback<GetGameData2XXResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGameDataValidateBeforeCall(getGameDataRequest, _callback);
        Type localVarReturnType = new TypeToken<GetGameData2XXResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocalizationBundle
     * @param getLocalizationBundleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getLocalizationBundle successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalizationBundleCall(GetLocalizationBundleRequest getLocalizationBundleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLocalizationBundleRequest;

        // create path and map variables
        String localVarPath = "/localization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocalizationBundleValidateBeforeCall(GetLocalizationBundleRequest getLocalizationBundleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getLocalizationBundleRequest' is set
        if (getLocalizationBundleRequest == null) {
            throw new ApiException("Missing the required parameter 'getLocalizationBundleRequest' when calling getLocalizationBundle(Async)");
        }

        return getLocalizationBundleCall(getLocalizationBundleRequest, _callback);

    }

    /**
     * Get the localization bundle
     * 
     * @param getLocalizationBundleRequest  (required)
     * @return GetLocalizationBundle2XXResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getLocalizationBundle successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetLocalizationBundle2XXResponse getLocalizationBundle(GetLocalizationBundleRequest getLocalizationBundleRequest) throws ApiException {
        ApiResponse<GetLocalizationBundle2XXResponse> localVarResp = getLocalizationBundleWithHttpInfo(getLocalizationBundleRequest);
        return localVarResp.getData();
    }

    /**
     * Get the localization bundle
     * 
     * @param getLocalizationBundleRequest  (required)
     * @return ApiResponse&lt;GetLocalizationBundle2XXResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getLocalizationBundle successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLocalizationBundle2XXResponse> getLocalizationBundleWithHttpInfo(GetLocalizationBundleRequest getLocalizationBundleRequest) throws ApiException {
        okhttp3.Call localVarCall = getLocalizationBundleValidateBeforeCall(getLocalizationBundleRequest, null);
        Type localVarReturnType = new TypeToken<GetLocalizationBundle2XXResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the localization bundle (asynchronously)
     * 
     * @param getLocalizationBundleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getLocalizationBundle successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalizationBundleAsync(GetLocalizationBundleRequest getLocalizationBundleRequest, final ApiCallback<GetLocalizationBundle2XXResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocalizationBundleValidateBeforeCall(getLocalizationBundleRequest, _callback);
        Type localVarReturnType = new TypeToken<GetLocalizationBundle2XXResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetaData
     * @param getMetaDataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getMetaData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaDataCall(GetMetaDataRequest getMetaDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMetaDataRequest;

        // create path and map variables
        String localVarPath = "/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetaDataValidateBeforeCall(GetMetaDataRequest getMetaDataRequest, final ApiCallback _callback) throws ApiException {
        return getMetaDataCall(getMetaDataRequest, _callback);

    }

    /**
     * Get the game metadata
     * 
     * @param getMetaDataRequest  (optional)
     * @return GetMetaData2XXResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getMetaData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetMetaData2XXResponse getMetaData(GetMetaDataRequest getMetaDataRequest) throws ApiException {
        ApiResponse<GetMetaData2XXResponse> localVarResp = getMetaDataWithHttpInfo(getMetaDataRequest);
        return localVarResp.getData();
    }

    /**
     * Get the game metadata
     * 
     * @param getMetaDataRequest  (optional)
     * @return ApiResponse&lt;GetMetaData2XXResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getMetaData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetaData2XXResponse> getMetaDataWithHttpInfo(GetMetaDataRequest getMetaDataRequest) throws ApiException {
        okhttp3.Call localVarCall = getMetaDataValidateBeforeCall(getMetaDataRequest, null);
        Type localVarReturnType = new TypeToken<GetMetaData2XXResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the game metadata (asynchronously)
     * 
     * @param getMetaDataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> getMetaData successful response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaDataAsync(GetMetaDataRequest getMetaDataRequest, final ApiCallback<GetMetaData2XXResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetaDataValidateBeforeCall(getMetaDataRequest, _callback);
        Type localVarReturnType = new TypeToken<GetMetaData2XXResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
