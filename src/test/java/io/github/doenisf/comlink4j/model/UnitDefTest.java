/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.Ability;
import io.github.doenisf.comlink4j.model.AbilityReference;
import io.github.doenisf.comlink4j.model.CombatType;
import io.github.doenisf.comlink4j.model.CrewMember;
import io.github.doenisf.comlink4j.model.ForceAlignment;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.RecommendedSquad;
import io.github.doenisf.comlink4j.model.RelicDefinition;
import io.github.doenisf.comlink4j.model.SkillDefinitionReference;
import io.github.doenisf.comlink4j.model.StatDef;
import io.github.doenisf.comlink4j.model.SummonStatTable;
import io.github.doenisf.comlink4j.model.ThreatLevel;
import io.github.doenisf.comlink4j.model.UnitClass;
import io.github.doenisf.comlink4j.model.UnitModRecommendation;
import io.github.doenisf.comlink4j.model.UnitStat;
import io.github.doenisf.comlink4j.model.UnitTierDef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UnitDef
 */
public class UnitDefTest {
    private final UnitDef model = new UnitDef();

    /**
     * Model tests for UnitDef
     */
    @Test
    public void testUnitDef() {
        // TODO: test UnitDef
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'unitPrefab'
     */
    @Test
    public void unitPrefabTest() {
        // TODO: test unitPrefab
    }

    /**
     * Test the property 'thumbnailName'
     */
    @Test
    public void thumbnailNameTest() {
        // TODO: test thumbnailName
    }

    /**
     * Test the property 'nameKey'
     */
    @Test
    public void nameKeyTest() {
        // TODO: test nameKey
    }

    /**
     * Test the property 'rarity'
     */
    @Test
    public void rarityTest() {
        // TODO: test rarity
    }

    /**
     * Test the property 'maxRarity'
     */
    @Test
    public void maxRarityTest() {
        // TODO: test maxRarity
    }

    /**
     * Test the property 'forceAlignment'
     */
    @Test
    public void forceAlignmentTest() {
        // TODO: test forceAlignment
    }

    /**
     * Test the property 'xpTableId'
     */
    @Test
    public void xpTableIdTest() {
        // TODO: test xpTableId
    }

    /**
     * Test the property 'actionCountMin'
     */
    @Test
    public void actionCountMinTest() {
        // TODO: test actionCountMin
    }

    /**
     * Test the property 'actionCountMax'
     */
    @Test
    public void actionCountMaxTest() {
        // TODO: test actionCountMax
    }

    /**
     * Test the property 'combatType'
     */
    @Test
    public void combatTypeTest() {
        // TODO: test combatType
    }

    /**
     * Test the property 'descKey'
     */
    @Test
    public void descKeyTest() {
        // TODO: test descKey
    }

    /**
     * Test the property 'threatLevel'
     */
    @Test
    public void threatLevelTest() {
        // TODO: test threatLevel
    }

    /**
     * Test the property 'obtainable'
     */
    @Test
    public void obtainableTest() {
        // TODO: test obtainable
    }

    /**
     * Test the property 'baseId'
     */
    @Test
    public void baseIdTest() {
        // TODO: test baseId
    }

    /**
     * Test the property 'promotionRecipeReference'
     */
    @Test
    public void promotionRecipeReferenceTest() {
        // TODO: test promotionRecipeReference
    }

    /**
     * Test the property 'statProgressionId'
     */
    @Test
    public void statProgressionIdTest() {
        // TODO: test statProgressionId
    }

    /**
     * Test the property 'categoryId'
     */
    @Test
    public void categoryIdTest() {
        // TODO: test categoryId
    }

    /**
     * Test the property 'trainingXpWorthBaseValueOverride'
     */
    @Test
    public void trainingXpWorthBaseValueOverrideTest() {
        // TODO: test trainingXpWorthBaseValueOverride
    }

    /**
     * Test the property 'maxLevelOverride'
     */
    @Test
    public void maxLevelOverrideTest() {
        // TODO: test maxLevelOverride
    }

    /**
     * Test the property 'trainingCostMultiplierOverride'
     */
    @Test
    public void trainingCostMultiplierOverrideTest() {
        // TODO: test trainingCostMultiplierOverride
    }

    /**
     * Test the property 'creationRecipeReference'
     */
    @Test
    public void creationRecipeReferenceTest() {
        // TODO: test creationRecipeReference
    }

    /**
     * Test the property 'skillReference'
     */
    @Test
    public void skillReferenceTest() {
        // TODO: test skillReference
    }

    /**
     * Test the property 'basePower'
     */
    @Test
    public void basePowerTest() {
        // TODO: test basePower
    }

    /**
     * Test the property 'baseStat'
     */
    @Test
    public void baseStatTest() {
        // TODO: test baseStat
    }

    /**
     * Test the property 'primaryStat'
     */
    @Test
    public void primaryStatTest() {
        // TODO: test primaryStat
    }

    /**
     * Test the property 'unitTier'
     */
    @Test
    public void unitTierTest() {
        // TODO: test unitTier
    }

    /**
     * Test the property 'basicAttack'
     */
    @Test
    public void basicAttackTest() {
        // TODO: test basicAttack
    }

    /**
     * Test the property 'leaderAbility'
     */
    @Test
    public void leaderAbilityTest() {
        // TODO: test leaderAbility
    }

    /**
     * Test the property 'limitBreak'
     */
    @Test
    public void limitBreakTest() {
        // TODO: test limitBreak
    }

    /**
     * Test the property 'uniqueAbility'
     */
    @Test
    public void uniqueAbilityTest() {
        // TODO: test uniqueAbility
    }

    /**
     * Test the property 'basicAttackRef'
     */
    @Test
    public void basicAttackRefTest() {
        // TODO: test basicAttackRef
    }

    /**
     * Test the property 'leaderAbilityRef'
     */
    @Test
    public void leaderAbilityRefTest() {
        // TODO: test leaderAbilityRef
    }

    /**
     * Test the property 'limitBreakRef'
     */
    @Test
    public void limitBreakRefTest() {
        // TODO: test limitBreakRef
    }

    /**
     * Test the property 'uniqueAbilityRef'
     */
    @Test
    public void uniqueAbilityRefTest() {
        // TODO: test uniqueAbilityRef
    }

    /**
     * Test the property 'primaryUnitStat'
     */
    @Test
    public void primaryUnitStatTest() {
        // TODO: test primaryUnitStat
    }

    /**
     * Test the property 'obtainableTime'
     */
    @Test
    public void obtainableTimeTest() {
        // TODO: test obtainableTime
    }

    /**
     * Test the property 'crew'
     */
    @Test
    public void crewTest() {
        // TODO: test crew
    }

    /**
     * Test the property 'commandCost'
     */
    @Test
    public void commandCostTest() {
        // TODO: test commandCost
    }

    /**
     * Test the property 'crewContributionTableId'
     */
    @Test
    public void crewContributionTableIdTest() {
        // TODO: test crewContributionTableId
    }

    /**
     * Test the property 'unitClass'
     */
    @Test
    public void unitClassTest() {
        // TODO: test unitClass
    }

    /**
     * Test the property 'battlePortraitPrefab'
     */
    @Test
    public void battlePortraitPrefabTest() {
        // TODO: test battlePortraitPrefab
    }

    /**
     * Test the property 'battlePortraitNameKey'
     */
    @Test
    public void battlePortraitNameKeyTest() {
        // TODO: test battlePortraitNameKey
    }

    /**
     * Test the property 'modRecommendation'
     */
    @Test
    public void modRecommendationTest() {
        // TODO: test modRecommendation
    }

    /**
     * Test the property 'effectIconPriorityOverride'
     */
    @Test
    public void effectIconPriorityOverrideTest() {
        // TODO: test effectIconPriorityOverride
    }

    /**
     * Test the property 'summonStatTable'
     */
    @Test
    public void summonStatTableTest() {
        // TODO: test summonStatTable
    }

    /**
     * Test the property 'relicDefinition'
     */
    @Test
    public void relicDefinitionTest() {
        // TODO: test relicDefinition
    }

    /**
     * Test the property 'capitalUnlockKey'
     */
    @Test
    public void capitalUnlockKeyTest() {
        // TODO: test capitalUnlockKey
    }

    /**
     * Test the property 'legend'
     */
    @Test
    public void legendTest() {
        // TODO: test legend
    }

    /**
     * Test the property 'squadPositionPriority'
     */
    @Test
    public void squadPositionPriorityTest() {
        // TODO: test squadPositionPriority
    }

    /**
     * Test the property 'exampleSquad'
     */
    @Test
    public void exampleSquadTest() {
        // TODO: test exampleSquad
    }

    /**
     * Test the property 'big'
     */
    @Test
    public void bigTest() {
        // TODO: test big
    }

    /**
     * Test the property 'hideInTurnOrder'
     */
    @Test
    public void hideInTurnOrderTest() {
        // TODO: test hideInTurnOrder
    }

    /**
     * Test the property 'thumbImageTurnOrder'
     */
    @Test
    public void thumbImageTurnOrderTest() {
        // TODO: test thumbImageTurnOrder
    }

    /**
     * Test the property 'requireUltimateUnlock'
     */
    @Test
    public void requireUltimateUnlockTest() {
        // TODO: test requireUltimateUnlock
    }

}
