/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.AbilityReference;
import io.github.doenisf.comlink4j.model.BucketItem;
import io.github.doenisf.comlink4j.model.CampaignElementProgress;
import io.github.doenisf.comlink4j.model.CampaignMissionEnemyPreview;
import io.github.doenisf.comlink4j.model.CampaignNodeEncounter;
import io.github.doenisf.comlink4j.model.CombatType;
import io.github.doenisf.comlink4j.model.ConditionalBucket;
import io.github.doenisf.comlink4j.model.DynamicDescription;
import io.github.doenisf.comlink4j.model.EntryCategoryAllowed;
import io.github.doenisf.comlink4j.model.ForcedPlayerSquad;
import io.github.doenisf.comlink4j.model.ItemType;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.Position;
import io.github.doenisf.comlink4j.model.RaidPointsStructure;
import io.github.doenisf.comlink4j.model.RankRewardPreview;
import io.github.doenisf.comlink4j.model.UnitReplacement;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CampaignNodeMission
 */
public class CampaignNodeMissionTest {
    private final CampaignNodeMission model = new CampaignNodeMission();

    /**
     * Model tests for CampaignNodeMission
     */
    @Test
    public void testCampaignNodeMission() {
        // TODO: test CampaignNodeMission
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'nameKey'
     */
    @Test
    public void nameKeyTest() {
        // TODO: test nameKey
    }

    /**
     * Test the property 'descKey'
     */
    @Test
    public void descKeyTest() {
        // TODO: test descKey
    }

    /**
     * Test the property 'combatType'
     */
    @Test
    public void combatTypeTest() {
        // TODO: test combatType
    }

    /**
     * Test the property 'enemyPreview'
     */
    @Test
    public void enemyPreviewTest() {
        // TODO: test enemyPreview
    }

    /**
     * Test the property 'rewardPreview'
     */
    @Test
    public void rewardPreviewTest() {
        // TODO: test rewardPreview
    }

    /**
     * Test the property 'campaignNodeEncounter'
     */
    @Test
    public void campaignNodeEncounterTest() {
        // TODO: test campaignNodeEncounter
    }

    /**
     * Test the property 'audioKey'
     */
    @Test
    public void audioKeyTest() {
        // TODO: test audioKey
    }

    /**
     * Test the property 'progress'
     */
    @Test
    public void progressTest() {
        // TODO: test progress
    }

    /**
     * Test the property 'entryCostRequirement'
     */
    @Test
    public void entryCostRequirementTest() {
        // TODO: test entryCostRequirement
    }

    /**
     * Test the property 'entryCategoryAllowed'
     */
    @Test
    public void entryCategoryAllowedTest() {
        // TODO: test entryCategoryAllowed
    }

    /**
     * Test the property 'shortNameKey'
     */
    @Test
    public void shortNameKeyTest() {
        // TODO: test shortNameKey
    }

    /**
     * Test the property 'groupNameKey'
     */
    @Test
    public void groupNameKeyTest() {
        // TODO: test groupNameKey
    }

    /**
     * Test the property 'groupImage'
     */
    @Test
    public void groupImageTest() {
        // TODO: test groupImage
    }

    /**
     * Test the property 'unlockRequirementLocalizationKey'
     */
    @Test
    public void unlockRequirementLocalizationKeyTest() {
        // TODO: test unlockRequirementLocalizationKey
    }

    /**
     * Test the property 'cooldownKey'
     */
    @Test
    public void cooldownKeyTest() {
        // TODO: test cooldownKey
    }

    /**
     * Test the property 'dailyBattleCapKey'
     */
    @Test
    public void dailyBattleCapKeyTest() {
        // TODO: test dailyBattleCapKey
    }

    /**
     * Test the property 'firstCompleteRewardPreview'
     */
    @Test
    public void firstCompleteRewardPreviewTest() {
        // TODO: test firstCompleteRewardPreview
    }

    /**
     * Test the property 'enemyUnitPreview'
     */
    @Test
    public void enemyUnitPreviewTest() {
        // TODO: test enemyUnitPreview
    }

    /**
     * Test the property 'prefab'
     */
    @Test
    public void prefabTest() {
        // TODO: test prefab
    }

    /**
     * Test the property 'position'
     */
    @Test
    public void positionTest() {
        // TODO: test position
    }

    /**
     * Test the property 'playerAbilityRef'
     */
    @Test
    public void playerAbilityRefTest() {
        // TODO: test playerAbilityRef
    }

    /**
     * Test the property 'activateCost'
     */
    @Test
    public void activateCostTest() {
        // TODO: test activateCost
    }

    /**
     * Test the property 'rankRewardPreview'
     */
    @Test
    public void rankRewardPreviewTest() {
        // TODO: test rankRewardPreview
    }

    /**
     * Test the property 'detailImage'
     */
    @Test
    public void detailImageTest() {
        // TODO: test detailImage
    }

    /**
     * Test the property 'detailDescKey'
     */
    @Test
    public void detailDescKeyTest() {
        // TODO: test detailDescKey
    }

    /**
     * Test the property 'raidConfigId'
     */
    @Test
    public void raidConfigIdTest() {
        // TODO: test raidConfigId
    }

    /**
     * Test the property 'dynamicDescription'
     */
    @Test
    public void dynamicDescriptionTest() {
        // TODO: test dynamicDescription
    }

    /**
     * Test the property 'nodeDisplayItem'
     */
    @Test
    public void nodeDisplayItemTest() {
        // TODO: test nodeDisplayItem
    }

    /**
     * Test the property 'grindEnabled'
     */
    @Test
    public void grindEnabledTest() {
        // TODO: test grindEnabled
    }

    /**
     * Test the property 'hasForcedAlly'
     */
    @Test
    public void hasForcedAllyTest() {
        // TODO: test hasForcedAlly
    }

    /**
     * Test the property 'battleSupportAllowed'
     */
    @Test
    public void battleSupportAllowedTest() {
        // TODO: test battleSupportAllowed
    }

    /**
     * Test the property 'autoBattleEnabled'
     */
    @Test
    public void autoBattleEnabledTest() {
        // TODO: test autoBattleEnabled
    }

    /**
     * Test the property 'retreatEnabled'
     */
    @Test
    public void retreatEnabledTest() {
        // TODO: test retreatEnabled
    }

    /**
     * Test the property 'forcedPlayerSquad'
     */
    @Test
    public void forcedPlayerSquadTest() {
        // TODO: test forcedPlayerSquad
    }

    /**
     * Test the property 'grantedAbilities'
     */
    @Test
    public void grantedAbilitiesTest() {
        // TODO: test grantedAbilities
    }

    /**
     * Test the property 'cooldownConditionalOverrideKey'
     */
    @Test
    public void cooldownConditionalOverrideKeyTest() {
        // TODO: test cooldownConditionalOverrideKey
    }

    /**
     * Test the property 'holonodePlanetPrefabName'
     */
    @Test
    public void holonodePlanetPrefabNameTest() {
        // TODO: test holonodePlanetPrefabName
    }

    /**
     * Test the property 'battleSpeedAdjustable'
     */
    @Test
    public void battleSpeedAdjustableTest() {
        // TODO: test battleSpeedAdjustable
    }

    /**
     * Test the property 'requirementOverrideKey'
     */
    @Test
    public void requirementOverrideKeyTest() {
        // TODO: test requirementOverrideKey
    }

    /**
     * Test the property 'simmableOverrideEnabled'
     */
    @Test
    public void simmableOverrideEnabledTest() {
        // TODO: test simmableOverrideEnabled
    }

    /**
     * Test the property 'conditionalRewardsPreview'
     */
    @Test
    public void conditionalRewardsPreviewTest() {
        // TODO: test conditionalRewardsPreview
    }

    /**
     * Test the property 'conditionalEntryCostOverride'
     */
    @Test
    public void conditionalEntryCostOverrideTest() {
        // TODO: test conditionalEntryCostOverride
    }

    /**
     * Test the property 'recommendationKey'
     */
    @Test
    public void recommendationKeyTest() {
        // TODO: test recommendationKey
    }

    /**
     * Test the property 'instanceFirstCompleteRewardPreview'
     */
    @Test
    public void instanceFirstCompleteRewardPreviewTest() {
        // TODO: test instanceFirstCompleteRewardPreview
    }

    /**
     * Test the property 'overviewLocKey'
     */
    @Test
    public void overviewLocKeyTest() {
        // TODO: test overviewLocKey
    }

    /**
     * Test the property 'recommendedGp'
     */
    @Test
    public void recommendedGpTest() {
        // TODO: test recommendedGp
    }

    /**
     * Test the property 'battleDurationLimit'
     */
    @Test
    public void battleDurationLimitTest() {
        // TODO: test battleDurationLimit
    }

    /**
     * Test the property 'recommendedUnitGp'
     */
    @Test
    public void recommendedUnitGpTest() {
        // TODO: test recommendedUnitGp
    }

    /**
     * Test the property 'volatileAccess'
     */
    @Test
    public void volatileAccessTest() {
        // TODO: test volatileAccess
    }

    /**
     * Test the property 'unlockRequirementId'
     */
    @Test
    public void unlockRequirementIdTest() {
        // TODO: test unlockRequirementId
    }

    /**
     * Test the property 'visibilityRequirementId'
     */
    @Test
    public void visibilityRequirementIdTest() {
        // TODO: test visibilityRequirementId
    }

    /**
     * Test the property 'raidPointsStructure'
     */
    @Test
    public void raidPointsStructureTest() {
        // TODO: test raidPointsStructure
    }

    /**
     * Test the property 'featured'
     */
    @Test
    public void featuredTest() {
        // TODO: test featured
    }

    /**
     * Test the property 'immediateRegularRankRewardPreview'
     */
    @Test
    public void immediateRegularRankRewardPreviewTest() {
        // TODO: test immediateRegularRankRewardPreview
    }

    /**
     * Test the property 'maxPointsPerAttempt'
     */
    @Test
    public void maxPointsPerAttemptTest() {
        // TODO: test maxPointsPerAttempt
    }

    /**
     * Test the property 'unitReplacement'
     */
    @Test
    public void unitReplacementTest() {
        // TODO: test unitReplacement
    }

}
