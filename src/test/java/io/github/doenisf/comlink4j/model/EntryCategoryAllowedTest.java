/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.CategoryMatchType;
import io.github.doenisf.comlink4j.model.MandatoryRosterUnit;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.RelicTier;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for EntryCategoryAllowed
 */
public class EntryCategoryAllowedTest {
    private final EntryCategoryAllowed model = new EntryCategoryAllowed();

    /**
     * Model tests for EntryCategoryAllowed
     */
    @Test
    public void testEntryCategoryAllowed() {
        // TODO: test EntryCategoryAllowed
    }

    /**
     * Test the property 'categoryId'
     */
    @Test
    public void categoryIdTest() {
        // TODO: test categoryId
    }

    /**
     * Test the property 'maximumAllowedUnitQuantity'
     */
    @Test
    public void maximumAllowedUnitQuantityTest() {
        // TODO: test maximumAllowedUnitQuantity
    }

    /**
     * Test the property 'matchType'
     */
    @Test
    public void matchTypeTest() {
        // TODO: test matchType
    }

    /**
     * Test the property 'minimumRequiredUnitQuantity'
     */
    @Test
    public void minimumRequiredUnitQuantityTest() {
        // TODO: test minimumRequiredUnitQuantity
    }

    /**
     * Test the property 'minimumUnitRarity'
     */
    @Test
    public void minimumUnitRarityTest() {
        // TODO: test minimumUnitRarity
    }

    /**
     * Test the property 'minimumOwnedUnitQuantity'
     */
    @Test
    public void minimumOwnedUnitQuantityTest() {
        // TODO: test minimumOwnedUnitQuantity
    }

    /**
     * Test the property 'minimumUnitLevel'
     */
    @Test
    public void minimumUnitLevelTest() {
        // TODO: test minimumUnitLevel
    }

    /**
     * Test the property 'minimumUnitTier'
     */
    @Test
    public void minimumUnitTierTest() {
        // TODO: test minimumUnitTier
    }

    /**
     * Test the property 'maximumReinforcement'
     */
    @Test
    public void maximumReinforcementTest() {
        // TODO: test maximumReinforcement
    }

    /**
     * Test the property 'commanderCategoryId'
     */
    @Test
    public void commanderCategoryIdTest() {
        // TODO: test commanderCategoryId
    }

    /**
     * Test the property 'minimumReinforcement'
     */
    @Test
    public void minimumReinforcementTest() {
        // TODO: test minimumReinforcement
    }

    /**
     * Test the property 'minimumGalacticPower'
     */
    @Test
    public void minimumGalacticPowerTest() {
        // TODO: test minimumGalacticPower
    }

    /**
     * Test the property 'mandatoryRosterUnit'
     */
    @Test
    public void mandatoryRosterUnitTest() {
        // TODO: test mandatoryRosterUnit
    }

    /**
     * Test the property 'excludeCategoryId'
     */
    @Test
    public void excludeCategoryIdTest() {
        // TODO: test excludeCategoryId
    }

    /**
     * Test the property 'minimumRelicTier'
     */
    @Test
    public void minimumRelicTierTest() {
        // TODO: test minimumRelicTier
    }

    /**
     * Test the property 'minimumModRarity'
     */
    @Test
    public void minimumModRarityTest() {
        // TODO: test minimumModRarity
    }

    /**
     * Test the property 'minimumAbilityLevelAvg'
     */
    @Test
    public void minimumAbilityLevelAvgTest() {
        // TODO: test minimumAbilityLevelAvg
    }

    /**
     * Test the property 'minimumAbilityLevelAll'
     */
    @Test
    public void minimumAbilityLevelAllTest() {
        // TODO: test minimumAbilityLevelAll
    }

    /**
     * Test the property 'legendLimit'
     */
    @Test
    public void legendLimitTest() {
        // TODO: test legendLimit
    }

    /**
     * Test the property 'unitGuideMinimumRequiredUnitQuantity'
     */
    @Test
    public void unitGuideMinimumRequiredUnitQuantityTest() {
        // TODO: test unitGuideMinimumRequiredUnitQuantity
    }

    /**
     * Test the property 'bigUnitLimit'
     */
    @Test
    public void bigUnitLimitTest() {
        // TODO: test bigUnitLimit
    }

}
