/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.BattleCondition;
import io.github.doenisf.comlink4j.model.EffectApplyType;
import io.github.doenisf.comlink4j.model.EffectDamageType;
import io.github.doenisf.comlink4j.model.EffectReference;
import io.github.doenisf.comlink4j.model.EffectTag;
import io.github.doenisf.comlink4j.model.EffectTarget;
import io.github.doenisf.comlink4j.model.EffectType;
import io.github.doenisf.comlink4j.model.PersistentVfxReference;
import io.github.doenisf.comlink4j.model.Rarity;
import io.github.doenisf.comlink4j.model.UnitTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Effect
 */
public class EffectTest {
    private final Effect model = new Effect();

    /**
     * Model tests for Effect
     */
    @Test
    public void testEffect() {
        // TODO: test Effect
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'param'
     */
    @Test
    public void paramTest() {
        // TODO: test param
    }

    /**
     * Test the property 'chance'
     */
    @Test
    public void chanceTest() {
        // TODO: test chance
    }

    /**
     * Test the property 'target'
     */
    @Test
    public void targetTest() {
        // TODO: test target
    }

    /**
     * Test the property 'descriptiveTag'
     */
    @Test
    public void descriptiveTagTest() {
        // TODO: test descriptiveTag
    }

    /**
     * Test the property 'effectedTag'
     */
    @Test
    public void effectedTagTest() {
        // TODO: test effectedTag
    }

    /**
     * Test the property 'triggerCondition'
     */
    @Test
    public void triggerConditionTest() {
        // TODO: test triggerCondition
    }

    /**
     * Test the property 'effectDefinition'
     */
    @Test
    public void effectDefinitionTest() {
        // TODO: test effectDefinition
    }

    /**
     * Test the property 'contextIndex'
     */
    @Test
    public void contextIndexTest() {
        // TODO: test contextIndex
    }

    /**
     * Test the property 'expirationCondition'
     */
    @Test
    public void expirationConditionTest() {
        // TODO: test expirationCondition
    }

    /**
     * Test the property 'applyType'
     */
    @Test
    public void applyTypeTest() {
        // TODO: test applyType
    }

    /**
     * Test the property 'damageType'
     */
    @Test
    public void damageTypeTest() {
        // TODO: test damageType
    }

    /**
     * Test the property 'persistentIcon'
     */
    @Test
    public void persistentIconTest() {
        // TODO: test persistentIcon
    }

    /**
     * Test the property 'triggeredVfx'
     */
    @Test
    public void triggeredVfxTest() {
        // TODO: test triggeredVfx
    }

    /**
     * Test the property 'triggeredLocKey'
     */
    @Test
    public void triggeredLocKeyTest() {
        // TODO: test triggeredLocKey
    }

    /**
     * Test the property 'maxBonusMoves'
     */
    @Test
    public void maxBonusMovesTest() {
        // TODO: test maxBonusMoves
    }

    /**
     * Test the property 'effectReference'
     */
    @Test
    public void effectReferenceTest() {
        // TODO: test effectReference
    }

    /**
     * Test the property 'multiplierAmountDecimal'
     */
    @Test
    public void multiplierAmountDecimalTest() {
        // TODO: test multiplierAmountDecimal
    }

    /**
     * Test the property 'contextMultiplierDecimal'
     */
    @Test
    public void contextMultiplierDecimalTest() {
        // TODO: test contextMultiplierDecimal
    }

    /**
     * Test the property 'additiveAmountDecimal'
     */
    @Test
    public void additiveAmountDecimalTest() {
        // TODO: test additiveAmountDecimal
    }

    /**
     * Test the property 'resultVarianceDecimal'
     */
    @Test
    public void resultVarianceDecimalTest() {
        // TODO: test resultVarianceDecimal
    }

    /**
     * Test the property 'persistentLocKey'
     */
    @Test
    public void persistentLocKeyTest() {
        // TODO: test persistentLocKey
    }

    /**
     * Test the property 'stackingLineOverride'
     */
    @Test
    public void stackingLineOverrideTest() {
        // TODO: test stackingLineOverride
    }

    /**
     * Test the property 'persistentIconOverlay'
     */
    @Test
    public void persistentIconOverlayTest() {
        // TODO: test persistentIconOverlay
    }

    /**
     * Test the property 'persistentIconPriority'
     */
    @Test
    public void persistentIconPriorityTest() {
        // TODO: test persistentIconPriority
    }

    /**
     * Test the property 'iconColor'
     */
    @Test
    public void iconColorTest() {
        // TODO: test iconColor
    }

    /**
     * Test the property 'persistentIconGroupable'
     */
    @Test
    public void persistentIconGroupableTest() {
        // TODO: test persistentIconGroupable
    }

    /**
     * Test the property 'persistentVfxReference'
     */
    @Test
    public void persistentVfxReferenceTest() {
        // TODO: test persistentVfxReference
    }

    /**
     * Test the property 'blackboardName'
     */
    @Test
    public void blackboardNameTest() {
        // TODO: test blackboardName
    }

    /**
     * Test the property 'summonId'
     */
    @Test
    public void summonIdTest() {
        // TODO: test summonId
    }

    /**
     * Test the property 'summonEffect'
     */
    @Test
    public void summonEffectTest() {
        // TODO: test summonEffect
    }

    /**
     * Test the property 'summonLevel'
     */
    @Test
    public void summonLevelTest() {
        // TODO: test summonLevel
    }

    /**
     * Test the property 'summonTier'
     */
    @Test
    public void summonTierTest() {
        // TODO: test summonTier
    }

    /**
     * Test the property 'summonRarity'
     */
    @Test
    public void summonRarityTest() {
        // TODO: test summonRarity
    }

    /**
     * Test the property 'summonSquadIncrease'
     */
    @Test
    public void summonSquadIncreaseTest() {
        // TODO: test summonSquadIncrease
    }

    /**
     * Test the property 'ignoreDamageAnimation'
     */
    @Test
    public void ignoreDamageAnimationTest() {
        // TODO: test ignoreDamageAnimation
    }

    /**
     * Test the property 'infiniteCycleEffect'
     */
    @Test
    public void infiniteCycleEffectTest() {
        // TODO: test infiniteCycleEffect
    }

    /**
     * Test the property 'blackboardCompareName'
     */
    @Test
    public void blackboardCompareNameTest() {
        // TODO: test blackboardCompareName
    }

    /**
     * Test the property 'summonMarkerIndex'
     */
    @Test
    public void summonMarkerIndexTest() {
        // TODO: test summonMarkerIndex
    }

    /**
     * Test the property 'summonEnableInitialVfx'
     */
    @Test
    public void summonEnableInitialVfxTest() {
        // TODO: test summonEnableInitialVfx
    }

    /**
     * Test the property 'summonCount'
     */
    @Test
    public void summonCountTest() {
        // TODO: test summonCount
    }

}
