/*
 * swgoh-comlink
 * An API for sending requests to Star Wars Galaxy of Heroes' game services
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.doenisf.comlink4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.doenisf.comlink4j.model.DynamicDescription;
import io.github.doenisf.comlink4j.model.MissionGrantedAbility;
import io.github.doenisf.comlink4j.model.RankRewardPreview;
import io.github.doenisf.comlink4j.model.TerritoryLocalNote;
import io.github.doenisf.comlink4j.model.TerritoryTournamentConflictZoneDefinition;
import io.github.doenisf.comlink4j.model.TerritoryTournamentDuelZoneDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TerritoryTournamentDefinition
 */
public class TerritoryTournamentDefinitionTest {
    private final TerritoryTournamentDefinition model = new TerritoryTournamentDefinition();

    /**
     * Model tests for TerritoryTournamentDefinition
     */
    @Test
    public void testTerritoryTournamentDefinition() {
        // TODO: test TerritoryTournamentDefinition
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'nameKey'
     */
    @Test
    public void nameKeyTest() {
        // TODO: test nameKey
    }

    /**
     * Test the property 'descriptionKey'
     */
    @Test
    public void descriptionKeyTest() {
        // TODO: test descriptionKey
    }

    /**
     * Test the property 'prefabName'
     */
    @Test
    public void prefabNameTest() {
        // TODO: test prefabName
    }

    /**
     * Test the property 'iconPrefab'
     */
    @Test
    public void iconPrefabTest() {
        // TODO: test iconPrefab
    }

    /**
     * Test the property 'detailImage'
     */
    @Test
    public void detailImageTest() {
        // TODO: test detailImage
    }

    /**
     * Test the property 'territoryCategory'
     */
    @Test
    public void territoryCategoryTest() {
        // TODO: test territoryCategory
    }

    /**
     * Test the property 'minimapPrefab'
     */
    @Test
    public void minimapPrefabTest() {
        // TODO: test minimapPrefab
    }

    /**
     * Test the property 'roundCount'
     */
    @Test
    public void roundCountTest() {
        // TODO: test roundCount
    }

    /**
     * Test the property 'roundTallyDuration'
     */
    @Test
    public void roundTallyDurationTest() {
        // TODO: test roundTallyDuration
    }

    /**
     * Test the property 'matchmakingDuration'
     */
    @Test
    public void matchmakingDurationTest() {
        // TODO: test matchmakingDuration
    }

    /**
     * Test the property 'dynamicDescription'
     */
    @Test
    public void dynamicDescriptionTest() {
        // TODO: test dynamicDescription
    }

    /**
     * Test the property 'completeRankRewardPreview'
     */
    @Test
    public void completeRankRewardPreviewTest() {
        // TODO: test completeRankRewardPreview
    }

    /**
     * Test the property 'grantedAbilities'
     */
    @Test
    public void grantedAbilitiesTest() {
        // TODO: test grantedAbilities
    }

    /**
     * Test the property 'localNotifications'
     */
    @Test
    public void localNotificationsTest() {
        // TODO: test localNotifications
    }

    /**
     * Test the property 'restrictSetupDuringAttackPhase'
     */
    @Test
    public void restrictSetupDuringAttackPhaseTest() {
        // TODO: test restrictSetupDuringAttackPhase
    }

    /**
     * Test the property 'conflictZoneDefinition'
     */
    @Test
    public void conflictZoneDefinitionTest() {
        // TODO: test conflictZoneDefinition
    }

    /**
     * Test the property 'duelZoneDefinition'
     */
    @Test
    public void duelZoneDefinitionTest() {
        // TODO: test duelZoneDefinition
    }

    /**
     * Test the property 'noJoinDuration'
     */
    @Test
    public void noJoinDurationTest() {
        // TODO: test noJoinDuration
    }

    /**
     * Test the property 'defensiveCharacterDeployWarningThreshold'
     */
    @Test
    public void defensiveCharacterDeployWarningThresholdTest() {
        // TODO: test defensiveCharacterDeployWarningThreshold
    }

    /**
     * Test the property 'defensiveShipDeployWarningThreshold'
     */
    @Test
    public void defensiveShipDeployWarningThresholdTest() {
        // TODO: test defensiveShipDeployWarningThreshold
    }

    /**
     * Test the property 'matchCount'
     */
    @Test
    public void matchCountTest() {
        // TODO: test matchCount
    }

    /**
     * Test the property 'roundRewardPreview'
     */
    @Test
    public void roundRewardPreviewTest() {
        // TODO: test roundRewardPreview
    }

    /**
     * Test the property 'seasonPointsPerBannerPercent'
     */
    @Test
    public void seasonPointsPerBannerPercentTest() {
        // TODO: test seasonPointsPerBannerPercent
    }

    /**
     * Test the property 'roundSeasonRewardTableId'
     */
    @Test
    public void roundSeasonRewardTableIdTest() {
        // TODO: test roundSeasonRewardTableId
    }

    /**
     * Test the property 'minimumBannerRoundRewardThreshold'
     */
    @Test
    public void minimumBannerRoundRewardThresholdTest() {
        // TODO: test minimumBannerRoundRewardThreshold
    }

    /**
     * Test the property 'minimumBannerEventRewardThreshold'
     */
    @Test
    public void minimumBannerEventRewardThresholdTest() {
        // TODO: test minimumBannerEventRewardThreshold
    }

    /**
     * Test the property 'savedSquadConfigId'
     */
    @Test
    public void savedSquadConfigIdTest() {
        // TODO: test savedSquadConfigId
    }

}
